

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Jan 20 10:56:48 2018

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	idataBANK5,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    18                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    19                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	text118,global,reloc=2,class=CODE,delta=1
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1
   142                           	psect	text120,global,reloc=2,class=CODE,delta=1
   143                           	psect	text121,global,reloc=2,class=CODE,delta=1
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1
   145                           	psect	text123,global,reloc=2,class=CODE,delta=1
   146                           	psect	text124,global,reloc=2,class=CODE,delta=1
   147                           	psect	text125,global,reloc=2,class=CODE,delta=1
   148                           	psect	text126,global,reloc=2,class=CODE,delta=1
   149                           	psect	text127,global,reloc=2,class=CODE,delta=1
   150                           	psect	text128,global,reloc=2,class=CODE,delta=1
   151                           	psect	text129,global,reloc=2,class=CODE,delta=1
   152                           	psect	text130,global,reloc=2,class=CODE,delta=1
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1
   154                           	psect	text132,global,reloc=2,class=CODE,delta=1
   155                           	psect	text133,global,reloc=2,class=CODE,delta=1
   156                           	psect	text134,global,reloc=2,class=CODE,delta=1
   157                           	psect	text135,global,reloc=2,class=CODE,delta=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1
   159                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1
   161                           	psect	text139,global,reloc=2,class=CODE,delta=1
   162                           	psect	text140,global,reloc=2,class=CODE,delta=1
   163                           	psect	text141,global,reloc=2,class=CODE,delta=1
   164                           	psect	text142,global,reloc=2,class=CODE,delta=1
   165                           	psect	text143,global,reloc=2,class=CODE,delta=1
   166                           	psect	text144,global,reloc=2,class=CODE,delta=1
   167                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   168                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   169                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   170  0000                     
   171                           	psect	idataBANK1
   172  01AB10                     __pidataBANK1:
   173                           	opt stack 0
   174                           
   175                           ;initializer for _Case_Call
   176  01AB10  01                 	db	1
   177                           
   178                           ;initializer for _Start_up_Error
   179  01AB11  02                 	db	2
   180                           
   181                           	psect	idataBANK5
   182  01AB12                     __pidataBANK5:
   183                           	opt stack 0
   184                           
   185                           ;initializer for _VFD_Counter
   186  01AB12  0018               	dw	24
   187                           
   188                           	psect	mediumconst
   189  00FB78                     __pmediumconst:
   190                           	opt stack 0
   191  00FB78  00                 	db	0
   192  00FB79                     _dpowers:
   193                           	opt stack 0
   194  00FB79  0001               	dw	1
   195  00FB7B  0000               	dw	0
   196  00FB7D  000A               	dw	10
   197  00FB7F  0000               	dw	0
   198  00FB81  0064               	dw	100
   199  00FB83  0000               	dw	0
   200  00FB85  03E8               	dw	1000
   201  00FB87  0000               	dw	0
   202  00FB89  2710               	dw	10000
   203  00FB8B  0000               	dw	0
   204  00FB8D  86A0               	dw	34464
   205  00FB8F  0001               	dw	1
   206  00FB91  4240               	dw	16960
   207  00FB93  000F               	dw	15
   208  00FB95  9680               	dw	38528
   209  00FB97  0098               	dw	152
   210  00FB99  E100               	dw	57600
   211  00FB9B  05F5               	dw	1525
   212  00FB9D  CA00               	dw	51712
   213  00FB9F  3B9A               	dw	15258
   214  00FBA1                     __end_of_dpowers:
   215                           	opt stack 0
   216  00FBA1                     __npowers_:
   217                           	opt stack 0
   218  00FBA1  00                 	db	0
   219  00FBA2  80                 	db	128
   220  00FBA3  3F                 	db	63
   221  00FBA4  CD                 	db	205
   222  00FBA5  CC                 	db	204
   223  00FBA6  3D                 	db	61
   224  00FBA7  D7                 	db	215
   225  00FBA8  23                 	db	35
   226  00FBA9  3C                 	db	60
   227  00FBAA  12                 	db	18
   228  00FBAB  83                 	db	131
   229  00FBAC  3A                 	db	58
   230  00FBAD  B7                 	db	183
   231  00FBAE  D1                 	db	209
   232  00FBAF  38                 	db	56
   233  00FBB0  C6                 	db	198
   234  00FBB1  27                 	db	39
   235  00FBB2  37                 	db	55
   236  00FBB3  38                 	db	56
   237  00FBB4  86                 	db	134
   238  00FBB5  35                 	db	53
   239  00FBB6  C0                 	db	192
   240  00FBB7  D6                 	db	214
   241  00FBB8  33                 	db	51
   242  00FBB9  CC                 	db	204
   243  00FBBA  2B                 	db	43
   244  00FBBB  32                 	db	50
   245  00FBBC  70                 	db	112
   246  00FBBD  89                 	db	137
   247  00FBBE  30                 	db	48
   248  00FBBF  E7                 	db	231
   249  00FBC0  DB                 	db	219
   250  00FBC1  2E                 	db	46
   251  00FBC2  E5                 	db	229
   252  00FBC3  3C                 	db	60
   253  00FBC4  1E                 	db	30
   254  00FBC5  42                 	db	66
   255  00FBC6  A2                 	db	162
   256  00FBC7  0D                 	db	13
   257  00FBC8                     __end_of__npowers_:
   258                           	opt stack 0
   259  00FBC8                     __powers_:
   260                           	opt stack 0
   261  00FBC8  00                 	db	0
   262  00FBC9  80                 	db	128
   263  00FBCA  3F                 	db	63
   264  00FBCB  00                 	db	0
   265  00FBCC  20                 	db	32
   266  00FBCD  41                 	db	65
   267  00FBCE  00                 	db	0
   268  00FBCF  C8                 	db	200
   269  00FBD0  42                 	db	66
   270  00FBD1  00                 	db	0
   271  00FBD2  7A                 	db	122
   272  00FBD3  44                 	db	68
   273  00FBD4  40                 	db	64
   274  00FBD5  1C                 	db	28
   275  00FBD6  46                 	db	70
   276  00FBD7  50                 	db	80
   277  00FBD8  C3                 	db	195
   278  00FBD9  47                 	db	71
   279  00FBDA  24                 	db	36
   280  00FBDB  74                 	db	116
   281  00FBDC  49                 	db	73
   282  00FBDD  97                 	db	151
   283  00FBDE  18                 	db	24
   284  00FBDF  4B                 	db	75
   285  00FBE0  BC                 	db	188
   286  00FBE1  BE                 	db	190
   287  00FBE2  4C                 	db	76
   288  00FBE3  6B                 	db	107
   289  00FBE4  6E                 	db	110
   290  00FBE5  4E                 	db	78
   291  00FBE6  03                 	db	3
   292  00FBE7  15                 	db	21
   293  00FBE8  50                 	db	80
   294  00FBE9  79                 	db	121
   295  00FBEA  AD                 	db	173
   296  00FBEB  60                 	db	96
   297  00FBEC  F3                 	db	243
   298  00FBED  49                 	db	73
   299  00FBEE  71                 	db	113
   300  00FBEF                     __end_of__powers_:
   301                           	opt stack 0
   302  00FBEF                     sin@coeff_a:
   303                           	opt stack 0
   304  00FBEF  F4                 	db	244
   305  00FBF0  4A                 	db	74
   306  00FBF1  48                 	db	72
   307  00FBF2  95                 	db	149
   308  00FBF3  95                 	db	149
   309  00FBF4  C7                 	db	199
   310  00FBF5  C1                 	db	193
   311  00FBF6  DC                 	db	220
   312  00FBF7  45                 	db	69
   313  00FBF8  DC                 	db	220
   314  00FBF9  6D                 	db	109
   315  00FBFA  C3                 	db	195
   316  00FBFB  B3                 	db	179
   317  00FBFC  33                 	db	51
   318  00FBFD  40                 	db	64
   319  00FBFE                     __end_ofsin@coeff_a:
   320                           	opt stack 0
   321  00FBFE                     sin@coeff_b:
   322                           	opt stack 0
   323  00FBFE  34                 	db	52
   324  00FBFF  01                 	db	1
   325  00FC00  48                 	db	72
   326  00FC01  9D                 	db	157
   327  00FC02  B0                 	db	176
   328  00FC03  45                 	db	69
   329  00FC04  00                 	db	0
   330  00FC05  DA                 	db	218
   331  00FC06  42                 	db	66
   332  00FC07  00                 	db	0
   333  00FC08  80                 	db	128
   334  00FC09  3F                 	db	63
   335  00FC0A                     __end_ofsin@coeff_b:
   336                           	opt stack 0
   337  0000                     _BAUDCON2bits	set	3872
   338  0000                     _CCP10CON	set	3904
   339  0000                     _CCP2CON	set	3918
   340  0000                     _CCP3CON	set	3913
   341  0000                     _CCP8CON	set	3910
   342  0000                     _CCPR10H	set	3906
   343  0000                     _CCPR10L	set	3905
   344  0000                     _CCPR2H	set	3920
   345  0000                     _CCPR2L	set	3919
   346  0000                     _CCPR3H	set	3915
   347  0000                     _CCPR3L	set	3914
   348  0000                     _CCPR8L	set	3911
   349  0000                     _RCREG2	set	3869
   350  0000                     _RCSTA2bits	set	3874
   351  0000                     _SPBRG2	set	3870
   352  0000                     _T7CON	set	3901
   353  0000                     _TXREG2	set	3868
   354  0000                     _TXSTA2bits	set	3873
   355  0000                     _CCPR8H	set	3912
   356  0000                     _ANSEL0	set	31016
   357  0000                     _ANSEL1	set	31017
   358  0000                     _ANSEL10	set	31010
   359  0000                     _ANSEL11	set	31011
   360  0000                     _ANSEL16	set	31000
   361  0000                     _ANSEL17	set	31001
   362  0000                     _ANSEL18	set	31002
   363  0000                     _ANSEL19	set	31003
   364  0000                     _ANSEL2	set	31018
   365  0000                     _ANSEL3	set	31019
   366  0000                     _ANSEL4	set	31020
   367  0000                     _ANSEL6	set	31022
   368  0000                     _ANSEL8	set	31008
   369  0000                     _ANSEL9	set	31009
   370  0000                     _ADCON0	set	4034
   371  0000                     _ADCON1	set	4033
   372  0000                     _ADCON2	set	4032
   373  0000                     _ADRESH	set	4036
   374  0000                     _ADRESL	set	4035
   375  0000                     _BAUDCONbits	set	3941
   376  0000                     _CCP1CON	set	4027
   377  0000                     _CCP4CON	set	3959
   378  0000                     _CCP5CON	set	3956
   379  0000                     _CCP6CON	set	3953
   380  0000                     _CCP7CON	set	3950
   381  0000                     _CCPR1H	set	4029
   382  0000                     _CCPR1L	set	4028
   383  0000                     _CCPR4H	set	3961
   384  0000                     _CCPR4L	set	3960
   385  0000                     _CCPR5H	set	3958
   386  0000                     _CCPR5L	set	3957
   387  0000                     _CCPR6L	set	3954
   388  0000                     _CCPR7L	set	3951
   389  0000                     _EEADR	set	3938
   390  0000                     _EECON1bits	set	3967
   391  0000                     _EECON2	set	3966
   392  0000                     _EEDATA	set	3937
   393  0000                     _INTCONbits	set	4082
   394  0000                     _OSCCON	set	4051
   395  0000                     _PIE1bits	set	3997
   396  0000                     _PIE3bits	set	4003
   397  0000                     _PIR1bits	set	3998
   398  0000                     _PIR3bits	set	4004
   399  0000                     _PORTD	set	3971
   400  0000                     _RCSTAbits	set	4011
   401  0000                     _SPBRG1	set	4015
   402  0000                     _SSP1ADD	set	4040
   403  0000                     _SSP1BUF	set	4041
   404  0000                     _SSP1CON1	set	4038
   405  0000                     _SSP1CON2bits	set	4037
   406  0000                     _SSP1STAT	set	4039
   407  0000                     _SSP1STATbits	set	4039
   408  0000                     _T0CON	set	4053
   409  0000                     _T1CONbits	set	4045
   410  0000                     _TRISAbits	set	3986
   411  0000                     _TRISCbits	set	3988
   412  0000                     _TRISEbits	set	3990
   413  0000                     _TRISFbits	set	3991
   414  0000                     _TRISGbits	set	3992
   415  0000                     _TXREG	set	4013
   416  0000                     _TXREG1	set	4013
   417  0000                     _TXSTAbits	set	4012
   418  0000                     _CCPR6H	set	3955
   419  0000                     _CCPR7H	set	3952
   420  0000                     _ADON	set	32272
   421  0000                     _CCP10IE	set	32183
   422  0000                     _CCP10IF	set	32191
   423  0000                     _CCP1IE	set	32025
   424  0000                     _CCP1IF	set	32033
   425  0000                     _CCP2IE	set	32026
   426  0000                     _CCP2IF	set	32034
   427  0000                     _CCP3IE	set	32176
   428  0000                     _CCP3IF	set	32184
   429  0000                     _CCP4IE	set	32177
   430  0000                     _CCP4IF	set	32185
   431  0000                     _CCP5IE	set	32178
   432  0000                     _CCP5IF	set	32186
   433  0000                     _CCP6IE	set	32179
   434  0000                     _CCP6IF	set	32187
   435  0000                     _CCP7IE	set	32180
   436  0000                     _CCP7IF	set	32188
   437  0000                     _CCP8IE	set	32181
   438  0000                     _CCP8IF	set	32189
   439  0000                     _GIE	set	32663
   440  0000                     _GODONE	set	32273
   441  0000                     _PEIE	set	32662
   442  0000                     _RA4	set	31748
   443  0000                     _RA5	set	31749
   444  0000                     _RB0	set	31752
   445  0000                     _RB1	set	31753
   446  0000                     _RB2	set	31754
   447  0000                     _RB4	set	31756
   448  0000                     _RB5	set	31757
   449  0000                     _RC0	set	31760
   450  0000                     _RC5	set	31765
   451  0000                     _RD0	set	31768
   452  0000                     _RD1	set	31769
   453  0000                     _RD2	set	31770
   454  0000                     _RE0	set	31776
   455  0000                     _RE1	set	31777
   456  0000                     _RE7	set	31783
   457  0000                     _RF1	set	31785
   458  0000                     _RF3	set	31787
   459  0000                     _RF7	set	31791
   460  0000                     _T1CKPS0	set	32364
   461  0000                     _T1CKPS1	set	32365
   462  0000                     _TMR0IE	set	32661
   463  0000                     _TMR0IF	set	32658
   464  0000                     _TMR1IE	set	31976
   465  0000                     _TMR1IF	set	31984
   466  0000                     _TMR1ON	set	32360
   467  0000                     _TMR7IE	set	32203
   468  0000                     _TMR7IF	set	32211
   469  0000                     _TRISA4	set	31892
   470  0000                     _TRISA5	set	31893
   471  0000                     _TRISB0	set	31896
   472  0000                     _TRISB1	set	31897
   473  0000                     _TRISB2	set	31898
   474  0000                     _TRISB4	set	31900
   475  0000                     _TRISB5	set	31901
   476  0000                     _TRISC0	set	31904
   477  0000                     _TRISC2	set	31906
   478  0000                     _TRISC3	set	31907
   479  0000                     _TRISC4	set	31908
   480  0000                     _TRISC5	set	31909
   481  0000                     _TRISD0	set	31912
   482  0000                     _TRISD1	set	31913
   483  0000                     _TRISD2	set	31914
   484  0000                     _TRISE0	set	31920
   485  0000                     _TRISE1	set	31921
   486  0000                     _TRISE3	set	31923
   487  0000                     _TRISE7	set	31927
   488  0000                     _TRISF1	set	31929
   489  0000                     _TRISF3	set	31931
   490  0000                     _TRISF4	set	31932
   491  0000                     _TX1IF	set	31988
   492  0000                     _TX2IF	set	32036
   493  0000                     _TXIF	set	31988
   494  00FC0A                     STR_204:
   495  00FC0A  56                 	db	86	;'V'
   496  00FC0B  46                 	db	70	;'F'
   497  00FC0C  44                 	db	68	;'D'
   498  00FC0D  20                 	db	32
   499  00FC0E  52                 	db	82	;'R'
   500  00FC0F  55                 	db	85	;'U'
   501  00FC10  4E                 	db	78	;'N'
   502  00FC11  20                 	db	32
   503  00FC12  54                 	db	84	;'T'
   504  00FC13  49                 	db	73	;'I'
   505  00FC14  4D                 	db	77	;'M'
   506  00FC15  45                 	db	69	;'E'
   507  00FC16  20                 	db	32
   508  00FC17  45                 	db	69	;'E'
   509  00FC18  52                 	db	82	;'R'
   510  00FC19  52                 	db	82	;'R'
   511  00FC1A  4F                 	db	79	;'O'
   512  00FC1B  52                 	db	82	;'R'
   513  00FC1C  20                 	db	32
   514  00FC1D  43                 	db	67	;'C'
   515  00FC1E  4F                 	db	79	;'O'
   516  00FC1F  55                 	db	85	;'U'
   517  00FC20  4E                 	db	78	;'N'
   518  00FC21  54                 	db	84	;'T'
   519  00FC22  45                 	db	69	;'E'
   520  00FC23  52                 	db	82	;'R'
   521  00FC24  00                 	db	0
   522  00FC25                     STR_226:
   523  00FC25  45                 	db	69	;'E'
   524  00FC26  45                 	db	69	;'E'
   525  00FC27  50                 	db	80	;'P'
   526  00FC28  52                 	db	82	;'R'
   527  00FC29  4F                 	db	79	;'O'
   528  00FC2A  4D                 	db	77	;'M'
   529  00FC2B  20                 	db	32
   530  00FC2C  4C                 	db	76	;'L'
   531  00FC2D  41                 	db	65	;'A'
   532  00FC2E  53                 	db	83	;'S'
   533  00FC2F  54                 	db	84	;'T'
   534  00FC30  20                 	db	32
   535  00FC31  54                 	db	84	;'T'
   536  00FC32  48                 	db	72	;'H'
   537  00FC33  52                 	db	82	;'R'
   538  00FC34  45                 	db	69	;'E'
   539  00FC35  45                 	db	69	;'E'
   540  00FC36  20                 	db	32
   541  00FC37  45                 	db	69	;'E'
   542  00FC38  52                 	db	82	;'R'
   543  00FC39  52                 	db	82	;'R'
   544  00FC3A  4F                 	db	79	;'O'
   545  00FC3B  52                 	db	82	;'R'
   546  00FC3C  00                 	db	0
   547  00FC3D                     STR_208:
   548  00FC3D  4D                 	db	77	;'M'
   549  00FC3E  4F                 	db	79	;'O'
   550  00FC3F  54                 	db	84	;'T'
   551  00FC40  4F                 	db	79	;'O'
   552  00FC41  52                 	db	82	;'R'
   553  00FC42  20                 	db	32
   554  00FC43  53                 	db	83	;'S'
   555  00FC44  4C                 	db	76	;'L'
   556  00FC45  49                 	db	73	;'I'
   557  00FC46  50                 	db	80	;'P'
   558  00FC47  20                 	db	32
   559  00FC48  43                 	db	67	;'C'
   560  00FC49  4F                 	db	79	;'O'
   561  00FC4A  55                 	db	85	;'U'
   562  00FC4B  4E                 	db	78	;'N'
   563  00FC4C  54                 	db	84	;'T'
   564  00FC4D  45                 	db	69	;'E'
   565  00FC4E  52                 	db	82	;'R'
   566  00FC4F  00                 	db	0
   567  00FC50                     STR_206:
   568  00FC50  52                 	db	82	;'R'
   569  00FC51  4F                 	db	79	;'O'
   570  00FC52  54                 	db	84	;'T'
   571  00FC53  4F                 	db	79	;'O'
   572  00FC54  52                 	db	82	;'R'
   573  00FC55  20                 	db	32
   574  00FC56  53                 	db	83	;'S'
   575  00FC57  4C                 	db	76	;'L'
   576  00FC58  49                 	db	73	;'I'
   577  00FC59  50                 	db	80	;'P'
   578  00FC5A  20                 	db	32
   579  00FC5B  43                 	db	67	;'C'
   580  00FC5C  4F                 	db	79	;'O'
   581  00FC5D  55                 	db	85	;'U'
   582  00FC5E  4E                 	db	78	;'N'
   583  00FC5F  54                 	db	84	;'T'
   584  00FC60  45                 	db	69	;'E'
   585  00FC61  52                 	db	82	;'R'
   586  00FC62  00                 	db	0
   587  00FC63                     STR_222:
   588  00FC63  45                 	db	69	;'E'
   589  00FC64  45                 	db	69	;'E'
   590  00FC65  50                 	db	80	;'P'
   591  00FC66  52                 	db	82	;'R'
   592  00FC67  4F                 	db	79	;'O'
   593  00FC68  4D                 	db	77	;'M'
   594  00FC69  20                 	db	32
   595  00FC6A  45                 	db	69	;'E'
   596  00FC6B  52                 	db	82	;'R'
   597  00FC6C  52                 	db	82	;'R'
   598  00FC6D  4F                 	db	79	;'O'
   599  00FC6E  52                 	db	82	;'R'
   600  00FC6F  20                 	db	32
   601  00FC70  54                 	db	84	;'T'
   602  00FC71  49                 	db	73	;'I'
   603  00FC72  4D                 	db	77	;'M'
   604  00FC73  45                 	db	69	;'E'
   605  00FC74  00                 	db	0
   606  00FC75                     STR_220:
   607  00FC75  50                 	db	80	;'P'
   608  00FC76  49                 	db	73	;'I'
   609  00FC77  54                 	db	84	;'T'
   610  00FC78  43                 	db	67	;'C'
   611  00FC79  48                 	db	72	;'H'
   612  00FC7A  20                 	db	32
   613  00FC7B  45                 	db	69	;'E'
   614  00FC7C  45                 	db	69	;'E'
   615  00FC7D  50                 	db	80	;'P'
   616  00FC7E  52                 	db	82	;'R'
   617  00FC7F  4F                 	db	79	;'O'
   618  00FC80  4D                 	db	77	;'M'
   619  00FC81  20                 	db	32
   620  00FC82  46                 	db	70	;'F'
   621  00FC83  4C                 	db	76	;'L'
   622  00FC84  41                 	db	65	;'A'
   623  00FC85  47                 	db	71	;'G'
   624  00FC86  00                 	db	0
   625  00FC87                     STR_224:
   626  00FC87  45                 	db	69	;'E'
   627  00FC88  45                 	db	69	;'E'
   628  00FC89  50                 	db	80	;'P'
   629  00FC8A  52                 	db	82	;'R'
   630  00FC8B  4F                 	db	79	;'O'
   631  00FC8C  4D                 	db	77	;'M'
   632  00FC8D  20                 	db	32
   633  00FC8E  45                 	db	69	;'E'
   634  00FC8F  52                 	db	82	;'R'
   635  00FC90  52                 	db	82	;'R'
   636  00FC91  4F                 	db	79	;'O'
   637  00FC92  52                 	db	82	;'R'
   638  00FC93  20                 	db	32
   639  00FC94  46                 	db	70	;'F'
   640  00FC95  4C                 	db	76	;'L'
   641  00FC96  41                 	db	65	;'A'
   642  00FC97  47                 	db	71	;'G'
   643  00FC98  00                 	db	0
   644  00FC99                     STR_228:
   645  00FC99  56                 	db	86	;'V'
   646  00FC9A  46                 	db	70	;'F'
   647  00FC9B  44                 	db	68	;'D'
   648  00FC9C  20                 	db	32
   649  00FC9D  49                 	db	73	;'I'
   650  00FC9E  4F                 	db	79	;'O'
   651  00FC9F  20                 	db	32
   652  00FCA0  45                 	db	69	;'E'
   653  00FCA1  52                 	db	82	;'R'
   654  00FCA2  52                 	db	82	;'R'
   655  00FCA3  4F                 	db	79	;'O'
   656  00FCA4  52                 	db	82	;'R'
   657  00FCA5  20                 	db	32
   658  00FCA6  46                 	db	70	;'F'
   659  00FCA7  4C                 	db	76	;'L'
   660  00FCA8  41                 	db	65	;'A'
   661  00FCA9  47                 	db	71	;'G'
   662  00FCAA  00                 	db	0
   663  00FCAB                     STR_3:
   664  00FCAB  52                 	db	82	;'R'
   665  00FCAC  54                 	db	84	;'T'
   666  00FCAD  30                 	db	48	;'0'
   667  00FCAE  31                 	db	49	;'1'
   668  00FCAF  20                 	db	32
   669  00FCB0  52                 	db	82	;'R'
   670  00FCB1  76                 	db	118	;'v'
   671  00FCB2  33                 	db	51	;'3'
   672  00FCB3  20                 	db	32
   673  00FCB4  4B                 	db	75	;'K'
   674  00FCB5  41                 	db	65	;'A'
   675  00FCB6  56                 	db	86	;'V'
   676  00FCB7  41                 	db	65	;'A'
   677  00FCB8  4E                 	db	78	;'N'
   678  00FCB9  4F                 	db	79	;'O'
   679  00FCBA  4F                 	db	79	;'O'
   680  00FCBB  52                 	db	82	;'R'
   681  00FCBC  00                 	db	0
   682  00FCBD                     STR_174:
   683  00FCBD  54                 	db	84	;'T'
   684  00FCBE  4F                 	db	79	;'O'
   685  00FCBF  41                 	db	65	;'A'
   686  00FCC0  4C                 	db	76	;'L'
   687  00FCC1  20                 	db	32
   688  00FCC2  50                 	db	80	;'P'
   689  00FCC3  4F                 	db	79	;'O'
   690  00FCC4  57                 	db	87	;'W'
   691  00FCC5  45                 	db	69	;'E'
   692  00FCC6  52                 	db	82	;'R'
   693  00FCC7  20                 	db	32
   694  00FCC8  46                 	db	70	;'F'
   695  00FCC9  41                 	db	65	;'A'
   696  00FCCA  43                 	db	67	;'C'
   697  00FCCB  54                 	db	84	;'T'
   698  00FCCC  4F                 	db	79	;'O'
   699  00FCCD  52                 	db	82	;'R'
   700  00FCCE  00                 	db	0
   701  00FCCF                     STR_41:
   702  00FCCF  56                 	db	86	;'V'
   703  00FCD0  46                 	db	70	;'F'
   704  00FCD1  44                 	db	68	;'D'
   705  00FCD2  5F                 	db	95	;'_'
   706  00FCD3  53                 	db	83	;'S'
   707  00FCD4  48                 	db	72	;'H'
   708  00FCD5  4F                 	db	79	;'O'
   709  00FCD6  52                 	db	82	;'R'
   710  00FCD7  54                 	db	84	;'T'
   711  00FCD8  5F                 	db	95	;'_'
   712  00FCD9  43                 	db	67	;'C'
   713  00FCDA  49                 	db	73	;'I'
   714  00FCDB  52                 	db	82	;'R'
   715  00FCDC  43                 	db	67	;'C'
   716  00FCDD  55                 	db	85	;'U'
   717  00FCDE  49                 	db	73	;'I'
   718  00FCDF  54                 	db	84	;'T'
   719  00FCE0  00                 	db	0
   720  00FCE1                     STR_230:
   721  00FCE1  57                 	db	87	;'W'
   722  00FCE2  49                 	db	73	;'I'
   723  00FCE3  4E                 	db	78	;'N'
   724  00FCE4  44                 	db	68	;'D'
   725  00FCE5  20                 	db	32
   726  00FCE6  31                 	db	49	;'1'
   727  00FCE7  20                 	db	32
   728  00FCE8  54                 	db	84	;'T'
   729  00FCE9  45                 	db	69	;'E'
   730  00FCEA  4D                 	db	77	;'M'
   731  00FCEB  50                 	db	80	;'P'
   732  00FCEC  20                 	db	32
   733  00FCED  46                 	db	70	;'F'
   734  00FCEE  4C                 	db	76	;'L'
   735  00FCEF  41                 	db	65	;'A'
   736  00FCF0  47                 	db	71	;'G'
   737  00FCF1  00                 	db	0
   738  00FCF2                     STR_232:
   739  00FCF2  57                 	db	87	;'W'
   740  00FCF3  49                 	db	73	;'I'
   741  00FCF4  4E                 	db	78	;'N'
   742  00FCF5  44                 	db	68	;'D'
   743  00FCF6  20                 	db	32
   744  00FCF7  32                 	db	50	;'2'
   745  00FCF8  20                 	db	32
   746  00FCF9  54                 	db	84	;'T'
   747  00FCFA  45                 	db	69	;'E'
   748  00FCFB  4D                 	db	77	;'M'
   749  00FCFC  50                 	db	80	;'P'
   750  00FCFD  20                 	db	32
   751  00FCFE  46                 	db	70	;'F'
   752  00FCFF  4C                 	db	76	;'L'
   753  00FD00  41                 	db	65	;'A'
   754  00FD01  47                 	db	71	;'G'
   755  00FD02  00                 	db	0
   756  00FD03                     STR_218:
   757  00FD03  47                 	db	71	;'G'
   758  00FD04  45                 	db	69	;'E'
   759  00FD05  4E                 	db	78	;'N'
   760  00FD06  20                 	db	32
   761  00FD07  45                 	db	69	;'E'
   762  00FD08  45                 	db	69	;'E'
   763  00FD09  50                 	db	80	;'P'
   764  00FD0A  52                 	db	82	;'R'
   765  00FD0B  4F                 	db	79	;'O'
   766  00FD0C  4D                 	db	77	;'M'
   767  00FD0D  20                 	db	32
   768  00FD0E  46                 	db	70	;'F'
   769  00FD0F  4C                 	db	76	;'L'
   770  00FD10  41                 	db	65	;'A'
   771  00FD11  47                 	db	71	;'G'
   772  00FD12  00                 	db	0
   773  00FD13                     STR_188:
   774  00FD13  45                 	db	69	;'E'
   775  00FD14  52                 	db	82	;'R'
   776  00FD15  52                 	db	82	;'R'
   777  00FD16  4F                 	db	79	;'O'
   778  00FD17  52                 	db	82	;'R'
   779  00FD18  20                 	db	32
   780  00FD19  49                 	db	73	;'I'
   781  00FD1A  4E                 	db	78	;'N'
   782  00FD1B  20                 	db	32
   783  00FD1C  53                 	db	83	;'S'
   784  00FD1D  54                 	db	84	;'T'
   785  00FD1E  52                 	db	82	;'R'
   786  00FD1F  49                 	db	73	;'I'
   787  00FD20  4E                 	db	78	;'N'
   788  00FD21  47                 	db	71	;'G'
   789  00FD22  00                 	db	0
   790  00FD23                     STR_150:
   791  00FD23  44                 	db	68	;'D'
   792  00FD24  43                 	db	67	;'C'
   793  00FD25  20                 	db	32
   794  00FD26  42                 	db	66	;'B'
   795  00FD27  55                 	db	85	;'U'
   796  00FD28  53                 	db	83	;'S'
   797  00FD29  20                 	db	32
   798  00FD2A  56                 	db	86	;'V'
   799  00FD2B  4F                 	db	79	;'O'
   800  00FD2C  4C                 	db	76	;'L'
   801  00FD2D  54                 	db	84	;'T'
   802  00FD2E  41                 	db	65	;'A'
   803  00FD2F  47                 	db	71	;'G'
   804  00FD30  45                 	db	69	;'E'
   805  00FD31  00                 	db	0
   806  00FD32                     STR_144:
   807  00FD32  4D                 	db	77	;'M'
   808  00FD33  4F                 	db	79	;'O'
   809  00FD34  54                 	db	84	;'T'
   810  00FD35  4F                 	db	79	;'O'
   811  00FD36  52                 	db	82	;'R'
   812  00FD37  20                 	db	32
   813  00FD38  53                 	db	83	;'S'
   814  00FD39  4C                 	db	76	;'L'
   815  00FD3A  49                 	db	73	;'I'
   816  00FD3B  50                 	db	80	;'P'
   817  00FD3C  20                 	db	32
   818  00FD3D  52                 	db	82	;'R'
   819  00FD3E  50                 	db	80	;'P'
   820  00FD3F  4D                 	db	77	;'M'
   821  00FD40  00                 	db	0
   822  00FD41                     STR_146:
   823  00FD41  52                 	db	82	;'R'
   824  00FD42  4F                 	db	79	;'O'
   825  00FD43  54                 	db	84	;'T'
   826  00FD44  4F                 	db	79	;'O'
   827  00FD45  52                 	db	82	;'R'
   828  00FD46  20                 	db	32
   829  00FD47  53                 	db	83	;'S'
   830  00FD48  4C                 	db	76	;'L'
   831  00FD49  49                 	db	73	;'I'
   832  00FD4A  50                 	db	80	;'P'
   833  00FD4B  20                 	db	32
   834  00FD4C  52                 	db	82	;'R'
   835  00FD4D  50                 	db	80	;'P'
   836  00FD4E  4D                 	db	77	;'M'
   837  00FD4F  00                 	db	0
   838  00FD50                     STR_176:
   839  00FD50  59                 	db	89	;'Y'
   840  00FD51  2D                 	db	45
   841  00FD52  50                 	db	80	;'P'
   842  00FD53  4F                 	db	79	;'O'
   843  00FD54  57                 	db	87	;'W'
   844  00FD55  45                 	db	69	;'E'
   845  00FD56  52                 	db	82	;'R'
   846  00FD57  20                 	db	32
   847  00FD58  46                 	db	70	;'F'
   848  00FD59  41                 	db	65	;'A'
   849  00FD5A  43                 	db	67	;'C'
   850  00FD5B  54                 	db	84	;'T'
   851  00FD5C  4F                 	db	79	;'O'
   852  00FD5D  52                 	db	82	;'R'
   853  00FD5E  00                 	db	0
   854  00FD5F                     STR_136:
   855  00FD5F  57                 	db	87	;'W'
   856  00FD60  49                 	db	73	;'I'
   857  00FD61  4E                 	db	78	;'N'
   858  00FD62  44                 	db	68	;'D'
   859  00FD63  20                 	db	32
   860  00FD64  32                 	db	50	;'2'
   861  00FD65  20                 	db	32
   862  00FD66  49                 	db	73	;'I'
   863  00FD67  4E                 	db	78	;'N'
   864  00FD68  53                 	db	83	;'S'
   865  00FD69  54                 	db	84	;'T'
   866  00FD6A  41                 	db	65	;'A'
   867  00FD6B  4E                 	db	78	;'N'
   868  00FD6C  54                 	db	84	;'T'
   869  00FD6D  00                 	db	0
   870  00FD6E                     STR_152:
   871  00FD6E  44                 	db	68	;'D'
   872  00FD6F  43                 	db	67	;'C'
   873  00FD70  20                 	db	32
   874  00FD71  42                 	db	66	;'B'
   875  00FD72  55                 	db	85	;'U'
   876  00FD73  53                 	db	83	;'S'
   877  00FD74  20                 	db	32
   878  00FD75  43                 	db	67	;'C'
   879  00FD76  55                 	db	85	;'U'
   880  00FD77  52                 	db	82	;'R'
   881  00FD78  52                 	db	82	;'R'
   882  00FD79  45                 	db	69	;'E'
   883  00FD7A  4E                 	db	78	;'N'
   884  00FD7B  54                 	db	84	;'T'
   885  00FD7C  00                 	db	0
   886  00FD7D                     STR_190:
   887  00FD7D  54                 	db	84	;'T'
   888  00FD7E  55                 	db	85	;'U'
   889  00FD7F  52                 	db	82	;'R'
   890  00FD80  42                 	db	66	;'B'
   891  00FD81  49                 	db	73	;'I'
   892  00FD82  4E                 	db	78	;'N'
   893  00FD83  45                 	db	69	;'E'
   894  00FD84  20                 	db	32
   895  00FD85  53                 	db	83	;'S'
   896  00FD86  54                 	db	84	;'T'
   897  00FD87  41                 	db	65	;'A'
   898  00FD88  54                 	db	84	;'T'
   899  00FD89  45                 	db	69	;'E'
   900  00FD8A  00                 	db	0
   901  00FD8B                     STR_142:
   902  00FD8B  47                 	db	71	;'G'
   903  00FD8C  45                 	db	69	;'E'
   904  00FD8D  4E                 	db	78	;'N'
   905  00FD8E  45                 	db	69	;'E'
   906  00FD8F  52                 	db	82	;'R'
   907  00FD90  41                 	db	65	;'A'
   908  00FD91  54                 	db	84	;'T'
   909  00FD92  4F                 	db	79	;'O'
   910  00FD93  52                 	db	82	;'R'
   911  00FD94  20                 	db	32
   912  00FD95  52                 	db	82	;'R'
   913  00FD96  50                 	db	80	;'P'
   914  00FD97  4D                 	db	77	;'M'
   915  00FD98  00                 	db	0
   916  00FD99                     STR_79:
   917  00FD99  56                 	db	86	;'V'
   918  00FD9A  46                 	db	70	;'F'
   919  00FD9B  44                 	db	68	;'D'
   920  00FD9C  5F                 	db	95	;'_'
   921  00FD9D  43                 	db	67	;'C'
   922  00FD9E  4F                 	db	79	;'O'
   923  00FD9F  4D                 	db	77	;'M'
   924  00FDA0  4D                 	db	77	;'M'
   925  00FDA1  55                 	db	85	;'U'
   926  00FDA2  5F                 	db	95	;'_'
   927  00FDA3  45                 	db	69	;'E'
   928  00FDA4  52                 	db	82	;'R'
   929  00FDA5  52                 	db	82	;'R'
   930  00FDA6  00                 	db	0
   931  00FDA7                     STR_59:
   932  00FDA7  54                 	db	84	;'T'
   933  00FDA8  55                 	db	85	;'U'
   934  00FDA9  52                 	db	82	;'R'
   935  00FDAA  42                 	db	66	;'B'
   936  00FDAB  49                 	db	73	;'I'
   937  00FDAC  4E                 	db	78	;'N'
   938  00FDAD  45                 	db	69	;'E'
   939  00FDAE  5F                 	db	95	;'_'
   940  00FDAF  55                 	db	85	;'U'
   941  00FDB0  53                 	db	83	;'S'
   942  00FDB1  5F                 	db	95	;'_'
   943  00FDB2  4F                 	db	79	;'O'
   944  00FDB3  53                 	db	83	;'S'
   945  00FDB4  00                 	db	0
   946  00FDB5                     STR_212:
   947  00FDB5  56                 	db	86	;'V'
   948  00FDB6  46                 	db	70	;'F'
   949  00FDB7  44                 	db	68	;'D'
   950  00FDB8  20                 	db	32
   951  00FDB9  42                 	db	66	;'B'
   952  00FDBA  4F                 	db	79	;'O'
   953  00FDBB  54                 	db	84	;'T'
   954  00FDBC  54                 	db	84	;'T'
   955  00FDBD  4F                 	db	79	;'O'
   956  00FDBE  4D                 	db	77	;'M'
   957  00FDBF  20                 	db	32
   958  00FDC0  43                 	db	67	;'C'
   959  00FDC1  54                 	db	84	;'T'
   960  00FDC2  00                 	db	0
   961  00FDC3                     STR_49:
   962  00FDC3  56                 	db	86	;'V'
   963  00FDC4  46                 	db	70	;'F'
   964  00FDC5  44                 	db	68	;'D'
   965  00FDC6  5F                 	db	95	;'_'
   966  00FDC7  52                 	db	82	;'R'
   967  00FDC8  55                 	db	85	;'U'
   968  00FDC9  4E                 	db	78	;'N'
   969  00FDCA  5F                 	db	95	;'_'
   970  00FDCB  54                 	db	84	;'T'
   971  00FDCC  49                 	db	73	;'I'
   972  00FDCD  4D                 	db	77	;'M'
   973  00FDCE  45                 	db	69	;'E'
   974  00FDCF  00                 	db	0
   975  00FDD0                     STR_83:
   976  00FDD0  56                 	db	86	;'V'
   977  00FDD1  46                 	db	70	;'F'
   978  00FDD2  44                 	db	68	;'D'
   979  00FDD3  5F                 	db	95	;'_'
   980  00FDD4  45                 	db	69	;'E'
   981  00FDD5  52                 	db	82	;'R'
   982  00FDD6  52                 	db	82	;'R'
   983  00FDD7  4F                 	db	79	;'O'
   984  00FDD8  52                 	db	82	;'R'
   985  00FDD9  5F                 	db	95	;'_'
   986  00FDDA  49                 	db	73	;'I'
   987  00FDDB  4F                 	db	79	;'O'
   988  00FDDC  00                 	db	0
   989  00FDDD                     STR_202:
   990  00FDDD  52                 	db	82	;'R'
   991  00FDDE  41                 	db	65	;'A'
   992  00FDDF  4D                 	db	77	;'M'
   993  00FDE0  50                 	db	80	;'P'
   994  00FDE1  20                 	db	32
   995  00FDE2  55                 	db	85	;'U'
   996  00FDE3  50                 	db	80	;'P'
   997  00FDE4  20                 	db	32
   998  00FDE5  4C                 	db	76	;'L'
   999  00FDE6  4F                 	db	79	;'O'
  1000  00FDE7  4F                 	db	79	;'O'
  1001  00FDE8  50                 	db	80	;'P'
  1002  00FDE9  00                 	db	0
  1003  00FDEA                     STR_198:
  1004  00FDEA  4C                 	db	76	;'L'
  1005  00FDEB  41                 	db	65	;'A'
  1006  00FDEC  53                 	db	83	;'S'
  1007  00FDED  54                 	db	84	;'T'
  1008  00FDEE  20                 	db	32
  1009  00FDEF  35                 	db	53	;'5'
  1010  00FDF0  20                 	db	32
  1011  00FDF1  45                 	db	69	;'E'
  1012  00FDF2  52                 	db	82	;'R'
  1013  00FDF3  52                 	db	82	;'R'
  1014  00FDF4  4F                 	db	79	;'O'
  1015  00FDF5  52                 	db	82	;'R'
  1016  00FDF6  00                 	db	0
  1017  00FDF7                     STR_132:
  1018  00FDF7  57                 	db	87	;'W'
  1019  00FDF8  49                 	db	73	;'I'
  1020  00FDF9  4E                 	db	78	;'N'
  1021  00FDFA  44                 	db	68	;'D'
  1022  00FDFB  5F                 	db	95	;'_'
  1023  00FDFC  49                 	db	73	;'I'
  1024  00FDFD  4E                 	db	78	;'N'
  1025  00FDFE  53                 	db	83	;'S'
  1026  00FDFF  54                 	db	84	;'T'
  1027  00FE00  41                 	db	65	;'A'
  1028  00FE01  4E                 	db	78	;'N'
  1029  00FE02  54                 	db	84	;'T'
  1030  00FE03  00                 	db	0
  1031  00FE04                     STR_184:
  1032  00FE04  49                 	db	73	;'I'
  1033  00FE05  4E                 	db	78	;'N'
  1034  00FE06  49                 	db	73	;'I'
  1035  00FE07  54                 	db	84	;'T'
  1036  00FE08  41                 	db	65	;'A'
  1037  00FE09  4C                 	db	76	;'L'
  1038  00FE0A  20                 	db	32
  1039  00FE0B  44                 	db	68	;'D'
  1040  00FE0C  45                 	db	69	;'E'
  1041  00FE0D  4C                 	db	76	;'L'
  1042  00FE0E  41                 	db	65	;'A'
  1043  00FE0F  59                 	db	89	;'Y'
  1044  00FE10  00                 	db	0
  1045  00FE11                     STR_180:
  1046  00FE11  50                 	db	80	;'P'
  1047  00FE12  48                 	db	72	;'H'
  1048  00FE13  41                 	db	65	;'A'
  1049  00FE14  53                 	db	83	;'S'
  1050  00FE15  45                 	db	69	;'E'
  1051  00FE16  20                 	db	32
  1052  00FE17  41                 	db	65	;'A'
  1053  00FE18  4E                 	db	78	;'N'
  1054  00FE19  47                 	db	71	;'G'
  1055  00FE1A  4C                 	db	76	;'L'
  1056  00FE1B  45                 	db	69	;'E'
  1057  00FE1C  00                 	db	0
  1058  00FE1D                     STR_196:
  1059  00FE1D  54                 	db	84	;'T'
  1060  00FE1E  45                 	db	69	;'E'
  1061  00FE1F  4D                 	db	77	;'M'
  1062  00FE20  50                 	db	80	;'P'
  1063  00FE21  45                 	db	69	;'E'
  1064  00FE22  52                 	db	82	;'R'
  1065  00FE23  41                 	db	65	;'A'
  1066  00FE24  54                 	db	84	;'T'
  1067  00FE25  55                 	db	85	;'U'
  1068  00FE26  52                 	db	82	;'R'
  1069  00FE27  45                 	db	69	;'E'
  1070  00FE28  00                 	db	0
  1071  00FE29                     STR_140:
  1072  00FE29  54                 	db	84	;'T'
  1073  00FE2A  55                 	db	85	;'U'
  1074  00FE2B  52                 	db	82	;'R'
  1075  00FE2C  42                 	db	66	;'B'
  1076  00FE2D  49                 	db	73	;'I'
  1077  00FE2E  4E                 	db	78	;'N'
  1078  00FE2F  45                 	db	69	;'E'
  1079  00FE30  20                 	db	32
  1080  00FE31  52                 	db	82	;'R'
  1081  00FE32  50                 	db	80	;'P'
  1082  00FE33  4D                 	db	77	;'M'
  1083  00FE34  00                 	db	0
  1084  00FE35                     STR_77:
  1085  00FE35  4D                 	db	77	;'M'
  1086  00FE36  41                 	db	65	;'A'
  1087  00FE37  4E                 	db	78	;'N'
  1088  00FE38  55                 	db	85	;'U'
  1089  00FE39  41                 	db	65	;'A'
  1090  00FE3A  4C                 	db	76	;'L'
  1091  00FE3B  5F                 	db	95	;'_'
  1092  00FE3C  53                 	db	83	;'S'
  1093  00FE3D  54                 	db	84	;'T'
  1094  00FE3E  4F                 	db	79	;'O'
  1095  00FE3F  50                 	db	80	;'P'
  1096  00FE40  00                 	db	0
  1097  00FE41                     STR_130:
  1098  00FE41  54                 	db	84	;'T'
  1099  00FE42  55                 	db	85	;'U'
  1100  00FE43  52                 	db	82	;'R'
  1101  00FE44  42                 	db	66	;'B'
  1102  00FE45  49                 	db	73	;'I'
  1103  00FE46  4E                 	db	78	;'N'
  1104  00FE47  45                 	db	69	;'E'
  1105  00FE48  20                 	db	32
  1106  00FE49  49                 	db	73	;'I'
  1107  00FE4A  44                 	db	68	;'D'
  1108  00FE4B  00                 	db	0
  1109  00FE4C                     STR_138:
  1110  00FE4C  57                 	db	87	;'W'
  1111  00FE4D  49                 	db	73	;'I'
  1112  00FE4E  4E                 	db	78	;'N'
  1113  00FE4F  44                 	db	68	;'D'
  1114  00FE50  20                 	db	32
  1115  00FE51  32                 	db	50	;'2'
  1116  00FE52  20                 	db	32
  1117  00FE53  41                 	db	65	;'A'
  1118  00FE54  56                 	db	86	;'V'
  1119  00FE55  47                 	db	71	;'G'
  1120  00FE56  00                 	db	0
  1121  00FE57                     STR_69:
  1122  00FE57  54                 	db	84	;'T'
  1123  00FE58  55                 	db	85	;'U'
  1124  00FE59  52                 	db	82	;'R'
  1125  00FE5A  42                 	db	66	;'B'
  1126  00FE5B  49                 	db	73	;'I'
  1127  00FE5C  4E                 	db	78	;'N'
  1128  00FE5D  45                 	db	69	;'E'
  1129  00FE5E  5F                 	db	95	;'_'
  1130  00FE5F  4F                 	db	79	;'O'
  1131  00FE60  4C                 	db	76	;'L'
  1132  00FE61  00                 	db	0
  1133  00FE62                     STR_57:
  1134  00FE62  4D                 	db	77	;'M'
  1135  00FE63  4F                 	db	79	;'O'
  1136  00FE64  54                 	db	84	;'T'
  1137  00FE65  4F                 	db	79	;'O'
  1138  00FE66  52                 	db	82	;'R'
  1139  00FE67  5F                 	db	95	;'_'
  1140  00FE68  53                 	db	83	;'S'
  1141  00FE69  4C                 	db	76	;'L'
  1142  00FE6A  49                 	db	73	;'I'
  1143  00FE6B  50                 	db	80	;'P'
  1144  00FE6C  00                 	db	0
  1145  00FE6D                     STR_55:
  1146  00FE6D  52                 	db	82	;'R'
  1147  00FE6E  4F                 	db	79	;'O'
  1148  00FE6F  54                 	db	84	;'T'
  1149  00FE70  4F                 	db	79	;'O'
  1150  00FE71  52                 	db	82	;'R'
  1151  00FE72  5F                 	db	95	;'_'
  1152  00FE73  53                 	db	83	;'S'
  1153  00FE74  4C                 	db	76	;'L'
  1154  00FE75  49                 	db	73	;'I'
  1155  00FE76  50                 	db	80	;'P'
  1156  00FE77  00                 	db	0
  1157  00FE78                     STR_47:
  1158  00FE78  54                 	db	84	;'T'
  1159  00FE79  55                 	db	85	;'U'
  1160  00FE7A  52                 	db	82	;'R'
  1161  00FE7B  42                 	db	66	;'B'
  1162  00FE7C  49                 	db	73	;'I'
  1163  00FE7D  4E                 	db	78	;'N'
  1164  00FE7E  45                 	db	69	;'E'
  1165  00FE7F  5F                 	db	95	;'_'
  1166  00FE80  4E                 	db	78	;'N'
  1167  00FE81  52                 	db	82	;'R'
  1168  00FE82  00                 	db	0
  1169  00FE83                     STR_81:
  1170  00FE83  4D                 	db	77	;'M'
  1171  00FE84  45                 	db	69	;'E'
  1172  00FE85  41                 	db	65	;'A'
  1173  00FE86  55                 	db	85	;'U'
  1174  00FE87  52                 	db	82	;'R'
  1175  00FE88  45                 	db	69	;'E'
  1176  00FE89  5F                 	db	95	;'_'
  1177  00FE8A  45                 	db	69	;'E'
  1178  00FE8B  52                 	db	82	;'R'
  1179  00FE8C  52                 	db	82	;'R'
  1180  00FE8D  00                 	db	0
  1181  00FE8E                     STR_210:
  1182  00FE8E  56                 	db	86	;'V'
  1183  00FE8F  46                 	db	70	;'F'
  1184  00FE90  44                 	db	68	;'D'
  1185  00FE91  20                 	db	32
  1186  00FE92  54                 	db	84	;'T'
  1187  00FE93  4F                 	db	79	;'O'
  1188  00FE94  50                 	db	80	;'P'
  1189  00FE95  20                 	db	32
  1190  00FE96  43                 	db	67	;'C'
  1191  00FE97  54                 	db	84	;'T'
  1192  00FE98  00                 	db	0
  1193  00FE99                     STR_71:
  1194  00FE99  44                 	db	68	;'D'
  1195  00FE9A  43                 	db	67	;'C'
  1196  00FE9B  5F                 	db	95	;'_'
  1197  00FE9C  45                 	db	69	;'E'
  1198  00FE9D  58                 	db	88	;'X'
  1199  00FE9E  54                 	db	84	;'T'
  1200  00FE9F  5F                 	db	95	;'_'
  1201  00FEA0  4C                 	db	76	;'L'
  1202  00FEA1  4F                 	db	79	;'O'
  1203  00FEA2  57                 	db	87	;'W'
  1204  00FEA3  00                 	db	0
  1205  00FEA4                     STR_35:
  1206  00FEA4  57                 	db	87	;'W'
  1207  00FEA5  53                 	db	83	;'S'
  1208  00FEA6  5F                 	db	95	;'_'
  1209  00FEA7  4D                 	db	77	;'M'
  1210  00FEA8  49                 	db	73	;'I'
  1211  00FEA9  4E                 	db	78	;'N'
  1212  00FEAA  5F                 	db	95	;'_'
  1213  00FEAB  4D                 	db	77	;'M'
  1214  00FEAC  41                 	db	65	;'A'
  1215  00FEAD  58                 	db	88	;'X'
  1216  00FEAE  00                 	db	0
  1217  00FEAF                     STR_37:
  1218  00FEAF  56                 	db	86	;'V'
  1219  00FEB0  4F                 	db	79	;'O'
  1220  00FEB1  4C                 	db	76	;'L'
  1221  00FEB2  54                 	db	84	;'T'
  1222  00FEB3  5F                 	db	95	;'_'
  1223  00FEB4  48                 	db	72	;'H'
  1224  00FEB5  49                 	db	73	;'I'
  1225  00FEB6  47                 	db	71	;'G'
  1226  00FEB7  48                 	db	72	;'H'
  1227  00FEB8  00                 	db	0
  1228  00FEB9                     STR_63:
  1229  00FEB9  43                 	db	67	;'C'
  1230  00FEBA  55                 	db	85	;'U'
  1231  00FEBB  52                 	db	82	;'R'
  1232  00FEBC  52                 	db	82	;'R'
  1233  00FEBD  45                 	db	69	;'E'
  1234  00FEBE  4E                 	db	78	;'N'
  1235  00FEBF  54                 	db	84	;'T'
  1236  00FEC0  5F                 	db	95	;'_'
  1237  00FEC1  48                 	db	72	;'H'
  1238  00FEC2  00                 	db	0
  1239  00FEC3                     STR_67:
  1240  00FEC3  50                 	db	80	;'P'
  1241  00FEC4  4F                 	db	79	;'O'
  1242  00FEC5  57                 	db	87	;'W'
  1243  00FEC6  45                 	db	69	;'E'
  1244  00FEC7  52                 	db	82	;'R'
  1245  00FEC8  5F                 	db	95	;'_'
  1246  00FEC9  4D                 	db	77	;'M'
  1247  00FECA  49                 	db	73	;'I'
  1248  00FECB  4E                 	db	78	;'N'
  1249  00FECC  00                 	db	0
  1250  00FECD                     STR_214:
  1251  00FECD  4C                 	db	76	;'L'
  1252  00FECE  4F                 	db	79	;'O'
  1253  00FECF  47                 	db	71	;'G'
  1254  00FED0  49                 	db	73	;'I'
  1255  00FED1  43                 	db	67	;'C'
  1256  00FED2  20                 	db	32
  1257  00FED3  4F                 	db	79	;'O'
  1258  00FED4  54                 	db	84	;'T'
  1259  00FED5  50                 	db	80	;'P'
  1260  00FED6  00                 	db	0
  1261  00FED7                     STR_43:
  1262  00FED7  50                 	db	80	;'P'
  1263  00FED8  48                 	db	72	;'H'
  1264  00FED9  41                 	db	65	;'A'
  1265  00FEDA  53                 	db	83	;'S'
  1266  00FEDB  45                 	db	69	;'E'
  1267  00FEDC  5F                 	db	95	;'_'
  1268  00FEDD  53                 	db	83	;'S'
  1269  00FEDE  45                 	db	69	;'E'
  1270  00FEDF  51                 	db	81	;'Q'
  1271  00FEE0  00                 	db	0
  1272  00FEE1                     STR_182:
  1273  00FEE1  56                 	db	86	;'V'
  1274  00FEE2  46                 	db	70	;'F'
  1275  00FEE3  44                 	db	68	;'D'
  1276  00FEE4  20                 	db	32
  1277  00FEE5  45                 	db	69	;'E'
  1278  00FEE6  52                 	db	82	;'R'
  1279  00FEE7  52                 	db	82	;'R'
  1280  00FEE8  4F                 	db	79	;'O'
  1281  00FEE9  52                 	db	82	;'R'
  1282  00FEEA  00                 	db	0
  1283  00FEEB                     STR_200:
  1284  00FEEB  43                 	db	67	;'C'
  1285  00FEEC  4F                 	db	79	;'O'
  1286  00FEED  4E                 	db	78	;'N'
  1287  00FEEE  54                 	db	84	;'T'
  1288  00FEEF  41                 	db	65	;'A'
  1289  00FEF0  43                 	db	67	;'C'
  1290  00FEF1  54                 	db	84	;'T'
  1291  00FEF2  4F                 	db	79	;'O'
  1292  00FEF3  52                 	db	82	;'R'
  1293  00FEF4  00                 	db	0
  1294  00FEF5                     STR_164:
  1295  00FEF5  42                 	db	66	;'B'
  1296  00FEF6  20                 	db	32
  1297  00FEF7  43                 	db	67	;'C'
  1298  00FEF8  55                 	db	85	;'U'
  1299  00FEF9  52                 	db	82	;'R'
  1300  00FEFA  52                 	db	82	;'R'
  1301  00FEFB  45                 	db	69	;'E'
  1302  00FEFC  4E                 	db	78	;'N'
  1303  00FEFD  54                 	db	84	;'T'
  1304  00FEFE  00                 	db	0
  1305  00FEFF                     STR_160:
  1306  00FEFF  52                 	db	82	;'R'
  1307  00FF00  20                 	db	32
  1308  00FF01  43                 	db	67	;'C'
  1309  00FF02  55                 	db	85	;'U'
  1310  00FF03  52                 	db	82	;'R'
  1311  00FF04  52                 	db	82	;'R'
  1312  00FF05  45                 	db	69	;'E'
  1313  00FF06  4E                 	db	78	;'N'
  1314  00FF07  54                 	db	84	;'T'
  1315  00FF08  00                 	db	0
  1316  00FF09                     STR_162:
  1317  00FF09  59                 	db	89	;'Y'
  1318  00FF0A  20                 	db	32
  1319  00FF0B  43                 	db	67	;'C'
  1320  00FF0C  55                 	db	85	;'U'
  1321  00FF0D  52                 	db	82	;'R'
  1322  00FF0E  52                 	db	82	;'R'
  1323  00FF0F  45                 	db	69	;'E'
  1324  00FF10  4E                 	db	78	;'N'
  1325  00FF11  54                 	db	84	;'T'
  1326  00FF12  00                 	db	0
  1327  00FF13                     STR_65:
  1328  00FF13  50                 	db	80	;'P'
  1329  00FF14  4F                 	db	79	;'O'
  1330  00FF15  57                 	db	87	;'W'
  1331  00FF16  45                 	db	69	;'E'
  1332  00FF17  52                 	db	82	;'R'
  1333  00FF18  5F                 	db	95	;'_'
  1334  00FF19  4D                 	db	77	;'M'
  1335  00FF1A  41                 	db	65	;'A'
  1336  00FF1B  58                 	db	88	;'X'
  1337  00FF1C  00                 	db	0
  1338  00FF1D                     STR_178:
  1339  00FF1D  46                 	db	70	;'F'
  1340  00FF1E  52                 	db	82	;'R'
  1341  00FF1F  45                 	db	69	;'E'
  1342  00FF20  51                 	db	81	;'Q'
  1343  00FF21  55                 	db	85	;'U'
  1344  00FF22  45                 	db	69	;'E'
  1345  00FF23  4E                 	db	78	;'N'
  1346  00FF24  43                 	db	67	;'C'
  1347  00FF25  59                 	db	89	;'Y'
  1348  00FF26  00                 	db	0
  1349  00FF27                     STR_128:
  1350  00FF27  53                 	db	83	;'S'
  1351  00FF28  65                 	db	101	;'e'
  1352  00FF29  72                 	db	114	;'r'
  1353  00FF2A  69                 	db	105	;'i'
  1354  00FF2B  61                 	db	97	;'a'
  1355  00FF2C  6C                 	db	108	;'l'
  1356  00FF2D  20                 	db	32
  1357  00FF2E  4E                 	db	78	;'N'
  1358  00FF2F  6F                 	db	111	;'o'
  1359  00FF30  00                 	db	0
  1360  00FF31                     STR_73:
  1361  00FF31  50                 	db	80	;'P'
  1362  00FF32  49                 	db	73	;'I'
  1363  00FF33  54                 	db	84	;'T'
  1364  00FF34  43                 	db	67	;'C'
  1365  00FF35  48                 	db	72	;'H'
  1366  00FF36  5F                 	db	95	;'_'
  1367  00FF37  46                 	db	70	;'F'
  1368  00FF38  42                 	db	66	;'B'
  1369  00FF39  00                 	db	0
  1370  00FF3A                     STR_91:
  1371  00FF3A  53                 	db	83	;'S'
  1372  00FF3B  54                 	db	84	;'T'
  1373  00FF3C  4F                 	db	79	;'O'
  1374  00FF3D  50                 	db	80	;'P'
  1375  00FF3E  50                 	db	80	;'P'
  1376  00FF3F  49                 	db	73	;'I'
  1377  00FF40  4E                 	db	78	;'N'
  1378  00FF41  47                 	db	71	;'G'
  1379  00FF42  00                 	db	0
  1380  00FF43                     STR_134:
  1381  00FF43  57                 	db	87	;'W'
  1382  00FF44  49                 	db	73	;'I'
  1383  00FF45  4E                 	db	78	;'N'
  1384  00FF46  44                 	db	68	;'D'
  1385  00FF47  20                 	db	32
  1386  00FF48  41                 	db	65	;'A'
  1387  00FF49  56                 	db	86	;'V'
  1388  00FF4A  47                 	db	71	;'G'
  1389  00FF4B  00                 	db	0
  1390  00FF4C                     STR_186:
  1391  00FF4C  45                 	db	69	;'E'
  1392  00FF4D  52                 	db	82	;'R'
  1393  00FF4E  52                 	db	82	;'R'
  1394  00FF4F  4F                 	db	79	;'O'
  1395  00FF50  52                 	db	82	;'R'
  1396  00FF51  20                 	db	32
  1397  00FF52  4E                 	db	78	;'N'
  1398  00FF53  4F                 	db	79	;'O'
  1399  00FF54  00                 	db	0
  1400  00FF55                     STR_33:
  1401  00FF55  4E                 	db	78	;'N'
  1402  00FF56  4F                 	db	79	;'O'
  1403  00FF57  5F                 	db	95	;'_'
  1404  00FF58  45                 	db	69	;'E'
  1405  00FF59  52                 	db	82	;'R'
  1406  00FF5A  52                 	db	82	;'R'
  1407  00FF5B  4F                 	db	79	;'O'
  1408  00FF5C  52                 	db	82	;'R'
  1409  00FF5D  00                 	db	0
  1410  00FF5E                     STR_39:
  1411  00FF5E  56                 	db	86	;'V'
  1412  00FF5F  4F                 	db	79	;'O'
  1413  00FF60  4C                 	db	76	;'L'
  1414  00FF61  54                 	db	84	;'T'
  1415  00FF62  5F                 	db	95	;'_'
  1416  00FF63  4C                 	db	76	;'L'
  1417  00FF64  4F                 	db	79	;'O'
  1418  00FF65  57                 	db	87	;'W'
  1419  00FF66  00                 	db	0
  1420  00FF67                     STR_89:
  1421  00FF67  52                 	db	82	;'R'
  1422  00FF68  55                 	db	85	;'U'
  1423  00FF69  4E                 	db	78	;'N'
  1424  00FF6A  4E                 	db	78	;'N'
  1425  00FF6B  49                 	db	73	;'I'
  1426  00FF6C  4E                 	db	78	;'N'
  1427  00FF6D  47                 	db	71	;'G'
  1428  00FF6E  00                 	db	0
  1429  00FF6F                     STR_51:
  1430  00FF6F  44                 	db	68	;'D'
  1431  00FF70  43                 	db	67	;'C'
  1432  00FF71  42                 	db	66	;'B'
  1433  00FF72  5F                 	db	95	;'_'
  1434  00FF73  4C                 	db	76	;'L'
  1435  00FF74  5F                 	db	95	;'_'
  1436  00FF75  48                 	db	72	;'H'
  1437  00FF76  00                 	db	0
  1438  00FF77                     STR_216:
  1439  00FF77  56                 	db	86	;'V'
  1440  00FF78  46                 	db	70	;'F'
  1441  00FF79  44                 	db	68	;'D'
  1442  00FF7A  20                 	db	32
  1443  00FF7B  4F                 	db	79	;'O'
  1444  00FF7C  54                 	db	84	;'T'
  1445  00FF7D  50                 	db	80	;'P'
  1446  00FF7E  00                 	db	0
  1447  00FF7F                     STR_85:
  1448  00FF7F  53                 	db	83	;'S'
  1449  00FF80  54                 	db	84	;'T'
  1450  00FF81  41                 	db	65	;'A'
  1451  00FF82  52                 	db	82	;'R'
  1452  00FF83  54                 	db	84	;'T'
  1453  00FF84  55                 	db	85	;'U'
  1454  00FF85  50                 	db	80	;'P'
  1455  00FF86  00                 	db	0
  1456  00FF87                     STR_235:
  1457  00FF87  28                 	db	40
  1458  00FF88  6E                 	db	110	;'n'
  1459  00FF89  75                 	db	117	;'u'
  1460  00FF8A  6C                 	db	108	;'l'
  1461  00FF8B  6C                 	db	108	;'l'
  1462  00FF8C  29                 	db	41
  1463  00FF8D  00                 	db	0
  1464  00FF8E                     STR_75:
  1465  00FF8E  47                 	db	71	;'G'
  1466  00FF8F  45                 	db	69	;'E'
  1467  00FF90  4E                 	db	78	;'N'
  1468  00FF91  5F                 	db	95	;'_'
  1469  00FF92  46                 	db	70	;'F'
  1470  00FF93  42                 	db	66	;'B'
  1471  00FF94  00                 	db	0
  1472  00FF95                     STR_53:
  1473  00FF95  56                 	db	86	;'V'
  1474  00FF96  46                 	db	70	;'F'
  1475  00FF97  44                 	db	68	;'D'
  1476  00FF98  5F                 	db	95	;'_'
  1477  00FF99  4F                 	db	79	;'O'
  1478  00FF9A  43                 	db	67	;'C'
  1479  00FF9B  00                 	db	0
  1480  00FF9C                     STR_87:
  1481  00FF9C  52                 	db	82	;'R'
  1482  00FF9D  41                 	db	65	;'A'
  1483  00FF9E  4D                 	db	77	;'M'
  1484  00FF9F  50                 	db	80	;'P'
  1485  00FFA0  55                 	db	85	;'U'
  1486  00FFA1  50                 	db	80	;'P'
  1487  00FFA2  00                 	db	0
  1488  00FFA3                     STR_61:
  1489  00FFA3  47                 	db	71	;'G'
  1490  00FFA4  45                 	db	69	;'E'
  1491  00FFA5  4E                 	db	78	;'N'
  1492  00FFA6  5F                 	db	95	;'_'
  1493  00FFA7  4F                 	db	79	;'O'
  1494  00FFA8  53                 	db	83	;'S'
  1495  00FFA9  00                 	db	0
  1496  00FFAA                     STR_158:
  1497  00FFAA  42                 	db	66	;'B'
  1498  00FFAB  20                 	db	32
  1499  00FFAC  56                 	db	86	;'V'
  1500  00FFAD  4F                 	db	79	;'O'
  1501  00FFAE  4C                 	db	76	;'L'
  1502  00FFAF  54                 	db	84	;'T'
  1503  00FFB0  00                 	db	0
  1504  00FFB1                     STR_154:
  1505  00FFB1  52                 	db	82	;'R'
  1506  00FFB2  20                 	db	32
  1507  00FFB3  56                 	db	86	;'V'
  1508  00FFB4  4F                 	db	79	;'O'
  1509  00FFB5  4C                 	db	76	;'L'
  1510  00FFB6  54                 	db	84	;'T'
  1511  00FFB7  00                 	db	0
  1512  00FFB8                     STR_156:
  1513  00FFB8  59                 	db	89	;'Y'
  1514  00FFB9  20                 	db	32
  1515  00FFBA  56                 	db	86	;'V'
  1516  00FFBB  4F                 	db	79	;'O'
  1517  00FFBC  4C                 	db	76	;'L'
  1518  00FFBD  54                 	db	84	;'T'
  1519  00FFBE  00                 	db	0
  1520  00FFBF                     STR_14:
  1521  00FFBF  25                 	db	37
  1522  00FFC0  34                 	db	52	;'4'
  1523  00FFC1  2E                 	db	46
  1524  00FFC2  30                 	db	48	;'0'
  1525  00FFC3  31                 	db	49	;'1'
  1526  00FFC4  66                 	db	102	;'f'
  1527  00FFC5  00                 	db	0
  1528  00FFC6                     STR_4:
  1529  00FFC6  25                 	db	37
  1530  00FFC7  34                 	db	52	;'4'
  1531  00FFC8  2E                 	db	46
  1532  00FFC9  30                 	db	48	;'0'
  1533  00FFCA  32                 	db	50	;'2'
  1534  00FFCB  66                 	db	102	;'f'
  1535  00FFCC  00                 	db	0
  1536  00FFCD                     STR_148:
  1537  00FFCD  56                 	db	86	;'V'
  1538  00FFCE  46                 	db	70	;'F'
  1539  00FFCF  44                 	db	68	;'D'
  1540  00FFD0  20                 	db	32
  1541  00FFD1  48                 	db	72	;'H'
  1542  00FFD2  7A                 	db	122	;'z'
  1543  00FFD3  00                 	db	0
  1544  00FFD4                     STR_15:
  1545  00FFD4  25                 	db	37
  1546  00FFD5  34                 	db	52	;'4'
  1547  00FFD6  2E                 	db	46
  1548  00FFD7  30                 	db	48	;'0'
  1549  00FFD8  66                 	db	102	;'f'
  1550  00FFD9  00                 	db	0
  1551  00FFDA                     STR_192:
  1552  00FFDA  44                 	db	68	;'D'
  1553  00FFDB  41                 	db	65	;'A'
  1554  00FFDC  54                 	db	84	;'T'
  1555  00FFDD  45                 	db	69	;'E'
  1556  00FFDE  00                 	db	0
  1557  00FFDF                     STR_45:
  1558  00FFDF  46                 	db	70	;'F'
  1559  00FFE0  52                 	db	82	;'R'
  1560  00FFE1  45                 	db	69	;'E'
  1561  00FFE2  51                 	db	81	;'Q'
  1562  00FFE3  00                 	db	0
  1563  00FFE4                     STR_172:
  1564  00FFE4  4B                 	db	75	;'K'
  1565  00FFE5  56                 	db	86	;'V'
  1566  00FFE6  41                 	db	65	;'A'
  1567  00FFE7  52                 	db	82	;'R'
  1568  00FFE8  00                 	db	0
  1569  00FFE9                     STR_168:
  1570  00FFE9  59                 	db	89	;'Y'
  1571  00FFEA  2D                 	db	45
  1572  00FFEB  4B                 	db	75	;'K'
  1573  00FFEC  57                 	db	87	;'W'
  1574  00FFED  00                 	db	0
  1575  00FFEE                     STR_170:
  1576  00FFEE  4B                 	db	75	;'K'
  1577  00FFEF  56                 	db	86	;'V'
  1578  00FFF0  41                 	db	65	;'A'
  1579  00FFF1  00                 	db	0
  1580  00FFF2                     STR_9:
  1581  00FFF2  25                 	db	37
  1582  00FFF3  64                 	db	100	;'d'
  1583  00FFF4  00                 	db	0
  1584  00FFF5                     STR_2:
  1585  00FFF5  25                 	db	37
  1586  00FFF6  73                 	db	115	;'s'
  1587  00FFF7  00                 	db	0
  1588  00FFF8                     STR_1:
  1589  00FFF8  25                 	db	37
  1590  00FFF9  75                 	db	117	;'u'
  1591  00FFFA  00                 	db	0
  1592  00FFFB                     STR_124:
  1593  00FFFB  0A                 	db	10
  1594  00FFFC  00                 	db	0
  1595  00FFFD                     STR_123:
  1596  00FFFD  0D                 	db	13
  1597  00FFFE  00                 	db	0
  1598  0000                     
  1599                           ; #config settings
  1600  00FFFF  00                 	db	0	; dummy byte at the end
  1601  0000                     
  1602                           	psect	cinit
  1603  0193CA                     __pcinit:
  1604                           	opt stack 0
  1605  0193CA                     start_initialization:
  1606                           	opt stack 0
  1607  0193CA                     __initialization:
  1608                           	opt stack 0
  1609                           
  1610                           ; Initialize objects allocated to BANK5 (2 bytes)
  1611                           ; load TBLPTR registers with __pidataBANK5
  1612  0193CA  0E12               	movlw	low __pidataBANK5
  1613  0193CC  6EF6               	movwf	tblptrl,c
  1614  0193CE  0EAB               	movlw	high __pidataBANK5
  1615  0193D0  6EF7               	movwf	tblptrh,c
  1616  0193D2  0E01               	movlw	low (__pidataBANK5 shr (0+16))
  1617  0193D4  6EF8               	movwf	tblptru,c
  1618  0193D6  0009               	tblrd		*+	;fetch initializer
  1619  0193D8  CFF5 F5FD          	movff	tablat,__pdataBANK5
  1620  0193DC  0009               	tblrd		*+	;fetch initializer
  1621  0193DE  CFF5 F5FE          	movff	tablat,__pdataBANK5+1
  1622                           
  1623                           ; Initialize objects allocated to BANK1 (2 bytes)
  1624                           ; load TBLPTR registers with __pidataBANK1
  1625  0193E2  0E10               	movlw	low __pidataBANK1
  1626  0193E4  6EF6               	movwf	tblptrl,c
  1627  0193E6  0EAB               	movlw	high __pidataBANK1
  1628  0193E8  6EF7               	movwf	tblptrh,c
  1629  0193EA  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1630  0193EC  6EF8               	movwf	tblptru,c
  1631  0193EE  0009               	tblrd		*+	;fetch initializer
  1632  0193F0  CFF5 F1FE          	movff	tablat,__pdataBANK1
  1633  0193F4  0009               	tblrd		*+	;fetch initializer
  1634  0193F6  CFF5 F1FF          	movff	tablat,__pdataBANK1+1
  1635                           
  1636                           ; Clear objects allocated to BANK6 (102 bytes)
  1637  0193FA  EE06  F000         	lfsr	0,__pbssBANK6
  1638  0193FE  0E66               	movlw	102
  1639  019400                     clear_0:
  1640  019400  6AEE               	clrf	postinc0,c
  1641  019402  06E8               	decf	wreg,f,c
  1642  019404  E1FD               	bnz	clear_0
  1643                           
  1644                           ; Clear objects allocated to BANK5 (253 bytes)
  1645  019406  EE05  F000         	lfsr	0,__pbssBANK5
  1646  01940A  0EFD               	movlw	253
  1647  01940C                     clear_1:
  1648  01940C  6AEE               	clrf	postinc0,c
  1649  01940E  06E8               	decf	wreg,f,c
  1650  019410  E1FD               	bnz	clear_1
  1651                           
  1652                           ; Clear objects allocated to BANK4 (255 bytes)
  1653  019412  EE04  F000         	lfsr	0,__pbssBANK4
  1654  019416  EE10 F0FF          	lfsr	1,255
  1655  01941A                     clear_2:
  1656  01941A  6AEE               	clrf	postinc0,c
  1657  01941C  50E5               	movf	postdec1,w,c
  1658  01941E  50E1               	movf	fsr1l,w,c
  1659  019420  E1FC               	bnz	clear_2
  1660  019422  50E2               	movf	fsr1h,w,c
  1661  019424  E1FA               	bnz	clear_2
  1662                           
  1663                           ; Clear objects allocated to BANK3 (256 bytes)
  1664  019426  EE03  F000         	lfsr	0,__pbssBANK3
  1665  01942A  EE11 F000          	lfsr	1,256
  1666  01942E                     clear_3:
  1667  01942E  6AEE               	clrf	postinc0,c
  1668  019430  50E5               	movf	postdec1,w,c
  1669  019432  50E1               	movf	fsr1l,w,c
  1670  019434  E1FC               	bnz	clear_3
  1671  019436  50E2               	movf	fsr1h,w,c
  1672  019438  E1FA               	bnz	clear_3
  1673                           
  1674                           ; Clear objects allocated to BANK2 (256 bytes)
  1675  01943A  EE02  F000         	lfsr	0,__pbssBANK2
  1676  01943E  EE11 F000          	lfsr	1,256
  1677  019442                     clear_4:
  1678  019442  6AEE               	clrf	postinc0,c
  1679  019444  50E5               	movf	postdec1,w,c
  1680  019446  50E1               	movf	fsr1l,w,c
  1681  019448  E1FC               	bnz	clear_4
  1682  01944A  50E2               	movf	fsr1h,w,c
  1683  01944C  E1FA               	bnz	clear_4
  1684                           
  1685                           ; Clear objects allocated to BANK1 (254 bytes)
  1686  01944E  EE01  F000         	lfsr	0,__pbssBANK1
  1687  019452  0EFE               	movlw	254
  1688  019454                     clear_5:
  1689  019454  6AEE               	clrf	postinc0,c
  1690  019456  06E8               	decf	wreg,f,c
  1691  019458  E1FD               	bnz	clear_5
  1692                           
  1693                           ; Clear objects allocated to BANK0 (11 bytes)
  1694  01945A  EE00  F0CF         	lfsr	0,__pbssBANK0
  1695  01945E  0E0B               	movlw	11
  1696  019460                     clear_6:
  1697  019460  6AEE               	clrf	postinc0,c
  1698  019462  06E8               	decf	wreg,f,c
  1699  019464  E1FD               	bnz	clear_6
  1700                           
  1701                           ; Clear objects allocated to COMRAM (28 bytes)
  1702  019466  EE00  F027         	lfsr	0,__pbssCOMRAM
  1703  01946A  0E1C               	movlw	28
  1704  01946C                     clear_7:
  1705  01946C  6AEE               	clrf	postinc0,c
  1706  01946E  06E8               	decf	wreg,f,c
  1707  019470  E1FD               	bnz	clear_7
  1708  019472                     end_of_initialization:
  1709                           	opt stack 0
  1710  019472                     __end_of__initialization:
  1711                           	opt stack 0
  1712  019472  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1713  019474  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1714  019476  0100               	movlb	0
  1715  019478  EF29  F0B9         	goto	_main	;jump to C main() function
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           postdec1	equ	0xFE5
  1723                           fsr1h	equ	0xFE2
  1724                           fsr1l	equ	0xFE1
  1725                           
  1726                           	psect	bssCOMRAM
  1727  000027                     __pbssCOMRAM:
  1728                           	opt stack 0
  1729  000027                     _B_Volt:
  1730                           	opt stack 0
  1731  000027                     	ds	3
  1732  00002A                     _R_Volt:
  1733                           	opt stack 0
  1734  00002A                     	ds	3
  1735  00002D                     _Turbine_RPM:
  1736                           	opt stack 0
  1737  00002D                     	ds	3
  1738  000030                     _Y_Volt:
  1739                           	opt stack 0
  1740  000030                     	ds	3
  1741  000033                     _GiMinutes_2:
  1742                           	opt stack 0
  1743  000033                     	ds	2
  1744  000035                     _Communication_OTP:
  1745                           	opt stack 0
  1746  000035                     	ds	1
  1747  000036                     _EEPROM_Error_Flag:
  1748                           	opt stack 0
  1749  000036                     	ds	1
  1750  000037                     _EP_Errors1:
  1751                           	opt stack 0
  1752  000037                     	ds	1
  1753  000038                     _EP_Errors2:
  1754                           	opt stack 0
  1755  000038                     	ds	1
  1756  000039                     _EP_Errors3:
  1757                           	opt stack 0
  1758  000039                     	ds	1
  1759  00003A                     _Errors:
  1760                           	opt stack 0
  1761  00003A                     	ds	1
  1762  00003B                     _PS:
  1763                           	opt stack 0
  1764  00003B                     	ds	1
  1765  00003C                     _Phase_Sequence_Ok:
  1766                           	opt stack 0
  1767  00003C                     	ds	1
  1768  00003D                     _Start_Stop_Flag:
  1769                           	opt stack 0
  1770  00003D                     	ds	1
  1771  00003E                     _VFD_Error_No:
  1772                           	opt stack 0
  1773  00003E                     	ds	1
  1774  00003F                     _i:
  1775                           	opt stack 0
  1776  00003F                     	ds	1
  1777  000040                     _KW:
  1778                           	opt stack 0
  1779  000040                     	ds	3
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           postdec1	equ	0xFE5
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           
  1790                           	psect	bssBANK0
  1791  0000CF                     __pbssBANK0:
  1792                           	opt stack 0
  1793  0000CF                     _Generator_RPM_FLT:
  1794                           	opt stack 0
  1795  0000CF                     	ds	3
  1796  0000D2                     _Wind_Speed_Avg:
  1797                           	opt stack 0
  1798  0000D2                     	ds	3
  1799  0000D5                     _Desired_Frequency:
  1800                           	opt stack 0
  1801  0000D5                     	ds	1
  1802  0000D6                     _Grid_Over_current:
  1803                           	opt stack 0
  1804  0000D6                     	ds	1
  1805  0000D7                     _Pitch_FB_Error_Flag:
  1806                           	opt stack 0
  1807  0000D7                     	ds	1
  1808  0000D8                     _Turbine_state:
  1809                           	opt stack 0
  1810  0000D8                     	ds	1
  1811  0000D9                     _VFD_communication_Error_Flag:
  1812                           	opt stack 0
  1813  0000D9                     	ds	1
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           postinc0	equ	0xFEE
  1819                           wreg	equ	0xFE8
  1820                           postdec1	equ	0xFE5
  1821                           fsr1h	equ	0xFE2
  1822                           fsr1l	equ	0xFE1
  1823                           
  1824                           	psect	bssBANK1
  1825  000100                     __pbssBANK1:
  1826                           	opt stack 0
  1827  000100                     _Avg_RYB_Current:
  1828                           	opt stack 0
  1829  000100                     	ds	3
  1830  000103                     _B_Curr:
  1831                           	opt stack 0
  1832  000103                     	ds	3
  1833  000106                     _B_Gap_Ratio:
  1834                           	opt stack 0
  1835  000106                     	ds	3
  1836  000109                     _Frequency:
  1837                           	opt stack 0
  1838  000109                     	ds	3
  1839  00010C                     _Generator_RPM_New:
  1840                           	opt stack 0
  1841  00010C                     	ds	3
  1842  00010F                     _Generator_RPM_Old:
  1843                           	opt stack 0
  1844  00010F                     	ds	3
  1845  000112                     _Motor_slip:
  1846                           	opt stack 0
  1847  000112                     	ds	3
  1848  000115                     _R_C_Max:
  1849                           	opt stack 0
  1850  000115                     	ds	3
  1851  000118                     _R_Curr:
  1852                           	opt stack 0
  1853  000118                     	ds	3
  1854  00011B                     _R_Gap_Ratio:
  1855                           	opt stack 0
  1856  00011B                     	ds	3
  1857  00011E                     _R_V_Max:
  1858                           	opt stack 0
  1859  00011E                     	ds	3
  1860  000121                     _R_V_Old:
  1861                           	opt stack 0
  1862  000121                     	ds	3
  1863  000124                     _Rotor_slip:
  1864                           	opt stack 0
  1865  000124                     	ds	3
  1866  000127                     _Turbine_RPM_New:
  1867                           	opt stack 0
  1868  000127                     	ds	3
  1869  00012A                     _Turbine_RPM_Old:
  1870                           	opt stack 0
  1871  00012A                     	ds	3
  1872  00012D                     _Y_Curr:
  1873                           	opt stack 0
  1874  00012D                     	ds	3
  1875  000130                     _Y_Gap_Ratio:
  1876                           	opt stack 0
  1877  000130                     	ds	3
  1878  000133                     _B_Peak:
  1879                           	opt stack 0
  1880  000133                     	ds	2
  1881  000135                     _Capacitor_Counter:
  1882                           	opt stack 0
  1883  000135                     	ds	2
  1884  000137                     _GRPM_Cap_New:
  1885                           	opt stack 0
  1886  000137                     	ds	2
  1887  000139                     _GRPM_Cap_Old:
  1888                           	opt stack 0
  1889  000139                     	ds	2
  1890  00013B                     _GiHours_1:
  1891                           	opt stack 0
  1892  00013B                     	ds	2
  1893  00013D                     _GiHours_2:
  1894                           	opt stack 0
  1895  00013D                     	ds	2
  1896  00013F                     _GiHours_3:
  1897                           	opt stack 0
  1898  00013F                     	ds	2
  1899  000141                     _GiMinutes_1:
  1900                           	opt stack 0
  1901  000141                     	ds	2
  1902  000143                     _GiMinutes_3:
  1903                           	opt stack 0
  1904  000143                     	ds	2
  1905  000145                     _Initial_Delay_Second:
  1906                           	opt stack 0
  1907  000145                     	ds	2
  1908  000147                     _RPM_Time:
  1909                           	opt stack 0
  1910  000147                     	ds	2
  1911  000149                     _R_Peak:
  1912                           	opt stack 0
  1913  000149                     	ds	2
  1914  00014B                     _Serial_No:
  1915                           	opt stack 0
  1916  00014B                     	ds	2
  1917  00014D                     _TRPM_Cap_New:
  1918                           	opt stack 0
  1919  00014D                     	ds	2
  1920  00014F                     _TRPM_Cap_Old:
  1921                           	opt stack 0
  1922  00014F                     	ds	2
  1923  000151                     _Timer1_OF_counter_Generator_New:
  1924                           	opt stack 0
  1925  000151                     	ds	2
  1926  000153                     _Timer1_OF_counter_New:
  1927                           	opt stack 0
  1928  000153                     	ds	2
  1929  000155                     _Timer1_OF_counter_Wind_temp_New:
  1930                           	opt stack 0
  1931  000155                     	ds	2
  1932  000157                     _Timer1_counter:
  1933                           	opt stack 0
  1934  000157                     	ds	2
  1935  000159                     _VFD_Bus_Voltage:
  1936                           	opt stack 0
  1937  000159                     	ds	2
  1938  00015B                     _VFD_Run_Time_Counter:
  1939                           	opt stack 0
  1940  00015B                     	ds	2
  1941  00015D                     _Wind_Cap_New:
  1942                           	opt stack 0
  1943  00015D                     	ds	2
  1944  00015F                     _Wind_Cap_New_2:
  1945                           	opt stack 0
  1946  00015F                     	ds	2
  1947  000161                     _Wind_Cap_Old:
  1948                           	opt stack 0
  1949  000161                     	ds	2
  1950  000163                     _Wind_Cap_Old_2:
  1951                           	opt stack 0
  1952  000163                     	ds	2
  1953  000165                     _Y_Peak:
  1954                           	opt stack 0
  1955  000165                     	ds	2
  1956  000167                     _B_PF_Flag:
  1957                           	opt stack 0
  1958  000167                     	ds	1
  1959  000168                     _DC_BUS_Current_Counter:
  1960                           	opt stack 0
  1961  000168                     	ds	1
  1962  000169                     _DC_BUS_High_Counter:
  1963                           	opt stack 0
  1964  000169                     	ds	1
  1965  00016A                     _DC_BUS_Low_Counter:
  1966                           	opt stack 0
  1967  00016A                     	ds	1
  1968  00016B                     _DC_Bus_Voltage_Flag:
  1969                           	opt stack 0
  1970  00016B                     	ds	1
  1971  00016C                     _Delay_counter:
  1972                           	opt stack 0
  1973  00016C                     	ds	1
  1974  00016D                     _Errors1:
  1975                           	opt stack 0
  1976  00016D                     	ds	1
  1977  00016E                     _Errors2:
  1978                           	opt stack 0
  1979  00016E                     	ds	1
  1980  00016F                     _Errors3:
  1981                           	opt stack 0
  1982  00016F                     	ds	1
  1983  000170                     _Errors4:
  1984                           	opt stack 0
  1985  000170                     	ds	1
  1986  000171                     _Errors5:
  1987                           	opt stack 0
  1988  000171                     	ds	1
  1989  000172                     _Feedback_Error:
  1990                           	opt stack 0
  1991  000172                     	ds	1
  1992  000173                     _Five_Delay_counter:
  1993                           	opt stack 0
  1994  000173                     	ds	1
  1995  000174                     _Five_Sec_Delay_vab:
  1996                           	opt stack 0
  1997  000174                     	ds	1
  1998  000175                     _Five_Second_flag:
  1999                           	opt stack 0
  2000  000175                     	ds	1
  2001  000176                     _Freq_Flag:
  2002                           	opt stack 0
  2003  000176                     	ds	1
  2004  000177                     _Frequency_Error_counter:
  2005                           	opt stack 0
  2006  000177                     	ds	1
  2007  000178                     _GCB_phasev_flag:
  2008                           	opt stack 0
  2009  000178                     	ds	1
  2010  000179                     _GCDc_high_flag:
  2011                           	opt stack 0
  2012  000179                     	ds	1
  2013  00017A                     _GCDc_low_flag:
  2014                           	opt stack 0
  2015  00017A                     	ds	1
  2016  00017B                     _GCG_rpm_flag:
  2017                           	opt stack 0
  2018  00017B                     	ds	1
  2019  00017C                     _GCM_slip_flag:
  2020                           	opt stack 0
  2021  00017C                     	ds	1
  2022  00017D                     _GCR_phasev_flag:
  2023                           	opt stack 0
  2024  00017D                     	ds	1
  2025  00017E                     _GCR_slip_flag:
  2026                           	opt stack 0
  2027  00017E                     	ds	1
  2028  00017F                     _GCT_rpm_flag:
  2029                           	opt stack 0
  2030  00017F                     	ds	1
  2031  000180                     _GCWind_flag:
  2032                           	opt stack 0
  2033  000180                     	ds	1
  2034  000181                     _GCY_phasev_flag:
  2035                           	opt stack 0
  2036  000181                     	ds	1
  2037  000182                     _GCphase_flag:
  2038                           	opt stack 0
  2039  000182                     	ds	1
  2040  000183                     _GCvfd_curr_flag:
  2041                           	opt stack 0
  2042  000183                     	ds	1
  2043  000184                     _G_RPM_Counter:
  2044                           	opt stack 0
  2045  000184                     	ds	1
  2046  000185                     _G_RPM_counter:
  2047                           	opt stack 0
  2048  000185                     	ds	1
  2049  000186                     _GcDate:
  2050                           	opt stack 0
  2051  000186                     	ds	1
  2052  000187                     _GcHour:
  2053                           	opt stack 0
  2054  000187                     	ds	1
  2055  000188                     _GcMin:
  2056                           	opt stack 0
  2057  000188                     	ds	1
  2058  000189                     _GcMonth:
  2059                           	opt stack 0
  2060  000189                     	ds	1
  2061  00018A                     _GcSec:
  2062                           	opt stack 0
  2063  00018A                     	ds	1
  2064  00018B                     _GcYear:
  2065                           	opt stack 0
  2066  00018B                     	ds	1
  2067  00018C                     _Gc_Generator_One_Fb:
  2068                           	opt stack 0
  2069  00018C                     	ds	1
  2070  00018D                     _Gc_Grid_Phase_Unbalance:
  2071                           	opt stack 0
  2072  00018D                     	ds	1
  2073  00018E                     _Gc_Grid_Phase_Unbalance_Error:
  2074                           	opt stack 0
  2075  00018E                     	ds	1
  2076  00018F                     _Gc_Motor_Slip_Error:
  2077                           	opt stack 0
  2078  00018F                     	ds	1
  2079  000190                     _Gc_Pitch_Coil_Fb:
  2080                           	opt stack 0
  2081  000190                     	ds	1
  2082  000191                     _Gc_Pitch_Coil_Feedback_Error:
  2083                           	opt stack 0
  2084  000191                     	ds	1
  2085  000192                     _Gc_Rotor_Slip_Error:
  2086                           	opt stack 0
  2087  000192                     	ds	1
  2088  000193                     _Gc_TRPM_Rampup_Error:
  2089                           	opt stack 0
  2090  000193                     	ds	1
  2091  000194                     _Gc_Turbine2Wheel_Ratio_Error:
  2092                           	opt stack 0
  2093  000194                     	ds	1
  2094  000195                     _Gen_EP_Err_Flag:
  2095                           	opt stack 0
  2096  000195                     	ds	1
  2097  000196                     _Generator_One_Counter:
  2098                           	opt stack 0
  2099  000196                     	ds	1
  2100  000197                     _Generator_One_Feedback_Error:
  2101                           	opt stack 0
  2102  000197                     	ds	1
  2103  000198                     _Generator_Over_Speed:
  2104                           	opt stack 0
  2105  000198                     	ds	1
  2106  000199                     _Gf_Wind_Cut_In_Counter:
  2107                           	opt stack 0
  2108  000199                     	ds	1
  2109  00019A                     _Grid_Frequency_Error:
  2110                           	opt stack 0
  2111  00019A                     	ds	1
  2112  00019B                     _Grid_Ov_Counter:
  2113                           	opt stack 0
  2114  00019B                     	ds	1
  2115  00019C                     _Grid_Ovr_voltage:
  2116                           	opt stack 0
  2117  00019C                     	ds	1
  2118  00019D                     _Grid_Phase_Sequence_Error:
  2119                           	opt stack 0
  2120  00019D                     	ds	1
  2121  00019E                     _Grid_UV_Counter:
  2122                           	opt stack 0
  2123  00019E                     	ds	1
  2124  00019F                     _Grid_Und_voltage:
  2125                           	opt stack 0
  2126  00019F                     	ds	1
  2127  0001A0                     _KVA_Sign:
  2128                           	opt stack 0
  2129  0001A0                     	ds	1
  2130  0001A1                     _KW_Counter:
  2131                           	opt stack 0
  2132  0001A1                     	ds	1
  2133  0001A2                     _KW_Counter_Max:
  2134                           	opt stack 0
  2135  0001A2                     	ds	1
  2136  0001A3                     _KW_Maximum_Error:
  2137                           	opt stack 0
  2138  0001A3                     	ds	1
  2139  0001A4                     _KW_Minimum_Error:
  2140                           	opt stack 0
  2141  0001A4                     	ds	1
  2142  0001A5                     _Key_Counter:
  2143                           	opt stack 0
  2144  0001A5                     	ds	1
  2145  0001A6                     _Key_Flag:
  2146                           	opt stack 0
  2147  0001A6                     	ds	1
  2148  0001A7                     _Minutes:
  2149                           	opt stack 0
  2150  0001A7                     	ds	1
  2151  0001A8                     _Minutes_1:
  2152                           	opt stack 0
  2153  0001A8                     	ds	1
  2154  0001A9                     _Motor_Slip_Error_Flag:
  2155                           	opt stack 0
  2156  0001A9                     	ds	1
  2157  0001AA                     _OV_Counter:
  2158                           	opt stack 0
  2159  0001AA                     	ds	1
  2160  0001AB                     _One_Sec_Delay_vab:
  2161                           	opt stack 0
  2162  0001AB                     	ds	1
  2163  0001AC                     _One_Sec_Flag:
  2164                           	opt stack 0
  2165  0001AC                     	ds	1
  2166  0001AD                     _One_Time_Flag:
  2167                           	opt stack 0
  2168  0001AD                     	ds	1
  2169  0001AE                     _One_sec_Delay_Flag:
  2170                           	opt stack 0
  2171  0001AE                     	ds	1
  2172  0001AF                     _Phase_Angle:
  2173                           	opt stack 0
  2174  0001AF                     	ds	1
  2175  0001B0                     _Pitch_EP_Err_Flag:
  2176                           	opt stack 0
  2177  0001B0                     	ds	1
  2178  0001B1                     _Pitch_FB_Error_counter:
  2179                           	opt stack 0
  2180  0001B1                     	ds	1
  2181  0001B2                     _RPM_counter:
  2182                           	opt stack 0
  2183  0001B2                     	ds	1
  2184  0001B3                     _RS485_Data_Flag:
  2185                           	opt stack 0
  2186  0001B3                     	ds	1
  2187  0001B4                     _R_PF_Flag:
  2188                           	opt stack 0
  2189  0001B4                     	ds	1
  2190  0001B5                     _Rotor_Slip_Error_Flag:
  2191                           	opt stack 0
  2192  0001B5                     	ds	1
  2193  0001B6                     _S_S_Counter:
  2194                           	opt stack 0
  2195  0001B6                     	ds	1
  2196  0001B7                     _Slip_Error_Counter:
  2197                           	opt stack 0
  2198  0001B7                     	ds	1
  2199  0001B8                     _Slip_Error_Counter_1:
  2200                           	opt stack 0
  2201  0001B8                     	ds	1
  2202  0001B9                     _Slip_Flag:
  2203                           	opt stack 0
  2204  0001B9                     	ds	1
  2205  0001BA                     _Stopping_Counter:
  2206                           	opt stack 0
  2207  0001BA                     	ds	1
  2208  0001BB                     _TRPM_Cal:
  2209                           	opt stack 0
  2210  0001BB                     	ds	1
  2211  0001BC                     _TRPM_OverSpeed_Counter:
  2212                           	opt stack 0
  2213  0001BC                     	ds	1
  2214  0001BD                     _TRPM_Under_Speed_Counter:
  2215                           	opt stack 0
  2216  0001BD                     	ds	1
  2217  0001BE                     _T_Overload_counter:
  2218                           	opt stack 0
  2219  0001BE                     	ds	1
  2220  0001BF                     _T_RPM_counter:
  2221                           	opt stack 0
  2222  0001BF                     	ds	1
  2223  0001C0                     _Ten_Sec_Counter:
  2224                           	opt stack 0
  2225  0001C0                     	ds	1
  2226  0001C1                     _Ten_Sec_Counter_2:
  2227                           	opt stack 0
  2228  0001C1                     	ds	1
  2229  0001C2                     _Ten_Sec_RampUp_Flag:
  2230                           	opt stack 0
  2231  0001C2                     	ds	1
  2232  0001C3                     _Timer0_Falg1:
  2233                           	opt stack 0
  2234  0001C3                     	ds	1
  2235  0001C4                     _Timer0_Falg2:
  2236                           	opt stack 0
  2237  0001C4                     	ds	1
  2238  0001C5                     _Timer0_RAMPUP_Counter:
  2239                           	opt stack 0
  2240  0001C5                     	ds	1
  2241  0001C6                     _Timer1_interrupt_flag:
  2242                           	opt stack 0
  2243  0001C6                     	ds	1
  2244  0001C7                     _Total_Min:
  2245                           	opt stack 0
  2246  0001C7                     	ds	1
  2247  0001C8                     _Tur_OverLoaded_Error:
  2248                           	opt stack 0
  2249  0001C8                     	ds	1
  2250  0001C9                     _Turbine_Over_Speed_Flag:
  2251                           	opt stack 0
  2252  0001C9                     	ds	1
  2253  0001CA                     _Turbine_Restore_Error:
  2254                           	opt stack 0
  2255  0001CA                     	ds	1
  2256  0001CB                     _Turbine_Under_Speed_Flag:
  2257                           	opt stack 0
  2258  0001CB                     	ds	1
  2259  0001CC                     _Two_Delay_counter:
  2260                           	opt stack 0
  2261  0001CC                     	ds	1
  2262  0001CD                     _Two_Sec_Delay_vab:
  2263                           	opt stack 0
  2264  0001CD                     	ds	1
  2265  0001CE                     _Two_sec_Delay_Flag:
  2266                           	opt stack 0
  2267  0001CE                     	ds	1
  2268  0001CF                     _VFD_DC_Bus_Current_Error:
  2269                           	opt stack 0
  2270  0001CF                     	ds	1
  2271  0001D0                     _VFD_DC_Bus_High_Error:
  2272                           	opt stack 0
  2273  0001D0                     	ds	1
  2274  0001D1                     _VFD_DC_Bus_Low_Error:
  2275                           	opt stack 0
  2276  0001D1                     	ds	1
  2277  0001D2                     _VFD_DC_EXTREM_LOW_Error:
  2278                           	opt stack 0
  2279  0001D2                     	ds	1
  2280  0001D3                     _VFD_Error_Flag:
  2281                           	opt stack 0
  2282  0001D3                     	ds	1
  2283  0001D4                     _VFD_Frequency:
  2284                           	opt stack 0
  2285  0001D4                     	ds	1
  2286  0001D5                     _VFD_ON_Flag:
  2287                           	opt stack 0
  2288  0001D5                     	ds	1
  2289  0001D6                     _VFD_On_Off:
  2290                           	opt stack 0
  2291  0001D6                     	ds	1
  2292  0001D7                     _VFD_RAMP:
  2293                           	opt stack 0
  2294  0001D7                     	ds	1
  2295  0001D8                     _VFD__Run_Time_Error:
  2296                           	opt stack 0
  2297  0001D8                     	ds	1
  2298  0001D9                     _VFD_communication_Error_Counter:
  2299                           	opt stack 0
  2300  0001D9                     	ds	1
  2301  0001DA                     _Volt_Curr_Flag:
  2302                           	opt stack 0
  2303  0001DA                     	ds	1
  2304  0001DB                     _Wind_Cut_In_Flag:
  2305                           	opt stack 0
  2306  0001DB                     	ds	1
  2307  0001DC                     _Wind_Cut_Out_Counter:
  2308                           	opt stack 0
  2309  0001DC                     	ds	1
  2310  0001DD                     _Wind_Cut_Out_Flag:
  2311                           	opt stack 0
  2312  0001DD                     	ds	1
  2313  0001DE                     _Y_PF_Flag:
  2314                           	opt stack 0
  2315  0001DE                     	ds	1
  2316  0001DF                     _counter_1:
  2317                           	opt stack 0
  2318  0001DF                     	ds	1
  2319  0001E0                     _lc_Avg_Counter:
  2320                           	opt stack 0
  2321  0001E0                     	ds	1
  2322  0001E1                     _lc_Motor_Slip_Error_Counter:
  2323                           	opt stack 0
  2324  0001E1                     	ds	1
  2325  0001E2                     _lc_Pitch_Coil_Counter:
  2326                           	opt stack 0
  2327  0001E2                     	ds	1
  2328  0001E3                     _lc_Rotor_Slip_Error_Counter:
  2329                           	opt stack 0
  2330  0001E3                     	ds	1
  2331  0001E4                     _wind_1_Temp_flag:
  2332                           	opt stack 0
  2333  0001E4                     	ds	1
  2334  0001E5                     _wind_2_Temp_flag:
  2335                           	opt stack 0
  2336  0001E5                     	ds	1
  2337  0001E6                     _Bcurr_New:
  2338                           	opt stack 0
  2339  0001E6                     	ds	3
  2340  0001E9                     _Bcurr_V_New:
  2341                           	opt stack 0
  2342  0001E9                     	ds	3
  2343  0001EC                     _R_V_New:
  2344                           	opt stack 0
  2345  0001EC                     	ds	3
  2346  0001EF                     _Rcurr_New:
  2347                           	opt stack 0
  2348  0001EF                     	ds	3
  2349  0001F2                     _Rcurr_V_New:
  2350                           	opt stack 0
  2351  0001F2                     	ds	3
  2352  0001F5                     _Time_New:
  2353                           	opt stack 0
  2354  0001F5                     	ds	3
  2355  0001F8                     _Ycurr_New:
  2356                           	opt stack 0
  2357  0001F8                     	ds	3
  2358  0001FB                     _Ycurr_V_New:
  2359                           	opt stack 0
  2360  0001FB                     	ds	3
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           postinc0	equ	0xFEE
  2366                           wreg	equ	0xFE8
  2367                           postdec1	equ	0xFE5
  2368                           fsr1h	equ	0xFE2
  2369                           fsr1l	equ	0xFE1
  2370                           
  2371                           	psect	dataBANK1
  2372  0001FE                     __pdataBANK1:
  2373                           	opt stack 0
  2374  0001FE                     _Case_Call:
  2375                           	opt stack 0
  2376  0001FE                     	ds	1
  2377  0001FF                     _Start_up_Error:
  2378                           	opt stack 0
  2379  0001FF                     	ds	1
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           postinc0	equ	0xFEE
  2385                           wreg	equ	0xFE8
  2386                           postdec1	equ	0xFE5
  2387                           fsr1h	equ	0xFE2
  2388                           fsr1l	equ	0xFE1
  2389                           
  2390                           	psect	bssBANK2
  2391  000200                     __pbssBANK2:
  2392                           	opt stack 0
  2393  000200                     _Avg_RYB_Voltage:
  2394                           	opt stack 0
  2395  000200                     	ds	3
  2396  000203                     _BGR_Avg_1:
  2397                           	opt stack 0
  2398  000203                     	ds	3
  2399  000206                     _B_C_Max:
  2400                           	opt stack 0
  2401  000206                     	ds	3
  2402  000209                     _B_V_Max:
  2403                           	opt stack 0
  2404  000209                     	ds	3
  2405  00020C                     _B_V_New:
  2406                           	opt stack 0
  2407  00020C                     	ds	3
  2408  00020F                     _Bcurr_V_Old:
  2409                           	opt stack 0
  2410  00020F                     	ds	3
  2411  000212                     _DC_Bus_Current:
  2412                           	opt stack 0
  2413  000212                     	ds	3
  2414  000215                     _GENERATOR_RPM_THEORY:
  2415                           	opt stack 0
  2416  000215                     	ds	3
  2417  000218                     _Gen_Theory:
  2418                           	opt stack 0
  2419  000218                     	ds	3
  2420  00021B                     _KVA:
  2421                           	opt stack 0
  2422  00021B                     	ds	3
  2423  00021E                     _RGR_Avg_1:
  2424                           	opt stack 0
  2425  00021E                     	ds	3
  2426  000221                     _Rcurr_V_Old:
  2427                           	opt stack 0
  2428  000221                     	ds	3
  2429  000224                     _Temp:
  2430                           	opt stack 0
  2431  000224                     	ds	3
  2432  000227                     _Temprature:
  2433                           	opt stack 0
  2434  000227                     	ds	3
  2435  00022A                     _Time_Old:
  2436                           	opt stack 0
  2437  00022A                     	ds	3
  2438  00022D                     _Total_Power_Factor:
  2439                           	opt stack 0
  2440  00022D                     	ds	3
  2441  000230                     _Turbine2Wheel_Ratio_Avg:
  2442                           	opt stack 0
  2443  000230                     	ds	3
  2444  000233                     _Wind_Spd_2:
  2445                           	opt stack 0
  2446  000233                     	ds	3
  2447  000236                     _Wind_Speed:
  2448                           	opt stack 0
  2449  000236                     	ds	3
  2450  000239                     _Wind_Speed_0:
  2451                           	opt stack 0
  2452  000239                     	ds	3
  2453  00023C                     _Wind_Speed_0_2:
  2454                           	opt stack 0
  2455  00023C                     	ds	3
  2456  00023F                     _Wind_Speed_1:
  2457                           	opt stack 0
  2458  00023F                     	ds	3
  2459  000242                     _Wind_Speed_1_2:
  2460                           	opt stack 0
  2461  000242                     	ds	3
  2462  000245                     _Wind_Speed_2:
  2463                           	opt stack 0
  2464  000245                     	ds	3
  2465  000248                     _Wind_Speed_2_2:
  2466                           	opt stack 0
  2467  000248                     	ds	3
  2468  00024B                     _Wind_Speed_3:
  2469                           	opt stack 0
  2470  00024B                     	ds	3
  2471  00024E                     _Wind_Speed_3_2:
  2472                           	opt stack 0
  2473  00024E                     	ds	3
  2474  000251                     _Wind_Speed_4:
  2475                           	opt stack 0
  2476  000251                     	ds	3
  2477  000254                     _Wind_Speed_4_2:
  2478                           	opt stack 0
  2479  000254                     	ds	3
  2480  000257                     _Wind_Speed_5:
  2481                           	opt stack 0
  2482  000257                     	ds	3
  2483  00025A                     _Wind_Speed_5_2:
  2484                           	opt stack 0
  2485  00025A                     	ds	3
  2486  00025D                     _Wind_Speed_6:
  2487                           	opt stack 0
  2488  00025D                     	ds	3
  2489  000260                     _Wind_Speed_6_2:
  2490                           	opt stack 0
  2491  000260                     	ds	3
  2492  000263                     _Wind_Speed_7:
  2493                           	opt stack 0
  2494  000263                     	ds	3
  2495  000266                     _Wind_Speed_7_2:
  2496                           	opt stack 0
  2497  000266                     	ds	3
  2498  000269                     _Wind_Speed_8:
  2499                           	opt stack 0
  2500  000269                     	ds	3
  2501  00026C                     _Wind_Speed_8_2:
  2502                           	opt stack 0
  2503  00026C                     	ds	3
  2504  00026F                     _YGR_Avg_1:
  2505                           	opt stack 0
  2506  00026F                     	ds	3
  2507  000272                     _Y_C_Max:
  2508                           	opt stack 0
  2509  000272                     	ds	3
  2510  000275                     _Y_Power_Factor:
  2511                           	opt stack 0
  2512  000275                     	ds	3
  2513  000278                     _Y_V_Max:
  2514                           	opt stack 0
  2515  000278                     	ds	3
  2516  00027B                     _Y_V_New:
  2517                           	opt stack 0
  2518  00027B                     	ds	3
  2519  00027E                     _Ycurr_V_Old:
  2520                           	opt stack 0
  2521  00027E                     	ds	3
  2522  000281                     _lc_Current_T_RPM:
  2523                           	opt stack 0
  2524  000281                     	ds	3
  2525  000284                     _BV_PS:
  2526                           	opt stack 0
  2527  000284                     	ds	2
  2528  000286                     _B_C:
  2529                           	opt stack 0
  2530  000286                     	ds	2
  2531  000288                     _B_V:
  2532                           	opt stack 0
  2533  000288                     	ds	2
  2534  00028A                     _GRPM_Cap:
  2535                           	opt stack 0
  2536  00028A                     	ds	2
  2537  00028C                     _GRPM_Counter:
  2538                           	opt stack 0
  2539  00028C                     	ds	2
  2540  00028E                     _Generator_RPM_INT:
  2541                           	opt stack 0
  2542  00028E                     	ds	2
  2543  000290                     _GiData:
  2544                           	opt stack 0
  2545  000290                     	ds	2
  2546  000292                     _GiHours:
  2547                           	opt stack 0
  2548  000292                     	ds	2
  2549  000294                     _GiMinutes:
  2550                           	opt stack 0
  2551  000294                     	ds	2
  2552  000296                     _GiMonth:
  2553                           	opt stack 0
  2554  000296                     	ds	2
  2555  000298                     _GiSeconds:
  2556                           	opt stack 0
  2557  000298                     	ds	2
  2558  00029A                     _GiYear:
  2559                           	opt stack 0
  2560  00029A                     	ds	2
  2561  00029C                     _Gi_Timer1_OF_counter:
  2562                           	opt stack 0
  2563  00029C                     	ds	2
  2564  00029E                     _Gi_Timer1_OF_counter_Generator_Temp:
  2565                           	opt stack 0
  2566  00029E                     	ds	2
  2567  0002A0                     _Pitch_Counter:
  2568                           	opt stack 0
  2569  0002A0                     	ds	2
  2570  0002A2                     _Pitching_FlAG:
  2571                           	opt stack 0
  2572  0002A2                     	ds	2
  2573  0002A4                     _RV_PS:
  2574                           	opt stack 0
  2575  0002A4                     	ds	2
  2576  0002A6                     _RV_PS_Max:
  2577                           	opt stack 0
  2578  0002A6                     	ds	2
  2579  0002A8                     _R_C:
  2580                           	opt stack 0
  2581  0002A8                     	ds	2
  2582  0002AA                     _R_V:
  2583                           	opt stack 0
  2584  0002AA                     	ds	2
  2585  0002AC                     _Temp_Sensor:
  2586                           	opt stack 0
  2587  0002AC                     	ds	2
  2588  0002AE                     _Timer0_1Sec_Flag:
  2589                           	opt stack 0
  2590  0002AE                     	ds	2
  2591  0002B0                     _Timer1_OF_counter_Generator:
  2592                           	opt stack 0
  2593  0002B0                     	ds	2
  2594  0002B2                     _Timer1_OF_counter_Generator_Old:
  2595                           	opt stack 0
  2596  0002B2                     	ds	2
  2597  0002B4                     _Timer1_OF_counter_Old:
  2598                           	opt stack 0
  2599  0002B4                     	ds	2
  2600  0002B6                     _Timer1_OF_counter_Turbine:
  2601                           	opt stack 0
  2602  0002B6                     	ds	2
  2603  0002B8                     _Timer1_OF_counter_Wind:
  2604                           	opt stack 0
  2605  0002B8                     	ds	2
  2606  0002BA                     _Timer1_OF_counter_Wind_2:
  2607                           	opt stack 0
  2608  0002BA                     	ds	2
  2609  0002BC                     _Timer1_OF_counter_Wind_2_temp_New:
  2610                           	opt stack 0
  2611  0002BC                     	ds	2
  2612  0002BE                     _Timer1_OF_counter_Wind_2_temp_Old:
  2613                           	opt stack 0
  2614  0002BE                     	ds	2
  2615  0002C0                     _Timer1_OF_counter_Wind_temp:
  2616                           	opt stack 0
  2617  0002C0                     	ds	2
  2618  0002C2                     _Timer1_OF_counter_Wind_temp_Old:
  2619                           	opt stack 0
  2620  0002C2                     	ds	2
  2621  0002C4                     _VFD_SHORT_CIRCUIT_fLAG:
  2622                           	opt stack 0
  2623  0002C4                     	ds	2
  2624  0002C6                     _WRPM_Counter:
  2625                           	opt stack 0
  2626  0002C6                     	ds	2
  2627  0002C8                     _WRPM_Counter_1:
  2628                           	opt stack 0
  2629  0002C8                     	ds	2
  2630  0002CA                     _Wind_Cap:
  2631                           	opt stack 0
  2632  0002CA                     	ds	2
  2633  0002CC                     _YV_PS:
  2634                           	opt stack 0
  2635  0002CC                     	ds	2
  2636  0002CE                     _YV_PS_Max:
  2637                           	opt stack 0
  2638  0002CE                     	ds	2
  2639  0002D0                     _Y_C:
  2640                           	opt stack 0
  2641  0002D0                     	ds	2
  2642  0002D2                     _Y_V:
  2643                           	opt stack 0
  2644  0002D2                     	ds	2
  2645  0002D4                     _Check:
  2646                           	opt stack 0
  2647  0002D4                     	ds	1
  2648  0002D5                     _Consumption:
  2649                           	opt stack 0
  2650  0002D5                     	ds	1
  2651  0002D6                     _Five_sec_Delay_Flag:
  2652                           	opt stack 0
  2653  0002D6                     	ds	1
  2654  0002D7                     _Gc_VFD_DC_Bus_Error:
  2655                           	opt stack 0
  2656  0002D7                     	ds	1
  2657  0002D8                     _Hours:
  2658                           	opt stack 0
  2659  0002D8                     	ds	1
  2660  0002D9                     _Initial_Check:
  2661                           	opt stack 0
  2662  0002D9                     	ds	1
  2663  0002DA                     _Lead_Lag:
  2664                           	opt stack 0
  2665  0002DA                     	ds	1
  2666  0002DB                     _PF_Lead_Lag:
  2667                           	opt stack 0
  2668  0002DB                     	ds	1
  2669  0002DC                     _PW_Error_Flag:
  2670                           	opt stack 0
  2671  0002DC                     	ds	1
  2672  0002DD                     _Start_Stop_Flag_1:
  2673                           	opt stack 0
  2674  0002DD                     	ds	1
  2675  0002DE                     _Temp_1:
  2676                           	opt stack 0
  2677  0002DE                     	ds	1
  2678  0002DF                     _Temp_2:
  2679                           	opt stack 0
  2680  0002DF                     	ds	1
  2681  0002E0                     _Temp_3:
  2682                           	opt stack 0
  2683  0002E0                     	ds	1
  2684  0002E1                     _Temp_4:
  2685                           	opt stack 0
  2686  0002E1                     	ds	1
  2687  0002E2                     _Temp_5:
  2688                           	opt stack 0
  2689  0002E2                     	ds	1
  2690  0002E3                     _Temp_6:
  2691                           	opt stack 0
  2692  0002E3                     	ds	1
  2693  0002E4                     _lcDC_Bus_Counter:
  2694                           	opt stack 0
  2695  0002E4                     	ds	1
  2696  0002E5                     _BGR_Avg:
  2697                           	opt stack 0
  2698  0002E5                     	ds	3
  2699  0002E8                     _GRPM_Time_1:
  2700                           	opt stack 0
  2701  0002E8                     	ds	3
  2702  0002EB                     _RGR_Avg:
  2703                           	opt stack 0
  2704  0002EB                     	ds	3
  2705  0002EE                     _YGR_Avg:
  2706                           	opt stack 0
  2707  0002EE                     	ds	3
  2708  0002F1                     _Y_KW:
  2709                           	opt stack 0
  2710  0002F1                     	ds	3
  2711  0002F4                     _GRPM_Pulse_width:
  2712                           	opt stack 0
  2713  0002F4                     	ds	2
  2714  0002F6                     _Hours_1:
  2715                           	opt stack 0
  2716  0002F6                     	ds	2
  2717  0002F8                     _Hours_2:
  2718                           	opt stack 0
  2719  0002F8                     	ds	2
  2720  0002FA                     _RPM_PWM:
  2721                           	opt stack 0
  2722  0002FA                     	ds	2
  2723  0002FC                     _Wind_Pulse_width:
  2724                           	opt stack 0
  2725  0002FC                     	ds	2
  2726  0002FE                     _Wind_Pulse_width_2:
  2727                           	opt stack 0
  2728  0002FE                     	ds	2
  2729                           tblptru	equ	0xFF8
  2730                           tblptrh	equ	0xFF7
  2731                           tblptrl	equ	0xFF6
  2732                           tablat	equ	0xFF5
  2733                           postinc0	equ	0xFEE
  2734                           wreg	equ	0xFE8
  2735                           postdec1	equ	0xFE5
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           
  2739                           	psect	bssBANK3
  2740  000300                     __pbssBANK3:
  2741                           	opt stack 0
  2742  000300                     _RGR_Arr:
  2743                           	opt stack 0
  2744  000300                     	ds	90
  2745  00035A                     _YGR_Arr:
  2746                           	opt stack 0
  2747  00035A                     	ds	90
  2748  0003B4                     _Temp_Arr:
  2749                           	opt stack 0
  2750  0003B4                     	ds	18
  2751  0003C6                     _BGR_Arr_1:
  2752                           	opt stack 0
  2753  0003C6                     	ds	15
  2754  0003D5                     _RGR_Arr_1:
  2755                           	opt stack 0
  2756  0003D5                     	ds	15
  2757  0003E4                     _YGR_Arr_1:
  2758                           	opt stack 0
  2759  0003E4                     	ds	15
  2760  0003F3                     _R_V_Arr:
  2761                           	opt stack 0
  2762  0003F3                     	ds	9
  2763  0003FC                     _BV_PS_Max:
  2764                           	opt stack 0
  2765  0003FC                     	ds	2
  2766  0003FE                     _Pitch_Ps_Counter:
  2767                           	opt stack 0
  2768  0003FE                     	ds	2
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           tblptrl	equ	0xFF6
  2772                           tablat	equ	0xFF5
  2773                           postinc0	equ	0xFEE
  2774                           wreg	equ	0xFE8
  2775                           postdec1	equ	0xFE5
  2776                           fsr1h	equ	0xFE2
  2777                           fsr1l	equ	0xFE1
  2778                           
  2779                           	psect	bssBANK4
  2780  000400                     __pbssBANK4:
  2781                           	opt stack 0
  2782  000400                     _BGR_Arr:
  2783                           	opt stack 0
  2784  000400                     	ds	90
  2785  00045A                     _B_C_Arr:
  2786                           	opt stack 0
  2787  00045A                     	ds	9
  2788  000463                     _B_V_Arr:
  2789                           	opt stack 0
  2790  000463                     	ds	9
  2791  00046C                     _R_C_Arr:
  2792                           	opt stack 0
  2793  00046C                     	ds	9
  2794  000475                     _Y_C_Arr:
  2795                           	opt stack 0
  2796  000475                     	ds	9
  2797  00047E                     _Y_V_Arr:
  2798                           	opt stack 0
  2799  00047E                     	ds	9
  2800  000487                     _B_V_Old:
  2801                           	opt stack 0
  2802  000487                     	ds	3
  2803  00048A                     _GRPM_Time:
  2804                           	opt stack 0
  2805  00048A                     	ds	3
  2806  00048D                     _Gf_Turbine2Wheel_Ratio:
  2807                           	opt stack 0
  2808  00048D                     	ds	3
  2809  000490                     _KVAr:
  2810                           	opt stack 0
  2811  000490                     	ds	3
  2812  000493                     _PWM_Temp:
  2813                           	opt stack 0
  2814  000493                     	ds	3
  2815  000496                     _RAMP_UP_GENERATOR_CUT_IN_RPM:
  2816                           	opt stack 0
  2817  000496                     	ds	3
  2818  000499                     _RAMP_UP_TURBINE_CUT_IN_RPM:
  2819                           	opt stack 0
  2820  000499                     	ds	3
  2821  00049C                     _R_C_Gap:
  2822                           	opt stack 0
  2823  00049C                     	ds	3
  2824  00049F                     _R_Power_Factor:
  2825                           	opt stack 0
  2826  00049F                     	ds	3
  2827  0004A2                     _R_Rad:
  2828                           	opt stack 0
  2829  0004A2                     	ds	3
  2830  0004A5                     _R_V_Gap:
  2831                           	opt stack 0
  2832  0004A5                     	ds	3
  2833  0004A8                     _TURBINE_RPM_THEORY:
  2834                           	opt stack 0
  2835  0004A8                     	ds	3
  2836  0004AB                     _Turb_RPM:
  2837                           	opt stack 0
  2838  0004AB                     	ds	3
  2839  0004AE                     _Wind:
  2840                           	opt stack 0
  2841  0004AE                     	ds	3
  2842  0004B1                     _Wind_Frequency:
  2843                           	opt stack 0
  2844  0004B1                     	ds	3
  2845  0004B4                     _Wind_Speed_9:
  2846                           	opt stack 0
  2847  0004B4                     	ds	3
  2848  0004B7                     _Wind_Speed_9_2:
  2849                           	opt stack 0
  2850  0004B7                     	ds	3
  2851  0004BA                     _Wind_Speed_Avg_2:
  2852                           	opt stack 0
  2853  0004BA                     	ds	3
  2854  0004BD                     _Wind_Time:
  2855                           	opt stack 0
  2856  0004BD                     	ds	3
  2857  0004C0                     _Wind_Time_2:
  2858                           	opt stack 0
  2859  0004C0                     	ds	3
  2860  0004C3                     _Y_C_Gap:
  2861                           	opt stack 0
  2862  0004C3                     	ds	3
  2863  0004C6                     _Y_Rad:
  2864                           	opt stack 0
  2865  0004C6                     	ds	3
  2866  0004C9                     _Y_V_Gap:
  2867                           	opt stack 0
  2868  0004C9                     	ds	3
  2869  0004CC                     _Y_V_Old:
  2870                           	opt stack 0
  2871  0004CC                     	ds	3
  2872  0004CF                     _lc_Previous_T_RPM:
  2873                           	opt stack 0
  2874  0004CF                     	ds	3
  2875  0004D2                     _lc_T_RPM:
  2876                           	opt stack 0
  2877  0004D2                     	ds	3
  2878  0004D5                     _wind_2:
  2879                           	opt stack 0
  2880  0004D5                     	ds	3
  2881  0004D8                     _wind_Frequency_2:
  2882                           	opt stack 0
  2883  0004D8                     	ds	3
  2884  0004DB                     _B_C_Avg_Steps:
  2885                           	opt stack 0
  2886  0004DB                     	ds	3
  2887  0004DE                     _B_V_Avg_Steps:
  2888                           	opt stack 0
  2889  0004DE                     	ds	3
  2890  0004E1                     _GRPM_Frequency:
  2891                           	opt stack 0
  2892  0004E1                     	ds	3
  2893  0004E4                     _R_C_Avg_Steps:
  2894                           	opt stack 0
  2895  0004E4                     	ds	3
  2896  0004E7                     _R_V_Avg_Steps:
  2897                           	opt stack 0
  2898  0004E7                     	ds	3
  2899  0004EA                     _TRPM_Frequency:
  2900                           	opt stack 0
  2901  0004EA                     	ds	3
  2902  0004ED                     _TRPM_Time:
  2903                           	opt stack 0
  2904  0004ED                     	ds	3
  2905  0004F0                     _Time_Diff:
  2906                           	opt stack 0
  2907  0004F0                     	ds	3
  2908  0004F3                     _Wind_Time_1:
  2909                           	opt stack 0
  2910  0004F3                     	ds	3
  2911  0004F6                     _Y_C_Avg_Steps:
  2912                           	opt stack 0
  2913  0004F6                     	ds	3
  2914  0004F9                     _Y_V_Avg_Steps:
  2915                           	opt stack 0
  2916  0004F9                     	ds	3
  2917  0004FC                     _wind_Time_1_2:
  2918                           	opt stack 0
  2919  0004FC                     	ds	3
  2920                           tblptru	equ	0xFF8
  2921                           tblptrh	equ	0xFF7
  2922                           tblptrl	equ	0xFF6
  2923                           tablat	equ	0xFF5
  2924                           postinc0	equ	0xFEE
  2925                           wreg	equ	0xFE8
  2926                           postdec1	equ	0xFE5
  2927                           fsr1h	equ	0xFE2
  2928                           fsr1l	equ	0xFE1
  2929                           
  2930                           	psect	bssBANK5
  2931  000500                     __pbssBANK5:
  2932                           	opt stack 0
  2933  000500                     _Data_1:
  2934                           	opt stack 0
  2935  000500                     	ds	22
  2936  000516                     _B_C_Gap:
  2937                           	opt stack 0
  2938  000516                     	ds	3
  2939  000519                     _B_Current:
  2940                           	opt stack 0
  2941  000519                     	ds	3
  2942  00051C                     _B_Current_1:
  2943                           	opt stack 0
  2944  00051C                     	ds	3
  2945  00051F                     _B_Power_Factor:
  2946                           	opt stack 0
  2947  00051F                     	ds	3
  2948  000522                     _B_Rad:
  2949                           	opt stack 0
  2950  000522                     	ds	3
  2951  000525                     _B_V_Gap:
  2952                           	opt stack 0
  2953  000525                     	ds	3
  2954  000528                     _Frequency_1:
  2955                           	opt stack 0
  2956  000528                     	ds	3
  2957  00052B                     _Generator_RPM_0:
  2958                           	opt stack 0
  2959  00052B                     	ds	3
  2960  00052E                     _Generator_RPM_1:
  2961                           	opt stack 0
  2962  00052E                     	ds	3
  2963  000531                     _Generator_RPM_10:
  2964                           	opt stack 0
  2965  000531                     	ds	3
  2966  000534                     _Generator_RPM_2:
  2967                           	opt stack 0
  2968  000534                     	ds	3
  2969  000537                     _Generator_RPM_3:
  2970                           	opt stack 0
  2971  000537                     	ds	3
  2972  00053A                     _Generator_RPM_4:
  2973                           	opt stack 0
  2974  00053A                     	ds	3
  2975  00053D                     _Generator_RPM_5:
  2976                           	opt stack 0
  2977  00053D                     	ds	3
  2978  000540                     _Generator_RPM_6:
  2979                           	opt stack 0
  2980  000540                     	ds	3
  2981  000543                     _Generator_RPM_7:
  2982                           	opt stack 0
  2983  000543                     	ds	3
  2984  000546                     _Generator_RPM_8:
  2985                           	opt stack 0
  2986  000546                     	ds	3
  2987  000549                     _Generator_RPM_9:
  2988                           	opt stack 0
  2989  000549                     	ds	3
  2990  00054C                     _GfB_current:
  2991                           	opt stack 0
  2992  00054C                     	ds	3
  2993  00054F                     _GfB_volt:
  2994                           	opt stack 0
  2995  00054F                     	ds	3
  2996  000552                     _GfG_rpm:
  2997                           	opt stack 0
  2998  000552                     	ds	3
  2999  000555                     _GfKva:
  3000                           	opt stack 0
  3001  000555                     	ds	3
  3002  000558                     _GfKvar:
  3003                           	opt stack 0
  3004  000558                     	ds	3
  3005  00055B                     _GfKw:
  3006                           	opt stack 0
  3007  00055B                     	ds	3
  3008  00055E                     _GfR_current:
  3009                           	opt stack 0
  3010  00055E                     	ds	3
  3011  000561                     _GfR_volt:
  3012                           	opt stack 0
  3013  000561                     	ds	3
  3014  000564                     _GfT_rpm:
  3015                           	opt stack 0
  3016  000564                     	ds	3
  3017  000567                     _GfY_current:
  3018                           	opt stack 0
  3019  000567                     	ds	3
  3020  00056A                     _GfY_volt:
  3021                           	opt stack 0
  3022  00056A                     	ds	3
  3023  00056D                     _Gf_Blue_Phase_Voltage:
  3024                           	opt stack 0
  3025  00056D                     	ds	3
  3026  000570                     _Gf_Grid_Frequency:
  3027                           	opt stack 0
  3028  000570                     	ds	3
  3029  000573                     _Gf_KW:
  3030                           	opt stack 0
  3031  000573                     	ds	3
  3032  000576                     _Gf_Red_Current:
  3033                           	opt stack 0
  3034  000576                     	ds	3
  3035  000579                     _Gf_Red_Phase_Voltage:
  3036                           	opt stack 0
  3037  000579                     	ds	3
  3038  00057C                     _Gf_TRPM_Frequency:
  3039                           	opt stack 0
  3040  00057C                     	ds	3
  3041  00057F                     _Gf_TRPM_Time:
  3042                           	opt stack 0
  3043  00057F                     	ds	3
  3044  000582                     _Gf_TRPM_Time_1:
  3045                           	opt stack 0
  3046  000582                     	ds	3
  3047  000585                     _Gf_Turbine_RPM_1:
  3048                           	opt stack 0
  3049  000585                     	ds	3
  3050  000588                     _Gf_Turbine_RPM_Prev:
  3051                           	opt stack 0
  3052  000588                     	ds	3
  3053  00058B                     _Gf_Yellow_Phase_Voltage:
  3054                           	opt stack 0
  3055  00058B                     	ds	3
  3056  00058E                     _Gfwind:
  3057                           	opt stack 0
  3058  00058E                     	ds	3
  3059  000591                     _KVA_1:
  3060                           	opt stack 0
  3061  000591                     	ds	3
  3062  000594                     _KVAr_1:
  3063                           	opt stack 0
  3064  000594                     	ds	3
  3065  000597                     _KW_1:
  3066                           	opt stack 0
  3067  000597                     	ds	3
  3068  00059A                     _Motor_slip_1:
  3069                           	opt stack 0
  3070  00059A                     	ds	3
  3071  00059D                     _R_Current:
  3072                           	opt stack 0
  3073  00059D                     	ds	3
  3074  0005A0                     _R_Current_1:
  3075                           	opt stack 0
  3076  0005A0                     	ds	3
  3077  0005A3                     _Rotor_slip_1:
  3078                           	opt stack 0
  3079  0005A3                     	ds	3
  3080  0005A6                     _Temp_sign:
  3081                           	opt stack 0
  3082  0005A6                     	ds	3
  3083  0005A9                     _Timer1_Time_per_Count:
  3084                           	opt stack 0
  3085  0005A9                     	ds	3
  3086  0005AC                     _Timer_1_OverFlow_Time:
  3087                           	opt stack 0
  3088  0005AC                     	ds	3
  3089  0005AF                     _Total_Pf:
  3090                           	opt stack 0
  3091  0005AF                     	ds	3
  3092  0005B2                     _Total_Pf_1:
  3093                           	opt stack 0
  3094  0005B2                     	ds	3
  3095  0005B5                     _Wind_Speed_10:
  3096                           	opt stack 0
  3097  0005B5                     	ds	3
  3098  0005B8                     _Wind_Speed_10_2:
  3099                           	opt stack 0
  3100  0005B8                     	ds	3
  3101  0005BB                     _Y_Current:
  3102                           	opt stack 0
  3103  0005BB                     	ds	3
  3104  0005BE                     _Y_Current_1:
  3105                           	opt stack 0
  3106  0005BE                     	ds	3
  3107  0005C1                     _Dummy:
  3108                           	opt stack 0
  3109  0005C1                     	ds	2
  3110  0005C3                     _Flag_temp:
  3111                           	opt stack 0
  3112  0005C3                     	ds	2
  3113  0005C5                     _G_RPM_counter_1:
  3114                           	opt stack 0
  3115  0005C5                     	ds	2
  3116  0005C7                     _GiDay:
  3117                           	opt stack 0
  3118  0005C7                     	ds	2
  3119  0005C9                     _Gi_TRPM_Cap:
  3120                           	opt stack 0
  3121  0005C9                     	ds	2
  3122  0005CB                     _Gi_TRPM_Cap_New:
  3123                           	opt stack 0
  3124  0005CB                     	ds	2
  3125  0005CD                     _Gi_TRPM_Cap_Old:
  3126                           	opt stack 0
  3127  0005CD                     	ds	2
  3128  0005CF                     _Gi_TRPM_Pulse_width:
  3129                           	opt stack 0
  3130  0005CF                     	ds	2
  3131  0005D1                     _RPM_Time_1:
  3132                           	opt stack 0
  3133  0005D1                     	ds	2
  3134  0005D3                     _Slave_Id:
  3135                           	opt stack 0
  3136  0005D3                     	ds	2
  3137  0005D5                     _T1:
  3138                           	opt stack 0
  3139  0005D5                     	ds	2
  3140  0005D7                     _TEMP_1:
  3141                           	opt stack 0
  3142  0005D7                     	ds	2
  3143  0005D9                     _Timer0_RS485_flag:
  3144                           	opt stack 0
  3145  0005D9                     	ds	2
  3146  0005DB                     _Timer0_counter:
  3147                           	opt stack 0
  3148  0005DB                     	ds	2
  3149  0005DD                     _Timer1_OF_counter_Wind_2_temp:
  3150                           	opt stack 0
  3151  0005DD                     	ds	2
  3152  0005DF                     _VFD_Temp_counter:
  3153                           	opt stack 0
  3154  0005DF                     	ds	2
  3155  0005E1                     _Wind_Cap_2:
  3156                           	opt stack 0
  3157  0005E1                     	ds	2
  3158  0005E3                     _counter:
  3159                           	opt stack 0
  3160  0005E3                     	ds	2
  3161  0005E5                     _data:
  3162                           	opt stack 0
  3163  0005E5                     	ds	2
  3164  0005E7                     _digit1:
  3165                           	opt stack 0
  3166  0005E7                     	ds	2
  3167  0005E9                     _digit2:
  3168                           	opt stack 0
  3169  0005E9                     	ds	2
  3170  0005EB                     _digit3:
  3171                           	opt stack 0
  3172  0005EB                     	ds	2
  3173  0005ED                     _digit4:
  3174                           	opt stack 0
  3175  0005ED                     	ds	2
  3176  0005EF                     _digit5:
  3177                           	opt stack 0
  3178  0005EF                     	ds	2
  3179  0005F1                     _errno:
  3180                           	opt stack 0
  3181  0005F1                     	ds	2
  3182  0005F3                     _rtc:
  3183                           	opt stack 0
  3184  0005F3                     	ds	7
  3185  0005FA                     _Mot_Frequency:
  3186                           	opt stack 0
  3187  0005FA                     	ds	3
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1h	equ	0xFE2
  3196                           fsr1l	equ	0xFE1
  3197                           
  3198                           	psect	dataBANK5
  3199  0005FD                     __pdataBANK5:
  3200                           	opt stack 0
  3201  0005FD                     _VFD_Counter:
  3202                           	opt stack 0
  3203  0005FD                     	ds	2
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           postinc0	equ	0xFEE
  3209                           wreg	equ	0xFE8
  3210                           postdec1	equ	0xFE5
  3211                           fsr1h	equ	0xFE2
  3212                           fsr1l	equ	0xFE1
  3213                           
  3214                           	psect	bssBANK6
  3215  000600                     __pbssBANK6:
  3216                           	opt stack 0
  3217  000600                     _Data:
  3218                           	opt stack 0
  3219  000600                     	ds	60
  3220  00063C                     _Avg_Current:
  3221                           	opt stack 0
  3222  00063C                     	ds	3
  3223  00063F                     _Avg_Voltage:
  3224                           	opt stack 0
  3225  00063F                     	ds	3
  3226  000642                     _B_Deg:
  3227                           	opt stack 0
  3228  000642                     	ds	3
  3229  000645                     _Bcurr_Old:
  3230                           	opt stack 0
  3231  000645                     	ds	3
  3232  000648                     _Gf_Blue_Current:
  3233                           	opt stack 0
  3234  000648                     	ds	3
  3235  00064B                     _Gf_Motor_Slip:
  3236                           	opt stack 0
  3237  00064B                     	ds	3
  3238  00064E                     _Gf_Rotor_Slip:
  3239                           	opt stack 0
  3240  00064E                     	ds	3
  3241  000651                     _Gf_VFD_DC_Bus_Voltage:
  3242                           	opt stack 0
  3243  000651                     	ds	3
  3244  000654                     _Gf_Yellow_Current:
  3245                           	opt stack 0
  3246  000654                     	ds	3
  3247  000657                     _R_Deg:
  3248                           	opt stack 0
  3249  000657                     	ds	3
  3250  00065A                     _Rcurr_Old:
  3251                           	opt stack 0
  3252  00065A                     	ds	3
  3253  00065D                     _Temperature_Avg:
  3254                           	opt stack 0
  3255  00065D                     	ds	3
  3256  000660                     _Y_Deg:
  3257                           	opt stack 0
  3258  000660                     	ds	3
  3259  000663                     _Ycurr_Old:
  3260                           	opt stack 0
  3261  000663                     	ds	3
  3262                           tblptru	equ	0xFF8
  3263                           tblptrh	equ	0xFF7
  3264                           tblptrl	equ	0xFF6
  3265                           tablat	equ	0xFF5
  3266                           postinc0	equ	0xFEE
  3267                           wreg	equ	0xFE8
  3268                           postdec1	equ	0xFE5
  3269                           fsr1h	equ	0xFE2
  3270                           fsr1l	equ	0xFE1
  3271                           
  3272                           	psect	cstackBANK6
  3273  000666                     __pcstackBANK6:
  3274                           	opt stack 0
  3275  000666                     _R_PF_Avg$8121:
  3276                           	opt stack 0
  3277  000666                     _Y_PF_Avg$8150:
  3278                           	opt stack 0
  3279  000666                     _B_PF_Avg$8179:
  3280                           	opt stack 0
  3281                           
  3282                           ; 3 bytes @ 0x0
  3283  000666                     	ds	3
  3284  000669                     _R_PF_Avg$8122:
  3285                           	opt stack 0
  3286  000669                     _Y_PF_Avg$8151:
  3287                           	opt stack 0
  3288  000669                     _B_PF_Avg$8180:
  3289                           	opt stack 0
  3290                           
  3291                           ; 3 bytes @ 0x3
  3292  000669                     	ds	3
  3293  00066C                     _R_PF_Avg$8123:
  3294                           	opt stack 0
  3295  00066C                     _Y_PF_Avg$8152:
  3296                           	opt stack 0
  3297  00066C                     _B_PF_Avg$8181:
  3298                           	opt stack 0
  3299                           
  3300                           ; 3 bytes @ 0x6
  3301  00066C                     	ds	3
  3302  00066F                     _R_PF_Avg$8124:
  3303                           	opt stack 0
  3304  00066F                     _Y_PF_Avg$8153:
  3305                           	opt stack 0
  3306  00066F                     _B_PF_Avg$8182:
  3307                           	opt stack 0
  3308                           
  3309                           ; 3 bytes @ 0x9
  3310  00066F                     	ds	3
  3311  000672                     _R_PF_Avg$8125:
  3312                           	opt stack 0
  3313  000672                     _Y_PF_Avg$8154:
  3314                           	opt stack 0
  3315  000672                     _B_PF_Avg$8183:
  3316                           	opt stack 0
  3317                           
  3318                           ; 3 bytes @ 0xC
  3319  000672                     	ds	3
  3320  000675                     _R_PF_Avg$8126:
  3321                           	opt stack 0
  3322  000675                     _Y_PF_Avg$8155:
  3323                           	opt stack 0
  3324  000675                     _B_PF_Avg$8184:
  3325                           	opt stack 0
  3326                           
  3327                           ; 3 bytes @ 0xF
  3328  000675                     	ds	3
  3329  000678                     _R_PF_Avg$8127:
  3330                           	opt stack 0
  3331  000678                     _Y_PF_Avg$8156:
  3332                           	opt stack 0
  3333  000678                     _B_PF_Avg$8185:
  3334                           	opt stack 0
  3335                           
  3336                           ; 3 bytes @ 0x12
  3337  000678                     	ds	3
  3338  00067B                     _R_PF_Avg$8128:
  3339                           	opt stack 0
  3340  00067B                     _Y_PF_Avg$8157:
  3341                           	opt stack 0
  3342  00067B                     _B_PF_Avg$8186:
  3343                           	opt stack 0
  3344                           
  3345                           ; 3 bytes @ 0x15
  3346  00067B                     	ds	3
  3347  00067E                     _R_PF_Avg$8129:
  3348                           	opt stack 0
  3349  00067E                     _Y_PF_Avg$8158:
  3350                           	opt stack 0
  3351  00067E                     _B_PF_Avg$8187:
  3352                           	opt stack 0
  3353                           
  3354                           ; 3 bytes @ 0x18
  3355  00067E                     	ds	3
  3356  000681                     _R_PF_Avg$8130:
  3357                           	opt stack 0
  3358  000681                     _Y_PF_Avg$8159:
  3359                           	opt stack 0
  3360  000681                     _B_PF_Avg$8188:
  3361                           	opt stack 0
  3362                           
  3363                           ; 3 bytes @ 0x1B
  3364  000681                     	ds	3
  3365  000684                     _R_PF_Avg$8131:
  3366                           	opt stack 0
  3367  000684                     _Y_PF_Avg$8160:
  3368                           	opt stack 0
  3369  000684                     _B_PF_Avg$8189:
  3370                           	opt stack 0
  3371                           
  3372                           ; 3 bytes @ 0x1E
  3373  000684                     	ds	3
  3374  000687                     _R_PF_Avg$8132:
  3375                           	opt stack 0
  3376  000687                     _Y_PF_Avg$8161:
  3377                           	opt stack 0
  3378  000687                     _B_PF_Avg$8190:
  3379                           	opt stack 0
  3380                           
  3381                           ; 3 bytes @ 0x21
  3382  000687                     	ds	3
  3383  00068A                     _R_PF_Avg$8133:
  3384                           	opt stack 0
  3385  00068A                     _Y_PF_Avg$8162:
  3386                           	opt stack 0
  3387  00068A                     _B_PF_Avg$8191:
  3388                           	opt stack 0
  3389                           
  3390                           ; 3 bytes @ 0x24
  3391  00068A                     	ds	3
  3392  00068D                     _R_PF_Avg$8134:
  3393                           	opt stack 0
  3394  00068D                     _Y_PF_Avg$8163:
  3395                           	opt stack 0
  3396  00068D                     _B_PF_Avg$8192:
  3397                           	opt stack 0
  3398                           
  3399                           ; 3 bytes @ 0x27
  3400  00068D                     	ds	3
  3401  000690                     _R_PF_Avg$8135:
  3402                           	opt stack 0
  3403  000690                     _Y_PF_Avg$8164:
  3404                           	opt stack 0
  3405  000690                     _B_PF_Avg$8193:
  3406                           	opt stack 0
  3407                           
  3408                           ; 3 bytes @ 0x2A
  3409  000690                     	ds	3
  3410  000693                     _R_PF_Avg$8136:
  3411                           	opt stack 0
  3412  000693                     _Y_PF_Avg$8165:
  3413                           	opt stack 0
  3414  000693                     _B_PF_Avg$8194:
  3415                           	opt stack 0
  3416                           
  3417                           ; 3 bytes @ 0x2D
  3418  000693                     	ds	3
  3419  000696                     _R_PF_Avg$8137:
  3420                           	opt stack 0
  3421  000696                     _Y_PF_Avg$8166:
  3422                           	opt stack 0
  3423  000696                     _B_PF_Avg$8195:
  3424                           	opt stack 0
  3425                           
  3426                           ; 3 bytes @ 0x30
  3427  000696                     	ds	3
  3428  000699                     _R_PF_Avg$8138:
  3429                           	opt stack 0
  3430  000699                     _Y_PF_Avg$8167:
  3431                           	opt stack 0
  3432  000699                     _B_PF_Avg$8196:
  3433                           	opt stack 0
  3434                           
  3435                           ; 3 bytes @ 0x33
  3436  000699                     	ds	3
  3437  00069C                     _R_PF_Avg$8139:
  3438                           	opt stack 0
  3439  00069C                     _Y_PF_Avg$8168:
  3440                           	opt stack 0
  3441  00069C                     _B_PF_Avg$8197:
  3442                           	opt stack 0
  3443                           
  3444                           ; 3 bytes @ 0x36
  3445  00069C                     	ds	3
  3446  00069F                     _R_PF_Avg$8140:
  3447                           	opt stack 0
  3448  00069F                     _Y_PF_Avg$8169:
  3449                           	opt stack 0
  3450  00069F                     _B_PF_Avg$8198:
  3451                           	opt stack 0
  3452                           
  3453                           ; 3 bytes @ 0x39
  3454  00069F                     	ds	3
  3455  0006A2                     _R_PF_Avg$8141:
  3456                           	opt stack 0
  3457  0006A2                     _Y_PF_Avg$8170:
  3458                           	opt stack 0
  3459  0006A2                     _B_PF_Avg$8199:
  3460                           	opt stack 0
  3461                           
  3462                           ; 3 bytes @ 0x3C
  3463  0006A2                     	ds	3
  3464  0006A5                     _R_PF_Avg$8142:
  3465                           	opt stack 0
  3466  0006A5                     _Y_PF_Avg$8171:
  3467                           	opt stack 0
  3468  0006A5                     _B_PF_Avg$8200:
  3469                           	opt stack 0
  3470                           
  3471                           ; 3 bytes @ 0x3F
  3472  0006A5                     	ds	3
  3473  0006A8                     _R_PF_Avg$8143:
  3474                           	opt stack 0
  3475  0006A8                     _Y_PF_Avg$8172:
  3476                           	opt stack 0
  3477  0006A8                     _B_PF_Avg$8201:
  3478                           	opt stack 0
  3479                           
  3480                           ; 3 bytes @ 0x42
  3481  0006A8                     	ds	3
  3482  0006AB                     _R_PF_Avg$8144:
  3483                           	opt stack 0
  3484  0006AB                     _Y_PF_Avg$8173:
  3485                           	opt stack 0
  3486  0006AB                     _B_PF_Avg$8202:
  3487                           	opt stack 0
  3488                           
  3489                           ; 3 bytes @ 0x45
  3490  0006AB                     	ds	3
  3491  0006AE                     _R_PF_Avg$8145:
  3492                           	opt stack 0
  3493  0006AE                     _Y_PF_Avg$8174:
  3494                           	opt stack 0
  3495  0006AE                     _B_PF_Avg$8203:
  3496                           	opt stack 0
  3497                           
  3498                           ; 3 bytes @ 0x48
  3499  0006AE                     	ds	3
  3500  0006B1                     _R_PF_Avg$8118:
  3501                           	opt stack 0
  3502  0006B1                     _Y_PF_Avg$8147:
  3503                           	opt stack 0
  3504  0006B1                     _B_PF_Avg$8176:
  3505                           	opt stack 0
  3506                           
  3507                           ; 3 bytes @ 0x4B
  3508  0006B1                     	ds	3
  3509  0006B4                     _R_PF_Avg$8119:
  3510                           	opt stack 0
  3511  0006B4                     _Y_PF_Avg$8148:
  3512                           	opt stack 0
  3513  0006B4                     _B_PF_Avg$8177:
  3514                           	opt stack 0
  3515                           
  3516                           ; 3 bytes @ 0x4E
  3517  0006B4                     	ds	3
  3518  0006B7                     _R_PF_Avg$8120:
  3519                           	opt stack 0
  3520  0006B7                     _Y_PF_Avg$8149:
  3521                           	opt stack 0
  3522  0006B7                     _B_PF_Avg$8178:
  3523                           	opt stack 0
  3524                           
  3525                           ; 3 bytes @ 0x51
  3526  0006B7                     	ds	3
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           postinc0	equ	0xFEE
  3532                           wreg	equ	0xFE8
  3533                           postdec1	equ	0xFE5
  3534                           fsr1h	equ	0xFE2
  3535                           fsr1l	equ	0xFE1
  3536                           
  3537                           	psect	cstackBANK0
  3538  000060                     __pcstackBANK0:
  3539                           	opt stack 0
  3540  000060                     ?___lbtoft:
  3541                           	opt stack 0
  3542  000060                     ?___lltoft:
  3543                           	opt stack 0
  3544  000060                     ?___lwtoft:
  3545                           	opt stack 0
  3546  000060                     ___awdiv@counter:
  3547                           	opt stack 0
  3548  000060                     ___lwtoft@c:
  3549                           	opt stack 0
  3550  000060                     __div_to_l_@quot:
  3551                           	opt stack 0
  3552  000060                     __tdiv_to_l_@quot:
  3553                           	opt stack 0
  3554  000060                     ___lldiv@quotient:
  3555                           	opt stack 0
  3556  000060                     ___lltoft@c:
  3557                           	opt stack 0
  3558                           
  3559                           ; 4 bytes @ 0x0
  3560  000060                     	ds	1
  3561  000061                     ___awdiv@sign:
  3562                           	opt stack 0
  3563                           
  3564                           ; 1 bytes @ 0x1
  3565  000061                     	ds	1
  3566  000062                     ___awdiv@quotient:
  3567                           	opt stack 0
  3568                           
  3569                           ; 2 bytes @ 0x2
  3570  000062                     	ds	2
  3571  000064                     ??___lltoft:
  3572  000064                     ?___wmul:
  3573                           	opt stack 0
  3574  000064                     __div_to_l_@cntr:
  3575                           	opt stack 0
  3576  000064                     __tdiv_to_l_@cntr:
  3577                           	opt stack 0
  3578  000064                     ___lldiv@counter:
  3579                           	opt stack 0
  3580  000064                     ___wmul@multiplier:
  3581                           	opt stack 0
  3582                           
  3583                           ; 2 bytes @ 0x4
  3584  000064                     	ds	1
  3585  000065                     ?___llmod:
  3586                           	opt stack 0
  3587  000065                     __div_to_l_@exp1:
  3588                           	opt stack 0
  3589  000065                     __tdiv_to_l_@exp1:
  3590                           	opt stack 0
  3591  000065                     ___llmod@dividend:
  3592                           	opt stack 0
  3593                           
  3594                           ; 4 bytes @ 0x5
  3595  000065                     	ds	1
  3596  000066                     ___wmul@multiplicand:
  3597                           	opt stack 0
  3598                           
  3599                           ; 2 bytes @ 0x6
  3600  000066                     	ds	2
  3601  000068                     ___wmul@product:
  3602                           	opt stack 0
  3603                           
  3604                           ; 2 bytes @ 0x8
  3605  000068                     	ds	1
  3606  000069                     ___llmod@divisor:
  3607                           	opt stack 0
  3608                           
  3609                           ; 4 bytes @ 0x9
  3610  000069                     	ds	1
  3611  00006A                     ?_BCDtoI:
  3612                           	opt stack 0
  3613  00006A                     ?___ftmul:
  3614                           	opt stack 0
  3615  00006A                     BCDtoI@BCD:
  3616                           	opt stack 0
  3617  00006A                     ___ftmul@f1:
  3618                           	opt stack 0
  3619                           
  3620                           ; 3 bytes @ 0xA
  3621  00006A                     	ds	2
  3622  00006C                     ??_BCDtoI:
  3623                           
  3624                           ; 1 bytes @ 0xC
  3625  00006C                     	ds	1
  3626  00006D                     ___ftmul@f2:
  3627                           	opt stack 0
  3628                           
  3629                           ; 3 bytes @ 0xD
  3630  00006D                     	ds	2
  3631  00006F                     BCDtoI@result:
  3632                           	opt stack 0
  3633                           
  3634                           ; 2 bytes @ 0xF
  3635  00006F                     	ds	1
  3636  000070                     ??___ftmul:
  3637                           
  3638                           ; 1 bytes @ 0x10
  3639  000070                     	ds	3
  3640  000073                     ___ftmul@exp:
  3641                           	opt stack 0
  3642                           
  3643                           ; 1 bytes @ 0x13
  3644  000073                     	ds	1
  3645  000074                     ___ftmul@f3_as_product:
  3646                           	opt stack 0
  3647                           
  3648                           ; 3 bytes @ 0x14
  3649  000074                     	ds	3
  3650  000077                     ___ftmul@cntr:
  3651                           	opt stack 0
  3652                           
  3653                           ; 1 bytes @ 0x17
  3654  000077                     	ds	1
  3655  000078                     ___ftmul@sign:
  3656                           	opt stack 0
  3657                           
  3658                           ; 1 bytes @ 0x18
  3659  000078                     	ds	1
  3660  000079                     ?_fround:
  3661                           	opt stack 0
  3662  000079                     ?_scale:
  3663                           	opt stack 0
  3664  000079                     ?___ftneg:
  3665                           	opt stack 0
  3666  000079                     ___ftneg@f1:
  3667                           	opt stack 0
  3668                           
  3669                           ; 3 bytes @ 0x19
  3670  000079                     	ds	3
  3671  00007C                     _fround$8209:
  3672                           	opt stack 0
  3673  00007C                     _scale$8210:
  3674                           	opt stack 0
  3675                           
  3676                           ; 3 bytes @ 0x1C
  3677  00007C                     	ds	3
  3678  00007F                     scale@scl:
  3679                           	opt stack 0
  3680  00007F                     _fround$8208:
  3681                           	opt stack 0
  3682                           
  3683                           ; 3 bytes @ 0x1F
  3684  00007F                     	ds	1
  3685  000080                     ?___fttol:
  3686                           	opt stack 0
  3687  000080                     ___fttol@f1:
  3688                           	opt stack 0
  3689                           
  3690                           ; 3 bytes @ 0x20
  3691  000080                     	ds	2
  3692  000082                     fround@prec:
  3693                           	opt stack 0
  3694                           
  3695                           ; 1 bytes @ 0x22
  3696  000082                     	ds	1
  3697  000083                     ?___ftadd:
  3698                           	opt stack 0
  3699  000083                     ___ftadd@f1:
  3700                           	opt stack 0
  3701                           
  3702                           ; 3 bytes @ 0x23
  3703  000083                     	ds	1
  3704  000084                     ??___fttol:
  3705                           
  3706                           ; 1 bytes @ 0x24
  3707  000084                     	ds	2
  3708  000086                     ___ftadd@f2:
  3709                           	opt stack 0
  3710                           
  3711                           ; 3 bytes @ 0x26
  3712  000086                     	ds	3
  3713  000089                     ??___ftadd:
  3714  000089                     ___fttol@sign1:
  3715                           	opt stack 0
  3716                           
  3717                           ; 1 bytes @ 0x29
  3718  000089                     	ds	1
  3719  00008A                     ___fttol@lval:
  3720                           	opt stack 0
  3721                           
  3722                           ; 4 bytes @ 0x2A
  3723  00008A                     	ds	2
  3724  00008C                     ___ftadd@sign:
  3725                           	opt stack 0
  3726                           
  3727                           ; 1 bytes @ 0x2C
  3728  00008C                     	ds	1
  3729  00008D                     ___ftadd@exp2:
  3730                           	opt stack 0
  3731                           
  3732                           ; 1 bytes @ 0x2D
  3733  00008D                     	ds	1
  3734  00008E                     ___ftadd@exp1:
  3735                           	opt stack 0
  3736  00008E                     ___fttol@exp1:
  3737                           	opt stack 0
  3738                           
  3739                           ; 1 bytes @ 0x2E
  3740  00008E                     	ds	1
  3741  00008F                     ?_eval_poly:
  3742                           	opt stack 0
  3743  00008F                     ?___altoft:
  3744                           	opt stack 0
  3745  00008F                     ___ftge@ff1:
  3746                           	opt stack 0
  3747  00008F                     eval_poly@x:
  3748                           	opt stack 0
  3749  00008F                     ___altoft@c:
  3750                           	opt stack 0
  3751                           
  3752                           ; 4 bytes @ 0x2F
  3753  00008F                     	ds	3
  3754  000092                     eval_poly@d:
  3755                           	opt stack 0
  3756  000092                     ___ftge@ff2:
  3757                           	opt stack 0
  3758                           
  3759                           ; 3 bytes @ 0x32
  3760  000092                     	ds	1
  3761  000093                     ??___altoft:
  3762                           
  3763                           ; 1 bytes @ 0x33
  3764  000093                     	ds	1
  3765  000094                     eval_poly@n:
  3766                           	opt stack 0
  3767                           
  3768                           ; 2 bytes @ 0x34
  3769  000094                     	ds	1
  3770  000095                     ??___ftge:
  3771                           
  3772                           ; 1 bytes @ 0x35
  3773  000095                     	ds	1
  3774  000096                     ??_eval_poly:
  3775                           
  3776                           ; 1 bytes @ 0x36
  3777  000096                     	ds	1
  3778  000097                     ___altoft@exp:
  3779                           	opt stack 0
  3780                           
  3781                           ; 1 bytes @ 0x37
  3782  000097                     	ds	1
  3783  000098                     ___altoft@sign:
  3784                           	opt stack 0
  3785  000098                     eval_poly@res:
  3786                           	opt stack 0
  3787                           
  3788                           ; 3 bytes @ 0x38
  3789  000098                     	ds	1
  3790  000099                     ?_floor:
  3791                           	opt stack 0
  3792  000099                     floor@x:
  3793                           	opt stack 0
  3794                           
  3795                           ; 3 bytes @ 0x39
  3796  000099                     	ds	2
  3797  00009B                     ?___ftdiv:
  3798                           	opt stack 0
  3799  00009B                     ___ftdiv@f1:
  3800                           	opt stack 0
  3801                           
  3802                           ; 3 bytes @ 0x3B
  3803  00009B                     	ds	1
  3804  00009C                     floor@i:
  3805                           	opt stack 0
  3806                           
  3807                           ; 3 bytes @ 0x3C
  3808  00009C                     	ds	2
  3809  00009E                     ___ftdiv@f2:
  3810                           	opt stack 0
  3811                           
  3812                           ; 3 bytes @ 0x3E
  3813  00009E                     	ds	1
  3814  00009F                     floor@expon:
  3815                           	opt stack 0
  3816                           
  3817                           ; 2 bytes @ 0x3F
  3818  00009F                     	ds	2
  3819  0000A1                     ??___ftdiv:
  3820  0000A1                     ?___ftsub:
  3821                           	opt stack 0
  3822  0000A1                     ___ftsub@f1:
  3823                           	opt stack 0
  3824                           
  3825                           ; 3 bytes @ 0x41
  3826  0000A1                     	ds	3
  3827  0000A4                     ___ftdiv@cntr:
  3828                           	opt stack 0
  3829  0000A4                     ___ftsub@f2:
  3830                           	opt stack 0
  3831                           
  3832                           ; 3 bytes @ 0x44
  3833  0000A4                     	ds	1
  3834  0000A5                     ___ftdiv@f3:
  3835                           	opt stack 0
  3836                           
  3837                           ; 3 bytes @ 0x45
  3838  0000A5                     	ds	2
  3839  0000A7                     ?_printf:
  3840                           	opt stack 0
  3841  0000A7                     ?_sqrt:
  3842                           	opt stack 0
  3843  0000A7                     printf@f:
  3844                           	opt stack 0
  3845  0000A7                     sqrt@a:
  3846                           	opt stack 0
  3847                           
  3848                           ; 3 bytes @ 0x47
  3849  0000A7                     	ds	1
  3850  0000A8                     ___ftdiv@exp:
  3851                           	opt stack 0
  3852                           
  3853                           ; 1 bytes @ 0x48
  3854  0000A8                     	ds	1
  3855  0000A9                     ___ftdiv@sign:
  3856                           	opt stack 0
  3857                           
  3858                           ; 1 bytes @ 0x49
  3859  0000A9                     	ds	1
  3860  0000AA                     ??_Generator_RPM_Cal:
  3861  0000AA                     ??_Turbine_RPM_Cal:
  3862  0000AA                     ??_Wind_Speed_Cal:
  3863  0000AA                     ??_VFD_RS485_Data:
  3864  0000AA                     ??_RAMP_UP:
  3865  0000AA                     ??_sqrt:
  3866  0000AA                     ?_sin:
  3867                           	opt stack 0
  3868  0000AA                     sin@f:
  3869                           	opt stack 0
  3870  0000AA                     _Wind_Average$8103:
  3871                           	opt stack 0
  3872  0000AA                     _Temp_Read$8111:
  3873                           	opt stack 0
  3874  0000AA                     _Volt_Curr_Avg$8115:
  3875                           	opt stack 0
  3876  0000AA                     _Freq_Calc$8116:
  3877                           	opt stack 0
  3878  0000AA                     _R_PF_Calc$8117:
  3879                           	opt stack 0
  3880  0000AA                     _Y_PF_Calc$8146:
  3881                           	opt stack 0
  3882  0000AA                     _B_PF_Calc$8175:
  3883                           	opt stack 0
  3884  0000AA                     _Power_Factor$8204:
  3885                           	opt stack 0
  3886                           
  3887                           ; 3 bytes @ 0x4A
  3888  0000AA                     	ds	2
  3889  0000AC                     ??_printf:
  3890                           
  3891                           ; 1 bytes @ 0x4C
  3892  0000AC                     	ds	1
  3893  0000AD                     sin@y:
  3894                           	opt stack 0
  3895  0000AD                     sqrt@og:
  3896                           	opt stack 0
  3897  0000AD                     _Wind_Average$8104:
  3898                           	opt stack 0
  3899  0000AD                     _Temp_Read$8112:
  3900                           	opt stack 0
  3901                           
  3902                           ; 3 bytes @ 0x4D
  3903  0000AD                     	ds	3
  3904  0000B0                     sqrt@z:
  3905                           	opt stack 0
  3906  0000B0                     _Wind_Average$8105:
  3907                           	opt stack 0
  3908  0000B0                     _Temp_Read$8113:
  3909                           	opt stack 0
  3910  0000B0                     _sin$8213:
  3911                           	opt stack 0
  3912                           
  3913                           ; 3 bytes @ 0x50
  3914  0000B0                     	ds	2
  3915  0000B2                     _printf$8211:
  3916                           	opt stack 0
  3917                           
  3918                           ; 3 bytes @ 0x52
  3919  0000B2                     	ds	1
  3920  0000B3                     sqrt@i:
  3921                           	opt stack 0
  3922  0000B3                     sin@x2:
  3923                           	opt stack 0
  3924  0000B3                     _Wind_Average$8106:
  3925                           	opt stack 0
  3926  0000B3                     _Temp_Read$8114:
  3927                           	opt stack 0
  3928                           
  3929                           ; 3 bytes @ 0x53
  3930  0000B3                     	ds	1
  3931  0000B4                     sqrt@q:
  3932                           	opt stack 0
  3933                           
  3934                           ; 3 bytes @ 0x54
  3935  0000B4                     	ds	1
  3936  0000B5                     printf@cp:
  3937                           	opt stack 0
  3938                           
  3939                           ; 2 bytes @ 0x55
  3940  0000B5                     	ds	1
  3941  0000B6                     sin@sgn:
  3942                           	opt stack 0
  3943  0000B6                     _Wind_Average$8107:
  3944                           	opt stack 0
  3945                           
  3946                           ; 3 bytes @ 0x56
  3947  0000B6                     	ds	1
  3948  0000B7                     ?_cos:
  3949                           	opt stack 0
  3950  0000B7                     printf@ap:
  3951                           	opt stack 0
  3952  0000B7                     cos@f:
  3953                           	opt stack 0
  3954  0000B7                     sqrt@x:
  3955                           	opt stack 0
  3956                           
  3957                           ; 3 bytes @ 0x57
  3958  0000B7                     	ds	2
  3959  0000B9                     printf@len:
  3960                           	opt stack 0
  3961  0000B9                     _Wind_Average$8108:
  3962                           	opt stack 0
  3963                           
  3964                           ; 3 bytes @ 0x59
  3965  0000B9                     	ds	1
  3966  0000BA                     _Power_Calc$8207:
  3967                           	opt stack 0
  3968  0000BA                     _cos$8212:
  3969                           	opt stack 0
  3970                           
  3971                           ; 3 bytes @ 0x5A
  3972  0000BA                     	ds	1
  3973  0000BB                     printf@flag:
  3974                           	opt stack 0
  3975                           
  3976                           ; 2 bytes @ 0x5B
  3977  0000BB                     	ds	1
  3978  0000BC                     _Wind_Average$8109:
  3979                           	opt stack 0
  3980                           
  3981                           ; 3 bytes @ 0x5C
  3982  0000BC                     	ds	1
  3983  0000BD                     _Power_Calc$8206:
  3984                           	opt stack 0
  3985  0000BD                     printf@tmpval:
  3986                           	opt stack 0
  3987                           
  3988                           ; 4 bytes @ 0x5D
  3989  0000BD                     	ds	2
  3990  0000BF                     _Wind_Average$8110:
  3991                           	opt stack 0
  3992                           
  3993                           ; 3 bytes @ 0x5F
  3994  0000BF                     	ds	1
  3995  0000C0                     _Power_Calc$8205:
  3996                           	opt stack 0
  3997                           
  3998                           ; 3 bytes @ 0x60
  3999  0000C0                     	ds	1
  4000  0000C1                     printf@val:
  4001                           	opt stack 0
  4002                           
  4003                           ; 4 bytes @ 0x61
  4004  0000C1                     	ds	4
  4005  0000C5                     printf@exp:
  4006                           	opt stack 0
  4007                           
  4008                           ; 2 bytes @ 0x65
  4009  0000C5                     	ds	2
  4010  0000C7                     printf@width:
  4011                           	opt stack 0
  4012                           
  4013                           ; 2 bytes @ 0x67
  4014  0000C7                     	ds	2
  4015  0000C9                     printf@fval:
  4016                           	opt stack 0
  4017                           
  4018                           ; 3 bytes @ 0x69
  4019  0000C9                     	ds	3
  4020  0000CC                     printf@prec:
  4021                           	opt stack 0
  4022                           
  4023                           ; 2 bytes @ 0x6C
  4024  0000CC                     	ds	2
  4025  0000CE                     printf@c:
  4026                           	opt stack 0
  4027                           
  4028                           ; 1 bytes @ 0x6E
  4029  0000CE                     	ds	1
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           postinc0	equ	0xFEE
  4035                           wreg	equ	0xFE8
  4036                           postdec1	equ	0xFE5
  4037                           fsr1h	equ	0xFE2
  4038                           fsr1l	equ	0xFE1
  4039                           
  4040                           	psect	cstackCOMRAM
  4041  000001                     __pcstackCOMRAM:
  4042                           	opt stack 0
  4043  000001                     ?i2___ftpack:
  4044                           	opt stack 0
  4045  000001                     i2___ftpack@arg:
  4046                           	opt stack 0
  4047  000001                     i2___ftge@ff1:
  4048                           	opt stack 0
  4049                           
  4050                           ; 3 bytes @ 0x0
  4051  000001                     	ds	3
  4052  000004                     i2___ftpack@exp:
  4053                           	opt stack 0
  4054  000004                     i2___ftge@ff2:
  4055                           	opt stack 0
  4056                           
  4057                           ; 3 bytes @ 0x3
  4058  000004                     	ds	1
  4059  000005                     i2___ftpack@sign:
  4060                           	opt stack 0
  4061                           
  4062                           ; 1 bytes @ 0x4
  4063  000005                     	ds	1
  4064  000006                     ??i2___ftpack:
  4065                           
  4066                           ; 1 bytes @ 0x5
  4067  000006                     	ds	1
  4068  000007                     ??i2___ftge:
  4069                           
  4070                           ; 1 bytes @ 0x6
  4071  000007                     	ds	2
  4072  000009                     ?___awtoft:
  4073                           	opt stack 0
  4074  000009                     ___awtoft@c:
  4075                           	opt stack 0
  4076                           
  4077                           ; 2 bytes @ 0x8
  4078  000009                     	ds	1
  4079  00000A                     
  4080                           ; 1 bytes @ 0x9
  4081  00000A                     	ds	2
  4082  00000C                     ___awtoft@sign:
  4083                           	opt stack 0
  4084                           
  4085                           ; 1 bytes @ 0xB
  4086  00000C                     	ds	1
  4087  00000D                     ??_ISR:
  4088                           
  4089                           ; 1 bytes @ 0xC
  4090  00000D                     	ds	16
  4091  00001D                     ??_Communication_Error:
  4092  00001D                     ??_isdigit:
  4093  00001D                     ?_int_eeprom_read:
  4094                           	opt stack 0
  4095  00001D                     ?_Read_Adc:
  4096                           	opt stack 0
  4097  00001D                     ?___awmod:
  4098                           	opt stack 0
  4099  00001D                     ?___ftpack:
  4100                           	opt stack 0
  4101  00001D                     ?__tdiv_to_l_:
  4102                           	opt stack 0
  4103  00001D                     ?__div_to_l_:
  4104                           	opt stack 0
  4105  00001D                     ?___lldiv:
  4106                           	opt stack 0
  4107  00001D                     I2C_Read@v_ackOption_u8:
  4108                           	opt stack 0
  4109  00001D                     I2C_Write@v_i2cData_u8:
  4110                           	opt stack 0
  4111  00001D                     usart_str_1@str:
  4112                           	opt stack 0
  4113  00001D                     putch@data:
  4114                           	opt stack 0
  4115  00001D                     usart_str_2@str:
  4116                           	opt stack 0
  4117  00001D                     usart_str@str:
  4118                           	opt stack 0
  4119  00001D                     int_eeprom_read@adr:
  4120                           	opt stack 0
  4121  00001D                     int_eeprom_write@adr:
  4122                           	opt stack 0
  4123  00001D                     ___awmod@dividend:
  4124                           	opt stack 0
  4125  00001D                     __div_to_l_@f1:
  4126                           	opt stack 0
  4127  00001D                     ___ftpack@arg:
  4128                           	opt stack 0
  4129  00001D                     __tdiv_to_l_@f1:
  4130                           	opt stack 0
  4131  00001D                     frexp@value:
  4132                           	opt stack 0
  4133  00001D                     ___lldiv@dividend:
  4134                           	opt stack 0
  4135                           
  4136                           ; 4 bytes @ 0x1C
  4137  00001D                     	ds	1
  4138  00001E                     ??_RS485_Data_communication:
  4139  00001E                     I2C_Read@v_i2cData_u8:
  4140                           	opt stack 0
  4141  00001E                     _isdigit$7673:
  4142                           	opt stack 0
  4143                           
  4144                           ; 1 bytes @ 0x1D
  4145  00001E                     	ds	1
  4146  00001F                     ??_Read_Adc:
  4147  00001F                     isdigit@c:
  4148                           	opt stack 0
  4149  00001F                     RTC_GetDateTime@rtc:
  4150                           	opt stack 0
  4151  00001F                     int_eeprom_read@temp:
  4152                           	opt stack 0
  4153  00001F                     int_eeprom_write@dat:
  4154                           	opt stack 0
  4155  00001F                     ___awmod@divisor:
  4156                           	opt stack 0
  4157                           
  4158                           ; 2 bytes @ 0x1E
  4159  00001F                     	ds	1
  4160  000020                     ___ftpack@exp:
  4161                           	opt stack 0
  4162  000020                     frexp@eptr:
  4163                           	opt stack 0
  4164  000020                     __div_to_l_@f2:
  4165                           	opt stack 0
  4166  000020                     __tdiv_to_l_@f2:
  4167                           	opt stack 0
  4168                           
  4169                           ; 3 bytes @ 0x1F
  4170  000020                     	ds	1
  4171  000021                     ??_EEPROM_Error_Stop:
  4172  000021                     Read_Adc@ch:
  4173                           	opt stack 0
  4174  000021                     ___awmod@counter:
  4175                           	opt stack 0
  4176  000021                     ___ftpack@sign:
  4177                           	opt stack 0
  4178  000021                     ___lldiv@divisor:
  4179                           	opt stack 0
  4180                           
  4181                           ; 4 bytes @ 0x20
  4182  000021                     	ds	1
  4183  000022                     ??___ftpack:
  4184  000022                     ??_frexp:
  4185  000022                     ___awmod@sign:
  4186                           	opt stack 0
  4187                           
  4188                           ; 1 bytes @ 0x21
  4189  000022                     	ds	1
  4190  000023                     ??__tdiv_to_l_:
  4191  000023                     ?___awdiv:
  4192                           	opt stack 0
  4193  000023                     ___awdiv@dividend:
  4194                           	opt stack 0
  4195                           
  4196                           ; 2 bytes @ 0x22
  4197  000023                     	ds	2
  4198  000025                     ___lbtoft@c:
  4199                           	opt stack 0
  4200  000025                     ___llmod@counter:
  4201                           	opt stack 0
  4202  000025                     ___lltoft@exp:
  4203                           	opt stack 0
  4204  000025                     ___awdiv@divisor:
  4205                           	opt stack 0
  4206                           
  4207                           ; 2 bytes @ 0x24
  4208  000025                     	ds	2
  4209  000027                     tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           postinc0	equ	0xFEE
  4214                           wreg	equ	0xFE8
  4215                           postdec1	equ	0xFE5
  4216                           fsr1h	equ	0xFE2
  4217                           fsr1l	equ	0xFE1
  4218                           
  4219                           ; 1 bytes @ 0x26
  4220 ;;
  4221 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4222 ;;
  4223 ;; *************** function _main *****************
  4224 ;; Defined at:
  4225 ;;		line 30 in file "main_Logic.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;		None
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  rtc             7    0        struct .
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  1    wreg      void 
  4232 ;; Registers used:
  4233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;Total ram usage:        0 bytes
  4244 ;; Hardware stack levels required when called:   10
  4245 ;; This function calls:
  4246 ;;		_B_PF_Avg
  4247 ;;		_B_PF_Calc
  4248 ;;		_Cons_Gene
  4249 ;;		_EEPROM_Error_Stop
  4250 ;;		_Freq_Calc
  4251 ;;		_Generator_RPM_Cal
  4252 ;;		_Generator_RPM_Initiate
  4253 ;;		_IO_Initiate
  4254 ;;		_OSCILLATOR
  4255 ;;		_PM_ADC_Initialization
  4256 ;;		_PM_IO_Initialization
  4257 ;;		_PM_Timer_Initialization
  4258 ;;		_Phase_Sequence
  4259 ;;		_Power_Calc
  4260 ;;		_Power_Factor
  4261 ;;		_RPM_Data_Kill
  4262 ;;		_RS485_Data_communication
  4263 ;;		_RTC_Init
  4264 ;;		_R_PF_Avg
  4265 ;;		_R_PF_Calc
  4266 ;;		_Rampup_state_function
  4267 ;;		_Temp_Read
  4268 ;;		_Timer0_OneSecond_Function
  4269 ;;		_Timer1_Initiate
  4270 ;;		_Timer7_Init
  4271 ;;		_Turbine_RPM_Cal
  4272 ;;		_Turbine_RPM_Initiate
  4273 ;;		_Volt_Curr_Avg
  4274 ;;		_Volt_Curr_Read
  4275 ;;		_Wind_Speed_Cal
  4276 ;;		_Wind_Speed_Initiate
  4277 ;;		_Y_PF_Avg
  4278 ;;		_Y_PF_Calc
  4279 ;;		_startup_state_function
  4280 ;;		_usart_init
  4281 ;; This function is called by:
  4282 ;;		Startup code after reset
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text0
  4287  017252                     __ptext0:
  4288                           	opt stack 0
  4289  017252                     _main:
  4290                           	opt stack 21
  4291                           
  4292                           ;main_Logic.c: 32: rtc_t rtc;
  4293                           ;main_Logic.c: 33: RTC_Init();
  4294                           
  4295                           ;incstack = 0
  4296  017252  ECB6  F0D4         	call	_RTC_Init	;wreg free
  4297                           
  4298                           ;main_Logic.c: 34: OSCILLATOR();
  4299  017256  EC83  F0D5         	call	_OSCILLATOR	;wreg free
  4300                           
  4301                           ;main_Logic.c: 35: Timer1_Initiate();
  4302  01725A  EC10  F0D5         	call	_Timer1_Initiate	;wreg free
  4303                           
  4304                           ;main_Logic.c: 36: Timer7_Init();
  4305  01725E  EC2A  F0D5         	call	_Timer7_Init	;wreg free
  4306                           
  4307                           ;main_Logic.c: 37: usart_init();
  4308  017262  ECD5  F0D4         	call	_usart_init	;wreg free
  4309                           
  4310                           ;main_Logic.c: 40: Generator_RPM_Initiate();
  4311  017266  EC17  F0D5         	call	_Generator_RPM_Initiate	;wreg free
  4312                           
  4313                           ;main_Logic.c: 41: Wind_Speed_Initiate();
  4314  01726A  EC1E  F0D5         	call	_Wind_Speed_Initiate	;wreg free
  4315                           
  4316                           ;main_Logic.c: 42: Turbine_RPM_Initiate();
  4317  01726E  EC24  F0D5         	call	_Turbine_RPM_Initiate	;wreg free
  4318                           
  4319                           ;main_Logic.c: 43: IO_Initiate();
  4320  017272  ECF1  F0D2         	call	_IO_Initiate	;wreg free
  4321                           
  4322                           ;main_Logic.c: 44: PM_IO_Initialization();
  4323  017276  EC40  F0CF         	call	_PM_IO_Initialization	;wreg free
  4324                           
  4325                           ;main_Logic.c: 45: PM_Timer_Initialization();
  4326  01727A  EC57  F0D5         	call	_PM_Timer_Initialization	;wreg free
  4327                           
  4328                           ;main_Logic.c: 46: PM_ADC_Initialization();
  4329  01727E  EC5C  F0D5         	call	_PM_ADC_Initialization	;wreg free
  4330                           
  4331                           ;main_Logic.c: 47: Phase_Sequence();
  4332  017282  ECD0  F0BC         	call	_Phase_Sequence	;wreg free
  4333                           
  4334                           ;main_Logic.c: 49: PEIE=1;
  4335  017286  8CF2               	bsf	intcon,6,c	;volatile
  4336                           
  4337                           ;main_Logic.c: 50: GIE=1;
  4338  017288  8EF2               	bsf	intcon,7,c	;volatile
  4339                           
  4340                           ;main_Logic.c: 52: EEPROM_Error_Stop();
  4341  01728A  EC9B  F0AA         	call	_EEPROM_Error_Stop	;wreg free
  4342                           
  4343                           ;main_Logic.c: 54: counter_1 = 0;
  4344  01728E  0E00               	movlw	0
  4345  017290  0101               	movlb	1	; () banked
  4346  017292  6FDF               	movwf	_counter_1& (0+255),b
  4347  017294                     l22105:
  4348                           
  4349                           ;main_Logic.c: 65: {
  4350                           ;main_Logic.c: 67: Temp_Read();
  4351  017294  ECF0  F0B9         	call	_Temp_Read	;wreg free
  4352                           
  4353                           ;main_Logic.c: 69: if(Volt_Curr_Flag == 1)
  4354  017298  0101               	movlb	1	; () banked
  4355  01729A  05DA               	decf	_Volt_Curr_Flag& (0+255),w,b
  4356  01729C  A4D8               	btfss	status,2,c
  4357  01729E  D007               	goto	l22115
  4358                           
  4359                           ; BSR set to: 1
  4360                           ;main_Logic.c: 70: {
  4361                           ;main_Logic.c: 71: Volt_Curr_Flag = 0;
  4362  0172A0  0E00               	movlw	0
  4363  0172A2  0101               	movlb	1	; () banked
  4364  0172A4  6FDA               	movwf	_Volt_Curr_Flag& (0+255),b
  4365                           
  4366                           ; BSR set to: 1
  4367                           ;main_Logic.c: 72: Volt_Curr_Read();
  4368  0172A6  EC6F  F0A5         	call	_Volt_Curr_Read	;wreg free
  4369                           
  4370                           ;main_Logic.c: 73: Volt_Curr_Avg();
  4371  0172AA  EC6A  F09C         	call	_Volt_Curr_Avg	;wreg free
  4372  0172AE                     l22115:
  4373                           
  4374                           ;main_Logic.c: 75: }
  4375                           ;main_Logic.c: 77: if(Freq_Flag == 1)
  4376  0172AE  0101               	movlb	1	; () banked
  4377  0172B0  0576               	decf	_Freq_Flag& (0+255),w,b
  4378  0172B2  A4D8               	btfss	status,2,c
  4379  0172B4  D005               	goto	l22121
  4380                           
  4381                           ; BSR set to: 1
  4382                           ;main_Logic.c: 78: {
  4383                           ;main_Logic.c: 79: Freq_Flag = 0;
  4384  0172B6  0E00               	movlw	0
  4385  0172B8  0101               	movlb	1	; () banked
  4386  0172BA  6F76               	movwf	_Freq_Flag& (0+255),b
  4387                           
  4388                           ; BSR set to: 1
  4389                           ;main_Logic.c: 80: Freq_Calc();
  4390  0172BC  EC97  F0B6         	call	_Freq_Calc	;wreg free
  4391  0172C0                     l22121:
  4392                           
  4393                           ;main_Logic.c: 81: }
  4394                           ;main_Logic.c: 83: if(R_PF_Flag == 1)
  4395  0172C0  0101               	movlb	1	; () banked
  4396  0172C2  05B4               	decf	_R_PF_Flag& (0+255),w,b
  4397  0172C4  A4D8               	btfss	status,2,c
  4398  0172C6  D007               	goto	l22129
  4399                           
  4400                           ; BSR set to: 1
  4401                           ;main_Logic.c: 84: {
  4402                           ;main_Logic.c: 85: R_PF_Flag = 0;
  4403  0172C8  0E00               	movlw	0
  4404  0172CA  0101               	movlb	1	; () banked
  4405  0172CC  6FB4               	movwf	_R_PF_Flag& (0+255),b
  4406                           
  4407                           ; BSR set to: 1
  4408                           ;main_Logic.c: 86: R_PF_Calc();
  4409  0172CE  EC69  F0B4         	call	_R_PF_Calc	;wreg free
  4410                           
  4411                           ;main_Logic.c: 87: R_PF_Avg();
  4412  0172D2  ECF6  F090         	call	_R_PF_Avg	;wreg free
  4413  0172D6                     l22129:
  4414                           
  4415                           ;main_Logic.c: 88: }
  4416                           ;main_Logic.c: 90: if(Y_PF_Flag == 1)
  4417  0172D6  0101               	movlb	1	; () banked
  4418  0172D8  05DE               	decf	_Y_PF_Flag& (0+255),w,b
  4419  0172DA  A4D8               	btfss	status,2,c
  4420  0172DC  D007               	goto	l22137
  4421                           
  4422                           ; BSR set to: 1
  4423                           ;main_Logic.c: 91: {
  4424                           ;main_Logic.c: 92: Y_PF_Flag = 0;
  4425  0172DE  0E00               	movlw	0
  4426  0172E0  0101               	movlb	1	; () banked
  4427  0172E2  6FDE               	movwf	_Y_PF_Flag& (0+255),b
  4428                           
  4429                           ; BSR set to: 1
  4430                           ;main_Logic.c: 93: Y_PF_Calc();
  4431  0172E4  EC3B  F0B2         	call	_Y_PF_Calc	;wreg free
  4432                           
  4433                           ;main_Logic.c: 94: Y_PF_Avg();
  4434  0172E8  EC0B  F08D         	call	_Y_PF_Avg	;wreg free
  4435  0172EC                     l22137:
  4436                           
  4437                           ;main_Logic.c: 95: }
  4438                           ;main_Logic.c: 97: if(B_PF_Flag == 1)
  4439  0172EC  0101               	movlb	1	; () banked
  4440  0172EE  0567               	decf	_B_PF_Flag& (0+255),w,b
  4441  0172F0  A4D8               	btfss	status,2,c
  4442  0172F2  D007               	goto	l22145
  4443                           
  4444                           ; BSR set to: 1
  4445                           ;main_Logic.c: 98: {
  4446                           ;main_Logic.c: 99: B_PF_Flag = 0;
  4447  0172F4  0E00               	movlw	0
  4448  0172F6  0101               	movlb	1	; () banked
  4449  0172F8  6F67               	movwf	_B_PF_Flag& (0+255),b
  4450                           
  4451                           ; BSR set to: 1
  4452                           ;main_Logic.c: 100: B_PF_Calc();
  4453  0172FA  EC80  F0B5         	call	_B_PF_Calc	;wreg free
  4454                           
  4455                           ;main_Logic.c: 101: B_PF_Avg();
  4456  0172FE  ECE1  F094         	call	_B_PF_Avg	;wreg free
  4457  017302                     l22145:
  4458                           
  4459                           ;main_Logic.c: 102: }
  4460                           ;main_Logic.c: 104: Power_Factor();
  4461  017302  EC6D  F0C8         	call	_Power_Factor	;wreg free
  4462                           
  4463                           ;main_Logic.c: 105: Power_Calc();
  4464  017306  EC18  F0B1         	call	_Power_Calc	;wreg free
  4465                           
  4466                           ;main_Logic.c: 106: Cons_Gene();
  4467  01730A  EC96  F0C2         	call	_Cons_Gene	;wreg free
  4468                           
  4469                           ;main_Logic.c: 110: if (GRPM_Cap)
  4470  01730E  0102               	movlb	2	; () banked
  4471  017310  518A               	movf	_GRPM_Cap& (0+255),w,b
  4472  017312  0102               	movlb	2	; () banked
  4473  017314  118B               	iorwf	(_GRPM_Cap+1)& (0+255),w,b
  4474  017316  B4D8               	btfsc	status,2,c
  4475  017318  D007               	goto	l22157
  4476                           
  4477                           ; BSR set to: 2
  4478                           ;main_Logic.c: 111: {
  4479                           ;main_Logic.c: 112: Generator_RPM_Cal();
  4480  01731A  EC3E  F0A7         	call	_Generator_RPM_Cal	;wreg free
  4481                           
  4482                           ;main_Logic.c: 113: GRPM_Cap = 0;
  4483  01731E  0E00               	movlw	0
  4484  017320  0102               	movlb	2	; () banked
  4485  017322  6F8B               	movwf	(_GRPM_Cap+1)& (0+255),b
  4486  017324  0E00               	movlw	0
  4487  017326  6F8A               	movwf	_GRPM_Cap& (0+255),b
  4488  017328                     l22157:
  4489                           
  4490                           ; BSR set to: 2
  4491                           ;main_Logic.c: 114: }
  4492                           ;main_Logic.c: 115: if(TRPM_Cal)
  4493  017328  0101               	movlb	1	; () banked
  4494  01732A  51BB               	movf	_TRPM_Cal& (0+255),w,b
  4495  01732C  B4D8               	btfsc	status,2,c
  4496  01732E  D005               	goto	l22163
  4497                           
  4498                           ; BSR set to: 1
  4499                           ;main_Logic.c: 116: {
  4500                           ;main_Logic.c: 117: Turbine_RPM_Cal();
  4501  017330  EC95  F0A3         	call	_Turbine_RPM_Cal	;wreg free
  4502                           
  4503                           ;main_Logic.c: 118: TRPM_Cal = 0;
  4504  017334  0E00               	movlw	0
  4505  017336  0101               	movlb	1	; () banked
  4506  017338  6FBB               	movwf	_TRPM_Cal& (0+255),b
  4507  01733A                     l22163:
  4508                           
  4509                           ; BSR set to: 1
  4510                           ;main_Logic.c: 119: }
  4511                           ;main_Logic.c: 120: if (Wind_Cap)
  4512  01733A  0102               	movlb	2	; () banked
  4513  01733C  51CA               	movf	_Wind_Cap& (0+255),w,b
  4514  01733E  0102               	movlb	2	; () banked
  4515  017340  11CB               	iorwf	(_Wind_Cap+1)& (0+255),w,b
  4516  017342  B4D8               	btfsc	status,2,c
  4517  017344  D007               	goto	l22169
  4518                           
  4519                           ; BSR set to: 2
  4520                           ;main_Logic.c: 121: {
  4521                           ;main_Logic.c: 122: Wind_Cap = 0;
  4522  017346  0E00               	movlw	0
  4523  017348  0102               	movlb	2	; () banked
  4524  01734A  6FCB               	movwf	(_Wind_Cap+1)& (0+255),b
  4525  01734C  0E00               	movlw	0
  4526  01734E  6FCA               	movwf	_Wind_Cap& (0+255),b
  4527                           
  4528                           ; BSR set to: 2
  4529                           ;main_Logic.c: 123: Wind_Speed_Cal();
  4530  017350  ECAD  F0AE         	call	_Wind_Speed_Cal	;wreg free
  4531  017354                     l22169:
  4532                           
  4533                           ;main_Logic.c: 124: }
  4534                           ;main_Logic.c: 126: if(Timer1_interrupt_flag)
  4535  017354  0101               	movlb	1	; () banked
  4536  017356  51C6               	movf	_Timer1_interrupt_flag& (0+255),w,b
  4537  017358  B4D8               	btfsc	status,2,c
  4538  01735A  D022               	goto	l22193
  4539                           
  4540                           ; BSR set to: 1
  4541                           ;main_Logic.c: 127: {
  4542                           ;main_Logic.c: 128: Timer1_interrupt_flag = 0;
  4543  01735C  0E00               	movlw	0
  4544  01735E  0101               	movlb	1	; () banked
  4545  017360  6FC6               	movwf	_Timer1_interrupt_flag& (0+255),b
  4546                           
  4547                           ; BSR set to: 1
  4548                           ;main_Logic.c: 129: RPM_Data_Kill();
  4549  017362  EC61  F0B8         	call	_RPM_Data_Kill	;wreg free
  4550                           
  4551                           ;main_Logic.c: 130: }
  4552                           ;main_Logic.c: 131: switch(Turbine_state)
  4553  017366  D01C               	goto	l22193
  4554  017368                     l22175:
  4555                           
  4556                           ;main_Logic.c: 134: Desired_Frequency = (8);
  4557  017368  0E08               	movlw	8
  4558  01736A  0100               	movlb	0	; () banked
  4559  01736C  6FD5               	movwf	_Desired_Frequency& (0+255),b
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;main_Logic.c: 135: startup_state_function();
  4563  01736E  EC60  F0D4         	call	_startup_state_function	;wreg free
  4564                           
  4565                           ;main_Logic.c: 136: Pitch_Counter = 0;
  4566  017372  0E00               	movlw	0
  4567  017374  0102               	movlb	2	; () banked
  4568  017376  6FA1               	movwf	(_Pitch_Counter+1)& (0+255),b
  4569  017378  0E00               	movlw	0
  4570  01737A  6FA0               	movwf	_Pitch_Counter& (0+255),b
  4571                           
  4572                           ; BSR set to: 2
  4573                           ;main_Logic.c: 137: Pitching_FlAG = 0;
  4574  01737C  0E00               	movlw	0
  4575  01737E  0102               	movlb	2	; () banked
  4576  017380  6FA3               	movwf	(_Pitching_FlAG+1)& (0+255),b
  4577  017382  0E00               	movlw	0
  4578  017384  6FA2               	movwf	_Pitching_FlAG& (0+255),b
  4579                           
  4580                           ; BSR set to: 2
  4581                           ;main_Logic.c: 138: Two_Delay_counter = 0;
  4582  017386  0E00               	movlw	0
  4583  017388  0101               	movlb	1	; () banked
  4584  01738A  6FCC               	movwf	_Two_Delay_counter& (0+255),b
  4585                           
  4586                           ; BSR set to: 1
  4587                           ;main_Logic.c: 139: Two_Sec_Delay_vab = 0;
  4588  01738C  0E00               	movlw	0
  4589  01738E  0101               	movlb	1	; () banked
  4590  017390  6FCD               	movwf	_Two_Sec_Delay_vab& (0+255),b
  4591                           
  4592                           ; BSR set to: 1
  4593                           ;main_Logic.c: 140: Two_sec_Delay_Flag = 0;
  4594  017392  0E00               	movlw	0
  4595  017394  0101               	movlb	1	; () banked
  4596  017396  6FCE               	movwf	_Two_sec_Delay_Flag& (0+255),b
  4597                           
  4598                           ;main_Logic.c: 141: break;
  4599  017398  D00E               	goto	l22195
  4600  01739A                     l22189:
  4601                           
  4602                           ;main_Logic.c: 144: Rampup_state_function();
  4603  01739A  EC80  F0D5         	call	_Rampup_state_function	;wreg free
  4604                           
  4605                           ;main_Logic.c: 157: }
  4606                           
  4607                           ;main_Logic.c: 156: break;
  4608                           
  4609                           ;main_Logic.c: 155: default:
  4610                           
  4611                           ;main_Logic.c: 153: break;
  4612                           
  4613                           ;main_Logic.c: 151: case STOPPING_STATE:
  4614                           
  4615                           ;main_Logic.c: 149: break;
  4616                           
  4617                           ;main_Logic.c: 147: case RUNNING_STATE:
  4618                           
  4619                           ;main_Logic.c: 145: break;
  4620  01739E  D00B               	goto	l22195
  4621  0173A0                     l22193:
  4622  0173A0  0100               	movlb	0	; () banked
  4623  0173A2  51D8               	movf	_Turbine_state& (0+255),w,b
  4624                           
  4625                           ; Switch size 1, requested type "space"
  4626                           ; Number of cases is 4, Range of values is 0 to 3
  4627                           ; switch strategies available:
  4628                           ; Name         Instructions Cycles
  4629                           ; simple_byte           13     7 (average)
  4630                           ;	Chosen strategy is simple_byte
  4631  0173A4  0A00               	xorlw	0	; case 0
  4632  0173A6  B4D8               	btfsc	status,2,c
  4633  0173A8  D7DF               	goto	l22175
  4634  0173AA  0A01               	xorlw	1	; case 1
  4635  0173AC  B4D8               	btfsc	status,2,c
  4636  0173AE  D7F5               	goto	l22189
  4637  0173B0  0A03               	xorlw	3	; case 2
  4638  0173B2  A4D8               	btfss	status,2,c
  4639  0173B4  0A01               	xorlw	1	; case 3
  4640  0173B6                     l22195:
  4641                           
  4642                           ;main_Logic.c: 159: if(Timer0_1Sec_Flag)
  4643  0173B6  0102               	movlb	2	; () banked
  4644  0173B8  51AE               	movf	_Timer0_1Sec_Flag& (0+255),w,b
  4645  0173BA  0102               	movlb	2	; () banked
  4646  0173BC  11AF               	iorwf	(_Timer0_1Sec_Flag+1)& (0+255),w,b
  4647  0173BE  B4D8               	btfsc	status,2,c
  4648  0173C0  D00C               	goto	l22203
  4649                           
  4650                           ; BSR set to: 2
  4651                           ;main_Logic.c: 160: {
  4652                           ;main_Logic.c: 161: Timer0_1Sec_Flag = 0;
  4653  0173C2  0E00               	movlw	0
  4654  0173C4  0102               	movlb	2	; () banked
  4655  0173C6  6FAF               	movwf	(_Timer0_1Sec_Flag+1)& (0+255),b
  4656  0173C8  0E00               	movlw	0
  4657  0173CA  6FAE               	movwf	_Timer0_1Sec_Flag& (0+255),b
  4658                           
  4659                           ; BSR set to: 2
  4660                           ;main_Logic.c: 162: Timer0_OneSecond_Function();
  4661  0173CC  EC66  F0C6         	call	_Timer0_OneSecond_Function	;wreg free
  4662                           
  4663                           ;main_Logic.c: 163: RA4 = ~RA4;
  4664  0173D0  B880               	btfsc	3968,4,c	;volatile
  4665  0173D2  D002               	goto	u15840
  4666  0173D4  8880               	bsf	3968,4,c	;volatile
  4667  0173D6  D001               	goto	l22203
  4668  0173D8                     u15840:
  4669  0173D8  9880               	bcf	3968,4,c	;volatile
  4670  0173DA                     l22203:
  4671                           
  4672                           ;main_Logic.c: 164: }
  4673                           ;main_Logic.c: 165: RS485_Data_communication();
  4674  0173DA  ECF8  F0CC         	call	_RS485_Data_communication	;wreg free
  4675  0173DE  D75A               	goto	l22105
  4676  0173E0                     __end_of_main:
  4677                           	opt stack 0
  4678                           tblptru	equ	0xFF8
  4679                           tblptrh	equ	0xFF7
  4680                           tblptrl	equ	0xFF6
  4681                           tablat	equ	0xFF5
  4682                           intcon	equ	0xFF2
  4683                           postinc0	equ	0xFEE
  4684                           wreg	equ	0xFE8
  4685                           postdec1	equ	0xFE5
  4686                           fsr1h	equ	0xFE2
  4687                           fsr1l	equ	0xFE1
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _usart_init *****************
  4691 ;; Defined at:
  4692 ;;		line 541 in file "UART.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;		None
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;		None
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  1    wreg      void 
  4699 ;; Registers used:
  4700 ;;		wreg, status,2
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;Total ram usage:        0 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    3
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_main
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text1
  4721  01A9AA                     __ptext1:
  4722                           	opt stack 0
  4723  01A9AA                     _usart_init:
  4724                           	opt stack 27
  4725                           
  4726                           ;UART.c: 544: TXSTAbits.SYNC = 0;
  4727                           
  4728                           ;incstack = 0
  4729  01A9AA  98AC               	bcf	4012,4,c	;volatile
  4730                           
  4731                           ;UART.c: 545: TXSTAbits.BRGH = 1;
  4732  01A9AC  84AC               	bsf	4012,2,c	;volatile
  4733                           
  4734                           ;UART.c: 546: BAUDCONbits.BRG16 = 0;
  4735  01A9AE  9665               	bcf	3941,3,c	;volatile
  4736                           
  4737                           ;UART.c: 547: TRISCbits.TRISC6 = 1;
  4738  01A9B0  8C94               	bsf	3988,6,c	;volatile
  4739                           
  4740                           ;UART.c: 548: TRISCbits.TRISC7 = 1;
  4741  01A9B2  8E94               	bsf	3988,7,c	;volatile
  4742                           
  4743                           ;UART.c: 549: TXSTAbits.TXEN = 1;
  4744  01A9B4  8AAC               	bsf	4012,5,c	;volatile
  4745                           
  4746                           ;UART.c: 550: RCSTAbits.CREN = 0;
  4747  01A9B6  98AB               	bcf	4011,4,c	;volatile
  4748                           
  4749                           ;UART.c: 551: RCSTAbits.SPEN = 1;
  4750  01A9B8  8EAB               	bsf	4011,7,c	;volatile
  4751                           
  4752                           ;UART.c: 552: SPBRG1=8;
  4753  01A9BA  0E08               	movlw	8
  4754  01A9BC  6EAF               	movwf	4015,c	;volatile
  4755                           
  4756                           ;UART.c: 554: PIR1bits.RC1IF = 0;
  4757  01A9BE  9A9E               	bcf	3998,5,c	;volatile
  4758                           
  4759                           ;UART.c: 555: PIE1bits.RC1IE = 0;
  4760  01A9C0  9A9D               	bcf	3997,5,c	;volatile
  4761  01A9C2  0012               	return		;funcret
  4762  01A9C4                     __end_of_usart_init:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           intcon	equ	0xFF2
  4769                           postinc0	equ	0xFEE
  4770                           wreg	equ	0xFE8
  4771                           postdec1	equ	0xFE5
  4772                           fsr1h	equ	0xFE2
  4773                           fsr1l	equ	0xFE1
  4774                           status	equ	0xFD8
  4775                           
  4776 ;; *************** function _startup_state_function *****************
  4777 ;; Defined at:
  4778 ;;		line 16 in file "state.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;		None
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;		None
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  1    wreg      void 
  4785 ;; Registers used:
  4786 ;;		wreg, status,2, status,0
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;Total ram usage:        0 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; Hardware stack levels required when called:    3
  4799 ;; This function calls:
  4800 ;;		Nothing
  4801 ;; This function is called by:
  4802 ;;		_main
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text2
  4807  01A8C0                     __ptext2:
  4808                           	opt stack 0
  4809  01A8C0                     _startup_state_function:
  4810                           	opt stack 27
  4811                           
  4812                           ;state.c: 18: if(Start_up_Error == 0)
  4813                           
  4814                           ;incstack = 0
  4815  01A8C0  0101               	movlb	1	; () banked
  4816  01A8C2  51FF               	movf	_Start_up_Error& (0+255),w,b
  4817  01A8C4  A4D8               	btfss	status,2,c
  4818  01A8C6  D006               	goto	l18879
  4819                           
  4820                           ; BSR set to: 1
  4821                           ;state.c: 19: {
  4822                           ;state.c: 20: Turbine_state = RAMPUP_STATE;
  4823  01A8C8  0E01               	movlw	1
  4824  01A8CA  0100               	movlb	0	; () banked
  4825  01A8CC  6FD8               	movwf	_Turbine_state& (0+255),b
  4826                           
  4827                           ;state.c: 21: VFD_RAMP = VFD_IN;
  4828  01A8CE  0E00               	movlw	0
  4829  01A8D0  0101               	movlb	1	; () banked
  4830  01A8D2  6FD7               	movwf	_VFD_RAMP& (0+255),b
  4831  01A8D4                     l18879:
  4832                           
  4833                           ; BSR set to: 1
  4834                           ;state.c: 22: }
  4835                           ;state.c: 23: if(Turbine_Restore_Error == 1)
  4836  01A8D4  0101               	movlb	1	; () banked
  4837  01A8D6  05CA               	decf	_Turbine_Restore_Error& (0+255),w,b
  4838  01A8D8  A4D8               	btfss	status,2,c
  4839  01A8DA  0012               	return	
  4840                           
  4841                           ; BSR set to: 1
  4842                           ;state.c: 24: {
  4843                           ;state.c: 25: Turbine_state = STOPPING_STATE;
  4844  01A8DC  0E03               	movlw	3
  4845  01A8DE  0100               	movlb	0	; () banked
  4846  01A8E0  6FD8               	movwf	_Turbine_state& (0+255),b
  4847  01A8E2  0012               	return	
  4848  01A8E4                     __end_of_startup_state_function:
  4849                           	opt stack 0
  4850                           tblptru	equ	0xFF8
  4851                           tblptrh	equ	0xFF7
  4852                           tblptrl	equ	0xFF6
  4853                           tablat	equ	0xFF5
  4854                           intcon	equ	0xFF2
  4855                           postinc0	equ	0xFEE
  4856                           wreg	equ	0xFE8
  4857                           postdec1	equ	0xFE5
  4858                           fsr1h	equ	0xFE2
  4859                           fsr1l	equ	0xFE1
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function _Y_PF_Calc *****************
  4863 ;; Defined at:
  4864 ;;		line 429 in file "Power_Meter.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        3 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    5
  4885 ;; This function calls:
  4886 ;;		___ftadd
  4887 ;;		___ftdiv
  4888 ;;		___ftge
  4889 ;;		___ftmul
  4890 ;;		___ftneg
  4891 ;; This function is called by:
  4892 ;;		_main
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text3
  4897  016476                     __ptext3:
  4898                           	opt stack 0
  4899  016476                     _Y_PF_Calc:
  4900                           	opt stack 25
  4901                           
  4902                           ;Power_Meter.c: 431: if(Ycurr_V_New < Ycurr_V_Old)
  4903                           
  4904                           ;incstack = 0
  4905  016476  C1FB  F08F         	movff	_Ycurr_V_New,___ftge@ff1
  4906  01647A  C1FC  F090         	movff	_Ycurr_V_New+1,___ftge@ff1+1
  4907  01647E  C1FD  F091         	movff	_Ycurr_V_New+2,___ftge@ff1+2
  4908  016482  C27E  F092         	movff	_Ycurr_V_Old,___ftge@ff2
  4909  016486  C27F  F093         	movff	_Ycurr_V_Old+1,___ftge@ff2+1
  4910  01648A  C280  F094         	movff	_Ycurr_V_Old+2,___ftge@ff2+2
  4911  01648E  EC09  F0C8         	call	___ftge	;wreg free
  4912  016492  0100               	movlb	0	; () banked
  4913  016494  B0D8               	btfsc	status,0,c
  4914  016496  D02E               	goto	l21685
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;Power_Meter.c: 432: {
  4918                           ;Power_Meter.c: 433: Y_V_Gap = ((Ycurr_V_New - Ycurr_V_Old + 1) + 65536);
  4919  016498  C1FB  F086         	movff	_Ycurr_V_New,___ftadd@f2
  4920  01649C  C1FC  F087         	movff	_Ycurr_V_New+1,___ftadd@f2+1
  4921  0164A0  C1FD  F088         	movff	_Ycurr_V_New+2,___ftadd@f2+2
  4922  0164A4  C27E  F079         	movff	_Ycurr_V_Old,___ftneg@f1
  4923  0164A8  C27F  F07A         	movff	_Ycurr_V_Old+1,___ftneg@f1+1
  4924  0164AC  C280  F07B         	movff	_Ycurr_V_Old+2,___ftneg@f1+2
  4925  0164B0  ECE0  F0D3         	call	___ftneg	;wreg free
  4926  0164B4  C079  F083         	movff	?___ftneg,___ftadd@f1
  4927  0164B8  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
  4928  0164BC  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
  4929  0164C0  ECE4  F0AF         	call	___ftadd	;wreg free
  4930  0164C4  C083  F0AA         	movff	?___ftadd,_Y_PF_Calc$8146
  4931  0164C8  C084  F0AB         	movff	?___ftadd+1,_Y_PF_Calc$8146+1
  4932  0164CC  C085  F0AC         	movff	?___ftadd+2,_Y_PF_Calc$8146+2
  4933                           
  4934                           ;Power_Meter.c: 432: {
  4935                           ;Power_Meter.c: 433: Y_V_Gap = ((Ycurr_V_New - Ycurr_V_Old + 1) + 65536);
  4936  0164D0  C0AA  F083         	movff	_Y_PF_Calc$8146,___ftadd@f1
  4937  0164D4  C0AB  F084         	movff	_Y_PF_Calc$8146+1,___ftadd@f1+1
  4938  0164D8  C0AC  F085         	movff	_Y_PF_Calc$8146+2,___ftadd@f1+2
  4939  0164DC  0E01               	movlw	1
  4940  0164DE  0100               	movlb	0	; () banked
  4941  0164E0  6F86               	movwf	___ftadd@f2& (0+255),b
  4942  0164E2  0E80               	movlw	128
  4943  0164E4  0100               	movlb	0	; () banked
  4944  0164E6  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  4945  0164E8  0E47               	movlw	71
  4946  0164EA  0100               	movlb	0	; () banked
  4947  0164EC  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  4948  0164EE  ECE4  F0AF         	call	___ftadd	;wreg free
  4949  0164F2  D088               	goto	L1
  4950  0164F4                     l21685:
  4951                           
  4952                           ;Power_Meter.c: 436: else if((Ycurr_New + 100) < Ycurr_V_New)
  4953  0164F4  0E00               	movlw	0
  4954  0164F6  0100               	movlb	0	; () banked
  4955  0164F8  6F86               	movwf	___ftadd@f2& (0+255),b
  4956  0164FA  0EC8               	movlw	200
  4957  0164FC  0100               	movlb	0	; () banked
  4958  0164FE  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  4959  016500  0E42               	movlw	66
  4960  016502  0100               	movlb	0	; () banked
  4961  016504  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  4962  016506  C1F8  F083         	movff	_Ycurr_New,___ftadd@f1
  4963  01650A  C1F9  F084         	movff	_Ycurr_New+1,___ftadd@f1+1
  4964  01650E  C1FA  F085         	movff	_Ycurr_New+2,___ftadd@f1+2
  4965  016512  ECE4  F0AF         	call	___ftadd	;wreg free
  4966  016516  C083  F08F         	movff	?___ftadd,___ftge@ff1
  4967  01651A  C084  F090         	movff	?___ftadd+1,___ftge@ff1+1
  4968  01651E  C085  F091         	movff	?___ftadd+2,___ftge@ff1+2
  4969  016522  C1FB  F092         	movff	_Ycurr_V_New,___ftge@ff2
  4970  016526  C1FC  F093         	movff	_Ycurr_V_New+1,___ftge@ff2+1
  4971  01652A  C1FD  F094         	movff	_Ycurr_V_New+2,___ftge@ff2+2
  4972  01652E  EC09  F0C8         	call	___ftge	;wreg free
  4973  016532  0100               	movlb	0	; () banked
  4974  016534  B0D8               	btfsc	status,0,c
  4975  016536  D034               	goto	l21689
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;Power_Meter.c: 437: {
  4979                           ;Power_Meter.c: 438: Y_C_Gap = ((Ycurr_New - Ycurr_V_New + 1) + 65536);
  4980  016538  C1F8  F086         	movff	_Ycurr_New,___ftadd@f2
  4981  01653C  C1F9  F087         	movff	_Ycurr_New+1,___ftadd@f2+1
  4982  016540  C1FA  F088         	movff	_Ycurr_New+2,___ftadd@f2+2
  4983  016544  C1FB  F079         	movff	_Ycurr_V_New,___ftneg@f1
  4984  016548  C1FC  F07A         	movff	_Ycurr_V_New+1,___ftneg@f1+1
  4985  01654C  C1FD  F07B         	movff	_Ycurr_V_New+2,___ftneg@f1+2
  4986  016550  ECE0  F0D3         	call	___ftneg	;wreg free
  4987  016554  C079  F083         	movff	?___ftneg,___ftadd@f1
  4988  016558  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
  4989  01655C  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
  4990  016560  ECE4  F0AF         	call	___ftadd	;wreg free
  4991  016564  C083  F0AA         	movff	?___ftadd,_Y_PF_Calc$8146
  4992  016568  C084  F0AB         	movff	?___ftadd+1,_Y_PF_Calc$8146+1
  4993  01656C  C085  F0AC         	movff	?___ftadd+2,_Y_PF_Calc$8146+2
  4994                           
  4995                           ;Power_Meter.c: 437: {
  4996                           ;Power_Meter.c: 438: Y_C_Gap = ((Ycurr_New - Ycurr_V_New + 1) + 65536);
  4997  016570  C0AA  F083         	movff	_Y_PF_Calc$8146,___ftadd@f1
  4998  016574  C0AB  F084         	movff	_Y_PF_Calc$8146+1,___ftadd@f1+1
  4999  016578  C0AC  F085         	movff	_Y_PF_Calc$8146+2,___ftadd@f1+2
  5000  01657C  0E01               	movlw	1
  5001  01657E  0100               	movlb	0	; () banked
  5002  016580  6F86               	movwf	___ftadd@f2& (0+255),b
  5003  016582  0E80               	movlw	128
  5004  016584  0100               	movlb	0	; () banked
  5005  016586  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  5006  016588  0E47               	movlw	71
  5007  01658A  0100               	movlb	0	; () banked
  5008  01658C  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  5009  01658E  ECE4  F0AF         	call	___ftadd	;wreg free
  5010  016592  C083  F4C3         	movff	?___ftadd,_Y_C_Gap
  5011  016596  C084  F4C4         	movff	?___ftadd+1,_Y_C_Gap+1
  5012  01659A  C085  F4C5         	movff	?___ftadd+2,_Y_C_Gap+2
  5013                           
  5014                           ;Power_Meter.c: 439: }
  5015  01659E  D038               	goto	l9323
  5016  0165A0                     l21689:
  5017                           
  5018                           ;Power_Meter.c: 441: else
  5019                           ;Power_Meter.c: 442: {
  5020                           ;Power_Meter.c: 443: Y_C_Gap = (Ycurr_New - Ycurr_V_New);
  5021  0165A0  C1FB  F079         	movff	_Ycurr_V_New,___ftneg@f1
  5022  0165A4  C1FC  F07A         	movff	_Ycurr_V_New+1,___ftneg@f1+1
  5023  0165A8  C1FD  F07B         	movff	_Ycurr_V_New+2,___ftneg@f1+2
  5024  0165AC  ECE0  F0D3         	call	___ftneg	;wreg free
  5025  0165B0  C079  F083         	movff	?___ftneg,___ftadd@f1
  5026  0165B4  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
  5027  0165B8  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
  5028  0165BC  C1F8  F086         	movff	_Ycurr_New,___ftadd@f2
  5029  0165C0  C1F9  F087         	movff	_Ycurr_New+1,___ftadd@f2+1
  5030  0165C4  C1FA  F088         	movff	_Ycurr_New+2,___ftadd@f2+2
  5031  0165C8  ECE4  F0AF         	call	___ftadd	;wreg free
  5032  0165CC  C083  F4C3         	movff	?___ftadd,_Y_C_Gap
  5033  0165D0  C084  F4C4         	movff	?___ftadd+1,_Y_C_Gap+1
  5034  0165D4  C085  F4C5         	movff	?___ftadd+2,_Y_C_Gap+2
  5035                           
  5036                           ;Power_Meter.c: 444: Y_V_Gap = (Ycurr_V_New - Ycurr_V_Old);
  5037  0165D8  C27E  F079         	movff	_Ycurr_V_Old,___ftneg@f1
  5038  0165DC  C27F  F07A         	movff	_Ycurr_V_Old+1,___ftneg@f1+1
  5039  0165E0  C280  F07B         	movff	_Ycurr_V_Old+2,___ftneg@f1+2
  5040  0165E4  ECE0  F0D3         	call	___ftneg	;wreg free
  5041  0165E8  C079  F083         	movff	?___ftneg,___ftadd@f1
  5042  0165EC  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
  5043  0165F0  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
  5044  0165F4  C1FB  F086         	movff	_Ycurr_V_New,___ftadd@f2
  5045  0165F8  C1FC  F087         	movff	_Ycurr_V_New+1,___ftadd@f2+1
  5046  0165FC  C1FD  F088         	movff	_Ycurr_V_New+2,___ftadd@f2+2
  5047  016600  ECE4  F0AF         	call	___ftadd	;wreg free
  5048  016604                     L1:
  5049  016604  C083  F4C9         	movff	?___ftadd,_Y_V_Gap
  5050  016608  C084  F4CA         	movff	?___ftadd+1,_Y_V_Gap+1
  5051  01660C  C085  F4CB         	movff	?___ftadd+2,_Y_V_Gap+2
  5052  016610                     l9323:
  5053                           
  5054                           ;Power_Meter.c: 445: }
  5055                           ;Power_Meter.c: 447: Y_Gap_Ratio = (Y_C_Gap / Y_V_Gap);
  5056  016610  C4C3  F09B         	movff	_Y_C_Gap,___ftdiv@f1
  5057  016614  C4C4  F09C         	movff	_Y_C_Gap+1,___ftdiv@f1+1
  5058  016618  C4C5  F09D         	movff	_Y_C_Gap+2,___ftdiv@f1+2
  5059  01661C  C4C9  F09E         	movff	_Y_V_Gap,___ftdiv@f2
  5060  016620  C4CA  F09F         	movff	_Y_V_Gap+1,___ftdiv@f2+1
  5061  016624  C4CB  F0A0         	movff	_Y_V_Gap+2,___ftdiv@f2+2
  5062  016628  EC89  F0BF         	call	___ftdiv	;wreg free
  5063  01662C  C09B  F130         	movff	?___ftdiv,_Y_Gap_Ratio
  5064  016630  C09C  F131         	movff	?___ftdiv+1,_Y_Gap_Ratio+1
  5065  016634  C09D  F132         	movff	?___ftdiv+2,_Y_Gap_Ratio+2
  5066                           
  5067                           ;Power_Meter.c: 448: Y_Deg = Y_Gap_Ratio * 360;
  5068  016638  C130  F06A         	movff	_Y_Gap_Ratio,___ftmul@f1
  5069  01663C  C131  F06B         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5070  016640  C132  F06C         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5071  016644  0E00               	movlw	0
  5072  016646  0100               	movlb	0	; () banked
  5073  016648  6F6D               	movwf	___ftmul@f2& (0+255),b
  5074  01664A  0EB4               	movlw	180
  5075  01664C  0100               	movlb	0	; () banked
  5076  01664E  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  5077  016650  0E43               	movlw	67
  5078  016652  0100               	movlb	0	; () banked
  5079  016654  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  5080  016656  EC83  F0BD         	call	___ftmul	;wreg free
  5081  01665A  C06A  F660         	movff	?___ftmul,_Y_Deg
  5082  01665E  C06B  F661         	movff	?___ftmul+1,_Y_Deg+1
  5083  016662  C06C  F662         	movff	?___ftmul+2,_Y_Deg+2
  5084                           
  5085                           ;Power_Meter.c: 450: YGR_Arr_1[4] = YGR_Arr_1[3];
  5086  016666  C3ED  F3F0         	movff	_YGR_Arr_1+9,_YGR_Arr_1+12
  5087  01666A  C3EE  F3F1         	movff	_YGR_Arr_1+10,_YGR_Arr_1+13
  5088  01666E  C3EF  F3F2         	movff	_YGR_Arr_1+11,_YGR_Arr_1+14
  5089                           
  5090                           ;Power_Meter.c: 451: YGR_Arr_1[3] = YGR_Arr_1[2];
  5091  016672  C3EA  F3ED         	movff	_YGR_Arr_1+6,_YGR_Arr_1+9
  5092  016676  C3EB  F3EE         	movff	_YGR_Arr_1+7,_YGR_Arr_1+10
  5093  01667A  C3EC  F3EF         	movff	_YGR_Arr_1+8,_YGR_Arr_1+11
  5094                           
  5095                           ;Power_Meter.c: 452: YGR_Arr_1[2] = YGR_Arr_1[1];
  5096  01667E  C3E7  F3EA         	movff	_YGR_Arr_1+3,_YGR_Arr_1+6
  5097  016682  C3E8  F3EB         	movff	_YGR_Arr_1+4,_YGR_Arr_1+7
  5098  016686  C3E9  F3EC         	movff	_YGR_Arr_1+5,_YGR_Arr_1+8
  5099                           
  5100                           ;Power_Meter.c: 453: YGR_Arr_1[1] = YGR_Arr_1[0];
  5101  01668A  C3E4  F3E7         	movff	_YGR_Arr_1,_YGR_Arr_1+3
  5102  01668E  C3E5  F3E8         	movff	_YGR_Arr_1+1,_YGR_Arr_1+4
  5103  016692  C3E6  F3E9         	movff	_YGR_Arr_1+2,_YGR_Arr_1+5
  5104                           
  5105                           ;Power_Meter.c: 454: YGR_Arr_1[0] = Y_Gap_Ratio;
  5106  016696  C130  F3E4         	movff	_Y_Gap_Ratio,_YGR_Arr_1
  5107  01669A  C131  F3E5         	movff	_Y_Gap_Ratio+1,_YGR_Arr_1+1
  5108  01669E  C132  F3E6         	movff	_Y_Gap_Ratio+2,_YGR_Arr_1+2
  5109  0166A2  0012               	return		;funcret
  5110  0166A4                     __end_of_Y_PF_Calc:
  5111                           	opt stack 0
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           intcon	equ	0xFF2
  5117                           postinc0	equ	0xFEE
  5118                           wreg	equ	0xFE8
  5119                           postdec1	equ	0xFE5
  5120                           fsr1h	equ	0xFE2
  5121                           fsr1l	equ	0xFE1
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function _Y_PF_Avg *****************
  5125 ;; Defined at:
  5126 ;;		line 458 in file "Power_Meter.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;		None
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      void 
  5133 ;; Registers used:
  5134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
  5144 ;;Total ram usage:       84 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    8
  5147 ;; This function calls:
  5148 ;;		___ftadd
  5149 ;;		___ftdiv
  5150 ;;		___ftge
  5151 ;;		___ftmul
  5152 ;;		_cos
  5153 ;; This function is called by:
  5154 ;;		_main
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           	psect	text4
  5159  011A16                     __ptext4:
  5160                           	opt stack 0
  5161  011A16                     _Y_PF_Avg:
  5162                           	opt stack 22
  5163                           
  5164                           ;Power_Meter.c: 460: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5165                           
  5166                           ;incstack = 0
  5167  011A16  C3ED  F086         	movff	_YGR_Arr_1+9,___ftadd@f2
  5168  011A1A  C3EE  F087         	movff	_YGR_Arr_1+10,___ftadd@f2+1
  5169  011A1E  C3EF  F088         	movff	_YGR_Arr_1+11,___ftadd@f2+2
  5170  011A22  C3F0  F083         	movff	_YGR_Arr_1+12,___ftadd@f1
  5171  011A26  C3F1  F084         	movff	_YGR_Arr_1+13,___ftadd@f1+1
  5172  011A2A  C3F2  F085         	movff	_YGR_Arr_1+14,___ftadd@f1+2
  5173  011A2E  ECE4  F0AF         	call	___ftadd	;wreg free
  5174  011A32  C083  F6B1         	movff	?___ftadd,_Y_PF_Avg$8147
  5175  011A36  C084  F6B2         	movff	?___ftadd+1,_Y_PF_Avg$8147+1
  5176  011A3A  C085  F6B3         	movff	?___ftadd+2,_Y_PF_Avg$8147+2
  5177                           
  5178                           ;Power_Meter.c: 460: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5179  011A3E  C3EA  F086         	movff	_YGR_Arr_1+6,___ftadd@f2
  5180  011A42  C3EB  F087         	movff	_YGR_Arr_1+7,___ftadd@f2+1
  5181  011A46  C3EC  F088         	movff	_YGR_Arr_1+8,___ftadd@f2+2
  5182  011A4A  C6B1  F083         	movff	_Y_PF_Avg$8147,___ftadd@f1
  5183  011A4E  C6B2  F084         	movff	_Y_PF_Avg$8147+1,___ftadd@f1+1
  5184  011A52  C6B3  F085         	movff	_Y_PF_Avg$8147+2,___ftadd@f1+2
  5185  011A56  ECE4  F0AF         	call	___ftadd	;wreg free
  5186  011A5A  C083  F6B4         	movff	?___ftadd,_Y_PF_Avg$8148
  5187  011A5E  C084  F6B5         	movff	?___ftadd+1,_Y_PF_Avg$8148+1
  5188  011A62  C085  F6B6         	movff	?___ftadd+2,_Y_PF_Avg$8148+2
  5189                           
  5190                           ;Power_Meter.c: 460: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5191  011A66  C3E7  F086         	movff	_YGR_Arr_1+3,___ftadd@f2
  5192  011A6A  C3E8  F087         	movff	_YGR_Arr_1+4,___ftadd@f2+1
  5193  011A6E  C3E9  F088         	movff	_YGR_Arr_1+5,___ftadd@f2+2
  5194  011A72  C6B4  F083         	movff	_Y_PF_Avg$8148,___ftadd@f1
  5195  011A76  C6B5  F084         	movff	_Y_PF_Avg$8148+1,___ftadd@f1+1
  5196  011A7A  C6B6  F085         	movff	_Y_PF_Avg$8148+2,___ftadd@f1+2
  5197  011A7E  ECE4  F0AF         	call	___ftadd	;wreg free
  5198  011A82  C083  F6B7         	movff	?___ftadd,_Y_PF_Avg$8149
  5199  011A86  C084  F6B8         	movff	?___ftadd+1,_Y_PF_Avg$8149+1
  5200  011A8A  C085  F6B9         	movff	?___ftadd+2,_Y_PF_Avg$8149+2
  5201                           
  5202                           ;Power_Meter.c: 460: YGR_Avg_1 = ((YGR_Arr_1[4] + YGR_Arr_1[3] + YGR_Arr_1[2] + YGR_Arr_
      +                          1[1] + YGR_Arr_1[0]) / 5);
  5203  011A8E  C3E4  F086         	movff	_YGR_Arr_1,___ftadd@f2
  5204  011A92  C3E5  F087         	movff	_YGR_Arr_1+1,___ftadd@f2+1
  5205  011A96  C3E6  F088         	movff	_YGR_Arr_1+2,___ftadd@f2+2
  5206  011A9A  C6B7  F083         	movff	_Y_PF_Avg$8149,___ftadd@f1
  5207  011A9E  C6B8  F084         	movff	_Y_PF_Avg$8149+1,___ftadd@f1+1
  5208  011AA2  C6B9  F085         	movff	_Y_PF_Avg$8149+2,___ftadd@f1+2
  5209  011AA6  ECE4  F0AF         	call	___ftadd	;wreg free
  5210  011AAA  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  5211  011AAE  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  5212  011AB2  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  5213  011AB6  0E00               	movlw	0
  5214  011AB8  0100               	movlb	0	; () banked
  5215  011ABA  6F9E               	movwf	___ftdiv@f2& (0+255),b
  5216  011ABC  0EA0               	movlw	160
  5217  011ABE  0100               	movlb	0	; () banked
  5218  011AC0  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  5219  011AC2  0E40               	movlw	64
  5220  011AC4  0100               	movlb	0	; () banked
  5221  011AC6  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  5222  011AC8  EC89  F0BF         	call	___ftdiv	;wreg free
  5223  011ACC  C09B  F26F         	movff	?___ftdiv,_YGR_Avg_1
  5224  011AD0  C09C  F270         	movff	?___ftdiv+1,_YGR_Avg_1+1
  5225  011AD4  C09D  F271         	movff	?___ftdiv+2,_YGR_Avg_1+2
  5226                           
  5227                           ;Power_Meter.c: 463: YGR_Arr[29] = YGR_Arr[28];
  5228  011AD8  C3AE  F3B1         	movff	_YGR_Arr+84,_YGR_Arr+87
  5229  011ADC  C3AF  F3B2         	movff	_YGR_Arr+85,_YGR_Arr+88
  5230  011AE0  C3B0  F3B3         	movff	_YGR_Arr+86,_YGR_Arr+89
  5231                           
  5232                           ;Power_Meter.c: 464: YGR_Arr[28] = YGR_Arr[27];
  5233  011AE4  C3AB  F3AE         	movff	_YGR_Arr+81,_YGR_Arr+84
  5234  011AE8  C3AC  F3AF         	movff	_YGR_Arr+82,_YGR_Arr+85
  5235  011AEC  C3AD  F3B0         	movff	_YGR_Arr+83,_YGR_Arr+86
  5236                           
  5237                           ;Power_Meter.c: 465: YGR_Arr[27] = YGR_Arr[26];
  5238  011AF0  C3A8  F3AB         	movff	_YGR_Arr+78,_YGR_Arr+81
  5239  011AF4  C3A9  F3AC         	movff	_YGR_Arr+79,_YGR_Arr+82
  5240  011AF8  C3AA  F3AD         	movff	_YGR_Arr+80,_YGR_Arr+83
  5241                           
  5242                           ;Power_Meter.c: 466: YGR_Arr[26] = YGR_Arr[25];
  5243  011AFC  C3A5  F3A8         	movff	_YGR_Arr+75,_YGR_Arr+78
  5244  011B00  C3A6  F3A9         	movff	_YGR_Arr+76,_YGR_Arr+79
  5245  011B04  C3A7  F3AA         	movff	_YGR_Arr+77,_YGR_Arr+80
  5246                           
  5247                           ;Power_Meter.c: 467: YGR_Arr[25] = YGR_Arr[24];
  5248  011B08  C3A2  F3A5         	movff	_YGR_Arr+72,_YGR_Arr+75
  5249  011B0C  C3A3  F3A6         	movff	_YGR_Arr+73,_YGR_Arr+76
  5250  011B10  C3A4  F3A7         	movff	_YGR_Arr+74,_YGR_Arr+77
  5251                           
  5252                           ;Power_Meter.c: 468: YGR_Arr[24] = YGR_Arr[23];
  5253  011B14  C39F  F3A2         	movff	_YGR_Arr+69,_YGR_Arr+72
  5254  011B18  C3A0  F3A3         	movff	_YGR_Arr+70,_YGR_Arr+73
  5255  011B1C  C3A1  F3A4         	movff	_YGR_Arr+71,_YGR_Arr+74
  5256                           
  5257                           ;Power_Meter.c: 469: YGR_Arr[23] = YGR_Arr[22];
  5258  011B20  C39C  F39F         	movff	_YGR_Arr+66,_YGR_Arr+69
  5259  011B24  C39D  F3A0         	movff	_YGR_Arr+67,_YGR_Arr+70
  5260  011B28  C39E  F3A1         	movff	_YGR_Arr+68,_YGR_Arr+71
  5261                           
  5262                           ;Power_Meter.c: 470: YGR_Arr[22] = YGR_Arr[21];
  5263  011B2C  C399  F39C         	movff	_YGR_Arr+63,_YGR_Arr+66
  5264  011B30  C39A  F39D         	movff	_YGR_Arr+64,_YGR_Arr+67
  5265  011B34  C39B  F39E         	movff	_YGR_Arr+65,_YGR_Arr+68
  5266                           
  5267                           ;Power_Meter.c: 471: YGR_Arr[21] = YGR_Arr[20];
  5268  011B38  C396  F399         	movff	_YGR_Arr+60,_YGR_Arr+63
  5269  011B3C  C397  F39A         	movff	_YGR_Arr+61,_YGR_Arr+64
  5270  011B40  C398  F39B         	movff	_YGR_Arr+62,_YGR_Arr+65
  5271                           
  5272                           ;Power_Meter.c: 472: YGR_Arr[20] = YGR_Arr[19];
  5273  011B44  C393  F396         	movff	_YGR_Arr+57,_YGR_Arr+60
  5274  011B48  C394  F397         	movff	_YGR_Arr+58,_YGR_Arr+61
  5275  011B4C  C395  F398         	movff	_YGR_Arr+59,_YGR_Arr+62
  5276                           
  5277                           ;Power_Meter.c: 473: YGR_Arr[19] = YGR_Arr[18];
  5278  011B50  C390  F393         	movff	_YGR_Arr+54,_YGR_Arr+57
  5279  011B54  C391  F394         	movff	_YGR_Arr+55,_YGR_Arr+58
  5280  011B58  C392  F395         	movff	_YGR_Arr+56,_YGR_Arr+59
  5281                           
  5282                           ;Power_Meter.c: 474: YGR_Arr[18] = YGR_Arr[17];
  5283  011B5C  C38D  F390         	movff	_YGR_Arr+51,_YGR_Arr+54
  5284  011B60  C38E  F391         	movff	_YGR_Arr+52,_YGR_Arr+55
  5285  011B64  C38F  F392         	movff	_YGR_Arr+53,_YGR_Arr+56
  5286                           
  5287                           ;Power_Meter.c: 475: YGR_Arr[17] = YGR_Arr[16];
  5288  011B68  C38A  F38D         	movff	_YGR_Arr+48,_YGR_Arr+51
  5289  011B6C  C38B  F38E         	movff	_YGR_Arr+49,_YGR_Arr+52
  5290  011B70  C38C  F38F         	movff	_YGR_Arr+50,_YGR_Arr+53
  5291                           
  5292                           ;Power_Meter.c: 476: YGR_Arr[16] = YGR_Arr[15];
  5293  011B74  C387  F38A         	movff	_YGR_Arr+45,_YGR_Arr+48
  5294  011B78  C388  F38B         	movff	_YGR_Arr+46,_YGR_Arr+49
  5295  011B7C  C389  F38C         	movff	_YGR_Arr+47,_YGR_Arr+50
  5296                           
  5297                           ;Power_Meter.c: 477: YGR_Arr[15] = YGR_Arr[14];
  5298  011B80  C384  F387         	movff	_YGR_Arr+42,_YGR_Arr+45
  5299  011B84  C385  F388         	movff	_YGR_Arr+43,_YGR_Arr+46
  5300  011B88  C386  F389         	movff	_YGR_Arr+44,_YGR_Arr+47
  5301                           
  5302                           ;Power_Meter.c: 478: YGR_Arr[14] = YGR_Arr[13];
  5303  011B8C  C381  F384         	movff	_YGR_Arr+39,_YGR_Arr+42
  5304  011B90  C382  F385         	movff	_YGR_Arr+40,_YGR_Arr+43
  5305  011B94  C383  F386         	movff	_YGR_Arr+41,_YGR_Arr+44
  5306                           
  5307                           ;Power_Meter.c: 479: YGR_Arr[13] = YGR_Arr[12];
  5308  011B98  C37E  F381         	movff	_YGR_Arr+36,_YGR_Arr+39
  5309  011B9C  C37F  F382         	movff	_YGR_Arr+37,_YGR_Arr+40
  5310  011BA0  C380  F383         	movff	_YGR_Arr+38,_YGR_Arr+41
  5311                           
  5312                           ;Power_Meter.c: 480: YGR_Arr[12] = YGR_Arr[11];
  5313  011BA4  C37B  F37E         	movff	_YGR_Arr+33,_YGR_Arr+36
  5314  011BA8  C37C  F37F         	movff	_YGR_Arr+34,_YGR_Arr+37
  5315  011BAC  C37D  F380         	movff	_YGR_Arr+35,_YGR_Arr+38
  5316                           
  5317                           ;Power_Meter.c: 481: YGR_Arr[11] = YGR_Arr[10];
  5318  011BB0  C378  F37B         	movff	_YGR_Arr+30,_YGR_Arr+33
  5319  011BB4  C379  F37C         	movff	_YGR_Arr+31,_YGR_Arr+34
  5320  011BB8  C37A  F37D         	movff	_YGR_Arr+32,_YGR_Arr+35
  5321                           
  5322                           ;Power_Meter.c: 482: YGR_Arr[10] = YGR_Arr[9];
  5323  011BBC  C375  F378         	movff	_YGR_Arr+27,_YGR_Arr+30
  5324  011BC0  C376  F379         	movff	_YGR_Arr+28,_YGR_Arr+31
  5325  011BC4  C377  F37A         	movff	_YGR_Arr+29,_YGR_Arr+32
  5326                           
  5327                           ;Power_Meter.c: 483: YGR_Arr[9] = YGR_Arr[8];
  5328  011BC8  C372  F375         	movff	_YGR_Arr+24,_YGR_Arr+27
  5329  011BCC  C373  F376         	movff	_YGR_Arr+25,_YGR_Arr+28
  5330  011BD0  C374  F377         	movff	_YGR_Arr+26,_YGR_Arr+29
  5331                           
  5332                           ;Power_Meter.c: 484: YGR_Arr[8] = YGR_Arr[7];
  5333  011BD4  C36F  F372         	movff	_YGR_Arr+21,_YGR_Arr+24
  5334  011BD8  C370  F373         	movff	_YGR_Arr+22,_YGR_Arr+25
  5335  011BDC  C371  F374         	movff	_YGR_Arr+23,_YGR_Arr+26
  5336                           
  5337                           ;Power_Meter.c: 485: YGR_Arr[7] = YGR_Arr[6];
  5338  011BE0  C36C  F36F         	movff	_YGR_Arr+18,_YGR_Arr+21
  5339  011BE4  C36D  F370         	movff	_YGR_Arr+19,_YGR_Arr+22
  5340  011BE8  C36E  F371         	movff	_YGR_Arr+20,_YGR_Arr+23
  5341                           
  5342                           ;Power_Meter.c: 486: YGR_Arr[6] = YGR_Arr[5];
  5343  011BEC  C369  F36C         	movff	_YGR_Arr+15,_YGR_Arr+18
  5344  011BF0  C36A  F36D         	movff	_YGR_Arr+16,_YGR_Arr+19
  5345  011BF4  C36B  F36E         	movff	_YGR_Arr+17,_YGR_Arr+20
  5346                           
  5347                           ;Power_Meter.c: 487: YGR_Arr[5] = YGR_Arr[4];
  5348  011BF8  C366  F369         	movff	_YGR_Arr+12,_YGR_Arr+15
  5349  011BFC  C367  F36A         	movff	_YGR_Arr+13,_YGR_Arr+16
  5350  011C00  C368  F36B         	movff	_YGR_Arr+14,_YGR_Arr+17
  5351                           
  5352                           ;Power_Meter.c: 488: YGR_Arr[4] = YGR_Arr[3];
  5353  011C04  C363  F366         	movff	_YGR_Arr+9,_YGR_Arr+12
  5354  011C08  C364  F367         	movff	_YGR_Arr+10,_YGR_Arr+13
  5355  011C0C  C365  F368         	movff	_YGR_Arr+11,_YGR_Arr+14
  5356                           
  5357                           ;Power_Meter.c: 489: YGR_Arr[3] = YGR_Arr[2];
  5358  011C10  C360  F363         	movff	_YGR_Arr+6,_YGR_Arr+9
  5359  011C14  C361  F364         	movff	_YGR_Arr+7,_YGR_Arr+10
  5360  011C18  C362  F365         	movff	_YGR_Arr+8,_YGR_Arr+11
  5361                           
  5362                           ;Power_Meter.c: 490: YGR_Arr[2] = YGR_Arr[1];
  5363  011C1C  C35D  F360         	movff	_YGR_Arr+3,_YGR_Arr+6
  5364  011C20  C35E  F361         	movff	_YGR_Arr+4,_YGR_Arr+7
  5365  011C24  C35F  F362         	movff	_YGR_Arr+5,_YGR_Arr+8
  5366                           
  5367                           ;Power_Meter.c: 491: YGR_Arr[1] = YGR_Arr[0];
  5368  011C28  C35A  F35D         	movff	_YGR_Arr,_YGR_Arr+3
  5369  011C2C  C35B  F35E         	movff	_YGR_Arr+1,_YGR_Arr+4
  5370  011C30  C35C  F35F         	movff	_YGR_Arr+2,_YGR_Arr+5
  5371                           
  5372                           ;Power_Meter.c: 494: if( (YGR_Avg_1 > (Y_Gap_Ratio * 0.8)) && (YGR_Avg_1 < (Y_Gap_Ratio 
      +                          * 1.2)) )
  5373  011C34  0ECD               	movlw	205
  5374  011C36  0100               	movlb	0	; () banked
  5375  011C38  6F6D               	movwf	___ftmul@f2& (0+255),b
  5376  011C3A  0E4C               	movlw	76
  5377  011C3C  0100               	movlb	0	; () banked
  5378  011C3E  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  5379  011C40  0E3F               	movlw	63
  5380  011C42  0100               	movlb	0	; () banked
  5381  011C44  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  5382  011C46  C130  F06A         	movff	_Y_Gap_Ratio,___ftmul@f1
  5383  011C4A  C131  F06B         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5384  011C4E  C132  F06C         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5385  011C52  EC83  F0BD         	call	___ftmul	;wreg free
  5386  011C56  C06A  F08F         	movff	?___ftmul,___ftge@ff1
  5387  011C5A  C06B  F090         	movff	?___ftmul+1,___ftge@ff1+1
  5388  011C5E  C06C  F091         	movff	?___ftmul+2,___ftge@ff1+2
  5389  011C62  C26F  F092         	movff	_YGR_Avg_1,___ftge@ff2
  5390  011C66  C270  F093         	movff	_YGR_Avg_1+1,___ftge@ff2+1
  5391  011C6A  C271  F094         	movff	_YGR_Avg_1+2,___ftge@ff2+2
  5392  011C6E  EC09  F0C8         	call	___ftge	;wreg free
  5393  011C72  0100               	movlb	0	; () banked
  5394  011C74  B0D8               	btfsc	status,0,c
  5395  011C76  D028               	goto	l21765
  5396                           
  5397                           ; BSR set to: 0
  5398  011C78  C26F  F08F         	movff	_YGR_Avg_1,___ftge@ff1
  5399  011C7C  C270  F090         	movff	_YGR_Avg_1+1,___ftge@ff1+1
  5400  011C80  C271  F091         	movff	_YGR_Avg_1+2,___ftge@ff1+2
  5401  011C84  0E9A               	movlw	154
  5402  011C86  0100               	movlb	0	; () banked
  5403  011C88  6F6D               	movwf	___ftmul@f2& (0+255),b
  5404  011C8A  0E99               	movlw	153
  5405  011C8C  0100               	movlb	0	; () banked
  5406  011C8E  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  5407  011C90  0E3F               	movlw	63
  5408  011C92  0100               	movlb	0	; () banked
  5409  011C94  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  5410  011C96  C130  F06A         	movff	_Y_Gap_Ratio,___ftmul@f1
  5411  011C9A  C131  F06B         	movff	_Y_Gap_Ratio+1,___ftmul@f1+1
  5412  011C9E  C132  F06C         	movff	_Y_Gap_Ratio+2,___ftmul@f1+2
  5413  011CA2  EC83  F0BD         	call	___ftmul	;wreg free
  5414  011CA6  C06A  F092         	movff	?___ftmul,___ftge@ff2
  5415  011CAA  C06B  F093         	movff	?___ftmul+1,___ftge@ff2+1
  5416  011CAE  C06C  F094         	movff	?___ftmul+2,___ftge@ff2+2
  5417  011CB2  EC09  F0C8         	call	___ftge	;wreg free
  5418  011CB6  0100               	movlb	0	; () banked
  5419  011CB8  B0D8               	btfsc	status,0,c
  5420  011CBA  D006               	goto	l21765
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;Power_Meter.c: 495: {
  5424                           ;Power_Meter.c: 496: YGR_Arr[0] = Y_Gap_Ratio;
  5425  011CBC  C130  F35A         	movff	_Y_Gap_Ratio,_YGR_Arr
  5426  011CC0  C131  F35B         	movff	_Y_Gap_Ratio+1,_YGR_Arr+1
  5427  011CC4  C132  F35C         	movff	_Y_Gap_Ratio+2,_YGR_Arr+2
  5428  011CC8                     l21765:
  5429                           
  5430                           ; BSR set to: 0
  5431                           ;Power_Meter.c: 497: }
  5432                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5433                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5434                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5435                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5436  011CC8  C3AE  F086         	movff	_YGR_Arr+84,___ftadd@f2
  5437  011CCC  C3AF  F087         	movff	_YGR_Arr+85,___ftadd@f2+1
  5438  011CD0  C3B0  F088         	movff	_YGR_Arr+86,___ftadd@f2+2
  5439  011CD4  C3B1  F083         	movff	_YGR_Arr+87,___ftadd@f1
  5440  011CD8  C3B2  F084         	movff	_YGR_Arr+88,___ftadd@f1+1
  5441  011CDC  C3B3  F085         	movff	_YGR_Arr+89,___ftadd@f1+2
  5442  011CE0  ECE4  F0AF         	call	___ftadd	;wreg free
  5443  011CE4  C083  F6B1         	movff	?___ftadd,_Y_PF_Avg$8147
  5444  011CE8  C084  F6B2         	movff	?___ftadd+1,_Y_PF_Avg$8147+1
  5445  011CEC  C085  F6B3         	movff	?___ftadd+2,_Y_PF_Avg$8147+2
  5446                           
  5447                           ;Power_Meter.c: 497: }
  5448                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5449                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5450                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5451                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5452  011CF0  C3AB  F086         	movff	_YGR_Arr+81,___ftadd@f2
  5453  011CF4  C3AC  F087         	movff	_YGR_Arr+82,___ftadd@f2+1
  5454  011CF8  C3AD  F088         	movff	_YGR_Arr+83,___ftadd@f2+2
  5455  011CFC  C6B1  F083         	movff	_Y_PF_Avg$8147,___ftadd@f1
  5456  011D00  C6B2  F084         	movff	_Y_PF_Avg$8147+1,___ftadd@f1+1
  5457  011D04  C6B3  F085         	movff	_Y_PF_Avg$8147+2,___ftadd@f1+2
  5458  011D08  ECE4  F0AF         	call	___ftadd	;wreg free
  5459  011D0C  C083  F6B4         	movff	?___ftadd,_Y_PF_Avg$8148
  5460  011D10  C084  F6B5         	movff	?___ftadd+1,_Y_PF_Avg$8148+1
  5461  011D14  C085  F6B6         	movff	?___ftadd+2,_Y_PF_Avg$8148+2
  5462                           
  5463                           ;Power_Meter.c: 497: }
  5464                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5465                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5466                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5467                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5468  011D18  C3A8  F086         	movff	_YGR_Arr+78,___ftadd@f2
  5469  011D1C  C3A9  F087         	movff	_YGR_Arr+79,___ftadd@f2+1
  5470  011D20  C3AA  F088         	movff	_YGR_Arr+80,___ftadd@f2+2
  5471  011D24  C6B4  F083         	movff	_Y_PF_Avg$8148,___ftadd@f1
  5472  011D28  C6B5  F084         	movff	_Y_PF_Avg$8148+1,___ftadd@f1+1
  5473  011D2C  C6B6  F085         	movff	_Y_PF_Avg$8148+2,___ftadd@f1+2
  5474  011D30  ECE4  F0AF         	call	___ftadd	;wreg free
  5475  011D34  C083  F6B7         	movff	?___ftadd,_Y_PF_Avg$8149
  5476  011D38  C084  F6B8         	movff	?___ftadd+1,_Y_PF_Avg$8149+1
  5477  011D3C  C085  F6B9         	movff	?___ftadd+2,_Y_PF_Avg$8149+2
  5478                           
  5479                           ;Power_Meter.c: 497: }
  5480                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5481                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5482                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5483                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5484  011D40  C3A5  F086         	movff	_YGR_Arr+75,___ftadd@f2
  5485  011D44  C3A6  F087         	movff	_YGR_Arr+76,___ftadd@f2+1
  5486  011D48  C3A7  F088         	movff	_YGR_Arr+77,___ftadd@f2+2
  5487  011D4C  C6B7  F083         	movff	_Y_PF_Avg$8149,___ftadd@f1
  5488  011D50  C6B8  F084         	movff	_Y_PF_Avg$8149+1,___ftadd@f1+1
  5489  011D54  C6B9  F085         	movff	_Y_PF_Avg$8149+2,___ftadd@f1+2
  5490  011D58  ECE4  F0AF         	call	___ftadd	;wreg free
  5491  011D5C  C083  F666         	movff	?___ftadd,_Y_PF_Avg$8150
  5492  011D60  C084  F667         	movff	?___ftadd+1,_Y_PF_Avg$8150+1
  5493  011D64  C085  F668         	movff	?___ftadd+2,_Y_PF_Avg$8150+2
  5494                           
  5495                           ;Power_Meter.c: 497: }
  5496                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5497                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5498                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5499                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5500  011D68  C3A2  F086         	movff	_YGR_Arr+72,___ftadd@f2
  5501  011D6C  C3A3  F087         	movff	_YGR_Arr+73,___ftadd@f2+1
  5502  011D70  C3A4  F088         	movff	_YGR_Arr+74,___ftadd@f2+2
  5503  011D74  C666  F083         	movff	_Y_PF_Avg$8150,___ftadd@f1
  5504  011D78  C667  F084         	movff	_Y_PF_Avg$8150+1,___ftadd@f1+1
  5505  011D7C  C668  F085         	movff	_Y_PF_Avg$8150+2,___ftadd@f1+2
  5506  011D80  ECE4  F0AF         	call	___ftadd	;wreg free
  5507  011D84  C083  F669         	movff	?___ftadd,_Y_PF_Avg$8151
  5508  011D88  C084  F66A         	movff	?___ftadd+1,_Y_PF_Avg$8151+1
  5509  011D8C  C085  F66B         	movff	?___ftadd+2,_Y_PF_Avg$8151+2
  5510                           
  5511                           ;Power_Meter.c: 497: }
  5512                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5513                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5514                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5515                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5516  011D90  C39F  F086         	movff	_YGR_Arr+69,___ftadd@f2
  5517  011D94  C3A0  F087         	movff	_YGR_Arr+70,___ftadd@f2+1
  5518  011D98  C3A1  F088         	movff	_YGR_Arr+71,___ftadd@f2+2
  5519  011D9C  C669  F083         	movff	_Y_PF_Avg$8151,___ftadd@f1
  5520  011DA0  C66A  F084         	movff	_Y_PF_Avg$8151+1,___ftadd@f1+1
  5521  011DA4  C66B  F085         	movff	_Y_PF_Avg$8151+2,___ftadd@f1+2
  5522  011DA8  ECE4  F0AF         	call	___ftadd	;wreg free
  5523  011DAC  C083  F66C         	movff	?___ftadd,_Y_PF_Avg$8152
  5524  011DB0  C084  F66D         	movff	?___ftadd+1,_Y_PF_Avg$8152+1
  5525  011DB4  C085  F66E         	movff	?___ftadd+2,_Y_PF_Avg$8152+2
  5526                           
  5527                           ;Power_Meter.c: 497: }
  5528                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5529                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5530                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5531                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5532  011DB8  C39C  F086         	movff	_YGR_Arr+66,___ftadd@f2
  5533  011DBC  C39D  F087         	movff	_YGR_Arr+67,___ftadd@f2+1
  5534  011DC0  C39E  F088         	movff	_YGR_Arr+68,___ftadd@f2+2
  5535  011DC4  C66C  F083         	movff	_Y_PF_Avg$8152,___ftadd@f1
  5536  011DC8  C66D  F084         	movff	_Y_PF_Avg$8152+1,___ftadd@f1+1
  5537  011DCC  C66E  F085         	movff	_Y_PF_Avg$8152+2,___ftadd@f1+2
  5538  011DD0  ECE4  F0AF         	call	___ftadd	;wreg free
  5539  011DD4  C083  F66F         	movff	?___ftadd,_Y_PF_Avg$8153
  5540  011DD8  C084  F670         	movff	?___ftadd+1,_Y_PF_Avg$8153+1
  5541  011DDC  C085  F671         	movff	?___ftadd+2,_Y_PF_Avg$8153+2
  5542                           
  5543                           ;Power_Meter.c: 497: }
  5544                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5545                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5546                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5547                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5548  011DE0  C399  F086         	movff	_YGR_Arr+63,___ftadd@f2
  5549  011DE4  C39A  F087         	movff	_YGR_Arr+64,___ftadd@f2+1
  5550  011DE8  C39B  F088         	movff	_YGR_Arr+65,___ftadd@f2+2
  5551  011DEC  C66F  F083         	movff	_Y_PF_Avg$8153,___ftadd@f1
  5552  011DF0  C670  F084         	movff	_Y_PF_Avg$8153+1,___ftadd@f1+1
  5553  011DF4  C671  F085         	movff	_Y_PF_Avg$8153+2,___ftadd@f1+2
  5554  011DF8  ECE4  F0AF         	call	___ftadd	;wreg free
  5555  011DFC  C083  F672         	movff	?___ftadd,_Y_PF_Avg$8154
  5556  011E00  C084  F673         	movff	?___ftadd+1,_Y_PF_Avg$8154+1
  5557  011E04  C085  F674         	movff	?___ftadd+2,_Y_PF_Avg$8154+2
  5558                           
  5559                           ;Power_Meter.c: 497: }
  5560                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5561                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5562                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5563                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5564  011E08  C396  F086         	movff	_YGR_Arr+60,___ftadd@f2
  5565  011E0C  C397  F087         	movff	_YGR_Arr+61,___ftadd@f2+1
  5566  011E10  C398  F088         	movff	_YGR_Arr+62,___ftadd@f2+2
  5567  011E14  C672  F083         	movff	_Y_PF_Avg$8154,___ftadd@f1
  5568  011E18  C673  F084         	movff	_Y_PF_Avg$8154+1,___ftadd@f1+1
  5569  011E1C  C674  F085         	movff	_Y_PF_Avg$8154+2,___ftadd@f1+2
  5570  011E20  ECE4  F0AF         	call	___ftadd	;wreg free
  5571  011E24  C083  F675         	movff	?___ftadd,_Y_PF_Avg$8155
  5572  011E28  C084  F676         	movff	?___ftadd+1,_Y_PF_Avg$8155+1
  5573  011E2C  C085  F677         	movff	?___ftadd+2,_Y_PF_Avg$8155+2
  5574                           
  5575                           ;Power_Meter.c: 497: }
  5576                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5577                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5578                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5579                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5580  011E30  C393  F086         	movff	_YGR_Arr+57,___ftadd@f2
  5581  011E34  C394  F087         	movff	_YGR_Arr+58,___ftadd@f2+1
  5582  011E38  C395  F088         	movff	_YGR_Arr+59,___ftadd@f2+2
  5583  011E3C  C675  F083         	movff	_Y_PF_Avg$8155,___ftadd@f1
  5584  011E40  C676  F084         	movff	_Y_PF_Avg$8155+1,___ftadd@f1+1
  5585  011E44  C677  F085         	movff	_Y_PF_Avg$8155+2,___ftadd@f1+2
  5586  011E48  ECE4  F0AF         	call	___ftadd	;wreg free
  5587  011E4C  C083  F678         	movff	?___ftadd,_Y_PF_Avg$8156
  5588  011E50  C084  F679         	movff	?___ftadd+1,_Y_PF_Avg$8156+1
  5589  011E54  C085  F67A         	movff	?___ftadd+2,_Y_PF_Avg$8156+2
  5590                           
  5591                           ;Power_Meter.c: 497: }
  5592                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5593                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5594                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5595                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5596  011E58  C390  F086         	movff	_YGR_Arr+54,___ftadd@f2
  5597  011E5C  C391  F087         	movff	_YGR_Arr+55,___ftadd@f2+1
  5598  011E60  C392  F088         	movff	_YGR_Arr+56,___ftadd@f2+2
  5599  011E64  C678  F083         	movff	_Y_PF_Avg$8156,___ftadd@f1
  5600  011E68  C679  F084         	movff	_Y_PF_Avg$8156+1,___ftadd@f1+1
  5601  011E6C  C67A  F085         	movff	_Y_PF_Avg$8156+2,___ftadd@f1+2
  5602  011E70  ECE4  F0AF         	call	___ftadd	;wreg free
  5603  011E74  C083  F67B         	movff	?___ftadd,_Y_PF_Avg$8157
  5604  011E78  C084  F67C         	movff	?___ftadd+1,_Y_PF_Avg$8157+1
  5605  011E7C  C085  F67D         	movff	?___ftadd+2,_Y_PF_Avg$8157+2
  5606                           
  5607                           ;Power_Meter.c: 497: }
  5608                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5609                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5610                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5611                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5612  011E80  C38D  F086         	movff	_YGR_Arr+51,___ftadd@f2
  5613  011E84  C38E  F087         	movff	_YGR_Arr+52,___ftadd@f2+1
  5614  011E88  C38F  F088         	movff	_YGR_Arr+53,___ftadd@f2+2
  5615  011E8C  C67B  F083         	movff	_Y_PF_Avg$8157,___ftadd@f1
  5616  011E90  C67C  F084         	movff	_Y_PF_Avg$8157+1,___ftadd@f1+1
  5617  011E94  C67D  F085         	movff	_Y_PF_Avg$8157+2,___ftadd@f1+2
  5618  011E98  ECE4  F0AF         	call	___ftadd	;wreg free
  5619  011E9C  C083  F67E         	movff	?___ftadd,_Y_PF_Avg$8158
  5620  011EA0  C084  F67F         	movff	?___ftadd+1,_Y_PF_Avg$8158+1
  5621  011EA4  C085  F680         	movff	?___ftadd+2,_Y_PF_Avg$8158+2
  5622                           
  5623                           ;Power_Meter.c: 497: }
  5624                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5625                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5626                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5627                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5628  011EA8  C38A  F086         	movff	_YGR_Arr+48,___ftadd@f2
  5629  011EAC  C38B  F087         	movff	_YGR_Arr+49,___ftadd@f2+1
  5630  011EB0  C38C  F088         	movff	_YGR_Arr+50,___ftadd@f2+2
  5631  011EB4  C67E  F083         	movff	_Y_PF_Avg$8158,___ftadd@f1
  5632  011EB8  C67F  F084         	movff	_Y_PF_Avg$8158+1,___ftadd@f1+1
  5633  011EBC  C680  F085         	movff	_Y_PF_Avg$8158+2,___ftadd@f1+2
  5634  011EC0  ECE4  F0AF         	call	___ftadd	;wreg free
  5635  011EC4  C083  F681         	movff	?___ftadd,_Y_PF_Avg$8159
  5636  011EC8  C084  F682         	movff	?___ftadd+1,_Y_PF_Avg$8159+1
  5637  011ECC  C085  F683         	movff	?___ftadd+2,_Y_PF_Avg$8159+2
  5638                           
  5639                           ;Power_Meter.c: 497: }
  5640                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5641                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5642                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5643                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5644  011ED0  C387  F086         	movff	_YGR_Arr+45,___ftadd@f2
  5645  011ED4  C388  F087         	movff	_YGR_Arr+46,___ftadd@f2+1
  5646  011ED8  C389  F088         	movff	_YGR_Arr+47,___ftadd@f2+2
  5647  011EDC  C681  F083         	movff	_Y_PF_Avg$8159,___ftadd@f1
  5648  011EE0  C682  F084         	movff	_Y_PF_Avg$8159+1,___ftadd@f1+1
  5649  011EE4  C683  F085         	movff	_Y_PF_Avg$8159+2,___ftadd@f1+2
  5650  011EE8  ECE4  F0AF         	call	___ftadd	;wreg free
  5651  011EEC  C083  F684         	movff	?___ftadd,_Y_PF_Avg$8160
  5652  011EF0  C084  F685         	movff	?___ftadd+1,_Y_PF_Avg$8160+1
  5653  011EF4  C085  F686         	movff	?___ftadd+2,_Y_PF_Avg$8160+2
  5654                           
  5655                           ;Power_Meter.c: 497: }
  5656                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5657                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5658                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5659                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5660  011EF8  C384  F086         	movff	_YGR_Arr+42,___ftadd@f2
  5661  011EFC  C385  F087         	movff	_YGR_Arr+43,___ftadd@f2+1
  5662  011F00  C386  F088         	movff	_YGR_Arr+44,___ftadd@f2+2
  5663  011F04  C684  F083         	movff	_Y_PF_Avg$8160,___ftadd@f1
  5664  011F08  C685  F084         	movff	_Y_PF_Avg$8160+1,___ftadd@f1+1
  5665  011F0C  C686  F085         	movff	_Y_PF_Avg$8160+2,___ftadd@f1+2
  5666  011F10  ECE4  F0AF         	call	___ftadd	;wreg free
  5667  011F14  C083  F687         	movff	?___ftadd,_Y_PF_Avg$8161
  5668  011F18  C084  F688         	movff	?___ftadd+1,_Y_PF_Avg$8161+1
  5669  011F1C  C085  F689         	movff	?___ftadd+2,_Y_PF_Avg$8161+2
  5670                           
  5671                           ;Power_Meter.c: 497: }
  5672                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5673                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5674                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5675                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5676  011F20  C381  F086         	movff	_YGR_Arr+39,___ftadd@f2
  5677  011F24  C382  F087         	movff	_YGR_Arr+40,___ftadd@f2+1
  5678  011F28  C383  F088         	movff	_YGR_Arr+41,___ftadd@f2+2
  5679  011F2C  C687  F083         	movff	_Y_PF_Avg$8161,___ftadd@f1
  5680  011F30  C688  F084         	movff	_Y_PF_Avg$8161+1,___ftadd@f1+1
  5681  011F34  C689  F085         	movff	_Y_PF_Avg$8161+2,___ftadd@f1+2
  5682  011F38  ECE4  F0AF         	call	___ftadd	;wreg free
  5683  011F3C  C083  F68A         	movff	?___ftadd,_Y_PF_Avg$8162
  5684  011F40  C084  F68B         	movff	?___ftadd+1,_Y_PF_Avg$8162+1
  5685  011F44  C085  F68C         	movff	?___ftadd+2,_Y_PF_Avg$8162+2
  5686                           
  5687                           ;Power_Meter.c: 497: }
  5688                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5689                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5690                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5691                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5692  011F48  C37E  F086         	movff	_YGR_Arr+36,___ftadd@f2
  5693  011F4C  C37F  F087         	movff	_YGR_Arr+37,___ftadd@f2+1
  5694  011F50  C380  F088         	movff	_YGR_Arr+38,___ftadd@f2+2
  5695  011F54  C68A  F083         	movff	_Y_PF_Avg$8162,___ftadd@f1
  5696  011F58  C68B  F084         	movff	_Y_PF_Avg$8162+1,___ftadd@f1+1
  5697  011F5C  C68C  F085         	movff	_Y_PF_Avg$8162+2,___ftadd@f1+2
  5698  011F60  ECE4  F0AF         	call	___ftadd	;wreg free
  5699  011F64  C083  F68D         	movff	?___ftadd,_Y_PF_Avg$8163
  5700  011F68  C084  F68E         	movff	?___ftadd+1,_Y_PF_Avg$8163+1
  5701  011F6C  C085  F68F         	movff	?___ftadd+2,_Y_PF_Avg$8163+2
  5702                           
  5703                           ;Power_Meter.c: 497: }
  5704                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5705                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5706                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5707                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5708  011F70  C37B  F086         	movff	_YGR_Arr+33,___ftadd@f2
  5709  011F74  C37C  F087         	movff	_YGR_Arr+34,___ftadd@f2+1
  5710  011F78  C37D  F088         	movff	_YGR_Arr+35,___ftadd@f2+2
  5711  011F7C  C68D  F083         	movff	_Y_PF_Avg$8163,___ftadd@f1
  5712  011F80  C68E  F084         	movff	_Y_PF_Avg$8163+1,___ftadd@f1+1
  5713  011F84  C68F  F085         	movff	_Y_PF_Avg$8163+2,___ftadd@f1+2
  5714  011F88  ECE4  F0AF         	call	___ftadd	;wreg free
  5715  011F8C  C083  F690         	movff	?___ftadd,_Y_PF_Avg$8164
  5716  011F90  C084  F691         	movff	?___ftadd+1,_Y_PF_Avg$8164+1
  5717  011F94  C085  F692         	movff	?___ftadd+2,_Y_PF_Avg$8164+2
  5718                           
  5719                           ;Power_Meter.c: 497: }
  5720                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5721                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5722                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5723                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5724  011F98  C378  F086         	movff	_YGR_Arr+30,___ftadd@f2
  5725  011F9C  C379  F087         	movff	_YGR_Arr+31,___ftadd@f2+1
  5726  011FA0  C37A  F088         	movff	_YGR_Arr+32,___ftadd@f2+2
  5727  011FA4  C690  F083         	movff	_Y_PF_Avg$8164,___ftadd@f1
  5728  011FA8  C691  F084         	movff	_Y_PF_Avg$8164+1,___ftadd@f1+1
  5729  011FAC  C692  F085         	movff	_Y_PF_Avg$8164+2,___ftadd@f1+2
  5730  011FB0  ECE4  F0AF         	call	___ftadd	;wreg free
  5731  011FB4  C083  F693         	movff	?___ftadd,_Y_PF_Avg$8165
  5732  011FB8  C084  F694         	movff	?___ftadd+1,_Y_PF_Avg$8165+1
  5733  011FBC  C085  F695         	movff	?___ftadd+2,_Y_PF_Avg$8165+2
  5734                           
  5735                           ;Power_Meter.c: 497: }
  5736                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5737                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5738                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5739                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5740  011FC0  C375  F086         	movff	_YGR_Arr+27,___ftadd@f2
  5741  011FC4  C376  F087         	movff	_YGR_Arr+28,___ftadd@f2+1
  5742  011FC8  C377  F088         	movff	_YGR_Arr+29,___ftadd@f2+2
  5743  011FCC  C693  F083         	movff	_Y_PF_Avg$8165,___ftadd@f1
  5744  011FD0  C694  F084         	movff	_Y_PF_Avg$8165+1,___ftadd@f1+1
  5745  011FD4  C695  F085         	movff	_Y_PF_Avg$8165+2,___ftadd@f1+2
  5746  011FD8  ECE4  F0AF         	call	___ftadd	;wreg free
  5747  011FDC  C083  F696         	movff	?___ftadd,_Y_PF_Avg$8166
  5748  011FE0  C084  F697         	movff	?___ftadd+1,_Y_PF_Avg$8166+1
  5749  011FE4  C085  F698         	movff	?___ftadd+2,_Y_PF_Avg$8166+2
  5750                           
  5751                           ;Power_Meter.c: 497: }
  5752                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5753                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5754                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5755                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5756  011FE8  C372  F086         	movff	_YGR_Arr+24,___ftadd@f2
  5757  011FEC  C373  F087         	movff	_YGR_Arr+25,___ftadd@f2+1
  5758  011FF0  C374  F088         	movff	_YGR_Arr+26,___ftadd@f2+2
  5759  011FF4  C696  F083         	movff	_Y_PF_Avg$8166,___ftadd@f1
  5760  011FF8  C697  F084         	movff	_Y_PF_Avg$8166+1,___ftadd@f1+1
  5761  011FFC  C698  F085         	movff	_Y_PF_Avg$8166+2,___ftadd@f1+2
  5762  012000  ECE4  F0AF         	call	___ftadd	;wreg free
  5763  012004  C083  F699         	movff	?___ftadd,_Y_PF_Avg$8167
  5764  012008  C084  F69A         	movff	?___ftadd+1,_Y_PF_Avg$8167+1
  5765  01200C  C085  F69B         	movff	?___ftadd+2,_Y_PF_Avg$8167+2
  5766                           
  5767                           ;Power_Meter.c: 497: }
  5768                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5769                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5770                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5771                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5772  012010  C36F  F086         	movff	_YGR_Arr+21,___ftadd@f2
  5773  012014  C370  F087         	movff	_YGR_Arr+22,___ftadd@f2+1
  5774  012018  C371  F088         	movff	_YGR_Arr+23,___ftadd@f2+2
  5775  01201C  C699  F083         	movff	_Y_PF_Avg$8167,___ftadd@f1
  5776  012020  C69A  F084         	movff	_Y_PF_Avg$8167+1,___ftadd@f1+1
  5777  012024  C69B  F085         	movff	_Y_PF_Avg$8167+2,___ftadd@f1+2
  5778  012028  ECE4  F0AF         	call	___ftadd	;wreg free
  5779  01202C  C083  F69C         	movff	?___ftadd,_Y_PF_Avg$8168
  5780  012030  C084  F69D         	movff	?___ftadd+1,_Y_PF_Avg$8168+1
  5781  012034  C085  F69E         	movff	?___ftadd+2,_Y_PF_Avg$8168+2
  5782                           
  5783                           ;Power_Meter.c: 497: }
  5784                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5785                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5786                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5787                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5788  012038  C36C  F086         	movff	_YGR_Arr+18,___ftadd@f2
  5789  01203C  C36D  F087         	movff	_YGR_Arr+19,___ftadd@f2+1
  5790  012040  C36E  F088         	movff	_YGR_Arr+20,___ftadd@f2+2
  5791  012044  C69C  F083         	movff	_Y_PF_Avg$8168,___ftadd@f1
  5792  012048  C69D  F084         	movff	_Y_PF_Avg$8168+1,___ftadd@f1+1
  5793  01204C  C69E  F085         	movff	_Y_PF_Avg$8168+2,___ftadd@f1+2
  5794  012050  ECE4  F0AF         	call	___ftadd	;wreg free
  5795  012054  C083  F69F         	movff	?___ftadd,_Y_PF_Avg$8169
  5796  012058  C084  F6A0         	movff	?___ftadd+1,_Y_PF_Avg$8169+1
  5797  01205C  C085  F6A1         	movff	?___ftadd+2,_Y_PF_Avg$8169+2
  5798                           
  5799                           ;Power_Meter.c: 497: }
  5800                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5801                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5802                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5803                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5804  012060  C369  F086         	movff	_YGR_Arr+15,___ftadd@f2
  5805  012064  C36A  F087         	movff	_YGR_Arr+16,___ftadd@f2+1
  5806  012068  C36B  F088         	movff	_YGR_Arr+17,___ftadd@f2+2
  5807  01206C  C69F  F083         	movff	_Y_PF_Avg$8169,___ftadd@f1
  5808  012070  C6A0  F084         	movff	_Y_PF_Avg$8169+1,___ftadd@f1+1
  5809  012074  C6A1  F085         	movff	_Y_PF_Avg$8169+2,___ftadd@f1+2
  5810  012078  ECE4  F0AF         	call	___ftadd	;wreg free
  5811  01207C  C083  F6A2         	movff	?___ftadd,_Y_PF_Avg$8170
  5812  012080  C084  F6A3         	movff	?___ftadd+1,_Y_PF_Avg$8170+1
  5813  012084  C085  F6A4         	movff	?___ftadd+2,_Y_PF_Avg$8170+2
  5814                           
  5815                           ;Power_Meter.c: 497: }
  5816                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5817                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5818                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5819                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5820  012088  C366  F086         	movff	_YGR_Arr+12,___ftadd@f2
  5821  01208C  C367  F087         	movff	_YGR_Arr+13,___ftadd@f2+1
  5822  012090  C368  F088         	movff	_YGR_Arr+14,___ftadd@f2+2
  5823  012094  C6A2  F083         	movff	_Y_PF_Avg$8170,___ftadd@f1
  5824  012098  C6A3  F084         	movff	_Y_PF_Avg$8170+1,___ftadd@f1+1
  5825  01209C  C6A4  F085         	movff	_Y_PF_Avg$8170+2,___ftadd@f1+2
  5826  0120A0  ECE4  F0AF         	call	___ftadd	;wreg free
  5827  0120A4  C083  F6A5         	movff	?___ftadd,_Y_PF_Avg$8171
  5828  0120A8  C084  F6A6         	movff	?___ftadd+1,_Y_PF_Avg$8171+1
  5829  0120AC  C085  F6A7         	movff	?___ftadd+2,_Y_PF_Avg$8171+2
  5830                           
  5831                           ;Power_Meter.c: 497: }
  5832                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5833                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5834                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5835                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5836  0120B0  C363  F086         	movff	_YGR_Arr+9,___ftadd@f2
  5837  0120B4  C364  F087         	movff	_YGR_Arr+10,___ftadd@f2+1
  5838  0120B8  C365  F088         	movff	_YGR_Arr+11,___ftadd@f2+2
  5839  0120BC  C6A5  F083         	movff	_Y_PF_Avg$8171,___ftadd@f1
  5840  0120C0  C6A6  F084         	movff	_Y_PF_Avg$8171+1,___ftadd@f1+1
  5841  0120C4  C6A7  F085         	movff	_Y_PF_Avg$8171+2,___ftadd@f1+2
  5842  0120C8  ECE4  F0AF         	call	___ftadd	;wreg free
  5843  0120CC  C083  F6A8         	movff	?___ftadd,_Y_PF_Avg$8172
  5844  0120D0  C084  F6A9         	movff	?___ftadd+1,_Y_PF_Avg$8172+1
  5845  0120D4  C085  F6AA         	movff	?___ftadd+2,_Y_PF_Avg$8172+2
  5846                           
  5847                           ;Power_Meter.c: 497: }
  5848                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5849                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5850                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5851                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5852  0120D8  C360  F086         	movff	_YGR_Arr+6,___ftadd@f2
  5853  0120DC  C361  F087         	movff	_YGR_Arr+7,___ftadd@f2+1
  5854  0120E0  C362  F088         	movff	_YGR_Arr+8,___ftadd@f2+2
  5855  0120E4  C6A8  F083         	movff	_Y_PF_Avg$8172,___ftadd@f1
  5856  0120E8  C6A9  F084         	movff	_Y_PF_Avg$8172+1,___ftadd@f1+1
  5857  0120EC  C6AA  F085         	movff	_Y_PF_Avg$8172+2,___ftadd@f1+2
  5858  0120F0  ECE4  F0AF         	call	___ftadd	;wreg free
  5859  0120F4  C083  F6AB         	movff	?___ftadd,_Y_PF_Avg$8173
  5860  0120F8  C084  F6AC         	movff	?___ftadd+1,_Y_PF_Avg$8173+1
  5861  0120FC  C085  F6AD         	movff	?___ftadd+2,_Y_PF_Avg$8173+2
  5862                           
  5863                           ;Power_Meter.c: 497: }
  5864                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5865                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5866                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5867                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5868  012100  C35D  F086         	movff	_YGR_Arr+3,___ftadd@f2
  5869  012104  C35E  F087         	movff	_YGR_Arr+4,___ftadd@f2+1
  5870  012108  C35F  F088         	movff	_YGR_Arr+5,___ftadd@f2+2
  5871  01210C  C6AB  F083         	movff	_Y_PF_Avg$8173,___ftadd@f1
  5872  012110  C6AC  F084         	movff	_Y_PF_Avg$8173+1,___ftadd@f1+1
  5873  012114  C6AD  F085         	movff	_Y_PF_Avg$8173+2,___ftadd@f1+2
  5874  012118  ECE4  F0AF         	call	___ftadd	;wreg free
  5875  01211C  C083  F6AE         	movff	?___ftadd,_Y_PF_Avg$8174
  5876  012120  C084  F6AF         	movff	?___ftadd+1,_Y_PF_Avg$8174+1
  5877  012124  C085  F6B0         	movff	?___ftadd+2,_Y_PF_Avg$8174+2
  5878                           
  5879                           ;Power_Meter.c: 497: }
  5880                           ;Power_Meter.c: 499: YGR_Avg = (YGR_Arr[29] + YGR_Arr[28] + YGR_Arr[27] + YGR_Arr[26] + 
      +                          YGR_Arr[25] + YGR_Arr[24] + YGR_Arr[23] + YGR_Arr[22]
  5881                           ;Power_Meter.c: 500: + YGR_Arr[21] + YGR_Arr[20] + YGR_Arr[19] + YGR_Arr[18] + YGR_Arr[1
      +                          7] + YGR_Arr[16] + YGR_Arr[15]
  5882                           ;Power_Meter.c: 501: + YGR_Arr[14] + YGR_Arr[13] + YGR_Arr[12] + YGR_Arr[11] + YGR_Arr[1
      +                          0] + YGR_Arr[9] + YGR_Arr[8] + YGR_Arr[7]
  5883                           ;Power_Meter.c: 502: + YGR_Arr[6] + YGR_Arr[5] + YGR_Arr[4] + YGR_Arr[3] + YGR_Arr[2] + 
      +                          YGR_Arr[1] + YGR_Arr[0]);
  5884  012128  C6AE  F083         	movff	_Y_PF_Avg$8174,___ftadd@f1
  5885  01212C  C6AF  F084         	movff	_Y_PF_Avg$8174+1,___ftadd@f1+1
  5886  012130  C6B0  F085         	movff	_Y_PF_Avg$8174+2,___ftadd@f1+2
  5887  012134  C35A  F086         	movff	_YGR_Arr,___ftadd@f2
  5888  012138  C35B  F087         	movff	_YGR_Arr+1,___ftadd@f2+1
  5889  01213C  C35C  F088         	movff	_YGR_Arr+2,___ftadd@f2+2
  5890  012140  ECE4  F0AF         	call	___ftadd	;wreg free
  5891  012144  C083  F2EE         	movff	?___ftadd,_YGR_Avg
  5892  012148  C084  F2EF         	movff	?___ftadd+1,_YGR_Avg+1
  5893  01214C  C085  F2F0         	movff	?___ftadd+2,_YGR_Avg+2
  5894                           
  5895                           ;Power_Meter.c: 504: YGR_Avg = (YGR_Avg / 30);
  5896  012150  C2EE  F09B         	movff	_YGR_Avg,___ftdiv@f1
  5897  012154  C2EF  F09C         	movff	_YGR_Avg+1,___ftdiv@f1+1
  5898  012158  C2F0  F09D         	movff	_YGR_Avg+2,___ftdiv@f1+2
  5899  01215C  0E00               	movlw	0
  5900  01215E  0100               	movlb	0	; () banked
  5901  012160  6F9E               	movwf	___ftdiv@f2& (0+255),b
  5902  012162  0EF0               	movlw	240
  5903  012164  0100               	movlb	0	; () banked
  5904  012166  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  5905  012168  0E41               	movlw	65
  5906  01216A  0100               	movlb	0	; () banked
  5907  01216C  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  5908  01216E  EC89  F0BF         	call	___ftdiv	;wreg free
  5909  012172  C09B  F2EE         	movff	?___ftdiv,_YGR_Avg
  5910  012176  C09C  F2EF         	movff	?___ftdiv+1,_YGR_Avg+1
  5911  01217A  C09D  F2F0         	movff	?___ftdiv+2,_YGR_Avg+2
  5912                           
  5913                           ;Power_Meter.c: 505: Y_Rad = ((YGR_Avg * 2 * 3.1412) - (0.523599));
  5914  01217E  0E09               	movlw	9
  5915  012180  0100               	movlb	0	; () banked
  5916  012182  6F6D               	movwf	___ftmul@f2& (0+255),b
  5917  012184  0EC9               	movlw	201
  5918  012186  0100               	movlb	0	; () banked
  5919  012188  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  5920  01218A  0E40               	movlw	64
  5921  01218C  0100               	movlb	0	; () banked
  5922  01218E  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  5923  012190  C2EE  F06A         	movff	_YGR_Avg,___ftmul@f1
  5924  012194  C2EF  F06B         	movff	_YGR_Avg+1,___ftmul@f1+1
  5925  012198  C2F0  F06C         	movff	_YGR_Avg+2,___ftmul@f1+2
  5926  01219C  EC83  F0BD         	call	___ftmul	;wreg free
  5927  0121A0  C06A  F083         	movff	?___ftmul,___ftadd@f1
  5928  0121A4  C06B  F084         	movff	?___ftmul+1,___ftadd@f1+1
  5929  0121A8  C06C  F085         	movff	?___ftmul+2,___ftadd@f1+2
  5930  0121AC  0E0B               	movlw	11
  5931  0121AE  0100               	movlb	0	; () banked
  5932  0121B0  6F86               	movwf	___ftadd@f2& (0+255),b
  5933  0121B2  0E06               	movlw	6
  5934  0121B4  0100               	movlb	0	; () banked
  5935  0121B6  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  5936  0121B8  0EBF               	movlw	191
  5937  0121BA  0100               	movlb	0	; () banked
  5938  0121BC  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  5939  0121BE  ECE4  F0AF         	call	___ftadd	;wreg free
  5940  0121C2  C083  F4C6         	movff	?___ftadd,_Y_Rad
  5941  0121C6  C084  F4C7         	movff	?___ftadd+1,_Y_Rad+1
  5942  0121CA  C085  F4C8         	movff	?___ftadd+2,_Y_Rad+2
  5943                           
  5944                           ;Power_Meter.c: 506: Y_Power_Factor = (cos(Y_Rad));
  5945  0121CE  C4C6  F0B7         	movff	_Y_Rad,cos@f
  5946  0121D2  C4C7  F0B8         	movff	_Y_Rad+1,cos@f+1
  5947  0121D6  C4C8  F0B9         	movff	_Y_Rad+2,cos@f+2
  5948  0121DA  ECCE  F0C8         	call	_cos	;wreg free
  5949  0121DE  C0B7  F275         	movff	?_cos,_Y_Power_Factor
  5950  0121E2  C0B8  F276         	movff	?_cos+1,_Y_Power_Factor+1
  5951  0121E6  C0B9  F277         	movff	?_cos+2,_Y_Power_Factor+2
  5952  0121EA  0012               	return		;funcret
  5953  0121EC                     __end_of_Y_PF_Avg:
  5954                           	opt stack 0
  5955                           tblptru	equ	0xFF8
  5956                           tblptrh	equ	0xFF7
  5957                           tblptrl	equ	0xFF6
  5958                           tablat	equ	0xFF5
  5959                           intcon	equ	0xFF2
  5960                           postinc0	equ	0xFEE
  5961                           wreg	equ	0xFE8
  5962                           postdec1	equ	0xFE5
  5963                           fsr1h	equ	0xFE2
  5964                           fsr1l	equ	0xFE1
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function _Wind_Speed_Initiate *****************
  5968 ;; Defined at:
  5969 ;;		line 49 in file "Initialization.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  2   14[None  ] int 
  5976 ;; Registers used:
  5977 ;;		wreg, status,2
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;Total ram usage:        0 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    3
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_main
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text5
  5998  01AA3C                     __ptext5:
  5999                           	opt stack 0
  6000  01AA3C                     _Wind_Speed_Initiate:
  6001                           	opt stack 27
  6002                           
  6003                           ;Initialization.c: 51: TRISEbits.TRISE6=1;
  6004                           
  6005                           ;incstack = 0
  6006  01AA3C  8C96               	bsf	3990,6,c	;volatile
  6007                           
  6008                           ;Initialization.c: 52: CCP6CON = 0x04;
  6009  01AA3E  0E04               	movlw	4
  6010  01AA40  6E71               	movwf	3953,c	;volatile
  6011                           
  6012                           ;Initialization.c: 53: CCP6IE = 1;
  6013  01AA42  86B6               	bsf	4022,3,c	;volatile
  6014                           
  6015                           ;Initialization.c: 54: CCP6IF = 0;
  6016  01AA44  96B7               	bcf	4023,3,c	;volatile
  6017  01AA46  0012               	return		;funcret
  6018  01AA48                     __end_of_Wind_Speed_Initiate:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           intcon	equ	0xFF2
  6025                           postinc0	equ	0xFEE
  6026                           wreg	equ	0xFE8
  6027                           postdec1	equ	0xFE5
  6028                           fsr1h	equ	0xFE2
  6029                           fsr1l	equ	0xFE1
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function _Wind_Speed_Cal *****************
  6033 ;; Defined at:
  6034 ;;		line 163 in file "RPM_Measurement.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;Total ram usage:        2 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    5
  6055 ;; This function calls:
  6056 ;;		___ftadd
  6057 ;;		___ftdiv
  6058 ;;		___ftmul
  6059 ;;		___lwtoft
  6060 ;; This function is called by:
  6061 ;;		_main
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text6
  6066  015D5A                     __ptext6:
  6067                           	opt stack 0
  6068  015D5A                     _Wind_Speed_Cal:
  6069                           	opt stack 25
  6070                           
  6071                           ;RPM_Measurement.c: 166: Timer1_OF_counter_Wind = 0;
  6072                           
  6073                           ;incstack = 0
  6074  015D5A  0E00               	movlw	0
  6075  015D5C  0102               	movlb	2	; () banked
  6076  015D5E  6FB9               	movwf	(_Timer1_OF_counter_Wind+1)& (0+255),b
  6077  015D60  0E00               	movlw	0
  6078  015D62  6FB8               	movwf	_Timer1_OF_counter_Wind& (0+255),b
  6079                           
  6080                           ;RPM_Measurement.c: 167: Wind_Frequency = 0;
  6081  015D64  0E00               	movlw	0
  6082  015D66  0104               	movlb	4	; () banked
  6083  015D68  6FB1               	movwf	_Wind_Frequency& (0+255),b
  6084  015D6A  0E00               	movlw	0
  6085  015D6C  0104               	movlb	4	; () banked
  6086  015D6E  6FB2               	movwf	(_Wind_Frequency+1)& (0+255),b
  6087  015D70  0E00               	movlw	0
  6088  015D72  0104               	movlb	4	; () banked
  6089  015D74  6FB3               	movwf	(_Wind_Frequency+2)& (0+255),b
  6090                           
  6091                           ;RPM_Measurement.c: 168: Wind_Time_1 = 0;
  6092  015D76  0E00               	movlw	0
  6093  015D78  0104               	movlb	4	; () banked
  6094  015D7A  6FF3               	movwf	_Wind_Time_1& (0+255),b
  6095  015D7C  0E00               	movlw	0
  6096  015D7E  0104               	movlb	4	; () banked
  6097  015D80  6FF4               	movwf	(_Wind_Time_1+1)& (0+255),b
  6098  015D82  0E00               	movlw	0
  6099  015D84  0104               	movlb	4	; () banked
  6100  015D86  6FF5               	movwf	(_Wind_Time_1+2)& (0+255),b
  6101                           
  6102                           ;RPM_Measurement.c: 169: Wind_Time = 0;
  6103  015D88  0E00               	movlw	0
  6104  015D8A  0104               	movlb	4	; () banked
  6105  015D8C  6FBD               	movwf	_Wind_Time& (0+255),b
  6106  015D8E  0E00               	movlw	0
  6107  015D90  0104               	movlb	4	; () banked
  6108  015D92  6FBE               	movwf	(_Wind_Time+1)& (0+255),b
  6109  015D94  0E00               	movlw	0
  6110  015D96  0104               	movlb	4	; () banked
  6111  015D98  6FBF               	movwf	(_Wind_Time+2)& (0+255),b
  6112                           
  6113                           ;RPM_Measurement.c: 170: Wind_Pulse_width = 0;
  6114  015D9A  0E00               	movlw	0
  6115  015D9C  0102               	movlb	2	; () banked
  6116  015D9E  6FFD               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6117  015DA0  0E00               	movlw	0
  6118  015DA2  6FFC               	movwf	_Wind_Pulse_width& (0+255),b
  6119                           
  6120                           ; BSR set to: 2
  6121                           ;RPM_Measurement.c: 172: if(Wind_Cap_New > Wind_Cap_Old)
  6122  015DA4  0101               	movlb	1	; () banked
  6123  015DA6  515D               	movf	_Wind_Cap_New& (0+255),w,b
  6124  015DA8  0101               	movlb	1	; () banked
  6125  015DAA  5D61               	subwf	_Wind_Cap_Old& (0+255),w,b
  6126  015DAC  0101               	movlb	1	; () banked
  6127  015DAE  515E               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6128  015DB0  0101               	movlb	1	; () banked
  6129  015DB2  5962               	subwfb	(_Wind_Cap_Old+1)& (0+255),w,b
  6130  015DB4  B0D8               	btfsc	status,0,c
  6131  015DB6  D02F               	goto	l22001
  6132                           
  6133                           ; BSR set to: 1
  6134                           ;RPM_Measurement.c: 173: {
  6135                           ;RPM_Measurement.c: 174: Wind_Pulse_width = (Wind_Cap_New - Wind_Cap_Old + 1) ;
  6136  015DB8  C161  F0AA         	movff	_Wind_Cap_Old,??_Wind_Speed_Cal
  6137  015DBC  C162  F0AB         	movff	_Wind_Cap_Old+1,??_Wind_Speed_Cal+1
  6138  015DC0  0100               	movlb	0	; () banked
  6139  015DC2  1FAA               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6140  015DC4  1FAB               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6141  015DC6  4BAA               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6142  015DC8  2BAB               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6143  015DCA  0101               	movlb	1	; () banked
  6144  015DCC  515D               	movf	_Wind_Cap_New& (0+255),w,b
  6145  015DCE  0100               	movlb	0	; () banked
  6146  015DD0  27AA               	addwf	??_Wind_Speed_Cal& (0+255),f,b
  6147  015DD2  0101               	movlb	1	; () banked
  6148  015DD4  515E               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6149  015DD6  0100               	movlb	0	; () banked
  6150  015DD8  23AB               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6151  015DDA  0E01               	movlw	1
  6152  015DDC  0100               	movlb	0	; () banked
  6153  015DDE  25AA               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6154  015DE0  0102               	movlb	2	; () banked
  6155  015DE2  6FFC               	movwf	_Wind_Pulse_width& (0+255),b
  6156  015DE4  0E00               	movlw	0
  6157  015DE6  0100               	movlb	0	; () banked
  6158  015DE8  21AB               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6159  015DEA  0102               	movlb	2	; () banked
  6160  015DEC  6FFD               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6161                           
  6162                           ;RPM_Measurement.c: 175: WRPM_Counter = (Timer1_OF_counter_Wind_temp_New - Timer1_OF_cou
      +                          nter_Wind_temp_Old);
  6163  015DEE  C2C2  F0AA         	movff	_Timer1_OF_counter_Wind_temp_Old,??_Wind_Speed_Cal
  6164  015DF2  C2C3  F0AB         	movff	_Timer1_OF_counter_Wind_temp_Old+1,??_Wind_Speed_Cal+1
  6165  015DF6  0100               	movlb	0	; () banked
  6166  015DF8  1FAA               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6167  015DFA  1FAB               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6168  015DFC  4BAA               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6169  015DFE  2BAB               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6170  015E00  0101               	movlb	1	; () banked
  6171  015E02  5155               	movf	_Timer1_OF_counter_Wind_temp_New& (0+255),w,b
  6172  015E04  0100               	movlb	0	; () banked
  6173  015E06  25AA               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6174  015E08  0102               	movlb	2	; () banked
  6175  015E0A  6FC6               	movwf	_WRPM_Counter& (0+255),b
  6176  015E0C  0101               	movlb	1	; () banked
  6177  015E0E  5156               	movf	(_Timer1_OF_counter_Wind_temp_New+1)& (0+255),w,b
  6178  015E10  0100               	movlb	0	; () banked
  6179  015E12  21AB               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6180  015E14  D038               	goto	L2
  6181  015E16                     l22001:
  6182                           
  6183                           ;RPM_Measurement.c: 177: else
  6184                           ;RPM_Measurement.c: 178: {
  6185                           ;RPM_Measurement.c: 179: Wind_Pulse_width = (Wind_Cap_New - Wind_Cap_Old + 1) + 65536;
  6186  015E16  C161  F0AA         	movff	_Wind_Cap_Old,??_Wind_Speed_Cal
  6187  015E1A  C162  F0AB         	movff	_Wind_Cap_Old+1,??_Wind_Speed_Cal+1
  6188  015E1E  0100               	movlb	0	; () banked
  6189  015E20  1FAA               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6190  015E22  1FAB               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6191  015E24  4BAA               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6192  015E26  2BAB               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6193  015E28  0101               	movlb	1	; () banked
  6194  015E2A  515D               	movf	_Wind_Cap_New& (0+255),w,b
  6195  015E2C  0100               	movlb	0	; () banked
  6196  015E2E  27AA               	addwf	??_Wind_Speed_Cal& (0+255),f,b
  6197  015E30  0101               	movlb	1	; () banked
  6198  015E32  515E               	movf	(_Wind_Cap_New+1)& (0+255),w,b
  6199  015E34  0100               	movlb	0	; () banked
  6200  015E36  23AB               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6201  015E38  0E01               	movlw	1
  6202  015E3A  0100               	movlb	0	; () banked
  6203  015E3C  25AA               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6204  015E3E  0102               	movlb	2	; () banked
  6205  015E40  6FFC               	movwf	_Wind_Pulse_width& (0+255),b
  6206  015E42  0E00               	movlw	0
  6207  015E44  0100               	movlb	0	; () banked
  6208  015E46  21AB               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6209  015E48  0102               	movlb	2	; () banked
  6210  015E4A  6FFD               	movwf	(_Wind_Pulse_width+1)& (0+255),b
  6211                           
  6212                           ;RPM_Measurement.c: 180: WRPM_Counter = (Timer1_OF_counter_Wind_temp_New - Timer1_OF_cou
      +                          nter_Wind_temp_Old);
  6213  015E4C  C2C2  F0AA         	movff	_Timer1_OF_counter_Wind_temp_Old,??_Wind_Speed_Cal
  6214  015E50  C2C3  F0AB         	movff	_Timer1_OF_counter_Wind_temp_Old+1,??_Wind_Speed_Cal+1
  6215  015E54  0100               	movlb	0	; () banked
  6216  015E56  1FAA               	comf	??_Wind_Speed_Cal& (0+255),f,b
  6217  015E58  1FAB               	comf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6218  015E5A  4BAA               	infsnz	??_Wind_Speed_Cal& (0+255),f,b
  6219  015E5C  2BAB               	incf	(??_Wind_Speed_Cal+1)& (0+255),f,b
  6220  015E5E  0101               	movlb	1	; () banked
  6221  015E60  5155               	movf	_Timer1_OF_counter_Wind_temp_New& (0+255),w,b
  6222  015E62  0100               	movlb	0	; () banked
  6223  015E64  25AA               	addwf	??_Wind_Speed_Cal& (0+255),w,b
  6224  015E66  0102               	movlb	2	; () banked
  6225  015E68  6FC6               	movwf	_WRPM_Counter& (0+255),b
  6226  015E6A  0101               	movlb	1	; () banked
  6227  015E6C  5156               	movf	(_Timer1_OF_counter_Wind_temp_New+1)& (0+255),w,b
  6228  015E6E  0100               	movlb	0	; () banked
  6229  015E70  21AB               	addwfc	(??_Wind_Speed_Cal+1)& (0+255),w,b
  6230  015E72  0102               	movlb	2	; () banked
  6231  015E74  6FC7               	movwf	(_WRPM_Counter+1)& (0+255),b
  6232                           
  6233                           ;RPM_Measurement.c: 181: WRPM_Counter = WRPM_Counter -1;
  6234  015E76  0EFF               	movlw	255
  6235  015E78  0102               	movlb	2	; () banked
  6236  015E7A  25C6               	addwf	_WRPM_Counter& (0+255),w,b
  6237  015E7C  0102               	movlb	2	; () banked
  6238  015E7E  6FC6               	movwf	_WRPM_Counter& (0+255),b
  6239  015E80  0EFF               	movlw	255
  6240  015E82  0102               	movlb	2	; () banked
  6241  015E84  21C7               	addwfc	(_WRPM_Counter+1)& (0+255),w,b
  6242  015E86                     L2:
  6243  015E86  0102               	movlb	2	; () banked
  6244  015E88  6FC7               	movwf	(_WRPM_Counter+1)& (0+255),b
  6245                           
  6246                           ; BSR set to: 2
  6247                           ;RPM_Measurement.c: 182: }
  6248                           ;RPM_Measurement.c: 184: Wind_Time = 0.000004 * Wind_Pulse_width;
  6249                           
  6250                           ; BSR set to: 2
  6251  015E8A  C2FC  F060         	movff	_Wind_Pulse_width,___lwtoft@c
  6252  015E8E  C2FD  F061         	movff	_Wind_Pulse_width+1,___lwtoft@c+1
  6253  015E92  EC84  F0D4         	call	___lwtoft	;wreg free
  6254  015E96  C060  F06A         	movff	?___lwtoft,___ftmul@f1
  6255  015E9A  C061  F06B         	movff	?___lwtoft+1,___ftmul@f1+1
  6256  015E9E  C062  F06C         	movff	?___lwtoft+2,___ftmul@f1+2
  6257  015EA2  0E38               	movlw	56
  6258  015EA4  0100               	movlb	0	; () banked
  6259  015EA6  6F6D               	movwf	___ftmul@f2& (0+255),b
  6260  015EA8  0E86               	movlw	134
  6261  015EAA  0100               	movlb	0	; () banked
  6262  015EAC  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  6263  015EAE  0E36               	movlw	54
  6264  015EB0  0100               	movlb	0	; () banked
  6265  015EB2  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  6266  015EB4  EC83  F0BD         	call	___ftmul	;wreg free
  6267  015EB8  C06A  F4BD         	movff	?___ftmul,_Wind_Time
  6268  015EBC  C06B  F4BE         	movff	?___ftmul+1,_Wind_Time+1
  6269  015EC0  C06C  F4BF         	movff	?___ftmul+2,_Wind_Time+2
  6270                           
  6271                           ;RPM_Measurement.c: 186: Wind_Time_1 = Wind_Time + (0.262 * WRPM_Counter);
  6272  015EC4  0E25               	movlw	37
  6273  015EC6  0100               	movlb	0	; () banked
  6274  015EC8  6F6D               	movwf	___ftmul@f2& (0+255),b
  6275  015ECA  0E86               	movlw	134
  6276  015ECC  0100               	movlb	0	; () banked
  6277  015ECE  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  6278  015ED0  0E3E               	movlw	62
  6279  015ED2  0100               	movlb	0	; () banked
  6280  015ED4  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  6281  015ED6  C2C6  F060         	movff	_WRPM_Counter,___lwtoft@c
  6282  015EDA  C2C7  F061         	movff	_WRPM_Counter+1,___lwtoft@c+1
  6283  015EDE  EC84  F0D4         	call	___lwtoft	;wreg free
  6284  015EE2  C060  F06A         	movff	?___lwtoft,___ftmul@f1
  6285  015EE6  C061  F06B         	movff	?___lwtoft+1,___ftmul@f1+1
  6286  015EEA  C062  F06C         	movff	?___lwtoft+2,___ftmul@f1+2
  6287  015EEE  EC83  F0BD         	call	___ftmul	;wreg free
  6288  015EF2  C06A  F083         	movff	?___ftmul,___ftadd@f1
  6289  015EF6  C06B  F084         	movff	?___ftmul+1,___ftadd@f1+1
  6290  015EFA  C06C  F085         	movff	?___ftmul+2,___ftadd@f1+2
  6291  015EFE  C4BD  F086         	movff	_Wind_Time,___ftadd@f2
  6292  015F02  C4BE  F087         	movff	_Wind_Time+1,___ftadd@f2+1
  6293  015F06  C4BF  F088         	movff	_Wind_Time+2,___ftadd@f2+2
  6294  015F0A  ECE4  F0AF         	call	___ftadd	;wreg free
  6295  015F0E  C083  F4F3         	movff	?___ftadd,_Wind_Time_1
  6296  015F12  C084  F4F4         	movff	?___ftadd+1,_Wind_Time_1+1
  6297  015F16  C085  F4F5         	movff	?___ftadd+2,_Wind_Time_1+2
  6298                           
  6299                           ;RPM_Measurement.c: 188: Wind_Frequency = (1/Wind_Time_1);
  6300  015F1A  0E00               	movlw	0
  6301  015F1C  0100               	movlb	0	; () banked
  6302  015F1E  6F9B               	movwf	___ftdiv@f1& (0+255),b
  6303  015F20  0E80               	movlw	128
  6304  015F22  0100               	movlb	0	; () banked
  6305  015F24  6F9C               	movwf	(___ftdiv@f1+1)& (0+255),b
  6306  015F26  0E3F               	movlw	63
  6307  015F28  0100               	movlb	0	; () banked
  6308  015F2A  6F9D               	movwf	(___ftdiv@f1+2)& (0+255),b
  6309  015F2C  C4F3  F09E         	movff	_Wind_Time_1,___ftdiv@f2
  6310  015F30  C4F4  F09F         	movff	_Wind_Time_1+1,___ftdiv@f2+1
  6311  015F34  C4F5  F0A0         	movff	_Wind_Time_1+2,___ftdiv@f2+2
  6312  015F38  EC89  F0BF         	call	___ftdiv	;wreg free
  6313  015F3C  C09B  F4B1         	movff	?___ftdiv,_Wind_Frequency
  6314  015F40  C09C  F4B2         	movff	?___ftdiv+1,_Wind_Frequency+1
  6315  015F44  C09D  F4B3         	movff	?___ftdiv+2,_Wind_Frequency+2
  6316                           
  6317                           ;RPM_Measurement.c: 189: Wind = (Wind_Frequency / 6);
  6318  015F48  C4B1  F09B         	movff	_Wind_Frequency,___ftdiv@f1
  6319  015F4C  C4B2  F09C         	movff	_Wind_Frequency+1,___ftdiv@f1+1
  6320  015F50  C4B3  F09D         	movff	_Wind_Frequency+2,___ftdiv@f1+2
  6321  015F54  0E00               	movlw	0
  6322  015F56  0100               	movlb	0	; () banked
  6323  015F58  6F9E               	movwf	___ftdiv@f2& (0+255),b
  6324  015F5A  0EC0               	movlw	192
  6325  015F5C  0100               	movlb	0	; () banked
  6326  015F5E  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  6327  015F60  0E40               	movlw	64
  6328  015F62  0100               	movlb	0	; () banked
  6329  015F64  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  6330  015F66  EC89  F0BF         	call	___ftdiv	;wreg free
  6331  015F6A  C09B  F4AE         	movff	?___ftdiv,_Wind
  6332  015F6E  C09C  F4AF         	movff	?___ftdiv+1,_Wind+1
  6333  015F72  C09D  F4B0         	movff	?___ftdiv+2,_Wind+2
  6334                           
  6335                           ;RPM_Measurement.c: 190: Wind_Speed = ((Wind * (143))/100);
  6336  015F76  0E00               	movlw	0
  6337  015F78  0100               	movlb	0	; () banked
  6338  015F7A  6F6D               	movwf	___ftmul@f2& (0+255),b
  6339  015F7C  0E0F               	movlw	15
  6340  015F7E  0100               	movlb	0	; () banked
  6341  015F80  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  6342  015F82  0E43               	movlw	67
  6343  015F84  0100               	movlb	0	; () banked
  6344  015F86  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  6345  015F88  C4AE  F06A         	movff	_Wind,___ftmul@f1
  6346  015F8C  C4AF  F06B         	movff	_Wind+1,___ftmul@f1+1
  6347  015F90  C4B0  F06C         	movff	_Wind+2,___ftmul@f1+2
  6348  015F94  EC83  F0BD         	call	___ftmul	;wreg free
  6349  015F98  C06A  F09B         	movff	?___ftmul,___ftdiv@f1
  6350  015F9C  C06B  F09C         	movff	?___ftmul+1,___ftdiv@f1+1
  6351  015FA0  C06C  F09D         	movff	?___ftmul+2,___ftdiv@f1+2
  6352  015FA4  0E00               	movlw	0
  6353  015FA6  0100               	movlb	0	; () banked
  6354  015FA8  6F9E               	movwf	___ftdiv@f2& (0+255),b
  6355  015FAA  0EC8               	movlw	200
  6356  015FAC  0100               	movlb	0	; () banked
  6357  015FAE  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  6358  015FB0  0E42               	movlw	66
  6359  015FB2  0100               	movlb	0	; () banked
  6360  015FB4  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  6361  015FB6  EC89  F0BF         	call	___ftdiv	;wreg free
  6362  015FBA  C09B  F236         	movff	?___ftdiv,_Wind_Speed
  6363  015FBE  C09C  F237         	movff	?___ftdiv+1,_Wind_Speed+1
  6364  015FC2  C09D  F238         	movff	?___ftdiv+2,_Wind_Speed+2
  6365  015FC6  0012               	return		;funcret
  6366  015FC8                     __end_of_Wind_Speed_Cal:
  6367                           	opt stack 0
  6368                           tblptru	equ	0xFF8
  6369                           tblptrh	equ	0xFF7
  6370                           tblptrl	equ	0xFF6
  6371                           tablat	equ	0xFF5
  6372                           intcon	equ	0xFF2
  6373                           postinc0	equ	0xFEE
  6374                           wreg	equ	0xFE8
  6375                           postdec1	equ	0xFE5
  6376                           fsr1h	equ	0xFE2
  6377                           fsr1l	equ	0xFE1
  6378                           status	equ	0xFD8
  6379                           
  6380 ;; *************** function _Volt_Curr_Read *****************
  6381 ;; Defined at:
  6382 ;;		line 134 in file "Power_Meter.c"
  6383 ;; Parameters:    Size  Location     Type
  6384 ;;		None
  6385 ;; Auto vars:     Size  Location     Type
  6386 ;;		None
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  1    wreg      void 
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, status,0, cstack
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;Total ram usage:        0 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    5
  6403 ;; This function calls:
  6404 ;;		_Read_Adc
  6405 ;;		___ftge
  6406 ;;		___lwtoft
  6407 ;; This function is called by:
  6408 ;;		_main
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           	psect	text7
  6413  014ADE                     __ptext7:
  6414                           	opt stack 0
  6415  014ADE                     _Volt_Curr_Read:
  6416                           	opt stack 25
  6417                           
  6418                           ;Power_Meter.c: 137: switch (Case_Call)
  6419                           
  6420                           ;incstack = 0
  6421  014ADE  D1C2               	goto	l21577
  6422  014AE0                     l21527:
  6423                           
  6424                           ;Power_Meter.c: 141: Case_Call = 2;
  6425  014AE0  0E02               	movlw	2
  6426  014AE2  0101               	movlb	1	; () banked
  6427  014AE4  6FFE               	movwf	_Case_Call& (0+255),b
  6428                           
  6429                           ;Power_Meter.c: 143: R_V_Max = 0;
  6430  014AE6  0E00               	movlw	0
  6431  014AE8  0101               	movlb	1	; () banked
  6432  014AEA  6F1E               	movwf	_R_V_Max& (0+255),b
  6433  014AEC  0E00               	movlw	0
  6434  014AEE  0101               	movlb	1	; () banked
  6435  014AF0  6F1F               	movwf	(_R_V_Max+1)& (0+255),b
  6436  014AF2  0E00               	movlw	0
  6437  014AF4  0101               	movlb	1	; () banked
  6438  014AF6  6F20               	movwf	(_R_V_Max+2)& (0+255),b
  6439                           
  6440                           ;Power_Meter.c: 144: R_C_Max = 0;
  6441  014AF8  0E00               	movlw	0
  6442  014AFA  0101               	movlb	1	; () banked
  6443  014AFC  6F15               	movwf	_R_C_Max& (0+255),b
  6444  014AFE  0E00               	movlw	0
  6445  014B00  0101               	movlb	1	; () banked
  6446  014B02  6F16               	movwf	(_R_C_Max+1)& (0+255),b
  6447  014B04  0E00               	movlw	0
  6448  014B06  0101               	movlb	1	; () banked
  6449  014B08  6F17               	movwf	(_R_C_Max+2)& (0+255),b
  6450                           
  6451                           ;Power_Meter.c: 146: for(i=0; i<70; i++)
  6452  014B0A  0E00               	movlw	0
  6453  014B0C  6E3F               	movwf	_i,c
  6454  014B0E                     l21529:
  6455                           
  6456                           ; BSR set to: 1
  6457  014B0E  0E45               	movlw	69
  6458  014B10  643F               	cpfsgt	_i,c
  6459  014B12  D001               	goto	l21533
  6460  014B14  D056               	goto	l9263
  6461  014B16                     l21533:
  6462                           
  6463                           ;Power_Meter.c: 147: {
  6464                           ;Power_Meter.c: 148: R_V = Read_Adc(1);
  6465  014B16  0E01               	movlw	1
  6466  014B18  ECC8  F0D3         	call	_Read_Adc
  6467  014B1C  C01D  F2AA         	movff	?_Read_Adc,_R_V
  6468  014B20  C01E  F2AB         	movff	?_Read_Adc+1,_R_V+1
  6469                           
  6470                           ;Power_Meter.c: 149: R_C = Read_Adc(9);
  6471  014B24  0E09               	movlw	9
  6472  014B26  ECC8  F0D3         	call	_Read_Adc
  6473  014B2A  C01D  F2A8         	movff	?_Read_Adc,_R_C
  6474  014B2E  C01E  F2A9         	movff	?_Read_Adc+1,_R_C+1
  6475                           
  6476                           ;Power_Meter.c: 151: if(R_V_Max < R_V)
  6477  014B32  C11E  F08F         	movff	_R_V_Max,___ftge@ff1
  6478  014B36  C11F  F090         	movff	_R_V_Max+1,___ftge@ff1+1
  6479  014B3A  C120  F091         	movff	_R_V_Max+2,___ftge@ff1+2
  6480  014B3E  C2AA  F060         	movff	_R_V,___lwtoft@c
  6481  014B42  C2AB  F061         	movff	_R_V+1,___lwtoft@c+1
  6482  014B46  EC84  F0D4         	call	___lwtoft	;wreg free
  6483  014B4A  C060  F092         	movff	?___lwtoft,___ftge@ff2
  6484  014B4E  C061  F093         	movff	?___lwtoft+1,___ftge@ff2+1
  6485  014B52  C062  F094         	movff	?___lwtoft+2,___ftge@ff2+2
  6486  014B56  EC09  F0C8         	call	___ftge	;wreg free
  6487  014B5A  0100               	movlb	0	; () banked
  6488  014B5C  B0D8               	btfsc	status,0,c
  6489  014B5E  D00C               	goto	l9264
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;Power_Meter.c: 152: {
  6493                           ;Power_Meter.c: 153: R_V_Max = R_V;
  6494  014B60  C2AA  F060         	movff	_R_V,___lwtoft@c
  6495  014B64  C2AB  F061         	movff	_R_V+1,___lwtoft@c+1
  6496  014B68  EC84  F0D4         	call	___lwtoft	;wreg free
  6497  014B6C  C060  F11E         	movff	?___lwtoft,_R_V_Max
  6498  014B70  C061  F11F         	movff	?___lwtoft+1,_R_V_Max+1
  6499  014B74  C062  F120         	movff	?___lwtoft+2,_R_V_Max+2
  6500  014B78                     l9264:
  6501                           
  6502                           ;Power_Meter.c: 154: }
  6503                           ;Power_Meter.c: 156: if(R_C_Max < R_C)
  6504  014B78  C115  F08F         	movff	_R_C_Max,___ftge@ff1
  6505  014B7C  C116  F090         	movff	_R_C_Max+1,___ftge@ff1+1
  6506  014B80  C117  F091         	movff	_R_C_Max+2,___ftge@ff1+2
  6507  014B84  C2A8  F060         	movff	_R_C,___lwtoft@c
  6508  014B88  C2A9  F061         	movff	_R_C+1,___lwtoft@c+1
  6509  014B8C  EC84  F0D4         	call	___lwtoft	;wreg free
  6510  014B90  C060  F092         	movff	?___lwtoft,___ftge@ff2
  6511  014B94  C061  F093         	movff	?___lwtoft+1,___ftge@ff2+1
  6512  014B98  C062  F094         	movff	?___lwtoft+2,___ftge@ff2+2
  6513  014B9C  EC09  F0C8         	call	___ftge	;wreg free
  6514  014BA0  0100               	movlb	0	; () banked
  6515  014BA2  B0D8               	btfsc	status,0,c
  6516  014BA4  D00C               	goto	l21539
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;Power_Meter.c: 157: {
  6520                           ;Power_Meter.c: 158: R_C_Max = R_C;
  6521  014BA6  C2A8  F060         	movff	_R_C,___lwtoft@c
  6522  014BAA  C2A9  F061         	movff	_R_C+1,___lwtoft@c+1
  6523  014BAE  EC84  F0D4         	call	___lwtoft	;wreg free
  6524  014BB2  C060  F115         	movff	?___lwtoft,_R_C_Max
  6525  014BB6  C061  F116         	movff	?___lwtoft+1,_R_C_Max+1
  6526  014BBA  C062  F117         	movff	?___lwtoft+2,_R_C_Max+2
  6527  014BBE                     l21539:
  6528  014BBE  2A3F               	incf	_i,f,c
  6529  014BC0  D7A6               	goto	l21529
  6530  014BC2                     l9263:
  6531                           
  6532                           ;Power_Meter.c: 159: }
  6533                           ;Power_Meter.c: 160: }
  6534                           ;Power_Meter.c: 162: R_V_Arr[2] = R_V_Arr[1];
  6535  014BC2  C3F6  F3F9         	movff	_R_V_Arr+3,_R_V_Arr+6
  6536  014BC6  C3F7  F3FA         	movff	_R_V_Arr+4,_R_V_Arr+7
  6537  014BCA  C3F8  F3FB         	movff	_R_V_Arr+5,_R_V_Arr+8
  6538                           
  6539                           ;Power_Meter.c: 163: R_V_Arr[1] = R_V_Arr[0];
  6540  014BCE  C3F3  F3F6         	movff	_R_V_Arr,_R_V_Arr+3
  6541  014BD2  C3F4  F3F7         	movff	_R_V_Arr+1,_R_V_Arr+4
  6542  014BD6  C3F5  F3F8         	movff	_R_V_Arr+2,_R_V_Arr+5
  6543                           
  6544                           ;Power_Meter.c: 164: R_V_Arr[0] = R_V_Max;
  6545  014BDA  C11E  F3F3         	movff	_R_V_Max,_R_V_Arr
  6546  014BDE  C11F  F3F4         	movff	_R_V_Max+1,_R_V_Arr+1
  6547  014BE2  C120  F3F5         	movff	_R_V_Max+2,_R_V_Arr+2
  6548                           
  6549                           ;Power_Meter.c: 166: R_C_Arr[2] = R_C_Arr[1];
  6550  014BE6  C46F  F472         	movff	_R_C_Arr+3,_R_C_Arr+6
  6551  014BEA  C470  F473         	movff	_R_C_Arr+4,_R_C_Arr+7
  6552  014BEE  C471  F474         	movff	_R_C_Arr+5,_R_C_Arr+8
  6553                           
  6554                           ;Power_Meter.c: 167: R_C_Arr[1] = R_C_Arr[0];
  6555  014BF2  C46C  F46F         	movff	_R_C_Arr,_R_C_Arr+3
  6556  014BF6  C46D  F470         	movff	_R_C_Arr+1,_R_C_Arr+4
  6557  014BFA  C46E  F471         	movff	_R_C_Arr+2,_R_C_Arr+5
  6558                           
  6559                           ;Power_Meter.c: 168: R_C_Arr[0] = R_C_Max;
  6560  014BFE  C115  F46C         	movff	_R_C_Max,_R_C_Arr
  6561  014C02  C116  F46D         	movff	_R_C_Max+1,_R_C_Arr+1
  6562  014C06  C117  F46E         	movff	_R_C_Max+2,_R_C_Arr+2
  6563                           
  6564                           ;Power_Meter.c: 170: break;
  6565  014C0A  0012               	return	
  6566  014C0C                     l21543:
  6567                           
  6568                           ;Power_Meter.c: 174: Case_Call = 3;
  6569  014C0C  0E03               	movlw	3
  6570  014C0E  0101               	movlb	1	; () banked
  6571  014C10  6FFE               	movwf	_Case_Call& (0+255),b
  6572                           
  6573                           ;Power_Meter.c: 176: Y_V_Max = 0;
  6574  014C12  0E00               	movlw	0
  6575  014C14  0102               	movlb	2	; () banked
  6576  014C16  6F78               	movwf	_Y_V_Max& (0+255),b
  6577  014C18  0E00               	movlw	0
  6578  014C1A  0102               	movlb	2	; () banked
  6579  014C1C  6F79               	movwf	(_Y_V_Max+1)& (0+255),b
  6580  014C1E  0E00               	movlw	0
  6581  014C20  0102               	movlb	2	; () banked
  6582  014C22  6F7A               	movwf	(_Y_V_Max+2)& (0+255),b
  6583                           
  6584                           ;Power_Meter.c: 177: Y_C_Max = 0;
  6585  014C24  0E00               	movlw	0
  6586  014C26  0102               	movlb	2	; () banked
  6587  014C28  6F72               	movwf	_Y_C_Max& (0+255),b
  6588  014C2A  0E00               	movlw	0
  6589  014C2C  0102               	movlb	2	; () banked
  6590  014C2E  6F73               	movwf	(_Y_C_Max+1)& (0+255),b
  6591  014C30  0E00               	movlw	0
  6592  014C32  0102               	movlb	2	; () banked
  6593  014C34  6F74               	movwf	(_Y_C_Max+2)& (0+255),b
  6594                           
  6595                           ;Power_Meter.c: 179: for(i=0; i<70; i++)
  6596  014C36  0E00               	movlw	0
  6597  014C38  6E3F               	movwf	_i,c
  6598  014C3A                     l21545:
  6599                           
  6600                           ; BSR set to: 2
  6601  014C3A  0E45               	movlw	69
  6602  014C3C  643F               	cpfsgt	_i,c
  6603  014C3E  D001               	goto	l21549
  6604  014C40  D056               	goto	l9269
  6605  014C42                     l21549:
  6606                           
  6607                           ;Power_Meter.c: 180: {
  6608                           ;Power_Meter.c: 181: Y_V = Read_Adc(2);
  6609  014C42  0E02               	movlw	2
  6610  014C44  ECC8  F0D3         	call	_Read_Adc
  6611  014C48  C01D  F2D2         	movff	?_Read_Adc,_Y_V
  6612  014C4C  C01E  F2D3         	movff	?_Read_Adc+1,_Y_V+1
  6613                           
  6614                           ;Power_Meter.c: 182: Y_C = Read_Adc(10);
  6615  014C50  0E0A               	movlw	10
  6616  014C52  ECC8  F0D3         	call	_Read_Adc
  6617  014C56  C01D  F2D0         	movff	?_Read_Adc,_Y_C
  6618  014C5A  C01E  F2D1         	movff	?_Read_Adc+1,_Y_C+1
  6619                           
  6620                           ;Power_Meter.c: 184: if(Y_V_Max < Y_V)
  6621  014C5E  C278  F08F         	movff	_Y_V_Max,___ftge@ff1
  6622  014C62  C279  F090         	movff	_Y_V_Max+1,___ftge@ff1+1
  6623  014C66  C27A  F091         	movff	_Y_V_Max+2,___ftge@ff1+2
  6624  014C6A  C2D2  F060         	movff	_Y_V,___lwtoft@c
  6625  014C6E  C2D3  F061         	movff	_Y_V+1,___lwtoft@c+1
  6626  014C72  EC84  F0D4         	call	___lwtoft	;wreg free
  6627  014C76  C060  F092         	movff	?___lwtoft,___ftge@ff2
  6628  014C7A  C061  F093         	movff	?___lwtoft+1,___ftge@ff2+1
  6629  014C7E  C062  F094         	movff	?___lwtoft+2,___ftge@ff2+2
  6630  014C82  EC09  F0C8         	call	___ftge	;wreg free
  6631  014C86  0100               	movlb	0	; () banked
  6632  014C88  B0D8               	btfsc	status,0,c
  6633  014C8A  D00C               	goto	l9270
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;Power_Meter.c: 185: {
  6637                           ;Power_Meter.c: 186: Y_V_Max = Y_V;
  6638  014C8C  C2D2  F060         	movff	_Y_V,___lwtoft@c
  6639  014C90  C2D3  F061         	movff	_Y_V+1,___lwtoft@c+1
  6640  014C94  EC84  F0D4         	call	___lwtoft	;wreg free
  6641  014C98  C060  F278         	movff	?___lwtoft,_Y_V_Max
  6642  014C9C  C061  F279         	movff	?___lwtoft+1,_Y_V_Max+1
  6643  014CA0  C062  F27A         	movff	?___lwtoft+2,_Y_V_Max+2
  6644  014CA4                     l9270:
  6645                           
  6646                           ;Power_Meter.c: 187: }
  6647                           ;Power_Meter.c: 189: if(Y_C_Max < Y_C)
  6648  014CA4  C272  F08F         	movff	_Y_C_Max,___ftge@ff1
  6649  014CA8  C273  F090         	movff	_Y_C_Max+1,___ftge@ff1+1
  6650  014CAC  C274  F091         	movff	_Y_C_Max+2,___ftge@ff1+2
  6651  014CB0  C2D0  F060         	movff	_Y_C,___lwtoft@c
  6652  014CB4  C2D1  F061         	movff	_Y_C+1,___lwtoft@c+1
  6653  014CB8  EC84  F0D4         	call	___lwtoft	;wreg free
  6654  014CBC  C060  F092         	movff	?___lwtoft,___ftge@ff2
  6655  014CC0  C061  F093         	movff	?___lwtoft+1,___ftge@ff2+1
  6656  014CC4  C062  F094         	movff	?___lwtoft+2,___ftge@ff2+2
  6657  014CC8  EC09  F0C8         	call	___ftge	;wreg free
  6658  014CCC  0100               	movlb	0	; () banked
  6659  014CCE  B0D8               	btfsc	status,0,c
  6660  014CD0  D00C               	goto	l21555
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;Power_Meter.c: 190: {
  6664                           ;Power_Meter.c: 191: Y_C_Max = Y_C;
  6665  014CD2  C2D0  F060         	movff	_Y_C,___lwtoft@c
  6666  014CD6  C2D1  F061         	movff	_Y_C+1,___lwtoft@c+1
  6667  014CDA  EC84  F0D4         	call	___lwtoft	;wreg free
  6668  014CDE  C060  F272         	movff	?___lwtoft,_Y_C_Max
  6669  014CE2  C061  F273         	movff	?___lwtoft+1,_Y_C_Max+1
  6670  014CE6  C062  F274         	movff	?___lwtoft+2,_Y_C_Max+2
  6671  014CEA                     l21555:
  6672  014CEA  2A3F               	incf	_i,f,c
  6673  014CEC  D7A6               	goto	l21545
  6674  014CEE                     l9269:
  6675                           
  6676                           ;Power_Meter.c: 192: }
  6677                           ;Power_Meter.c: 193: }
  6678                           ;Power_Meter.c: 195: Y_V_Arr[2] = Y_V_Arr[1];
  6679  014CEE  C481  F484         	movff	_Y_V_Arr+3,_Y_V_Arr+6
  6680  014CF2  C482  F485         	movff	_Y_V_Arr+4,_Y_V_Arr+7
  6681  014CF6  C483  F486         	movff	_Y_V_Arr+5,_Y_V_Arr+8
  6682                           
  6683                           ;Power_Meter.c: 196: Y_V_Arr[1] = Y_V_Arr[0];
  6684  014CFA  C47E  F481         	movff	_Y_V_Arr,_Y_V_Arr+3
  6685  014CFE  C47F  F482         	movff	_Y_V_Arr+1,_Y_V_Arr+4
  6686  014D02  C480  F483         	movff	_Y_V_Arr+2,_Y_V_Arr+5
  6687                           
  6688                           ;Power_Meter.c: 197: Y_V_Arr[0] = Y_V_Max;
  6689  014D06  C278  F47E         	movff	_Y_V_Max,_Y_V_Arr
  6690  014D0A  C279  F47F         	movff	_Y_V_Max+1,_Y_V_Arr+1
  6691  014D0E  C27A  F480         	movff	_Y_V_Max+2,_Y_V_Arr+2
  6692                           
  6693                           ;Power_Meter.c: 199: Y_C_Arr[2] = Y_C_Arr[1];
  6694  014D12  C478  F47B         	movff	_Y_C_Arr+3,_Y_C_Arr+6
  6695  014D16  C479  F47C         	movff	_Y_C_Arr+4,_Y_C_Arr+7
  6696  014D1A  C47A  F47D         	movff	_Y_C_Arr+5,_Y_C_Arr+8
  6697                           
  6698                           ;Power_Meter.c: 200: Y_C_Arr[1] = Y_C_Arr[0];
  6699  014D1E  C475  F478         	movff	_Y_C_Arr,_Y_C_Arr+3
  6700  014D22  C476  F479         	movff	_Y_C_Arr+1,_Y_C_Arr+4
  6701  014D26  C477  F47A         	movff	_Y_C_Arr+2,_Y_C_Arr+5
  6702                           
  6703                           ;Power_Meter.c: 201: Y_C_Arr[0] = Y_C_Max;
  6704  014D2A  C272  F475         	movff	_Y_C_Max,_Y_C_Arr
  6705  014D2E  C273  F476         	movff	_Y_C_Max+1,_Y_C_Arr+1
  6706  014D32  C274  F477         	movff	_Y_C_Max+2,_Y_C_Arr+2
  6707                           
  6708                           ;Power_Meter.c: 203: break;
  6709  014D36  0012               	return	
  6710  014D38                     l21559:
  6711                           
  6712                           ;Power_Meter.c: 207: Case_Call = 1;
  6713  014D38  0E01               	movlw	1
  6714  014D3A  0101               	movlb	1	; () banked
  6715  014D3C  6FFE               	movwf	_Case_Call& (0+255),b
  6716                           
  6717                           ;Power_Meter.c: 209: B_V_Max=0;
  6718  014D3E  0E00               	movlw	0
  6719  014D40  0102               	movlb	2	; () banked
  6720  014D42  6F09               	movwf	_B_V_Max& (0+255),b
  6721  014D44  0E00               	movlw	0
  6722  014D46  0102               	movlb	2	; () banked
  6723  014D48  6F0A               	movwf	(_B_V_Max+1)& (0+255),b
  6724  014D4A  0E00               	movlw	0
  6725  014D4C  0102               	movlb	2	; () banked
  6726  014D4E  6F0B               	movwf	(_B_V_Max+2)& (0+255),b
  6727                           
  6728                           ;Power_Meter.c: 210: B_C_Max=0;
  6729  014D50  0E00               	movlw	0
  6730  014D52  0102               	movlb	2	; () banked
  6731  014D54  6F06               	movwf	_B_C_Max& (0+255),b
  6732  014D56  0E00               	movlw	0
  6733  014D58  0102               	movlb	2	; () banked
  6734  014D5A  6F07               	movwf	(_B_C_Max+1)& (0+255),b
  6735  014D5C  0E00               	movlw	0
  6736  014D5E  0102               	movlb	2	; () banked
  6737  014D60  6F08               	movwf	(_B_C_Max+2)& (0+255),b
  6738                           
  6739                           ;Power_Meter.c: 212: for(i=0; i<70; i++)
  6740  014D62  0E00               	movlw	0
  6741  014D64  6E3F               	movwf	_i,c
  6742  014D66                     l21561:
  6743                           
  6744                           ; BSR set to: 2
  6745  014D66  0E45               	movlw	69
  6746  014D68  643F               	cpfsgt	_i,c
  6747  014D6A  D001               	goto	l21565
  6748  014D6C  D056               	goto	l9274
  6749  014D6E                     l21565:
  6750                           
  6751                           ;Power_Meter.c: 213: {
  6752                           ;Power_Meter.c: 214: B_V = Read_Adc(3);
  6753  014D6E  0E03               	movlw	3
  6754  014D70  ECC8  F0D3         	call	_Read_Adc
  6755  014D74  C01D  F288         	movff	?_Read_Adc,_B_V
  6756  014D78  C01E  F289         	movff	?_Read_Adc+1,_B_V+1
  6757                           
  6758                           ;Power_Meter.c: 215: B_C = Read_Adc(11);
  6759  014D7C  0E0B               	movlw	11
  6760  014D7E  ECC8  F0D3         	call	_Read_Adc
  6761  014D82  C01D  F286         	movff	?_Read_Adc,_B_C
  6762  014D86  C01E  F287         	movff	?_Read_Adc+1,_B_C+1
  6763                           
  6764                           ;Power_Meter.c: 217: if(B_V_Max < B_V)
  6765  014D8A  C209  F08F         	movff	_B_V_Max,___ftge@ff1
  6766  014D8E  C20A  F090         	movff	_B_V_Max+1,___ftge@ff1+1
  6767  014D92  C20B  F091         	movff	_B_V_Max+2,___ftge@ff1+2
  6768  014D96  C288  F060         	movff	_B_V,___lwtoft@c
  6769  014D9A  C289  F061         	movff	_B_V+1,___lwtoft@c+1
  6770  014D9E  EC84  F0D4         	call	___lwtoft	;wreg free
  6771  014DA2  C060  F092         	movff	?___lwtoft,___ftge@ff2
  6772  014DA6  C061  F093         	movff	?___lwtoft+1,___ftge@ff2+1
  6773  014DAA  C062  F094         	movff	?___lwtoft+2,___ftge@ff2+2
  6774  014DAE  EC09  F0C8         	call	___ftge	;wreg free
  6775  014DB2  0100               	movlb	0	; () banked
  6776  014DB4  B0D8               	btfsc	status,0,c
  6777  014DB6  D00C               	goto	l9275
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;Power_Meter.c: 218: {
  6781                           ;Power_Meter.c: 219: B_V_Max = B_V;
  6782  014DB8  C288  F060         	movff	_B_V,___lwtoft@c
  6783  014DBC  C289  F061         	movff	_B_V+1,___lwtoft@c+1
  6784  014DC0  EC84  F0D4         	call	___lwtoft	;wreg free
  6785  014DC4  C060  F209         	movff	?___lwtoft,_B_V_Max
  6786  014DC8  C061  F20A         	movff	?___lwtoft+1,_B_V_Max+1
  6787  014DCC  C062  F20B         	movff	?___lwtoft+2,_B_V_Max+2
  6788  014DD0                     l9275:
  6789                           
  6790                           ;Power_Meter.c: 220: }
  6791                           ;Power_Meter.c: 222: if(B_C_Max < B_C)
  6792  014DD0  C206  F08F         	movff	_B_C_Max,___ftge@ff1
  6793  014DD4  C207  F090         	movff	_B_C_Max+1,___ftge@ff1+1
  6794  014DD8  C208  F091         	movff	_B_C_Max+2,___ftge@ff1+2
  6795  014DDC  C286  F060         	movff	_B_C,___lwtoft@c
  6796  014DE0  C287  F061         	movff	_B_C+1,___lwtoft@c+1
  6797  014DE4  EC84  F0D4         	call	___lwtoft	;wreg free
  6798  014DE8  C060  F092         	movff	?___lwtoft,___ftge@ff2
  6799  014DEC  C061  F093         	movff	?___lwtoft+1,___ftge@ff2+1
  6800  014DF0  C062  F094         	movff	?___lwtoft+2,___ftge@ff2+2
  6801  014DF4  EC09  F0C8         	call	___ftge	;wreg free
  6802  014DF8  0100               	movlb	0	; () banked
  6803  014DFA  B0D8               	btfsc	status,0,c
  6804  014DFC  D00C               	goto	l21571
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;Power_Meter.c: 223: {
  6808                           ;Power_Meter.c: 224: B_C_Max = B_C;
  6809  014DFE  C286  F060         	movff	_B_C,___lwtoft@c
  6810  014E02  C287  F061         	movff	_B_C+1,___lwtoft@c+1
  6811  014E06  EC84  F0D4         	call	___lwtoft	;wreg free
  6812  014E0A  C060  F206         	movff	?___lwtoft,_B_C_Max
  6813  014E0E  C061  F207         	movff	?___lwtoft+1,_B_C_Max+1
  6814  014E12  C062  F208         	movff	?___lwtoft+2,_B_C_Max+2
  6815  014E16                     l21571:
  6816  014E16  2A3F               	incf	_i,f,c
  6817  014E18  D7A6               	goto	l21561
  6818  014E1A                     l9274:
  6819                           
  6820                           ;Power_Meter.c: 225: }
  6821                           ;Power_Meter.c: 226: }
  6822                           ;Power_Meter.c: 228: B_V_Arr[2] = B_V_Arr[1];
  6823  014E1A  C466  F469         	movff	_B_V_Arr+3,_B_V_Arr+6
  6824  014E1E  C467  F46A         	movff	_B_V_Arr+4,_B_V_Arr+7
  6825  014E22  C468  F46B         	movff	_B_V_Arr+5,_B_V_Arr+8
  6826                           
  6827                           ;Power_Meter.c: 229: B_V_Arr[1] = B_V_Arr[0];
  6828  014E26  C463  F466         	movff	_B_V_Arr,_B_V_Arr+3
  6829  014E2A  C464  F467         	movff	_B_V_Arr+1,_B_V_Arr+4
  6830  014E2E  C465  F468         	movff	_B_V_Arr+2,_B_V_Arr+5
  6831                           
  6832                           ;Power_Meter.c: 230: B_V_Arr[0] = B_V_Max;
  6833  014E32  C209  F463         	movff	_B_V_Max,_B_V_Arr
  6834  014E36  C20A  F464         	movff	_B_V_Max+1,_B_V_Arr+1
  6835  014E3A  C20B  F465         	movff	_B_V_Max+2,_B_V_Arr+2
  6836                           
  6837                           ;Power_Meter.c: 232: B_C_Arr[2] = B_C_Arr[1];
  6838  014E3E  C45D  F460         	movff	_B_C_Arr+3,_B_C_Arr+6
  6839  014E42  C45E  F461         	movff	_B_C_Arr+4,_B_C_Arr+7
  6840  014E46  C45F  F462         	movff	_B_C_Arr+5,_B_C_Arr+8
  6841                           
  6842                           ;Power_Meter.c: 233: B_C_Arr[1] = B_C_Arr[0];
  6843  014E4A  C45A  F45D         	movff	_B_C_Arr,_B_C_Arr+3
  6844  014E4E  C45B  F45E         	movff	_B_C_Arr+1,_B_C_Arr+4
  6845  014E52  C45C  F45F         	movff	_B_C_Arr+2,_B_C_Arr+5
  6846                           
  6847                           ;Power_Meter.c: 234: B_C_Arr[0] = B_C_Max;
  6848  014E56  C206  F45A         	movff	_B_C_Max,_B_C_Arr
  6849  014E5A  C207  F45B         	movff	_B_C_Max+1,_B_C_Arr+1
  6850  014E5E  C208  F45C         	movff	_B_C_Max+2,_B_C_Arr+2
  6851                           
  6852                           ;Power_Meter.c: 237: }
  6853                           
  6854                           ;Power_Meter.c: 236: break;
  6855  014E62  0012               	return	
  6856  014E64                     l21577:
  6857  014E64  0101               	movlb	1	; () banked
  6858  014E66  51FE               	movf	_Case_Call& (0+255),w,b
  6859                           
  6860                           ; Switch size 1, requested type "space"
  6861                           ; Number of cases is 3, Range of values is 1 to 3
  6862                           ; switch strategies available:
  6863                           ; Name         Instructions Cycles
  6864                           ; simple_byte           10     6 (average)
  6865                           ;	Chosen strategy is simple_byte
  6866  014E68  0A01               	xorlw	1	; case 1
  6867  014E6A  B4D8               	btfsc	status,2,c
  6868  014E6C  D639               	goto	l21527
  6869  014E6E  0A03               	xorlw	3	; case 2
  6870  014E70  B4D8               	btfsc	status,2,c
  6871  014E72  D6CC               	goto	l21543
  6872  014E74  0A01               	xorlw	1	; case 3
  6873  014E76  A4D8               	btfss	status,2,c
  6874  014E78  0012               	return	
  6875  014E7A  D75E               	goto	l21559
  6876  014E7C                     __end_of_Volt_Curr_Read:
  6877                           	opt stack 0
  6878                           tblptru	equ	0xFF8
  6879                           tblptrh	equ	0xFF7
  6880                           tblptrl	equ	0xFF6
  6881                           tablat	equ	0xFF5
  6882                           intcon	equ	0xFF2
  6883                           postinc0	equ	0xFEE
  6884                           wreg	equ	0xFE8
  6885                           postdec1	equ	0xFE5
  6886                           fsr1h	equ	0xFE2
  6887                           fsr1l	equ	0xFE1
  6888                           status	equ	0xFD8
  6889                           
  6890 ;; *************** function _Volt_Curr_Avg *****************
  6891 ;; Defined at:
  6892 ;;		line 240 in file "Power_Meter.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;		None
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;		None
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      void 
  6899 ;; Registers used:
  6900 ;;		wreg, status,2, status,0, cstack
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6907 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6909 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;Total ram usage:        3 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    5
  6913 ;; This function calls:
  6914 ;;		___ftadd
  6915 ;;		___ftdiv
  6916 ;;		___ftmul
  6917 ;; This function is called by:
  6918 ;;		_main
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text8
  6923  0138D4                     __ptext8:
  6924                           	opt stack 0
  6925  0138D4                     _Volt_Curr_Avg:
  6926                           	opt stack 25
  6927                           
  6928                           ;Power_Meter.c: 242: R_V_Avg_Steps = ((R_V_Arr[0] + R_V_Arr[1] + R_V_Arr[2] ) / 3);
  6929                           
  6930                           ;incstack = 0
  6931  0138D4  C3F9  F086         	movff	_R_V_Arr+6,___ftadd@f2
  6932  0138D8  C3FA  F087         	movff	_R_V_Arr+7,___ftadd@f2+1
  6933  0138DC  C3FB  F088         	movff	_R_V_Arr+8,___ftadd@f2+2
  6934  0138E0  C3F6  F083         	movff	_R_V_Arr+3,___ftadd@f1
  6935  0138E4  C3F7  F084         	movff	_R_V_Arr+4,___ftadd@f1+1
  6936  0138E8  C3F8  F085         	movff	_R_V_Arr+5,___ftadd@f1+2
  6937  0138EC  ECE4  F0AF         	call	___ftadd	;wreg free
  6938  0138F0  C083  F0AA         	movff	?___ftadd,_Volt_Curr_Avg$8115
  6939  0138F4  C084  F0AB         	movff	?___ftadd+1,_Volt_Curr_Avg$8115+1
  6940  0138F8  C085  F0AC         	movff	?___ftadd+2,_Volt_Curr_Avg$8115+2
  6941                           
  6942                           ;Power_Meter.c: 242: R_V_Avg_Steps = ((R_V_Arr[0] + R_V_Arr[1] + R_V_Arr[2] ) / 3);
  6943  0138FC  C3F3  F086         	movff	_R_V_Arr,___ftadd@f2
  6944  013900  C3F4  F087         	movff	_R_V_Arr+1,___ftadd@f2+1
  6945  013904  C3F5  F088         	movff	_R_V_Arr+2,___ftadd@f2+2
  6946  013908  C0AA  F083         	movff	_Volt_Curr_Avg$8115,___ftadd@f1
  6947  01390C  C0AB  F084         	movff	_Volt_Curr_Avg$8115+1,___ftadd@f1+1
  6948  013910  C0AC  F085         	movff	_Volt_Curr_Avg$8115+2,___ftadd@f1+2
  6949  013914  ECE4  F0AF         	call	___ftadd	;wreg free
  6950  013918  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  6951  01391C  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  6952  013920  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  6953  013924  0E00               	movlw	0
  6954  013926  0100               	movlb	0	; () banked
  6955  013928  6F9E               	movwf	___ftdiv@f2& (0+255),b
  6956  01392A  0E40               	movlw	64
  6957  01392C  0100               	movlb	0	; () banked
  6958  01392E  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  6959  013930  0E40               	movlw	64
  6960  013932  0100               	movlb	0	; () banked
  6961  013934  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  6962  013936  EC89  F0BF         	call	___ftdiv	;wreg free
  6963  01393A  C09B  F4E7         	movff	?___ftdiv,_R_V_Avg_Steps
  6964  01393E  C09C  F4E8         	movff	?___ftdiv+1,_R_V_Avg_Steps+1
  6965  013942  C09D  F4E9         	movff	?___ftdiv+2,_R_V_Avg_Steps+2
  6966                           
  6967                           ;Power_Meter.c: 243: R_Volt = ((R_V_Avg_Steps - (2034)) * (0.92557)) * 0.707106781;
  6968  013946  0E40               	movlw	64
  6969  013948  0100               	movlb	0	; () banked
  6970  01394A  6F86               	movwf	___ftadd@f2& (0+255),b
  6971  01394C  0EFE               	movlw	254
  6972  01394E  0100               	movlb	0	; () banked
  6973  013950  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  6974  013952  0EC4               	movlw	196
  6975  013954  0100               	movlb	0	; () banked
  6976  013956  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  6977  013958  C4E7  F083         	movff	_R_V_Avg_Steps,___ftadd@f1
  6978  01395C  C4E8  F084         	movff	_R_V_Avg_Steps+1,___ftadd@f1+1
  6979  013960  C4E9  F085         	movff	_R_V_Avg_Steps+2,___ftadd@f1+2
  6980  013964  ECE4  F0AF         	call	___ftadd	;wreg free
  6981  013968  C083  F06A         	movff	?___ftadd,___ftmul@f1
  6982  01396C  C084  F06B         	movff	?___ftadd+1,___ftmul@f1+1
  6983  013970  C085  F06C         	movff	?___ftadd+2,___ftmul@f1+2
  6984  013974  0E8C               	movlw	140
  6985  013976  0100               	movlb	0	; () banked
  6986  013978  6F6D               	movwf	___ftmul@f2& (0+255),b
  6987  01397A  0E27               	movlw	39
  6988  01397C  0100               	movlb	0	; () banked
  6989  01397E  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  6990  013980  0E3F               	movlw	63
  6991  013982  0100               	movlb	0	; () banked
  6992  013984  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  6993  013986  EC83  F0BD         	call	___ftmul	;wreg free
  6994  01398A  C06A  F02A         	movff	?___ftmul,_R_Volt
  6995  01398E  C06B  F02B         	movff	?___ftmul+1,_R_Volt+1
  6996  013992  C06C  F02C         	movff	?___ftmul+2,_R_Volt+2
  6997                           
  6998                           ;Power_Meter.c: 245: R_C_Avg_Steps = ((R_C_Arr[0]+R_C_Arr[1] + R_C_Arr[2] ) / 3);
  6999  013996  C472  F086         	movff	_R_C_Arr+6,___ftadd@f2
  7000  01399A  C473  F087         	movff	_R_C_Arr+7,___ftadd@f2+1
  7001  01399E  C474  F088         	movff	_R_C_Arr+8,___ftadd@f2+2
  7002  0139A2  C46F  F083         	movff	_R_C_Arr+3,___ftadd@f1
  7003  0139A6  C470  F084         	movff	_R_C_Arr+4,___ftadd@f1+1
  7004  0139AA  C471  F085         	movff	_R_C_Arr+5,___ftadd@f1+2
  7005  0139AE  ECE4  F0AF         	call	___ftadd	;wreg free
  7006  0139B2  C083  F0AA         	movff	?___ftadd,_Volt_Curr_Avg$8115
  7007  0139B6  C084  F0AB         	movff	?___ftadd+1,_Volt_Curr_Avg$8115+1
  7008  0139BA  C085  F0AC         	movff	?___ftadd+2,_Volt_Curr_Avg$8115+2
  7009                           
  7010                           ;Power_Meter.c: 245: R_C_Avg_Steps = ((R_C_Arr[0]+R_C_Arr[1] + R_C_Arr[2] ) / 3);
  7011  0139BE  C46C  F086         	movff	_R_C_Arr,___ftadd@f2
  7012  0139C2  C46D  F087         	movff	_R_C_Arr+1,___ftadd@f2+1
  7013  0139C6  C46E  F088         	movff	_R_C_Arr+2,___ftadd@f2+2
  7014  0139CA  C0AA  F083         	movff	_Volt_Curr_Avg$8115,___ftadd@f1
  7015  0139CE  C0AB  F084         	movff	_Volt_Curr_Avg$8115+1,___ftadd@f1+1
  7016  0139D2  C0AC  F085         	movff	_Volt_Curr_Avg$8115+2,___ftadd@f1+2
  7017  0139D6  ECE4  F0AF         	call	___ftadd	;wreg free
  7018  0139DA  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  7019  0139DE  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  7020  0139E2  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  7021  0139E6  0E00               	movlw	0
  7022  0139E8  0100               	movlb	0	; () banked
  7023  0139EA  6F9E               	movwf	___ftdiv@f2& (0+255),b
  7024  0139EC  0E40               	movlw	64
  7025  0139EE  0100               	movlb	0	; () banked
  7026  0139F0  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  7027  0139F2  0E40               	movlw	64
  7028  0139F4  0100               	movlb	0	; () banked
  7029  0139F6  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  7030  0139F8  EC89  F0BF         	call	___ftdiv	;wreg free
  7031  0139FC  C09B  F4E4         	movff	?___ftdiv,_R_C_Avg_Steps
  7032  013A00  C09C  F4E5         	movff	?___ftdiv+1,_R_C_Avg_Steps+1
  7033  013A04  C09D  F4E6         	movff	?___ftdiv+2,_R_C_Avg_Steps+2
  7034                           
  7035                           ;Power_Meter.c: 246: R_Curr = ((R_C_Avg_Steps - (2034)) * (0.03785)) * 0.707106781;
  7036  013A08  0E40               	movlw	64
  7037  013A0A  0100               	movlb	0	; () banked
  7038  013A0C  6F86               	movwf	___ftadd@f2& (0+255),b
  7039  013A0E  0EFE               	movlw	254
  7040  013A10  0100               	movlb	0	; () banked
  7041  013A12  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  7042  013A14  0EC4               	movlw	196
  7043  013A16  0100               	movlb	0	; () banked
  7044  013A18  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  7045  013A1A  C4E4  F083         	movff	_R_C_Avg_Steps,___ftadd@f1
  7046  013A1E  C4E5  F084         	movff	_R_C_Avg_Steps+1,___ftadd@f1+1
  7047  013A22  C4E6  F085         	movff	_R_C_Avg_Steps+2,___ftadd@f1+2
  7048  013A26  ECE4  F0AF         	call	___ftadd	;wreg free
  7049  013A2A  C083  F06A         	movff	?___ftadd,___ftmul@f1
  7050  013A2E  C084  F06B         	movff	?___ftadd+1,___ftmul@f1+1
  7051  013A32  C085  F06C         	movff	?___ftadd+2,___ftmul@f1+2
  7052  013A36  0E40               	movlw	64
  7053  013A38  0100               	movlb	0	; () banked
  7054  013A3A  6F6D               	movwf	___ftmul@f2& (0+255),b
  7055  013A3C  0EDB               	movlw	219
  7056  013A3E  0100               	movlb	0	; () banked
  7057  013A40  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  7058  013A42  0E3C               	movlw	60
  7059  013A44  0100               	movlb	0	; () banked
  7060  013A46  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  7061  013A48  EC83  F0BD         	call	___ftmul	;wreg free
  7062  013A4C  C06A  F118         	movff	?___ftmul,_R_Curr
  7063  013A50  C06B  F119         	movff	?___ftmul+1,_R_Curr+1
  7064  013A54  C06C  F11A         	movff	?___ftmul+2,_R_Curr+2
  7065                           
  7066                           ;Power_Meter.c: 248: Y_V_Avg_Steps = ((Y_V_Arr[0] + Y_V_Arr[1] + Y_V_Arr[2] ) / 3);
  7067  013A58  C484  F086         	movff	_Y_V_Arr+6,___ftadd@f2
  7068  013A5C  C485  F087         	movff	_Y_V_Arr+7,___ftadd@f2+1
  7069  013A60  C486  F088         	movff	_Y_V_Arr+8,___ftadd@f2+2
  7070  013A64  C481  F083         	movff	_Y_V_Arr+3,___ftadd@f1
  7071  013A68  C482  F084         	movff	_Y_V_Arr+4,___ftadd@f1+1
  7072  013A6C  C483  F085         	movff	_Y_V_Arr+5,___ftadd@f1+2
  7073  013A70  ECE4  F0AF         	call	___ftadd	;wreg free
  7074  013A74  C083  F0AA         	movff	?___ftadd,_Volt_Curr_Avg$8115
  7075  013A78  C084  F0AB         	movff	?___ftadd+1,_Volt_Curr_Avg$8115+1
  7076  013A7C  C085  F0AC         	movff	?___ftadd+2,_Volt_Curr_Avg$8115+2
  7077                           
  7078                           ;Power_Meter.c: 248: Y_V_Avg_Steps = ((Y_V_Arr[0] + Y_V_Arr[1] + Y_V_Arr[2] ) / 3);
  7079  013A80  C47E  F086         	movff	_Y_V_Arr,___ftadd@f2
  7080  013A84  C47F  F087         	movff	_Y_V_Arr+1,___ftadd@f2+1
  7081  013A88  C480  F088         	movff	_Y_V_Arr+2,___ftadd@f2+2
  7082  013A8C  C0AA  F083         	movff	_Volt_Curr_Avg$8115,___ftadd@f1
  7083  013A90  C0AB  F084         	movff	_Volt_Curr_Avg$8115+1,___ftadd@f1+1
  7084  013A94  C0AC  F085         	movff	_Volt_Curr_Avg$8115+2,___ftadd@f1+2
  7085  013A98  ECE4  F0AF         	call	___ftadd	;wreg free
  7086  013A9C  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  7087  013AA0  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  7088  013AA4  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  7089  013AA8  0E00               	movlw	0
  7090  013AAA  0100               	movlb	0	; () banked
  7091  013AAC  6F9E               	movwf	___ftdiv@f2& (0+255),b
  7092  013AAE  0E40               	movlw	64
  7093  013AB0  0100               	movlb	0	; () banked
  7094  013AB2  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  7095  013AB4  0E40               	movlw	64
  7096  013AB6  0100               	movlb	0	; () banked
  7097  013AB8  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  7098  013ABA  EC89  F0BF         	call	___ftdiv	;wreg free
  7099  013ABE  C09B  F4F9         	movff	?___ftdiv,_Y_V_Avg_Steps
  7100  013AC2  C09C  F4FA         	movff	?___ftdiv+1,_Y_V_Avg_Steps+1
  7101  013AC6  C09D  F4FB         	movff	?___ftdiv+2,_Y_V_Avg_Steps+2
  7102                           
  7103                           ;Power_Meter.c: 249: Y_Volt = ((Y_V_Avg_Steps - (2034)) * (0.92557)) * 0.707106781;
  7104  013ACA  0E40               	movlw	64
  7105  013ACC  0100               	movlb	0	; () banked
  7106  013ACE  6F86               	movwf	___ftadd@f2& (0+255),b
  7107  013AD0  0EFE               	movlw	254
  7108  013AD2  0100               	movlb	0	; () banked
  7109  013AD4  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  7110  013AD6  0EC4               	movlw	196
  7111  013AD8  0100               	movlb	0	; () banked
  7112  013ADA  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  7113  013ADC  C4F9  F083         	movff	_Y_V_Avg_Steps,___ftadd@f1
  7114  013AE0  C4FA  F084         	movff	_Y_V_Avg_Steps+1,___ftadd@f1+1
  7115  013AE4  C4FB  F085         	movff	_Y_V_Avg_Steps+2,___ftadd@f1+2
  7116  013AE8  ECE4  F0AF         	call	___ftadd	;wreg free
  7117  013AEC  C083  F06A         	movff	?___ftadd,___ftmul@f1
  7118  013AF0  C084  F06B         	movff	?___ftadd+1,___ftmul@f1+1
  7119  013AF4  C085  F06C         	movff	?___ftadd+2,___ftmul@f1+2
  7120  013AF8  0E8C               	movlw	140
  7121  013AFA  0100               	movlb	0	; () banked
  7122  013AFC  6F6D               	movwf	___ftmul@f2& (0+255),b
  7123  013AFE  0E27               	movlw	39
  7124  013B00  0100               	movlb	0	; () banked
  7125  013B02  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  7126  013B04  0E3F               	movlw	63
  7127  013B06  0100               	movlb	0	; () banked
  7128  013B08  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  7129  013B0A  EC83  F0BD         	call	___ftmul	;wreg free
  7130  013B0E  C06A  F030         	movff	?___ftmul,_Y_Volt
  7131  013B12  C06B  F031         	movff	?___ftmul+1,_Y_Volt+1
  7132  013B16  C06C  F032         	movff	?___ftmul+2,_Y_Volt+2
  7133                           
  7134                           ;Power_Meter.c: 251: Y_C_Avg_Steps = ((Y_C_Arr[0] + Y_C_Arr[1] + Y_C_Arr[2] ) / 3);
  7135  013B1A  C47B  F086         	movff	_Y_C_Arr+6,___ftadd@f2
  7136  013B1E  C47C  F087         	movff	_Y_C_Arr+7,___ftadd@f2+1
  7137  013B22  C47D  F088         	movff	_Y_C_Arr+8,___ftadd@f2+2
  7138  013B26  C478  F083         	movff	_Y_C_Arr+3,___ftadd@f1
  7139  013B2A  C479  F084         	movff	_Y_C_Arr+4,___ftadd@f1+1
  7140  013B2E  C47A  F085         	movff	_Y_C_Arr+5,___ftadd@f1+2
  7141  013B32  ECE4  F0AF         	call	___ftadd	;wreg free
  7142  013B36  C083  F0AA         	movff	?___ftadd,_Volt_Curr_Avg$8115
  7143  013B3A  C084  F0AB         	movff	?___ftadd+1,_Volt_Curr_Avg$8115+1
  7144  013B3E  C085  F0AC         	movff	?___ftadd+2,_Volt_Curr_Avg$8115+2
  7145                           
  7146                           ;Power_Meter.c: 251: Y_C_Avg_Steps = ((Y_C_Arr[0] + Y_C_Arr[1] + Y_C_Arr[2] ) / 3);
  7147  013B42  C475  F086         	movff	_Y_C_Arr,___ftadd@f2
  7148  013B46  C476  F087         	movff	_Y_C_Arr+1,___ftadd@f2+1
  7149  013B4A  C477  F088         	movff	_Y_C_Arr+2,___ftadd@f2+2
  7150  013B4E  C0AA  F083         	movff	_Volt_Curr_Avg$8115,___ftadd@f1
  7151  013B52  C0AB  F084         	movff	_Volt_Curr_Avg$8115+1,___ftadd@f1+1
  7152  013B56  C0AC  F085         	movff	_Volt_Curr_Avg$8115+2,___ftadd@f1+2
  7153  013B5A  ECE4  F0AF         	call	___ftadd	;wreg free
  7154  013B5E  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  7155  013B62  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  7156  013B66  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  7157  013B6A  0E00               	movlw	0
  7158  013B6C  0100               	movlb	0	; () banked
  7159  013B6E  6F9E               	movwf	___ftdiv@f2& (0+255),b
  7160  013B70  0E40               	movlw	64
  7161  013B72  0100               	movlb	0	; () banked
  7162  013B74  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  7163  013B76  0E40               	movlw	64
  7164  013B78  0100               	movlb	0	; () banked
  7165  013B7A  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  7166  013B7C  EC89  F0BF         	call	___ftdiv	;wreg free
  7167  013B80  C09B  F4F6         	movff	?___ftdiv,_Y_C_Avg_Steps
  7168  013B84  C09C  F4F7         	movff	?___ftdiv+1,_Y_C_Avg_Steps+1
  7169  013B88  C09D  F4F8         	movff	?___ftdiv+2,_Y_C_Avg_Steps+2
  7170                           
  7171                           ;Power_Meter.c: 252: Y_Curr = ((Y_C_Avg_Steps - (2034)) * (0.03785)) * 0.707106781;
  7172  013B8C  0E40               	movlw	64
  7173  013B8E  0100               	movlb	0	; () banked
  7174  013B90  6F86               	movwf	___ftadd@f2& (0+255),b
  7175  013B92  0EFE               	movlw	254
  7176  013B94  0100               	movlb	0	; () banked
  7177  013B96  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  7178  013B98  0EC4               	movlw	196
  7179  013B9A  0100               	movlb	0	; () banked
  7180  013B9C  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  7181  013B9E  C4F6  F083         	movff	_Y_C_Avg_Steps,___ftadd@f1
  7182  013BA2  C4F7  F084         	movff	_Y_C_Avg_Steps+1,___ftadd@f1+1
  7183  013BA6  C4F8  F085         	movff	_Y_C_Avg_Steps+2,___ftadd@f1+2
  7184  013BAA  ECE4  F0AF         	call	___ftadd	;wreg free
  7185  013BAE  C083  F06A         	movff	?___ftadd,___ftmul@f1
  7186  013BB2  C084  F06B         	movff	?___ftadd+1,___ftmul@f1+1
  7187  013BB6  C085  F06C         	movff	?___ftadd+2,___ftmul@f1+2
  7188  013BBA  0E40               	movlw	64
  7189  013BBC  0100               	movlb	0	; () banked
  7190  013BBE  6F6D               	movwf	___ftmul@f2& (0+255),b
  7191  013BC0  0EDB               	movlw	219
  7192  013BC2  0100               	movlb	0	; () banked
  7193  013BC4  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  7194  013BC6  0E3C               	movlw	60
  7195  013BC8  0100               	movlb	0	; () banked
  7196  013BCA  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  7197  013BCC  EC83  F0BD         	call	___ftmul	;wreg free
  7198  013BD0  C06A  F12D         	movff	?___ftmul,_Y_Curr
  7199  013BD4  C06B  F12E         	movff	?___ftmul+1,_Y_Curr+1
  7200  013BD8  C06C  F12F         	movff	?___ftmul+2,_Y_Curr+2
  7201                           
  7202                           ;Power_Meter.c: 254: B_V_Avg_Steps = ((B_V_Arr[0] + B_V_Arr[1] + B_V_Arr[2] ) / 3);
  7203  013BDC  C469  F086         	movff	_B_V_Arr+6,___ftadd@f2
  7204  013BE0  C46A  F087         	movff	_B_V_Arr+7,___ftadd@f2+1
  7205  013BE4  C46B  F088         	movff	_B_V_Arr+8,___ftadd@f2+2
  7206  013BE8  C466  F083         	movff	_B_V_Arr+3,___ftadd@f1
  7207  013BEC  C467  F084         	movff	_B_V_Arr+4,___ftadd@f1+1
  7208  013BF0  C468  F085         	movff	_B_V_Arr+5,___ftadd@f1+2
  7209  013BF4  ECE4  F0AF         	call	___ftadd	;wreg free
  7210  013BF8  C083  F0AA         	movff	?___ftadd,_Volt_Curr_Avg$8115
  7211  013BFC  C084  F0AB         	movff	?___ftadd+1,_Volt_Curr_Avg$8115+1
  7212  013C00  C085  F0AC         	movff	?___ftadd+2,_Volt_Curr_Avg$8115+2
  7213                           
  7214                           ;Power_Meter.c: 254: B_V_Avg_Steps = ((B_V_Arr[0] + B_V_Arr[1] + B_V_Arr[2] ) / 3);
  7215  013C04  C463  F086         	movff	_B_V_Arr,___ftadd@f2
  7216  013C08  C464  F087         	movff	_B_V_Arr+1,___ftadd@f2+1
  7217  013C0C  C465  F088         	movff	_B_V_Arr+2,___ftadd@f2+2
  7218  013C10  C0AA  F083         	movff	_Volt_Curr_Avg$8115,___ftadd@f1
  7219  013C14  C0AB  F084         	movff	_Volt_Curr_Avg$8115+1,___ftadd@f1+1
  7220  013C18  C0AC  F085         	movff	_Volt_Curr_Avg$8115+2,___ftadd@f1+2
  7221  013C1C  ECE4  F0AF         	call	___ftadd	;wreg free
  7222  013C20  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  7223  013C24  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  7224  013C28  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  7225  013C2C  0E00               	movlw	0
  7226  013C2E  0100               	movlb	0	; () banked
  7227  013C30  6F9E               	movwf	___ftdiv@f2& (0+255),b
  7228  013C32  0E40               	movlw	64
  7229  013C34  0100               	movlb	0	; () banked
  7230  013C36  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  7231  013C38  0E40               	movlw	64
  7232  013C3A  0100               	movlb	0	; () banked
  7233  013C3C  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  7234  013C3E  EC89  F0BF         	call	___ftdiv	;wreg free
  7235  013C42  C09B  F4DE         	movff	?___ftdiv,_B_V_Avg_Steps
  7236  013C46  C09C  F4DF         	movff	?___ftdiv+1,_B_V_Avg_Steps+1
  7237  013C4A  C09D  F4E0         	movff	?___ftdiv+2,_B_V_Avg_Steps+2
  7238                           
  7239                           ;Power_Meter.c: 255: B_Volt = ((B_V_Avg_Steps - (2034)) * (0.92557)) * 0.707106781;
  7240  013C4E  0E40               	movlw	64
  7241  013C50  0100               	movlb	0	; () banked
  7242  013C52  6F86               	movwf	___ftadd@f2& (0+255),b
  7243  013C54  0EFE               	movlw	254
  7244  013C56  0100               	movlb	0	; () banked
  7245  013C58  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  7246  013C5A  0EC4               	movlw	196
  7247  013C5C  0100               	movlb	0	; () banked
  7248  013C5E  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  7249  013C60  C4DE  F083         	movff	_B_V_Avg_Steps,___ftadd@f1
  7250  013C64  C4DF  F084         	movff	_B_V_Avg_Steps+1,___ftadd@f1+1
  7251  013C68  C4E0  F085         	movff	_B_V_Avg_Steps+2,___ftadd@f1+2
  7252  013C6C  ECE4  F0AF         	call	___ftadd	;wreg free
  7253  013C70  C083  F06A         	movff	?___ftadd,___ftmul@f1
  7254  013C74  C084  F06B         	movff	?___ftadd+1,___ftmul@f1+1
  7255  013C78  C085  F06C         	movff	?___ftadd+2,___ftmul@f1+2
  7256  013C7C  0E8C               	movlw	140
  7257  013C7E  0100               	movlb	0	; () banked
  7258  013C80  6F6D               	movwf	___ftmul@f2& (0+255),b
  7259  013C82  0E27               	movlw	39
  7260  013C84  0100               	movlb	0	; () banked
  7261  013C86  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  7262  013C88  0E3F               	movlw	63
  7263  013C8A  0100               	movlb	0	; () banked
  7264  013C8C  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  7265  013C8E  EC83  F0BD         	call	___ftmul	;wreg free
  7266  013C92  C06A  F027         	movff	?___ftmul,_B_Volt
  7267  013C96  C06B  F028         	movff	?___ftmul+1,_B_Volt+1
  7268  013C9A  C06C  F029         	movff	?___ftmul+2,_B_Volt+2
  7269                           
  7270                           ;Power_Meter.c: 257: B_C_Avg_Steps = ((B_C_Arr[0] + B_C_Arr[1] + B_C_Arr[2] ) / 3);
  7271  013C9E  C460  F086         	movff	_B_C_Arr+6,___ftadd@f2
  7272  013CA2  C461  F087         	movff	_B_C_Arr+7,___ftadd@f2+1
  7273  013CA6  C462  F088         	movff	_B_C_Arr+8,___ftadd@f2+2
  7274  013CAA  C45D  F083         	movff	_B_C_Arr+3,___ftadd@f1
  7275  013CAE  C45E  F084         	movff	_B_C_Arr+4,___ftadd@f1+1
  7276  013CB2  C45F  F085         	movff	_B_C_Arr+5,___ftadd@f1+2
  7277  013CB6  ECE4  F0AF         	call	___ftadd	;wreg free
  7278  013CBA  C083  F0AA         	movff	?___ftadd,_Volt_Curr_Avg$8115
  7279  013CBE  C084  F0AB         	movff	?___ftadd+1,_Volt_Curr_Avg$8115+1
  7280  013CC2  C085  F0AC         	movff	?___ftadd+2,_Volt_Curr_Avg$8115+2
  7281                           
  7282                           ;Power_Meter.c: 257: B_C_Avg_Steps = ((B_C_Arr[0] + B_C_Arr[1] + B_C_Arr[2] ) / 3);
  7283  013CC6  C45A  F086         	movff	_B_C_Arr,___ftadd@f2
  7284  013CCA  C45B  F087         	movff	_B_C_Arr+1,___ftadd@f2+1
  7285  013CCE  C45C  F088         	movff	_B_C_Arr+2,___ftadd@f2+2
  7286  013CD2  C0AA  F083         	movff	_Volt_Curr_Avg$8115,___ftadd@f1
  7287  013CD6  C0AB  F084         	movff	_Volt_Curr_Avg$8115+1,___ftadd@f1+1
  7288  013CDA  C0AC  F085         	movff	_Volt_Curr_Avg$8115+2,___ftadd@f1+2
  7289  013CDE  ECE4  F0AF         	call	___ftadd	;wreg free
  7290  013CE2  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  7291  013CE6  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  7292  013CEA  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  7293  013CEE  0E00               	movlw	0
  7294  013CF0  0100               	movlb	0	; () banked
  7295  013CF2  6F9E               	movwf	___ftdiv@f2& (0+255),b
  7296  013CF4  0E40               	movlw	64
  7297  013CF6  0100               	movlb	0	; () banked
  7298  013CF8  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  7299  013CFA  0E40               	movlw	64
  7300  013CFC  0100               	movlb	0	; () banked
  7301  013CFE  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  7302  013D00  EC89  F0BF         	call	___ftdiv	;wreg free
  7303  013D04  C09B  F4DB         	movff	?___ftdiv,_B_C_Avg_Steps
  7304  013D08  C09C  F4DC         	movff	?___ftdiv+1,_B_C_Avg_Steps+1
  7305  013D0C  C09D  F4DD         	movff	?___ftdiv+2,_B_C_Avg_Steps+2
  7306                           
  7307                           ;Power_Meter.c: 258: B_Curr = ((B_C_Avg_Steps - (2034)) * (0.03785)) * 0.707106781;
  7308  013D10  0E40               	movlw	64
  7309  013D12  0100               	movlb	0	; () banked
  7310  013D14  6F86               	movwf	___ftadd@f2& (0+255),b
  7311  013D16  0EFE               	movlw	254
  7312  013D18  0100               	movlb	0	; () banked
  7313  013D1A  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  7314  013D1C  0EC4               	movlw	196
  7315  013D1E  0100               	movlb	0	; () banked
  7316  013D20  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  7317  013D22  C4DB  F083         	movff	_B_C_Avg_Steps,___ftadd@f1
  7318  013D26  C4DC  F084         	movff	_B_C_Avg_Steps+1,___ftadd@f1+1
  7319  013D2A  C4DD  F085         	movff	_B_C_Avg_Steps+2,___ftadd@f1+2
  7320  013D2E  ECE4  F0AF         	call	___ftadd	;wreg free
  7321  013D32  C083  F06A         	movff	?___ftadd,___ftmul@f1
  7322  013D36  C084  F06B         	movff	?___ftadd+1,___ftmul@f1+1
  7323  013D3A  C085  F06C         	movff	?___ftadd+2,___ftmul@f1+2
  7324  013D3E  0E40               	movlw	64
  7325  013D40  0100               	movlb	0	; () banked
  7326  013D42  6F6D               	movwf	___ftmul@f2& (0+255),b
  7327  013D44  0EDB               	movlw	219
  7328  013D46  0100               	movlb	0	; () banked
  7329  013D48  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  7330  013D4A  0E3C               	movlw	60
  7331  013D4C  0100               	movlb	0	; () banked
  7332  013D4E  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  7333  013D50  EC83  F0BD         	call	___ftmul	;wreg free
  7334  013D54  C06A  F103         	movff	?___ftmul,_B_Curr
  7335  013D58  C06B  F104         	movff	?___ftmul+1,_B_Curr+1
  7336  013D5C  C06C  F105         	movff	?___ftmul+2,_B_Curr+2
  7337                           
  7338                           ;Power_Meter.c: 260: Avg_RYB_Voltage = ((R_Volt + Y_Volt + B_Volt) / 3);
  7339  013D60  C030  F086         	movff	_Y_Volt,___ftadd@f2
  7340  013D64  C031  F087         	movff	_Y_Volt+1,___ftadd@f2+1
  7341  013D68  C032  F088         	movff	_Y_Volt+2,___ftadd@f2+2
  7342  013D6C  C02A  F083         	movff	_R_Volt,___ftadd@f1
  7343  013D70  C02B  F084         	movff	_R_Volt+1,___ftadd@f1+1
  7344  013D74  C02C  F085         	movff	_R_Volt+2,___ftadd@f1+2
  7345  013D78  ECE4  F0AF         	call	___ftadd	;wreg free
  7346  013D7C  C083  F0AA         	movff	?___ftadd,_Volt_Curr_Avg$8115
  7347  013D80  C084  F0AB         	movff	?___ftadd+1,_Volt_Curr_Avg$8115+1
  7348  013D84  C085  F0AC         	movff	?___ftadd+2,_Volt_Curr_Avg$8115+2
  7349                           
  7350                           ;Power_Meter.c: 260: Avg_RYB_Voltage = ((R_Volt + Y_Volt + B_Volt) / 3);
  7351  013D88  C027  F086         	movff	_B_Volt,___ftadd@f2
  7352  013D8C  C028  F087         	movff	_B_Volt+1,___ftadd@f2+1
  7353  013D90  C029  F088         	movff	_B_Volt+2,___ftadd@f2+2
  7354  013D94  C0AA  F083         	movff	_Volt_Curr_Avg$8115,___ftadd@f1
  7355  013D98  C0AB  F084         	movff	_Volt_Curr_Avg$8115+1,___ftadd@f1+1
  7356  013D9C  C0AC  F085         	movff	_Volt_Curr_Avg$8115+2,___ftadd@f1+2
  7357  013DA0  ECE4  F0AF         	call	___ftadd	;wreg free
  7358  013DA4  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  7359  013DA8  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  7360  013DAC  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  7361  013DB0  0E00               	movlw	0
  7362  013DB2  0100               	movlb	0	; () banked
  7363  013DB4  6F9E               	movwf	___ftdiv@f2& (0+255),b
  7364  013DB6  0E40               	movlw	64
  7365  013DB8  0100               	movlb	0	; () banked
  7366  013DBA  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  7367  013DBC  0E40               	movlw	64
  7368  013DBE  0100               	movlb	0	; () banked
  7369  013DC0  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  7370  013DC2  EC89  F0BF         	call	___ftdiv	;wreg free
  7371  013DC6  C09B  F200         	movff	?___ftdiv,_Avg_RYB_Voltage
  7372  013DCA  C09C  F201         	movff	?___ftdiv+1,_Avg_RYB_Voltage+1
  7373  013DCE  C09D  F202         	movff	?___ftdiv+2,_Avg_RYB_Voltage+2
  7374                           
  7375                           ;Power_Meter.c: 261: Avg_RYB_Current = ((R_Curr + Y_Curr + B_Curr) / 3);
  7376  013DD2  C12D  F086         	movff	_Y_Curr,___ftadd@f2
  7377  013DD6  C12E  F087         	movff	_Y_Curr+1,___ftadd@f2+1
  7378  013DDA  C12F  F088         	movff	_Y_Curr+2,___ftadd@f2+2
  7379  013DDE  C118  F083         	movff	_R_Curr,___ftadd@f1
  7380  013DE2  C119  F084         	movff	_R_Curr+1,___ftadd@f1+1
  7381  013DE6  C11A  F085         	movff	_R_Curr+2,___ftadd@f1+2
  7382  013DEA  ECE4  F0AF         	call	___ftadd	;wreg free
  7383  013DEE  C083  F0AA         	movff	?___ftadd,_Volt_Curr_Avg$8115
  7384  013DF2  C084  F0AB         	movff	?___ftadd+1,_Volt_Curr_Avg$8115+1
  7385  013DF6  C085  F0AC         	movff	?___ftadd+2,_Volt_Curr_Avg$8115+2
  7386                           
  7387                           ;Power_Meter.c: 261: Avg_RYB_Current = ((R_Curr + Y_Curr + B_Curr) / 3);
  7388  013DFA  C103  F086         	movff	_B_Curr,___ftadd@f2
  7389  013DFE  C104  F087         	movff	_B_Curr+1,___ftadd@f2+1
  7390  013E02  C105  F088         	movff	_B_Curr+2,___ftadd@f2+2
  7391  013E06  C0AA  F083         	movff	_Volt_Curr_Avg$8115,___ftadd@f1
  7392  013E0A  C0AB  F084         	movff	_Volt_Curr_Avg$8115+1,___ftadd@f1+1
  7393  013E0E  C0AC  F085         	movff	_Volt_Curr_Avg$8115+2,___ftadd@f1+2
  7394  013E12  ECE4  F0AF         	call	___ftadd	;wreg free
  7395  013E16  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  7396  013E1A  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  7397  013E1E  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  7398  013E22  0E00               	movlw	0
  7399  013E24  0100               	movlb	0	; () banked
  7400  013E26  6F9E               	movwf	___ftdiv@f2& (0+255),b
  7401  013E28  0E40               	movlw	64
  7402  013E2A  0100               	movlb	0	; () banked
  7403  013E2C  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  7404  013E2E  0E40               	movlw	64
  7405  013E30  0100               	movlb	0	; () banked
  7406  013E32  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  7407  013E34  EC89  F0BF         	call	___ftdiv	;wreg free
  7408  013E38  C09B  F100         	movff	?___ftdiv,_Avg_RYB_Current
  7409  013E3C  C09C  F101         	movff	?___ftdiv+1,_Avg_RYB_Current+1
  7410  013E40  C09D  F102         	movff	?___ftdiv+2,_Avg_RYB_Current+2
  7411  013E44  0012               	return		;funcret
  7412  013E46                     __end_of_Volt_Curr_Avg:
  7413                           	opt stack 0
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           intcon	equ	0xFF2
  7419                           postinc0	equ	0xFEE
  7420                           wreg	equ	0xFE8
  7421                           postdec1	equ	0xFE5
  7422                           fsr1h	equ	0xFE2
  7423                           fsr1l	equ	0xFE1
  7424                           status	equ	0xFD8
  7425                           
  7426 ;; *************** function _Turbine_RPM_Initiate *****************
  7427 ;; Defined at:
  7428 ;;		line 34 in file "Initialization.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;		None
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;		None
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  1    wreg      void 
  7435 ;; Registers used:
  7436 ;;		wreg, status,2
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;Total ram usage:        0 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; Hardware stack levels required when called:    3
  7449 ;; This function calls:
  7450 ;;		Nothing
  7451 ;; This function is called by:
  7452 ;;		_main
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text9
  7457  01AA48                     __ptext9:
  7458                           	opt stack 0
  7459  01AA48                     _Turbine_RPM_Initiate:
  7460                           	opt stack 27
  7461                           
  7462                           ;Initialization.c: 36: TRISEbits.TRISE5=1;
  7463                           
  7464                           ;incstack = 0
  7465  01AA48  8A96               	bsf	3990,5,c	;volatile
  7466                           
  7467                           ;Initialization.c: 37: CCP7CON = 0x04;
  7468  01AA4A  0E04               	movlw	4
  7469  01AA4C  6E6E               	movwf	3950,c	;volatile
  7470                           
  7471                           ;Initialization.c: 38: CCP7IE = 1;
  7472  01AA4E  88B6               	bsf	4022,4,c	;volatile
  7473                           
  7474                           ;Initialization.c: 39: CCP7IF = 0;
  7475  01AA50  98B7               	bcf	4023,4,c	;volatile
  7476  01AA52  0012               	return		;funcret
  7477  01AA54                     __end_of_Turbine_RPM_Initiate:
  7478                           	opt stack 0
  7479                           tblptru	equ	0xFF8
  7480                           tblptrh	equ	0xFF7
  7481                           tblptrl	equ	0xFF6
  7482                           tablat	equ	0xFF5
  7483                           intcon	equ	0xFF2
  7484                           postinc0	equ	0xFEE
  7485                           wreg	equ	0xFE8
  7486                           postdec1	equ	0xFE5
  7487                           fsr1h	equ	0xFE2
  7488                           fsr1l	equ	0xFE1
  7489                           status	equ	0xFD8
  7490                           
  7491 ;; *************** function _Turbine_RPM_Cal *****************
  7492 ;; Defined at:
  7493 ;;		line 16 in file "RPM_Measurement.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0, cstack
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;Total ram usage:        2 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    5
  7514 ;; This function calls:
  7515 ;;		___ftadd
  7516 ;;		___ftdiv
  7517 ;;		___ftge
  7518 ;;		___ftmul
  7519 ;;		___lwtoft
  7520 ;; This function is called by:
  7521 ;;		_main
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           	psect	text10
  7526  01472A                     __ptext10:
  7527                           	opt stack 0
  7528  01472A                     _Turbine_RPM_Cal:
  7529                           	opt stack 25
  7530                           
  7531                           ;RPM_Measurement.c: 18: if(TRPM_Cal)
  7532                           
  7533                           ;incstack = 0
  7534  01472A  0101               	movlb	1	; () banked
  7535  01472C  51BB               	movf	_TRPM_Cal& (0+255),w,b
  7536  01472E  B4D8               	btfsc	status,2,c
  7537  014730  0012               	return	
  7538                           
  7539                           ; BSR set to: 1
  7540                           ;RPM_Measurement.c: 19: {
  7541                           ;RPM_Measurement.c: 20: TRPM_Cal = 0;
  7542  014732  0E00               	movlw	0
  7543  014734  0101               	movlb	1	; () banked
  7544  014736  6FBB               	movwf	_TRPM_Cal& (0+255),b
  7545                           
  7546                           ; BSR set to: 1
  7547                           ;RPM_Measurement.c: 21: CCP7IE = 0;
  7548  014738  98B6               	bcf	4022,4,c	;volatile
  7549                           
  7550                           ; BSR set to: 1
  7551                           ;RPM_Measurement.c: 22: if(TRPM_Cap_New > TRPM_Cap_Old)
  7552  01473A  0101               	movlb	1	; () banked
  7553  01473C  514D               	movf	_TRPM_Cap_New& (0+255),w,b
  7554  01473E  0101               	movlb	1	; () banked
  7555  014740  5D4F               	subwf	_TRPM_Cap_Old& (0+255),w,b
  7556  014742  0101               	movlb	1	; () banked
  7557  014744  514E               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  7558  014746  0101               	movlb	1	; () banked
  7559  014748  5950               	subwfb	(_TRPM_Cap_Old+1)& (0+255),w,b
  7560  01474A  B0D8               	btfsc	status,0,c
  7561  01474C  D035               	goto	l21941
  7562                           
  7563                           ; BSR set to: 1
  7564                           ;RPM_Measurement.c: 23: {
  7565                           ;RPM_Measurement.c: 24: RPM_PWM = (TRPM_Cap_New - TRPM_Cap_Old + 1) ;
  7566  01474E  C14F  F0AA         	movff	_TRPM_Cap_Old,??_Turbine_RPM_Cal
  7567  014752  C150  F0AB         	movff	_TRPM_Cap_Old+1,??_Turbine_RPM_Cal+1
  7568  014756  0100               	movlb	0	; () banked
  7569  014758  1FAA               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  7570  01475A  1FAB               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7571  01475C  4BAA               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  7572  01475E  2BAB               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7573  014760  0101               	movlb	1	; () banked
  7574  014762  514D               	movf	_TRPM_Cap_New& (0+255),w,b
  7575  014764  0100               	movlb	0	; () banked
  7576  014766  27AA               	addwf	??_Turbine_RPM_Cal& (0+255),f,b
  7577  014768  0101               	movlb	1	; () banked
  7578  01476A  514E               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  7579  01476C  0100               	movlb	0	; () banked
  7580  01476E  23AB               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7581  014770  0E01               	movlw	1
  7582  014772  0100               	movlb	0	; () banked
  7583  014774  25AA               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  7584  014776  0102               	movlb	2	; () banked
  7585  014778  6FFA               	movwf	_RPM_PWM& (0+255),b
  7586  01477A  0E00               	movlw	0
  7587  01477C  0100               	movlb	0	; () banked
  7588  01477E  21AB               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  7589  014780  0102               	movlb	2	; () banked
  7590  014782  6FFB               	movwf	(_RPM_PWM+1)& (0+255),b
  7591                           
  7592                           ;RPM_Measurement.c: 25: RPM_Time = (Timer1_OF_counter_New - Timer1_OF_counter_Old);
  7593  014784  C2B4  F0AA         	movff	_Timer1_OF_counter_Old,??_Turbine_RPM_Cal
  7594  014788  C2B5  F0AB         	movff	_Timer1_OF_counter_Old+1,??_Turbine_RPM_Cal+1
  7595  01478C  0100               	movlb	0	; () banked
  7596  01478E  1FAA               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  7597  014790  1FAB               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7598  014792  4BAA               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  7599  014794  2BAB               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7600  014796  0101               	movlb	1	; () banked
  7601  014798  5153               	movf	_Timer1_OF_counter_New& (0+255),w,b
  7602  01479A  0100               	movlb	0	; () banked
  7603  01479C  25AA               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  7604  01479E  0101               	movlb	1	; () banked
  7605  0147A0  6F47               	movwf	_RPM_Time& (0+255),b
  7606  0147A2  0101               	movlb	1	; () banked
  7607  0147A4  5154               	movf	(_Timer1_OF_counter_New+1)& (0+255),w,b
  7608  0147A6  0100               	movlb	0	; () banked
  7609  0147A8  21AB               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  7610  0147AA  0101               	movlb	1	; () banked
  7611  0147AC  6F48               	movwf	(_RPM_Time+1)& (0+255),b
  7612                           
  7613                           ; BSR set to: 1
  7614                           ;RPM_Measurement.c: 26: Flag_temp = 0;
  7615  0147AE  0E00               	movlw	0
  7616  0147B0  0105               	movlb	5	; () banked
  7617  0147B2  6FC4               	movwf	(_Flag_temp+1)& (0+255),b
  7618  0147B4  0E00               	movlw	0
  7619  0147B6  D03E               	goto	L3
  7620  0147B8                     l21941:
  7621                           
  7622                           ;RPM_Measurement.c: 28: else
  7623                           ;RPM_Measurement.c: 29: {
  7624                           ;RPM_Measurement.c: 30: RPM_PWM = (TRPM_Cap_New - TRPM_Cap_Old + 1) + 65536;
  7625  0147B8  C14F  F0AA         	movff	_TRPM_Cap_Old,??_Turbine_RPM_Cal
  7626  0147BC  C150  F0AB         	movff	_TRPM_Cap_Old+1,??_Turbine_RPM_Cal+1
  7627  0147C0  0100               	movlb	0	; () banked
  7628  0147C2  1FAA               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  7629  0147C4  1FAB               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7630  0147C6  4BAA               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  7631  0147C8  2BAB               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7632  0147CA  0101               	movlb	1	; () banked
  7633  0147CC  514D               	movf	_TRPM_Cap_New& (0+255),w,b
  7634  0147CE  0100               	movlb	0	; () banked
  7635  0147D0  27AA               	addwf	??_Turbine_RPM_Cal& (0+255),f,b
  7636  0147D2  0101               	movlb	1	; () banked
  7637  0147D4  514E               	movf	(_TRPM_Cap_New+1)& (0+255),w,b
  7638  0147D6  0100               	movlb	0	; () banked
  7639  0147D8  23AB               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7640  0147DA  0E01               	movlw	1
  7641  0147DC  0100               	movlb	0	; () banked
  7642  0147DE  25AA               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  7643  0147E0  0102               	movlb	2	; () banked
  7644  0147E2  6FFA               	movwf	_RPM_PWM& (0+255),b
  7645  0147E4  0E00               	movlw	0
  7646  0147E6  0100               	movlb	0	; () banked
  7647  0147E8  21AB               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  7648  0147EA  0102               	movlb	2	; () banked
  7649  0147EC  6FFB               	movwf	(_RPM_PWM+1)& (0+255),b
  7650                           
  7651                           ;RPM_Measurement.c: 31: RPM_Time = (Timer1_OF_counter_New - Timer1_OF_counter_Old);
  7652  0147EE  C2B4  F0AA         	movff	_Timer1_OF_counter_Old,??_Turbine_RPM_Cal
  7653  0147F2  C2B5  F0AB         	movff	_Timer1_OF_counter_Old+1,??_Turbine_RPM_Cal+1
  7654  0147F6  0100               	movlb	0	; () banked
  7655  0147F8  1FAA               	comf	??_Turbine_RPM_Cal& (0+255),f,b
  7656  0147FA  1FAB               	comf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7657  0147FC  4BAA               	infsnz	??_Turbine_RPM_Cal& (0+255),f,b
  7658  0147FE  2BAB               	incf	(??_Turbine_RPM_Cal+1)& (0+255),f,b
  7659  014800  0101               	movlb	1	; () banked
  7660  014802  5153               	movf	_Timer1_OF_counter_New& (0+255),w,b
  7661  014804  0100               	movlb	0	; () banked
  7662  014806  25AA               	addwf	??_Turbine_RPM_Cal& (0+255),w,b
  7663  014808  0101               	movlb	1	; () banked
  7664  01480A  6F47               	movwf	_RPM_Time& (0+255),b
  7665  01480C  0101               	movlb	1	; () banked
  7666  01480E  5154               	movf	(_Timer1_OF_counter_New+1)& (0+255),w,b
  7667  014810  0100               	movlb	0	; () banked
  7668  014812  21AB               	addwfc	(??_Turbine_RPM_Cal+1)& (0+255),w,b
  7669  014814  0101               	movlb	1	; () banked
  7670  014816  6F48               	movwf	(_RPM_Time+1)& (0+255),b
  7671                           
  7672                           ;RPM_Measurement.c: 32: RPM_Time = RPM_Time -1;
  7673  014818  0EFF               	movlw	255
  7674  01481A  0101               	movlb	1	; () banked
  7675  01481C  2547               	addwf	_RPM_Time& (0+255),w,b
  7676  01481E  0101               	movlb	1	; () banked
  7677  014820  6F47               	movwf	_RPM_Time& (0+255),b
  7678  014822  0EFF               	movlw	255
  7679  014824  0101               	movlb	1	; () banked
  7680  014826  2148               	addwfc	(_RPM_Time+1)& (0+255),w,b
  7681  014828  0101               	movlb	1	; () banked
  7682  01482A  6F48               	movwf	(_RPM_Time+1)& (0+255),b
  7683                           
  7684                           ; BSR set to: 1
  7685                           ;RPM_Measurement.c: 33: Flag_temp = 1;
  7686  01482C  0E00               	movlw	0
  7687  01482E  0105               	movlb	5	; () banked
  7688  014830  6FC4               	movwf	(_Flag_temp+1)& (0+255),b
  7689  014832  0E01               	movlw	1
  7690  014834                     L3:
  7691  014834  6FC3               	movwf	_Flag_temp& (0+255),b
  7692                           
  7693                           ; BSR set to: 5
  7694                           ;RPM_Measurement.c: 34: }
  7695                           ;RPM_Measurement.c: 35: PWM_Temp = (0.000004 * RPM_PWM);
  7696                           
  7697                           ; BSR set to: 5
  7698  014836  C2FA  F060         	movff	_RPM_PWM,___lwtoft@c
  7699  01483A  C2FB  F061         	movff	_RPM_PWM+1,___lwtoft@c+1
  7700  01483E  EC84  F0D4         	call	___lwtoft	;wreg free
  7701  014842  C060  F06A         	movff	?___lwtoft,___ftmul@f1
  7702  014846  C061  F06B         	movff	?___lwtoft+1,___ftmul@f1+1
  7703  01484A  C062  F06C         	movff	?___lwtoft+2,___ftmul@f1+2
  7704  01484E  0E38               	movlw	56
  7705  014850  0100               	movlb	0	; () banked
  7706  014852  6F6D               	movwf	___ftmul@f2& (0+255),b
  7707  014854  0E86               	movlw	134
  7708  014856  0100               	movlb	0	; () banked
  7709  014858  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  7710  01485A  0E36               	movlw	54
  7711  01485C  0100               	movlb	0	; () banked
  7712  01485E  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  7713  014860  EC83  F0BD         	call	___ftmul	;wreg free
  7714  014864  C06A  F493         	movff	?___ftmul,_PWM_Temp
  7715  014868  C06B  F494         	movff	?___ftmul+1,_PWM_Temp+1
  7716  01486C  C06C  F495         	movff	?___ftmul+2,_PWM_Temp+2
  7717                           
  7718                           ;RPM_Measurement.c: 37: TRPM_Time = PWM_Temp + (0.262 * RPM_Time);
  7719  014870  0E25               	movlw	37
  7720  014872  0100               	movlb	0	; () banked
  7721  014874  6F6D               	movwf	___ftmul@f2& (0+255),b
  7722  014876  0E86               	movlw	134
  7723  014878  0100               	movlb	0	; () banked
  7724  01487A  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  7725  01487C  0E3E               	movlw	62
  7726  01487E  0100               	movlb	0	; () banked
  7727  014880  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  7728  014882  C147  F060         	movff	_RPM_Time,___lwtoft@c
  7729  014886  C148  F061         	movff	_RPM_Time+1,___lwtoft@c+1
  7730  01488A  EC84  F0D4         	call	___lwtoft	;wreg free
  7731  01488E  C060  F06A         	movff	?___lwtoft,___ftmul@f1
  7732  014892  C061  F06B         	movff	?___lwtoft+1,___ftmul@f1+1
  7733  014896  C062  F06C         	movff	?___lwtoft+2,___ftmul@f1+2
  7734  01489A  EC83  F0BD         	call	___ftmul	;wreg free
  7735  01489E  C06A  F083         	movff	?___ftmul,___ftadd@f1
  7736  0148A2  C06B  F084         	movff	?___ftmul+1,___ftadd@f1+1
  7737  0148A6  C06C  F085         	movff	?___ftmul+2,___ftadd@f1+2
  7738  0148AA  C493  F086         	movff	_PWM_Temp,___ftadd@f2
  7739  0148AE  C494  F087         	movff	_PWM_Temp+1,___ftadd@f2+1
  7740  0148B2  C495  F088         	movff	_PWM_Temp+2,___ftadd@f2+2
  7741  0148B6  ECE4  F0AF         	call	___ftadd	;wreg free
  7742  0148BA  C083  F4ED         	movff	?___ftadd,_TRPM_Time
  7743  0148BE  C084  F4EE         	movff	?___ftadd+1,_TRPM_Time+1
  7744  0148C2  C085  F4EF         	movff	?___ftadd+2,_TRPM_Time+2
  7745                           
  7746                           ;RPM_Measurement.c: 39: TRPM_Frequency = 1/TRPM_Time;
  7747  0148C6  0E00               	movlw	0
  7748  0148C8  0100               	movlb	0	; () banked
  7749  0148CA  6F9B               	movwf	___ftdiv@f1& (0+255),b
  7750  0148CC  0E80               	movlw	128
  7751  0148CE  0100               	movlb	0	; () banked
  7752  0148D0  6F9C               	movwf	(___ftdiv@f1+1)& (0+255),b
  7753  0148D2  0E3F               	movlw	63
  7754  0148D4  0100               	movlb	0	; () banked
  7755  0148D6  6F9D               	movwf	(___ftdiv@f1+2)& (0+255),b
  7756  0148D8  C4ED  F09E         	movff	_TRPM_Time,___ftdiv@f2
  7757  0148DC  C4EE  F09F         	movff	_TRPM_Time+1,___ftdiv@f2+1
  7758  0148E0  C4EF  F0A0         	movff	_TRPM_Time+2,___ftdiv@f2+2
  7759  0148E4  EC89  F0BF         	call	___ftdiv	;wreg free
  7760  0148E8  C09B  F4EA         	movff	?___ftdiv,_TRPM_Frequency
  7761  0148EC  C09C  F4EB         	movff	?___ftdiv+1,_TRPM_Frequency+1
  7762  0148F0  C09D  F4EC         	movff	?___ftdiv+2,_TRPM_Frequency+2
  7763                           
  7764                           ;RPM_Measurement.c: 41: if(RPM_counter < 2)
  7765  0148F4  0E02               	movlw	2
  7766  0148F6  0101               	movlb	1	; () banked
  7767  0148F8  61B2               	cpfslt	_RPM_counter& (0+255),b
  7768  0148FA  D002               	goto	l21955
  7769                           
  7770                           ; BSR set to: 1
  7771                           ;RPM_Measurement.c: 42: {
  7772                           ;RPM_Measurement.c: 43: RPM_counter++;
  7773  0148FC  0101               	movlb	1	; () banked
  7774  0148FE  2BB2               	incf	_RPM_counter& (0+255),f,b
  7775  014900                     l21955:
  7776                           
  7777                           ; BSR set to: 1
  7778                           ;RPM_Measurement.c: 44: }
  7779                           ;RPM_Measurement.c: 46: if(RPM_counter == 2)
  7780  014900  0E02               	movlw	2
  7781  014902  0101               	movlb	1	; () banked
  7782  014904  19B2               	xorwf	_RPM_counter& (0+255),w,b
  7783  014906  A4D8               	btfss	status,2,c
  7784  014908  D09D               	goto	l21975
  7785                           
  7786                           ; BSR set to: 1
  7787                           ;RPM_Measurement.c: 47: {
  7788                           ;RPM_Measurement.c: 48: Turb_RPM = (60 * TRPM_Frequency) / 1;
  7789  01490A  0E00               	movlw	0
  7790  01490C  0100               	movlb	0	; () banked
  7791  01490E  6F6D               	movwf	___ftmul@f2& (0+255),b
  7792  014910  0E70               	movlw	112
  7793  014912  0100               	movlb	0	; () banked
  7794  014914  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
  7795  014916  0E42               	movlw	66
  7796  014918  0100               	movlb	0	; () banked
  7797  01491A  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
  7798  01491C  C4EA  F06A         	movff	_TRPM_Frequency,___ftmul@f1
  7799  014920  C4EB  F06B         	movff	_TRPM_Frequency+1,___ftmul@f1+1
  7800  014924  C4EC  F06C         	movff	_TRPM_Frequency+2,___ftmul@f1+2
  7801  014928  EC83  F0BD         	call	___ftmul	;wreg free
  7802  01492C  C06A  F09B         	movff	?___ftmul,___ftdiv@f1
  7803  014930  C06B  F09C         	movff	?___ftmul+1,___ftdiv@f1+1
  7804  014934  C06C  F09D         	movff	?___ftmul+2,___ftdiv@f1+2
  7805  014938  0E00               	movlw	0
  7806  01493A  0100               	movlb	0	; () banked
  7807  01493C  6F9E               	movwf	___ftdiv@f2& (0+255),b
  7808  01493E  0E80               	movlw	128
  7809  014940  0100               	movlb	0	; () banked
  7810  014942  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  7811  014944  0E3F               	movlw	63
  7812  014946  0100               	movlb	0	; () banked
  7813  014948  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  7814  01494A  EC89  F0BF         	call	___ftdiv	;wreg free
  7815  01494E  C09B  F4AB         	movff	?___ftdiv,_Turb_RPM
  7816  014952  C09C  F4AC         	movff	?___ftdiv+1,_Turb_RPM+1
  7817  014956  C09D  F4AD         	movff	?___ftdiv+2,_Turb_RPM+2
  7818                           
  7819                           ;RPM_Measurement.c: 49: Turbine_RPM_Old = Turbine_RPM_New;
  7820  01495A  C127  F12A         	movff	_Turbine_RPM_New,_Turbine_RPM_Old
  7821  01495E  C128  F12B         	movff	_Turbine_RPM_New+1,_Turbine_RPM_Old+1
  7822  014962  C129  F12C         	movff	_Turbine_RPM_New+2,_Turbine_RPM_Old+2
  7823                           
  7824                           ;RPM_Measurement.c: 50: Turbine_RPM_New = Turb_RPM;
  7825  014966  C4AB  F127         	movff	_Turb_RPM,_Turbine_RPM_New
  7826  01496A  C4AC  F128         	movff	_Turb_RPM+1,_Turbine_RPM_New+1
  7827  01496E  C4AD  F129         	movff	_Turb_RPM+2,_Turbine_RPM_New+2
  7828                           
  7829                           ;RPM_Measurement.c: 52: if(Turbine_state == RAMPUP_STATE || Turbine_state == RUNNING_STA
      +                          TE)
  7830  014972  0100               	movlb	0	; () banked
  7831  014974  05D8               	decf	_Turbine_state& (0+255),w,b
  7832  014976  B4D8               	btfsc	status,2,c
  7833  014978  D005               	goto	l21967
  7834                           
  7835                           ; BSR set to: 0
  7836  01497A  0E02               	movlw	2
  7837  01497C  0100               	movlb	0	; () banked
  7838  01497E  19D8               	xorwf	_Turbine_state& (0+255),w,b
  7839  014980  A4D8               	btfss	status,2,c
  7840  014982  D051               	goto	l21971
  7841  014984                     l21967:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;RPM_Measurement.c: 53: {
  7845                           ;RPM_Measurement.c: 54: if( Turbine_RPM_New > (Turbine_RPM_Old + 10) || (Turbine_RPM_New
      +                           < (Turbine_RPM_Old - 10) ) )
  7846  014984  0E00               	movlw	0
  7847  014986  0100               	movlb	0	; () banked
  7848  014988  6F86               	movwf	___ftadd@f2& (0+255),b
  7849  01498A  0E20               	movlw	32
  7850  01498C  0100               	movlb	0	; () banked
  7851  01498E  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  7852  014990  0E41               	movlw	65
  7853  014992  0100               	movlb	0	; () banked
  7854  014994  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  7855  014996  C12A  F083         	movff	_Turbine_RPM_Old,___ftadd@f1
  7856  01499A  C12B  F084         	movff	_Turbine_RPM_Old+1,___ftadd@f1+1
  7857  01499E  C12C  F085         	movff	_Turbine_RPM_Old+2,___ftadd@f1+2
  7858  0149A2  ECE4  F0AF         	call	___ftadd	;wreg free
  7859  0149A6  C083  F08F         	movff	?___ftadd,___ftge@ff1
  7860  0149AA  C084  F090         	movff	?___ftadd+1,___ftge@ff1+1
  7861  0149AE  C085  F091         	movff	?___ftadd+2,___ftge@ff1+2
  7862  0149B2  C127  F092         	movff	_Turbine_RPM_New,___ftge@ff2
  7863  0149B6  C128  F093         	movff	_Turbine_RPM_New+1,___ftge@ff2+1
  7864  0149BA  C129  F094         	movff	_Turbine_RPM_New+2,___ftge@ff2+2
  7865  0149BE  EC09  F0C8         	call	___ftge	;wreg free
  7866  0149C2  0100               	movlb	0	; () banked
  7867  0149C4  A0D8               	btfss	status,0,c
  7868  0149C6  D022               	goto	l3776
  7869                           
  7870                           ; BSR set to: 0
  7871  0149C8  C127  F08F         	movff	_Turbine_RPM_New,___ftge@ff1
  7872  0149CC  C128  F090         	movff	_Turbine_RPM_New+1,___ftge@ff1+1
  7873  0149D0  C129  F091         	movff	_Turbine_RPM_New+2,___ftge@ff1+2
  7874  0149D4  0E00               	movlw	0
  7875  0149D6  0100               	movlb	0	; () banked
  7876  0149D8  6F86               	movwf	___ftadd@f2& (0+255),b
  7877  0149DA  0E20               	movlw	32
  7878  0149DC  0100               	movlb	0	; () banked
  7879  0149DE  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
  7880  0149E0  0EC1               	movlw	193
  7881  0149E2  0100               	movlb	0	; () banked
  7882  0149E4  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
  7883  0149E6  C12A  F083         	movff	_Turbine_RPM_Old,___ftadd@f1
  7884  0149EA  C12B  F084         	movff	_Turbine_RPM_Old+1,___ftadd@f1+1
  7885  0149EE  C12C  F085         	movff	_Turbine_RPM_Old+2,___ftadd@f1+2
  7886  0149F2  ECE4  F0AF         	call	___ftadd	;wreg free
  7887  0149F6  C083  F092         	movff	?___ftadd,___ftge@ff2
  7888  0149FA  C084  F093         	movff	?___ftadd+1,___ftge@ff2+1
  7889  0149FE  C085  F094         	movff	?___ftadd+2,___ftge@ff2+2
  7890  014A02  EC09  F0C8         	call	___ftge	;wreg free
  7891  014A06  0100               	movlb	0	; () banked
  7892  014A08  B0D8               	btfsc	status,0,c
  7893  014A0A  D016               	goto	l3781
  7894  014A0C                     l3776:
  7895                           
  7896                           ; BSR set to: 0
  7897                           ;RPM_Measurement.c: 55: {
  7898                           ;RPM_Measurement.c: 56: Turbine_RPM = Turbine_RPM_Old;
  7899  014A0C  C12A  F02D         	movff	_Turbine_RPM_Old,_Turbine_RPM
  7900  014A10  C12B  F02E         	movff	_Turbine_RPM_Old+1,_Turbine_RPM+1
  7901  014A14  C12C  F02F         	movff	_Turbine_RPM_Old+2,_Turbine_RPM+2
  7902                           
  7903                           ;RPM_Measurement.c: 57: Turbine_RPM_New = Turbine_RPM_Old;
  7904  014A18  C12A  F127         	movff	_Turbine_RPM_Old,_Turbine_RPM_New
  7905  014A1C  C12B  F128         	movff	_Turbine_RPM_Old+1,_Turbine_RPM_New+1
  7906  014A20  C12C  F129         	movff	_Turbine_RPM_Old+2,_Turbine_RPM_New+2
  7907                           
  7908                           ;RPM_Measurement.c: 58: }
  7909  014A24  D00F               	goto	l21975
  7910  014A26                     l21971:
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;RPM_Measurement.c: 64: else if(Turbine_state == STARTUP_STATE || Turbine_state == STOPP
      +                          ING_STATE)
  7914  014A26  0100               	movlb	0	; () banked
  7915  014A28  51D8               	movf	_Turbine_state& (0+255),w,b
  7916  014A2A  B4D8               	btfsc	status,2,c
  7917  014A2C  D005               	goto	l3781
  7918                           
  7919                           ; BSR set to: 0
  7920  014A2E  0E03               	movlw	3
  7921  014A30  0100               	movlb	0	; () banked
  7922  014A32  19D8               	xorwf	_Turbine_state& (0+255),w,b
  7923  014A34  A4D8               	btfss	status,2,c
  7924  014A36  D006               	goto	l21975
  7925  014A38                     l3781:
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;RPM_Measurement.c: 65: {
  7929                           ;RPM_Measurement.c: 66: Turbine_RPM = Turbine_RPM_New;
  7930  014A38  C127  F02D         	movff	_Turbine_RPM_New,_Turbine_RPM
  7931  014A3C  C128  F02E         	movff	_Turbine_RPM_New+1,_Turbine_RPM+1
  7932  014A40  C129  F02F         	movff	_Turbine_RPM_New+2,_Turbine_RPM+2
  7933  014A44                     l21975:
  7934                           
  7935                           ;RPM_Measurement.c: 67: }
  7936                           ;RPM_Measurement.c: 70: }
  7937                           ;RPM_Measurement.c: 71: if(Turbine_state == RAMPUP_STATE)
  7938  014A44  0100               	movlb	0	; () banked
  7939  014A46  05D8               	decf	_Turbine_state& (0+255),w,b
  7940  014A48  A4D8               	btfss	status,2,c
  7941  014A4A  D00C               	goto	l21981
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;RPM_Measurement.c: 72: {
  7945                           ;RPM_Measurement.c: 73: if(Pitch_Counter < 2)
  7946  014A4C  0102               	movlb	2	; () banked
  7947  014A4E  51A1               	movf	(_Pitch_Counter+1)& (0+255),w,b
  7948  014A50  E112               	bnz	l21985
  7949  014A52  0E02               	movlw	2
  7950  014A54  0102               	movlb	2	; () banked
  7951  014A56  5DA0               	subwf	_Pitch_Counter& (0+255),w,b
  7952  014A58  B0D8               	btfsc	status,0,c
  7953  014A5A  D00D               	goto	l21985
  7954                           
  7955                           ; BSR set to: 2
  7956                           ;RPM_Measurement.c: 74: {
  7957                           ;RPM_Measurement.c: 75: Pitch_Counter++;
  7958  014A5C  0102               	movlb	2	; () banked
  7959  014A5E  4BA0               	infsnz	_Pitch_Counter& (0+255),f,b
  7960  014A60  2BA1               	incf	(_Pitch_Counter+1)& (0+255),f,b
  7961                           
  7962                           ; BSR set to: 2
  7963                           ;RPM_Measurement.c: 76: }
  7964                           ;RPM_Measurement.c: 77: }
  7965  014A62  D009               	goto	l21985
  7966  014A64                     l21981:
  7967                           
  7968                           ;RPM_Measurement.c: 78: else if(Turbine_state != RAMPUP_STATE)
  7969  014A64  0100               	movlb	0	; () banked
  7970  014A66  05D8               	decf	_Turbine_state& (0+255),w,b
  7971  014A68  B4D8               	btfsc	status,2,c
  7972  014A6A  D005               	goto	l21985
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;RPM_Measurement.c: 79: {
  7976                           ;RPM_Measurement.c: 80: Pitch_Counter = 0;
  7977  014A6C  0E00               	movlw	0
  7978  014A6E  0102               	movlb	2	; () banked
  7979  014A70  6FA1               	movwf	(_Pitch_Counter+1)& (0+255),b
  7980  014A72  0E00               	movlw	0
  7981  014A74  6FA0               	movwf	_Pitch_Counter& (0+255),b
  7982  014A76                     l21985:
  7983                           
  7984                           ;RPM_Measurement.c: 82: }
  7985                           ;RPM_Measurement.c: 83: if(Pitch_Counter == 2)
  7986  014A76  0E02               	movlw	2
  7987  014A78  0102               	movlb	2	; () banked
  7988  014A7A  19A0               	xorwf	_Pitch_Counter& (0+255),w,b
  7989  014A7C  0102               	movlb	2	; () banked
  7990  014A7E  11A1               	iorwf	(_Pitch_Counter+1)& (0+255),w,b
  7991  014A80  A4D8               	btfss	status,2,c
  7992  014A82  D005               	goto	l3786
  7993                           
  7994                           ; BSR set to: 2
  7995                           ;RPM_Measurement.c: 84: {
  7996                           ;RPM_Measurement.c: 85: Pitching_FlAG = 1;
  7997  014A84  0E00               	movlw	0
  7998  014A86  0102               	movlb	2	; () banked
  7999  014A88  6FA3               	movwf	(_Pitching_FlAG+1)& (0+255),b
  8000  014A8A  0E01               	movlw	1
  8001  014A8C  6FA2               	movwf	_Pitching_FlAG& (0+255),b
  8002  014A8E                     l3786:
  8003                           
  8004                           ; BSR set to: 2
  8005                           ;RPM_Measurement.c: 86: }
  8006                           ;RPM_Measurement.c: 88: Timer1_OF_counter_Turbine = 0;
  8007  014A8E  0E00               	movlw	0
  8008  014A90  0102               	movlb	2	; () banked
  8009  014A92  6FB7               	movwf	(_Timer1_OF_counter_Turbine+1)& (0+255),b
  8010  014A94  0E00               	movlw	0
  8011  014A96  6FB6               	movwf	_Timer1_OF_counter_Turbine& (0+255),b
  8012                           
  8013                           ; BSR set to: 2
  8014                           ;RPM_Measurement.c: 89: RPM_Time_1 = RPM_Time;
  8015  014A98  C147  F5D1         	movff	_RPM_Time,_RPM_Time_1
  8016  014A9C  C148  F5D2         	movff	_RPM_Time+1,_RPM_Time_1+1
  8017                           
  8018                           ;RPM_Measurement.c: 91: RPM_PWM = 0;
  8019  014AA0  0E00               	movlw	0
  8020  014AA2  0102               	movlb	2	; () banked
  8021  014AA4  6FFB               	movwf	(_RPM_PWM+1)& (0+255),b
  8022  014AA6  0E00               	movlw	0
  8023  014AA8  6FFA               	movwf	_RPM_PWM& (0+255),b
  8024                           
  8025                           ;RPM_Measurement.c: 92: RPM_Time = 0;
  8026  014AAA  0E00               	movlw	0
  8027  014AAC  0101               	movlb	1	; () banked
  8028  014AAE  6F48               	movwf	(_RPM_Time+1)& (0+255),b
  8029  014AB0  0E00               	movlw	0
  8030  014AB2  6F47               	movwf	_RPM_Time& (0+255),b
  8031                           
  8032                           ;RPM_Measurement.c: 93: TRPM_Frequency = 0;
  8033  014AB4  0E00               	movlw	0
  8034  014AB6  0104               	movlb	4	; () banked
  8035  014AB8  6FEA               	movwf	_TRPM_Frequency& (0+255),b
  8036  014ABA  0E00               	movlw	0
  8037  014ABC  0104               	movlb	4	; () banked
  8038  014ABE  6FEB               	movwf	(_TRPM_Frequency+1)& (0+255),b
  8039  014AC0  0E00               	movlw	0
  8040  014AC2  0104               	movlb	4	; () banked
  8041  014AC4  6FEC               	movwf	(_TRPM_Frequency+2)& (0+255),b
  8042                           
  8043                           ;RPM_Measurement.c: 94: TRPM_Time = 0;
  8044  014AC6  0E00               	movlw	0
  8045  014AC8  0104               	movlb	4	; () banked
  8046  014ACA  6FED               	movwf	_TRPM_Time& (0+255),b
  8047  014ACC  0E00               	movlw	0
  8048  014ACE  0104               	movlb	4	; () banked
  8049  014AD0  6FEE               	movwf	(_TRPM_Time+1)& (0+255),b
  8050  014AD2  0E00               	movlw	0
  8051  014AD4  0104               	movlb	4	; () banked
  8052  014AD6  6FEF               	movwf	(_TRPM_Time+2)& (0+255),b
  8053                           
  8054                           ; BSR set to: 4
  8055                           ;RPM_Measurement.c: 95: CCP7IE = 1;
  8056  014AD8  88B6               	bsf	4022,4,c	;volatile
  8057                           
  8058                           ; BSR set to: 4
  8059                           ;RPM_Measurement.c: 96: CCP7IF = 0;
  8060  014ADA  98B7               	bcf	4023,4,c	;volatile
  8061  014ADC  0012               	return	
  8062  014ADE                     __end_of_Turbine_RPM_Cal:
  8063                           	opt stack 0
  8064                           tblptru	equ	0xFF8
  8065                           tblptrh	equ	0xFF7
  8066                           tblptrl	equ	0xFF6
  8067                           tablat	equ	0xFF5
  8068                           intcon	equ	0xFF2
  8069                           postinc0	equ	0xFEE
  8070                           wreg	equ	0xFE8
  8071                           postdec1	equ	0xFE5
  8072                           fsr1h	equ	0xFE2
  8073                           fsr1l	equ	0xFE1
  8074                           status	equ	0xFD8
  8075                           
  8076 ;; *************** function _Timer7_Init *****************
  8077 ;; Defined at:
  8078 ;;		line 27 in file "Initialization.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;		None
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;		None
  8083 ;; Return value:  Size  Location     Type
  8084 ;;                  1    wreg      void 
  8085 ;; Registers used:
  8086 ;;		wreg, status,2
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;Total ram usage:        0 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    3
  8099 ;; This function calls:
  8100 ;;		Nothing
  8101 ;; This function is called by:
  8102 ;;		_main
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text11
  8107  01AA54                     __ptext11:
  8108                           	opt stack 0
  8109  01AA54                     _Timer7_Init:
  8110                           	opt stack 27
  8111                           
  8112                           ;Initialization.c: 29: T7CON = 0b00000101;
  8113                           
  8114                           ;incstack = 0
  8115  01AA54  0E05               	movlw	5
  8116  01AA56  010F               	movlb	15	; () banked
  8117  01AA58  6F3D               	movwf	61,b	;volatile
  8118                           
  8119                           ; BSR set to: 15
  8120                           ;Initialization.c: 31: TMR7IE = 1;
  8121  01AA5A  86B9               	bsf	4025,3,c	;volatile
  8122                           
  8123                           ; BSR set to: 15
  8124                           ;Initialization.c: 32: TMR7IF = 0;
  8125  01AA5C  96BA               	bcf	4026,3,c	;volatile
  8126                           
  8127                           ; BSR set to: 15
  8128  01AA5E  0012               	return		;funcret
  8129  01AA60                     __end_of_Timer7_Init:
  8130                           	opt stack 0
  8131                           tblptru	equ	0xFF8
  8132                           tblptrh	equ	0xFF7
  8133                           tblptrl	equ	0xFF6
  8134                           tablat	equ	0xFF5
  8135                           intcon	equ	0xFF2
  8136                           postinc0	equ	0xFEE
  8137                           wreg	equ	0xFE8
  8138                           postdec1	equ	0xFE5
  8139                           fsr1h	equ	0xFE2
  8140                           fsr1l	equ	0xFE1
  8141                           status	equ	0xFD8
  8142                           
  8143 ;; *************** function _Timer1_Initiate *****************
  8144 ;; Defined at:
  8145 ;;		line 17 in file "Initialization.c"
  8146 ;; Parameters:    Size  Location     Type
  8147 ;;		None
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;		None
  8150 ;; Return value:  Size  Location     Type
  8151 ;;                  1    wreg      void 
  8152 ;; Registers used:
  8153 ;;		None
  8154 ;; Tracked objects:
  8155 ;;		On entry : 0/0
  8156 ;;		On exit  : 0/0
  8157 ;;		Unchanged: 0/0
  8158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;Total ram usage:        0 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; Hardware stack levels required when called:    3
  8166 ;; This function calls:
  8167 ;;		Nothing
  8168 ;; This function is called by:
  8169 ;;		_main
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           	psect	text12
  8174  01AA20                     __ptext12:
  8175                           	opt stack 0
  8176  01AA20                     _Timer1_Initiate:
  8177                           	opt stack 27
  8178                           
  8179                           ;Initialization.c: 20: T1CKPS1= 1;
  8180                           
  8181                           ; BSR set to: 15
  8182                           ;incstack = 0
  8183  01AA20  8ACD               	bsf	4045,5,c	;volatile
  8184                           
  8185                           ;Initialization.c: 21: T1CKPS0 = 1;
  8186  01AA22  88CD               	bsf	4045,4,c	;volatile
  8187                           
  8188                           ;Initialization.c: 22: T1CONbits.RD16 = 0;
  8189  01AA24  92CD               	bcf	4045,1,c	;volatile
  8190                           
  8191                           ;Initialization.c: 23: TMR1ON = 1;
  8192  01AA26  80CD               	bsf	4045,0,c	;volatile
  8193                           
  8194                           ;Initialization.c: 24: TMR1IF = 0;
  8195  01AA28  909E               	bcf	3998,0,c	;volatile
  8196                           
  8197                           ;Initialization.c: 25: TMR1IE = 1;
  8198  01AA2A  809D               	bsf	3997,0,c	;volatile
  8199  01AA2C  0012               	return		;funcret
  8200  01AA2E                     __end_of_Timer1_Initiate:
  8201                           	opt stack 0
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           intcon	equ	0xFF2
  8207                           postinc0	equ	0xFEE
  8208                           wreg	equ	0xFE8
  8209                           postdec1	equ	0xFE5
  8210                           fsr1h	equ	0xFE2
  8211                           fsr1l	equ	0xFE1
  8212                           status	equ	0xFD8
  8213                           
  8214 ;; *************** function _Timer0_OneSecond_Function *****************
  8215 ;; Defined at:
  8216 ;;		line 22 in file "OneSecond_Function.c"
  8217 ;; Parameters:    Size  Location     Type
  8218 ;;		None
  8219 ;; Auto vars:     Size  Location     Type
  8220 ;;		None
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      void 
  8223 ;; Registers used:
  8224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8225 ;; Tracked objects:
  8226 ;;		On entry : 0/0
  8227 ;;		On exit  : 0/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8234 ;;Total ram usage:        0 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    9
  8237 ;; This function calls:
  8238 ;;		_EEPROM_Error_Monitor
  8239 ;;		_Error_Checking_One_Second
  8240 ;;		_Error_Scan_Running
  8241 ;;		_Last_Five_Error
  8242 ;;		_Stopping_state_function
  8243 ;;		_Turbine_Ramp_up_1_Second
  8244 ;;		_Turbine_Start_up_1_Second
  8245 ;;		_Two_Sec_Delay
  8246 ;;		_UART_Data
  8247 ;;		_VFD_RS485_Data
  8248 ;;		_VFD_RS485_Data_filter
  8249 ;;		_Wind_Average
  8250 ;; This function is called by:
  8251 ;;		_main
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           	psect	text13
  8256  018CCC                     __ptext13:
  8257                           	opt stack 0
  8258  018CCC                     _Timer0_OneSecond_Function:
  8259                           	opt stack 21
  8260                           
  8261                           ;OneSecond_Function.c: 26: if(Data_1[8] == 0x40)
  8262                           
  8263                           ;incstack = 0
  8264  018CCC  0E40               	movlw	64
  8265  018CCE  0105               	movlb	5	; () banked
  8266  018CD0  1910               	xorwf	(_Data_1+16)& (0+255),w,b
  8267  018CD2  0105               	movlb	5	; () banked
  8268  018CD4  1111               	iorwf	(_Data_1+17)& (0+255),w,b
  8269  018CD6  B4D8               	btfsc	status,2,c
  8270                           
  8271                           ; BSR set to: 5
  8272                           ;OneSecond_Function.c: 27: {
  8273                           ;OneSecond_Function.c: 28: VFD_RS485_Data();
  8274  018CD8  EC6B  F0D0         	call	_VFD_RS485_Data	;wreg free
  8275                           
  8276                           ;OneSecond_Function.c: 29: }
  8277                           ;OneSecond_Function.c: 30: VFD_RS485_Data_filter();
  8278  018CDC  ECFF  F0CE         	call	_VFD_RS485_Data_filter	;wreg free
  8279                           
  8280                           ;OneSecond_Function.c: 32: Error_Checking_One_Second();
  8281  018CE0  EC3B  F0C7         	call	_Error_Checking_One_Second	;wreg free
  8282                           
  8283                           ;OneSecond_Function.c: 34: if(Turbine_state == STARTUP_STATE)
  8284  018CE4  0100               	movlb	0	; () banked
  8285  018CE6  51D8               	movf	_Turbine_state& (0+255),w,b
  8286  018CE8  B4D8               	btfsc	status,2,c
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;OneSecond_Function.c: 35: {
  8290                           ;OneSecond_Function.c: 36: Turbine_Start_up_1_Second();
  8291  018CEA  EC52  F0D5         	call	_Turbine_Start_up_1_Second	;wreg free
  8292                           
  8293                           ;OneSecond_Function.c: 37: }
  8294                           ;OneSecond_Function.c: 39: if(Turbine_state == RAMPUP_STATE)
  8295  018CEE  0100               	movlb	0	; () banked
  8296  018CF0  05D8               	decf	_Turbine_state& (0+255),w,b
  8297  018CF2  B4D8               	btfsc	status,2,c
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;OneSecond_Function.c: 40: {
  8301                           ;OneSecond_Function.c: 41: Turbine_Ramp_up_1_Second();
  8302  018CF4  ECEE  F0D4         	call	_Turbine_Ramp_up_1_Second	;wreg free
  8303                           
  8304                           ;OneSecond_Function.c: 42: }
  8305                           ;OneSecond_Function.c: 44: if(Turbine_state == RUNNING_STATE)
  8306  018CF8  0E02               	movlw	2
  8307  018CFA  0100               	movlb	0	; () banked
  8308  018CFC  19D8               	xorwf	_Turbine_state& (0+255),w,b
  8309  018CFE  A4D8               	btfss	status,2,c
  8310  018D00  D004               	goto	l22033
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;OneSecond_Function.c: 45: {
  8314                           ;OneSecond_Function.c: 46: Error_Scan_Running();
  8315  018D02  EC3E  F0CA         	call	_Error_Scan_Running	;wreg free
  8316                           
  8317                           ;OneSecond_Function.c: 47: Two_Sec_Delay();
  8318  018D06  EC0E  F0D4         	call	_Two_Sec_Delay	;wreg free
  8319  018D0A                     l22033:
  8320                           
  8321                           ;OneSecond_Function.c: 48: }
  8322                           ;OneSecond_Function.c: 50: if(Turbine_state == STOPPING_STATE)
  8323  018D0A  0E03               	movlw	3
  8324  018D0C  0100               	movlb	0	; () banked
  8325  018D0E  19D8               	xorwf	_Turbine_state& (0+255),w,b
  8326  018D10  B4D8               	btfsc	status,2,c
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;OneSecond_Function.c: 51: {
  8330                           ;OneSecond_Function.c: 52: Stopping_state_function();
  8331  018D12  ECA4  F0CC         	call	_Stopping_state_function	;wreg free
  8332                           
  8333                           ;OneSecond_Function.c: 53: }
  8334                           ;OneSecond_Function.c: 55: if(Timer0_RAMPUP_Counter < (10) && Turbine_state == RAMPUP_ST
      +                          ATE)
  8335  018D16  0E0A               	movlw	10
  8336  018D18  0101               	movlb	1	; () banked
  8337  018D1A  61C5               	cpfslt	_Timer0_RAMPUP_Counter& (0+255),b
  8338  018D1C  D007               	goto	l22043
  8339                           
  8340                           ; BSR set to: 1
  8341  018D1E  0100               	movlb	0	; () banked
  8342  018D20  05D8               	decf	_Turbine_state& (0+255),w,b
  8343  018D22  A4D8               	btfss	status,2,c
  8344  018D24  D003               	goto	l22043
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;OneSecond_Function.c: 56: {
  8348                           ;OneSecond_Function.c: 57: Timer0_RAMPUP_Counter++;
  8349  018D26  0101               	movlb	1	; () banked
  8350  018D28  2BC5               	incf	_Timer0_RAMPUP_Counter& (0+255),f,b
  8351                           
  8352                           ;OneSecond_Function.c: 58: }
  8353  018D2A  D00A               	goto	l22047
  8354  018D2C                     l22043:
  8355                           
  8356                           ;OneSecond_Function.c: 59: else if(Turbine_state != RAMPUP_STATE )
  8357  018D2C  0100               	movlb	0	; () banked
  8358  018D2E  05D8               	decf	_Turbine_state& (0+255),w,b
  8359  018D30  B4D8               	btfsc	status,2,c
  8360  018D32  D006               	goto	l22047
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;OneSecond_Function.c: 60: {
  8364                           ;OneSecond_Function.c: 61: Ten_Sec_RampUp_Flag = 0;
  8365  018D34  0E00               	movlw	0
  8366  018D36  0101               	movlb	1	; () banked
  8367  018D38  6FC2               	movwf	_Ten_Sec_RampUp_Flag& (0+255),b
  8368                           
  8369                           ;OneSecond_Function.c: 62: Timer0_RAMPUP_Counter = 0;
  8370  018D3A  0E00               	movlw	0
  8371  018D3C  0101               	movlb	1	; () banked
  8372  018D3E  6FC5               	movwf	_Timer0_RAMPUP_Counter& (0+255),b
  8373  018D40                     l22047:
  8374                           
  8375                           ;OneSecond_Function.c: 63: }
  8376                           ;OneSecond_Function.c: 64: if(Timer0_RAMPUP_Counter == (10) && Turbine_state == RAMPUP_S
      +                          TATE)
  8377  018D40  0E0A               	movlw	10
  8378  018D42  0101               	movlb	1	; () banked
  8379  018D44  19C5               	xorwf	_Timer0_RAMPUP_Counter& (0+255),w,b
  8380  018D46  A4D8               	btfss	status,2,c
  8381  018D48  D006               	goto	l22053
  8382                           
  8383                           ; BSR set to: 1
  8384  018D4A  0100               	movlb	0	; () banked
  8385  018D4C  05D8               	decf	_Turbine_state& (0+255),w,b
  8386  018D4E  A4D8               	btfss	status,2,c
  8387  018D50  D002               	goto	l22053
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;OneSecond_Function.c: 65: {
  8391                           ;OneSecond_Function.c: 66: Ten_Sec_RampUp_Flag = 1;
  8392  018D52  0E01               	movlw	1
  8393  018D54  D009               	goto	L4
  8394  018D56                     l22053:
  8395                           
  8396                           ;OneSecond_Function.c: 68: else if(Ten_Sec_RampUp_Flag < (10) || Turbine_state != RAMPUP
      +                          _STATE)
  8397  018D56  0E09               	movlw	9
  8398  018D58  0101               	movlb	1	; () banked
  8399  018D5A  65C2               	cpfsgt	_Ten_Sec_RampUp_Flag& (0+255),b
  8400  018D5C  D004               	goto	l22057
  8401                           
  8402                           ; BSR set to: 1
  8403  018D5E  0100               	movlb	0	; () banked
  8404  018D60  05D8               	decf	_Turbine_state& (0+255),w,b
  8405  018D62  B4D8               	btfsc	status,2,c
  8406  018D64  D003               	goto	l22059
  8407  018D66                     l22057:
  8408                           
  8409                           ;OneSecond_Function.c: 69: {
  8410                           ;OneSecond_Function.c: 70: Ten_Sec_RampUp_Flag = 0;
  8411  018D66  0E00               	movlw	0
  8412  018D68                     L4:
  8413  018D68  0101               	movlb	1	; () banked
  8414  018D6A  6FC2               	movwf	_Ten_Sec_RampUp_Flag& (0+255),b
  8415  018D6C                     l22059:
  8416                           
  8417                           ;OneSecond_Function.c: 71: }
  8418                           ;OneSecond_Function.c: 73: Last_Five_Error();
  8419  018D6C  EC96  F0D4         	call	_Last_Five_Error	;wreg free
  8420                           
  8421                           ;OneSecond_Function.c: 74: Wind_Average();
  8422  018D70  EC7C  F0A1         	call	_Wind_Average	;wreg free
  8423                           
  8424                           ;OneSecond_Function.c: 75: EEPROM_Error_Monitor();
  8425  018D74  EC52  F0B3         	call	_EEPROM_Error_Monitor	;wreg free
  8426                           
  8427                           ;OneSecond_Function.c: 77: Serial_No = Serial_No + 1;
  8428  018D78  0E01               	movlw	1
  8429  018D7A  0101               	movlb	1	; () banked
  8430  018D7C  254B               	addwf	_Serial_No& (0+255),w,b
  8431  018D7E  0101               	movlb	1	; () banked
  8432  018D80  6F4B               	movwf	_Serial_No& (0+255),b
  8433  018D82  0E00               	movlw	0
  8434  018D84  0101               	movlb	1	; () banked
  8435  018D86  214C               	addwfc	(_Serial_No+1)& (0+255),w,b
  8436  018D88  0101               	movlb	1	; () banked
  8437  018D8A  6F4C               	movwf	(_Serial_No+1)& (0+255),b
  8438                           
  8439                           ; BSR set to: 1
  8440                           ;OneSecond_Function.c: 78: if(Serial_No > 2)
  8441  018D8C  0101               	movlb	1	; () banked
  8442  018D8E  514C               	movf	(_Serial_No+1)& (0+255),w,b
  8443  018D90  E105               	bnz	u15730
  8444  018D92  0E03               	movlw	3
  8445  018D94  0101               	movlb	1	; () banked
  8446  018D96  5D4B               	subwf	_Serial_No& (0+255),w,b
  8447  018D98  A0D8               	btfss	status,0,c
  8448  018D9A  0012               	return	
  8449  018D9C                     u15730:
  8450                           
  8451                           ; BSR set to: 1
  8452                           ;OneSecond_Function.c: 79: {
  8453                           ;OneSecond_Function.c: 80: UART_Data();
  8454  018D9C  EC00  F080         	call	_UART_Data	;wreg free
  8455  018DA0  0012               	return	
  8456  018DA2                     __end_of_Timer0_OneSecond_Function:
  8457                           	opt stack 0
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           intcon	equ	0xFF2
  8463                           postinc0	equ	0xFEE
  8464                           wreg	equ	0xFE8
  8465                           postdec1	equ	0xFE5
  8466                           fsr1h	equ	0xFE2
  8467                           fsr1l	equ	0xFE1
  8468                           status	equ	0xFD8
  8469                           
  8470 ;; *************** function _Wind_Average *****************
  8471 ;; Defined at:
  8472 ;;		line 225 in file "RPM_Measurement.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;		None
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;		None
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      void 
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;Total ram usage:       24 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    5
  8493 ;; This function calls:
  8494 ;;		___ftadd
  8495 ;;		___ftdiv
  8496 ;; This function is called by:
  8497 ;;		_Timer0_OneSecond_Function
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	text14
  8502  0142F8                     __ptext14:
  8503                           	opt stack 0
  8504  0142F8                     _Wind_Average:
  8505                           	opt stack 24
  8506                           
  8507                           ;RPM_Measurement.c: 227: Wind_Speed_9 = Wind_Speed_8;
  8508                           
  8509                           ;incstack = 0
  8510  0142F8  C269  F4B4         	movff	_Wind_Speed_8,_Wind_Speed_9
  8511  0142FC  C26A  F4B5         	movff	_Wind_Speed_8+1,_Wind_Speed_9+1
  8512  014300  C26B  F4B6         	movff	_Wind_Speed_8+2,_Wind_Speed_9+2
  8513                           
  8514                           ;RPM_Measurement.c: 228: Wind_Speed_8 = Wind_Speed_7;
  8515  014304  C263  F269         	movff	_Wind_Speed_7,_Wind_Speed_8
  8516  014308  C264  F26A         	movff	_Wind_Speed_7+1,_Wind_Speed_8+1
  8517  01430C  C265  F26B         	movff	_Wind_Speed_7+2,_Wind_Speed_8+2
  8518                           
  8519                           ;RPM_Measurement.c: 229: Wind_Speed_7 = Wind_Speed_6;
  8520  014310  C25D  F263         	movff	_Wind_Speed_6,_Wind_Speed_7
  8521  014314  C25E  F264         	movff	_Wind_Speed_6+1,_Wind_Speed_7+1
  8522  014318  C25F  F265         	movff	_Wind_Speed_6+2,_Wind_Speed_7+2
  8523                           
  8524                           ;RPM_Measurement.c: 230: Wind_Speed_6 = Wind_Speed_5;
  8525  01431C  C257  F25D         	movff	_Wind_Speed_5,_Wind_Speed_6
  8526  014320  C258  F25E         	movff	_Wind_Speed_5+1,_Wind_Speed_6+1
  8527  014324  C259  F25F         	movff	_Wind_Speed_5+2,_Wind_Speed_6+2
  8528                           
  8529                           ;RPM_Measurement.c: 231: Wind_Speed_5 = Wind_Speed_4;
  8530  014328  C251  F257         	movff	_Wind_Speed_4,_Wind_Speed_5
  8531  01432C  C252  F258         	movff	_Wind_Speed_4+1,_Wind_Speed_5+1
  8532  014330  C253  F259         	movff	_Wind_Speed_4+2,_Wind_Speed_5+2
  8533                           
  8534                           ;RPM_Measurement.c: 232: Wind_Speed_4 = Wind_Speed_3;
  8535  014334  C24B  F251         	movff	_Wind_Speed_3,_Wind_Speed_4
  8536  014338  C24C  F252         	movff	_Wind_Speed_3+1,_Wind_Speed_4+1
  8537  01433C  C24D  F253         	movff	_Wind_Speed_3+2,_Wind_Speed_4+2
  8538                           
  8539                           ;RPM_Measurement.c: 233: Wind_Speed_3 = Wind_Spd_2;
  8540  014340  C233  F24B         	movff	_Wind_Spd_2,_Wind_Speed_3
  8541  014344  C234  F24C         	movff	_Wind_Spd_2+1,_Wind_Speed_3+1
  8542  014348  C235  F24D         	movff	_Wind_Spd_2+2,_Wind_Speed_3+2
  8543                           
  8544                           ;RPM_Measurement.c: 234: Wind_Spd_2 = Wind_Speed_1;
  8545  01434C  C23F  F233         	movff	_Wind_Speed_1,_Wind_Spd_2
  8546  014350  C240  F234         	movff	_Wind_Speed_1+1,_Wind_Spd_2+1
  8547  014354  C241  F235         	movff	_Wind_Speed_1+2,_Wind_Spd_2+2
  8548                           
  8549                           ;RPM_Measurement.c: 235: Wind_Speed_1 = Wind_Speed_0;
  8550  014358  C239  F23F         	movff	_Wind_Speed_0,_Wind_Speed_1
  8551  01435C  C23A  F240         	movff	_Wind_Speed_0+1,_Wind_Speed_1+1
  8552  014360  C23B  F241         	movff	_Wind_Speed_0+2,_Wind_Speed_1+2
  8553                           
  8554                           ;RPM_Measurement.c: 236: Wind_Speed_0 = Wind_Speed;
  8555  014364  C236  F239         	movff	_Wind_Speed,_Wind_Speed_0
  8556  014368  C237  F23A         	movff	_Wind_Speed+1,_Wind_Speed_0+1
  8557  01436C  C238  F23B         	movff	_Wind_Speed+2,_Wind_Speed_0+2
  8558                           
  8559                           ;RPM_Measurement.c: 238: if(Ten_Sec_Counter < (10))
  8560  014370  0E0A               	movlw	10
  8561  014372  0101               	movlb	1	; () banked
  8562  014374  61C0               	cpfslt	_Ten_Sec_Counter& (0+255),b
  8563  014376  D002               	goto	l21383
  8564                           
  8565                           ; BSR set to: 1
  8566                           ;RPM_Measurement.c: 239: {
  8567                           ;RPM_Measurement.c: 240: Ten_Sec_Counter++;
  8568  014378  0101               	movlb	1	; () banked
  8569  01437A  2BC0               	incf	_Ten_Sec_Counter& (0+255),f,b
  8570  01437C                     l21383:
  8571                           
  8572                           ; BSR set to: 1
  8573                           ;RPM_Measurement.c: 241: }
  8574                           ;RPM_Measurement.c: 242: if(Ten_Sec_Counter == (10))
  8575  01437C  0E0A               	movlw	10
  8576  01437E  0101               	movlb	1	; () banked
  8577  014380  19C0               	xorwf	_Ten_Sec_Counter& (0+255),w,b
  8578  014382  A4D8               	btfss	status,2,c
  8579  014384  D0C5               	goto	l21387
  8580                           
  8581                           ; BSR set to: 1
  8582                           ;RPM_Measurement.c: 243: {
  8583                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8584  014386  C269  F086         	movff	_Wind_Speed_8,___ftadd@f2
  8585  01438A  C26A  F087         	movff	_Wind_Speed_8+1,___ftadd@f2+1
  8586  01438E  C26B  F088         	movff	_Wind_Speed_8+2,___ftadd@f2+2
  8587  014392  C4B4  F083         	movff	_Wind_Speed_9,___ftadd@f1
  8588  014396  C4B5  F084         	movff	_Wind_Speed_9+1,___ftadd@f1+1
  8589  01439A  C4B6  F085         	movff	_Wind_Speed_9+2,___ftadd@f1+2
  8590  01439E  ECE4  F0AF         	call	___ftadd	;wreg free
  8591  0143A2  C083  F0AA         	movff	?___ftadd,_Wind_Average$8103
  8592  0143A6  C084  F0AB         	movff	?___ftadd+1,_Wind_Average$8103+1
  8593  0143AA  C085  F0AC         	movff	?___ftadd+2,_Wind_Average$8103+2
  8594                           
  8595                           ;RPM_Measurement.c: 243: {
  8596                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8597  0143AE  C263  F086         	movff	_Wind_Speed_7,___ftadd@f2
  8598  0143B2  C264  F087         	movff	_Wind_Speed_7+1,___ftadd@f2+1
  8599  0143B6  C265  F088         	movff	_Wind_Speed_7+2,___ftadd@f2+2
  8600  0143BA  C0AA  F083         	movff	_Wind_Average$8103,___ftadd@f1
  8601  0143BE  C0AB  F084         	movff	_Wind_Average$8103+1,___ftadd@f1+1
  8602  0143C2  C0AC  F085         	movff	_Wind_Average$8103+2,___ftadd@f1+2
  8603  0143C6  ECE4  F0AF         	call	___ftadd	;wreg free
  8604  0143CA  C083  F0AD         	movff	?___ftadd,_Wind_Average$8104
  8605  0143CE  C084  F0AE         	movff	?___ftadd+1,_Wind_Average$8104+1
  8606  0143D2  C085  F0AF         	movff	?___ftadd+2,_Wind_Average$8104+2
  8607                           
  8608                           ;RPM_Measurement.c: 243: {
  8609                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8610  0143D6  C25D  F086         	movff	_Wind_Speed_6,___ftadd@f2
  8611  0143DA  C25E  F087         	movff	_Wind_Speed_6+1,___ftadd@f2+1
  8612  0143DE  C25F  F088         	movff	_Wind_Speed_6+2,___ftadd@f2+2
  8613  0143E2  C0AD  F083         	movff	_Wind_Average$8104,___ftadd@f1
  8614  0143E6  C0AE  F084         	movff	_Wind_Average$8104+1,___ftadd@f1+1
  8615  0143EA  C0AF  F085         	movff	_Wind_Average$8104+2,___ftadd@f1+2
  8616  0143EE  ECE4  F0AF         	call	___ftadd	;wreg free
  8617  0143F2  C083  F0B0         	movff	?___ftadd,_Wind_Average$8105
  8618  0143F6  C084  F0B1         	movff	?___ftadd+1,_Wind_Average$8105+1
  8619  0143FA  C085  F0B2         	movff	?___ftadd+2,_Wind_Average$8105+2
  8620                           
  8621                           ;RPM_Measurement.c: 243: {
  8622                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8623  0143FE  C257  F086         	movff	_Wind_Speed_5,___ftadd@f2
  8624  014402  C258  F087         	movff	_Wind_Speed_5+1,___ftadd@f2+1
  8625  014406  C259  F088         	movff	_Wind_Speed_5+2,___ftadd@f2+2
  8626  01440A  C0B0  F083         	movff	_Wind_Average$8105,___ftadd@f1
  8627  01440E  C0B1  F084         	movff	_Wind_Average$8105+1,___ftadd@f1+1
  8628  014412  C0B2  F085         	movff	_Wind_Average$8105+2,___ftadd@f1+2
  8629  014416  ECE4  F0AF         	call	___ftadd	;wreg free
  8630  01441A  C083  F0B3         	movff	?___ftadd,_Wind_Average$8106
  8631  01441E  C084  F0B4         	movff	?___ftadd+1,_Wind_Average$8106+1
  8632  014422  C085  F0B5         	movff	?___ftadd+2,_Wind_Average$8106+2
  8633                           
  8634                           ;RPM_Measurement.c: 243: {
  8635                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8636  014426  C251  F086         	movff	_Wind_Speed_4,___ftadd@f2
  8637  01442A  C252  F087         	movff	_Wind_Speed_4+1,___ftadd@f2+1
  8638  01442E  C253  F088         	movff	_Wind_Speed_4+2,___ftadd@f2+2
  8639  014432  C0B3  F083         	movff	_Wind_Average$8106,___ftadd@f1
  8640  014436  C0B4  F084         	movff	_Wind_Average$8106+1,___ftadd@f1+1
  8641  01443A  C0B5  F085         	movff	_Wind_Average$8106+2,___ftadd@f1+2
  8642  01443E  ECE4  F0AF         	call	___ftadd	;wreg free
  8643  014442  C083  F0B6         	movff	?___ftadd,_Wind_Average$8107
  8644  014446  C084  F0B7         	movff	?___ftadd+1,_Wind_Average$8107+1
  8645  01444A  C085  F0B8         	movff	?___ftadd+2,_Wind_Average$8107+2
  8646                           
  8647                           ;RPM_Measurement.c: 243: {
  8648                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8649  01444E  C24B  F086         	movff	_Wind_Speed_3,___ftadd@f2
  8650  014452  C24C  F087         	movff	_Wind_Speed_3+1,___ftadd@f2+1
  8651  014456  C24D  F088         	movff	_Wind_Speed_3+2,___ftadd@f2+2
  8652  01445A  C0B6  F083         	movff	_Wind_Average$8107,___ftadd@f1
  8653  01445E  C0B7  F084         	movff	_Wind_Average$8107+1,___ftadd@f1+1
  8654  014462  C0B8  F085         	movff	_Wind_Average$8107+2,___ftadd@f1+2
  8655  014466  ECE4  F0AF         	call	___ftadd	;wreg free
  8656  01446A  C083  F0B9         	movff	?___ftadd,_Wind_Average$8108
  8657  01446E  C084  F0BA         	movff	?___ftadd+1,_Wind_Average$8108+1
  8658  014472  C085  F0BB         	movff	?___ftadd+2,_Wind_Average$8108+2
  8659                           
  8660                           ;RPM_Measurement.c: 243: {
  8661                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8662  014476  C233  F086         	movff	_Wind_Spd_2,___ftadd@f2
  8663  01447A  C234  F087         	movff	_Wind_Spd_2+1,___ftadd@f2+1
  8664  01447E  C235  F088         	movff	_Wind_Spd_2+2,___ftadd@f2+2
  8665  014482  C0B9  F083         	movff	_Wind_Average$8108,___ftadd@f1
  8666  014486  C0BA  F084         	movff	_Wind_Average$8108+1,___ftadd@f1+1
  8667  01448A  C0BB  F085         	movff	_Wind_Average$8108+2,___ftadd@f1+2
  8668  01448E  ECE4  F0AF         	call	___ftadd	;wreg free
  8669  014492  C083  F0BC         	movff	?___ftadd,_Wind_Average$8109
  8670  014496  C084  F0BD         	movff	?___ftadd+1,_Wind_Average$8109+1
  8671  01449A  C085  F0BE         	movff	?___ftadd+2,_Wind_Average$8109+2
  8672                           
  8673                           ;RPM_Measurement.c: 243: {
  8674                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8675  01449E  C23F  F086         	movff	_Wind_Speed_1,___ftadd@f2
  8676  0144A2  C240  F087         	movff	_Wind_Speed_1+1,___ftadd@f2+1
  8677  0144A6  C241  F088         	movff	_Wind_Speed_1+2,___ftadd@f2+2
  8678  0144AA  C0BC  F083         	movff	_Wind_Average$8109,___ftadd@f1
  8679  0144AE  C0BD  F084         	movff	_Wind_Average$8109+1,___ftadd@f1+1
  8680  0144B2  C0BE  F085         	movff	_Wind_Average$8109+2,___ftadd@f1+2
  8681  0144B6  ECE4  F0AF         	call	___ftadd	;wreg free
  8682  0144BA  C083  F0BF         	movff	?___ftadd,_Wind_Average$8110
  8683  0144BE  C084  F0C0         	movff	?___ftadd+1,_Wind_Average$8110+1
  8684  0144C2  C085  F0C1         	movff	?___ftadd+2,_Wind_Average$8110+2
  8685                           
  8686                           ;RPM_Measurement.c: 243: {
  8687                           ;RPM_Measurement.c: 244: Wind_Speed_Avg = (Wind_Speed_9 + Wind_Speed_8 + Wind_Speed_7 + 
      +                          Wind_Speed_6 + Wind_Speed_5 + Wind_Speed_4 + Wind_Speed_3 + Wind_Spd_2 + Wind_Speed_1 + 
      +                          Wind_Speed_0)/(10);
  8688  0144C6  C239  F086         	movff	_Wind_Speed_0,___ftadd@f2
  8689  0144CA  C23A  F087         	movff	_Wind_Speed_0+1,___ftadd@f2+1
  8690  0144CE  C23B  F088         	movff	_Wind_Speed_0+2,___ftadd@f2+2
  8691  0144D2  C0BF  F083         	movff	_Wind_Average$8110,___ftadd@f1
  8692  0144D6  C0C0  F084         	movff	_Wind_Average$8110+1,___ftadd@f1+1
  8693  0144DA  C0C1  F085         	movff	_Wind_Average$8110+2,___ftadd@f1+2
  8694  0144DE  ECE4  F0AF         	call	___ftadd	;wreg free
  8695  0144E2  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  8696  0144E6  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  8697  0144EA  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  8698  0144EE  0E00               	movlw	0
  8699  0144F0  0100               	movlb	0	; () banked
  8700  0144F2  6F9E               	movwf	___ftdiv@f2& (0+255),b
  8701  0144F4  0E20               	movlw	32
  8702  0144F6  0100               	movlb	0	; () banked
  8703  0144F8  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  8704  0144FA  0E41               	movlw	65
  8705  0144FC  0100               	movlb	0	; () banked
  8706  0144FE  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  8707  014500  EC89  F0BF         	call	___ftdiv	;wreg free
  8708  014504  C09B  F0D2         	movff	?___ftdiv,_Wind_Speed_Avg
  8709  014508  C09C  F0D3         	movff	?___ftdiv+1,_Wind_Speed_Avg+1
  8710  01450C  C09D  F0D4         	movff	?___ftdiv+2,_Wind_Speed_Avg+2
  8711  014510                     l21387:
  8712                           
  8713                           ;RPM_Measurement.c: 245: }
  8714                           ;RPM_Measurement.c: 248: Wind_Speed_9_2 = Wind_Speed_8_2;
  8715  014510  C26C  F4B7         	movff	_Wind_Speed_8_2,_Wind_Speed_9_2
  8716  014514  C26D  F4B8         	movff	_Wind_Speed_8_2+1,_Wind_Speed_9_2+1
  8717  014518  C26E  F4B9         	movff	_Wind_Speed_8_2+2,_Wind_Speed_9_2+2
  8718                           
  8719                           ;RPM_Measurement.c: 249: Wind_Speed_8_2 = Wind_Speed_7_2;
  8720  01451C  C266  F26C         	movff	_Wind_Speed_7_2,_Wind_Speed_8_2
  8721  014520  C267  F26D         	movff	_Wind_Speed_7_2+1,_Wind_Speed_8_2+1
  8722  014524  C268  F26E         	movff	_Wind_Speed_7_2+2,_Wind_Speed_8_2+2
  8723                           
  8724                           ;RPM_Measurement.c: 250: Wind_Speed_7_2 = Wind_Speed_6_2;
  8725  014528  C260  F266         	movff	_Wind_Speed_6_2,_Wind_Speed_7_2
  8726  01452C  C261  F267         	movff	_Wind_Speed_6_2+1,_Wind_Speed_7_2+1
  8727  014530  C262  F268         	movff	_Wind_Speed_6_2+2,_Wind_Speed_7_2+2
  8728                           
  8729                           ;RPM_Measurement.c: 251: Wind_Speed_6_2 = Wind_Speed_5_2;
  8730  014534  C25A  F260         	movff	_Wind_Speed_5_2,_Wind_Speed_6_2
  8731  014538  C25B  F261         	movff	_Wind_Speed_5_2+1,_Wind_Speed_6_2+1
  8732  01453C  C25C  F262         	movff	_Wind_Speed_5_2+2,_Wind_Speed_6_2+2
  8733                           
  8734                           ;RPM_Measurement.c: 252: Wind_Speed_5_2 = Wind_Speed_4_2;
  8735  014540  C254  F25A         	movff	_Wind_Speed_4_2,_Wind_Speed_5_2
  8736  014544  C255  F25B         	movff	_Wind_Speed_4_2+1,_Wind_Speed_5_2+1
  8737  014548  C256  F25C         	movff	_Wind_Speed_4_2+2,_Wind_Speed_5_2+2
  8738                           
  8739                           ;RPM_Measurement.c: 253: Wind_Speed_4_2 = Wind_Speed_3_2;
  8740  01454C  C24E  F254         	movff	_Wind_Speed_3_2,_Wind_Speed_4_2
  8741  014550  C24F  F255         	movff	_Wind_Speed_3_2+1,_Wind_Speed_4_2+1
  8742  014554  C250  F256         	movff	_Wind_Speed_3_2+2,_Wind_Speed_4_2+2
  8743                           
  8744                           ;RPM_Measurement.c: 254: Wind_Speed_3_2 = Wind_Speed_2_2;
  8745  014558  C248  F24E         	movff	_Wind_Speed_2_2,_Wind_Speed_3_2
  8746  01455C  C249  F24F         	movff	_Wind_Speed_2_2+1,_Wind_Speed_3_2+1
  8747  014560  C24A  F250         	movff	_Wind_Speed_2_2+2,_Wind_Speed_3_2+2
  8748                           
  8749                           ;RPM_Measurement.c: 255: Wind_Speed_2_2 = Wind_Speed_1_2;
  8750  014564  C242  F248         	movff	_Wind_Speed_1_2,_Wind_Speed_2_2
  8751  014568  C243  F249         	movff	_Wind_Speed_1_2+1,_Wind_Speed_2_2+1
  8752  01456C  C244  F24A         	movff	_Wind_Speed_1_2+2,_Wind_Speed_2_2+2
  8753                           
  8754                           ;RPM_Measurement.c: 256: Wind_Speed_1_2 = Wind_Speed_0_2;
  8755  014570  C23C  F242         	movff	_Wind_Speed_0_2,_Wind_Speed_1_2
  8756  014574  C23D  F243         	movff	_Wind_Speed_0_2+1,_Wind_Speed_1_2+1
  8757  014578  C23E  F244         	movff	_Wind_Speed_0_2+2,_Wind_Speed_1_2+2
  8758                           
  8759                           ;RPM_Measurement.c: 257: Wind_Speed_0_2 = Wind_Speed_2;
  8760  01457C  C245  F23C         	movff	_Wind_Speed_2,_Wind_Speed_0_2
  8761  014580  C246  F23D         	movff	_Wind_Speed_2+1,_Wind_Speed_0_2+1
  8762  014584  C247  F23E         	movff	_Wind_Speed_2+2,_Wind_Speed_0_2+2
  8763                           
  8764                           ;RPM_Measurement.c: 259: if(Ten_Sec_Counter_2 < (10))
  8765  014588  0E0A               	movlw	10
  8766  01458A  0101               	movlb	1	; () banked
  8767  01458C  61C1               	cpfslt	_Ten_Sec_Counter_2& (0+255),b
  8768  01458E  D002               	goto	l21411
  8769                           
  8770                           ; BSR set to: 1
  8771                           ;RPM_Measurement.c: 260: {
  8772                           ;RPM_Measurement.c: 261: Ten_Sec_Counter_2++;
  8773  014590  0101               	movlb	1	; () banked
  8774  014592  2BC1               	incf	_Ten_Sec_Counter_2& (0+255),f,b
  8775  014594                     l21411:
  8776                           
  8777                           ; BSR set to: 1
  8778                           ;RPM_Measurement.c: 262: }
  8779                           ;RPM_Measurement.c: 263: if(Ten_Sec_Counter_2 == (10))
  8780  014594  0E0A               	movlw	10
  8781  014596  0101               	movlb	1	; () banked
  8782  014598  19C1               	xorwf	_Ten_Sec_Counter_2& (0+255),w,b
  8783  01459A  A4D8               	btfss	status,2,c
  8784  01459C  0012               	return	
  8785                           
  8786                           ; BSR set to: 1
  8787                           ;RPM_Measurement.c: 264: {
  8788                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8789  01459E  C26C  F086         	movff	_Wind_Speed_8_2,___ftadd@f2
  8790  0145A2  C26D  F087         	movff	_Wind_Speed_8_2+1,___ftadd@f2+1
  8791  0145A6  C26E  F088         	movff	_Wind_Speed_8_2+2,___ftadd@f2+2
  8792  0145AA  C4B7  F083         	movff	_Wind_Speed_9_2,___ftadd@f1
  8793  0145AE  C4B8  F084         	movff	_Wind_Speed_9_2+1,___ftadd@f1+1
  8794  0145B2  C4B9  F085         	movff	_Wind_Speed_9_2+2,___ftadd@f1+2
  8795  0145B6  ECE4  F0AF         	call	___ftadd	;wreg free
  8796  0145BA  C083  F0AA         	movff	?___ftadd,_Wind_Average$8103
  8797  0145BE  C084  F0AB         	movff	?___ftadd+1,_Wind_Average$8103+1
  8798  0145C2  C085  F0AC         	movff	?___ftadd+2,_Wind_Average$8103+2
  8799                           
  8800                           ;RPM_Measurement.c: 264: {
  8801                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8802  0145C6  C266  F086         	movff	_Wind_Speed_7_2,___ftadd@f2
  8803  0145CA  C267  F087         	movff	_Wind_Speed_7_2+1,___ftadd@f2+1
  8804  0145CE  C268  F088         	movff	_Wind_Speed_7_2+2,___ftadd@f2+2
  8805  0145D2  C0AA  F083         	movff	_Wind_Average$8103,___ftadd@f1
  8806  0145D6  C0AB  F084         	movff	_Wind_Average$8103+1,___ftadd@f1+1
  8807  0145DA  C0AC  F085         	movff	_Wind_Average$8103+2,___ftadd@f1+2
  8808  0145DE  ECE4  F0AF         	call	___ftadd	;wreg free
  8809  0145E2  C083  F0AD         	movff	?___ftadd,_Wind_Average$8104
  8810  0145E6  C084  F0AE         	movff	?___ftadd+1,_Wind_Average$8104+1
  8811  0145EA  C085  F0AF         	movff	?___ftadd+2,_Wind_Average$8104+2
  8812                           
  8813                           ;RPM_Measurement.c: 264: {
  8814                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8815  0145EE  C260  F086         	movff	_Wind_Speed_6_2,___ftadd@f2
  8816  0145F2  C261  F087         	movff	_Wind_Speed_6_2+1,___ftadd@f2+1
  8817  0145F6  C262  F088         	movff	_Wind_Speed_6_2+2,___ftadd@f2+2
  8818  0145FA  C0AD  F083         	movff	_Wind_Average$8104,___ftadd@f1
  8819  0145FE  C0AE  F084         	movff	_Wind_Average$8104+1,___ftadd@f1+1
  8820  014602  C0AF  F085         	movff	_Wind_Average$8104+2,___ftadd@f1+2
  8821  014606  ECE4  F0AF         	call	___ftadd	;wreg free
  8822  01460A  C083  F0B0         	movff	?___ftadd,_Wind_Average$8105
  8823  01460E  C084  F0B1         	movff	?___ftadd+1,_Wind_Average$8105+1
  8824  014612  C085  F0B2         	movff	?___ftadd+2,_Wind_Average$8105+2
  8825                           
  8826                           ;RPM_Measurement.c: 264: {
  8827                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8828  014616  C25A  F086         	movff	_Wind_Speed_5_2,___ftadd@f2
  8829  01461A  C25B  F087         	movff	_Wind_Speed_5_2+1,___ftadd@f2+1
  8830  01461E  C25C  F088         	movff	_Wind_Speed_5_2+2,___ftadd@f2+2
  8831  014622  C0B0  F083         	movff	_Wind_Average$8105,___ftadd@f1
  8832  014626  C0B1  F084         	movff	_Wind_Average$8105+1,___ftadd@f1+1
  8833  01462A  C0B2  F085         	movff	_Wind_Average$8105+2,___ftadd@f1+2
  8834  01462E  ECE4  F0AF         	call	___ftadd	;wreg free
  8835  014632  C083  F0B3         	movff	?___ftadd,_Wind_Average$8106
  8836  014636  C084  F0B4         	movff	?___ftadd+1,_Wind_Average$8106+1
  8837  01463A  C085  F0B5         	movff	?___ftadd+2,_Wind_Average$8106+2
  8838                           
  8839                           ;RPM_Measurement.c: 264: {
  8840                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8841  01463E  C254  F086         	movff	_Wind_Speed_4_2,___ftadd@f2
  8842  014642  C255  F087         	movff	_Wind_Speed_4_2+1,___ftadd@f2+1
  8843  014646  C256  F088         	movff	_Wind_Speed_4_2+2,___ftadd@f2+2
  8844  01464A  C0B3  F083         	movff	_Wind_Average$8106,___ftadd@f1
  8845  01464E  C0B4  F084         	movff	_Wind_Average$8106+1,___ftadd@f1+1
  8846  014652  C0B5  F085         	movff	_Wind_Average$8106+2,___ftadd@f1+2
  8847  014656  ECE4  F0AF         	call	___ftadd	;wreg free
  8848  01465A  C083  F0B6         	movff	?___ftadd,_Wind_Average$8107
  8849  01465E  C084  F0B7         	movff	?___ftadd+1,_Wind_Average$8107+1
  8850  014662  C085  F0B8         	movff	?___ftadd+2,_Wind_Average$8107+2
  8851                           
  8852                           ;RPM_Measurement.c: 264: {
  8853                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8854  014666  C24E  F086         	movff	_Wind_Speed_3_2,___ftadd@f2
  8855  01466A  C24F  F087         	movff	_Wind_Speed_3_2+1,___ftadd@f2+1
  8856  01466E  C250  F088         	movff	_Wind_Speed_3_2+2,___ftadd@f2+2
  8857  014672  C0B6  F083         	movff	_Wind_Average$8107,___ftadd@f1
  8858  014676  C0B7  F084         	movff	_Wind_Average$8107+1,___ftadd@f1+1
  8859  01467A  C0B8  F085         	movff	_Wind_Average$8107+2,___ftadd@f1+2
  8860  01467E  ECE4  F0AF         	call	___ftadd	;wreg free
  8861  014682  C083  F0B9         	movff	?___ftadd,_Wind_Average$8108
  8862  014686  C084  F0BA         	movff	?___ftadd+1,_Wind_Average$8108+1
  8863  01468A  C085  F0BB         	movff	?___ftadd+2,_Wind_Average$8108+2
  8864                           
  8865                           ;RPM_Measurement.c: 264: {
  8866                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8867  01468E  C248  F086         	movff	_Wind_Speed_2_2,___ftadd@f2
  8868  014692  C249  F087         	movff	_Wind_Speed_2_2+1,___ftadd@f2+1
  8869  014696  C24A  F088         	movff	_Wind_Speed_2_2+2,___ftadd@f2+2
  8870  01469A  C0B9  F083         	movff	_Wind_Average$8108,___ftadd@f1
  8871  01469E  C0BA  F084         	movff	_Wind_Average$8108+1,___ftadd@f1+1
  8872  0146A2  C0BB  F085         	movff	_Wind_Average$8108+2,___ftadd@f1+2
  8873  0146A6  ECE4  F0AF         	call	___ftadd	;wreg free
  8874  0146AA  C083  F0BC         	movff	?___ftadd,_Wind_Average$8109
  8875  0146AE  C084  F0BD         	movff	?___ftadd+1,_Wind_Average$8109+1
  8876  0146B2  C085  F0BE         	movff	?___ftadd+2,_Wind_Average$8109+2
  8877                           
  8878                           ;RPM_Measurement.c: 264: {
  8879                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8880  0146B6  C242  F086         	movff	_Wind_Speed_1_2,___ftadd@f2
  8881  0146BA  C243  F087         	movff	_Wind_Speed_1_2+1,___ftadd@f2+1
  8882  0146BE  C244  F088         	movff	_Wind_Speed_1_2+2,___ftadd@f2+2
  8883  0146C2  C0BC  F083         	movff	_Wind_Average$8109,___ftadd@f1
  8884  0146C6  C0BD  F084         	movff	_Wind_Average$8109+1,___ftadd@f1+1
  8885  0146CA  C0BE  F085         	movff	_Wind_Average$8109+2,___ftadd@f1+2
  8886  0146CE  ECE4  F0AF         	call	___ftadd	;wreg free
  8887  0146D2  C083  F0BF         	movff	?___ftadd,_Wind_Average$8110
  8888  0146D6  C084  F0C0         	movff	?___ftadd+1,_Wind_Average$8110+1
  8889  0146DA  C085  F0C1         	movff	?___ftadd+2,_Wind_Average$8110+2
  8890                           
  8891                           ;RPM_Measurement.c: 264: {
  8892                           ;RPM_Measurement.c: 265: Wind_Speed_Avg_2 = (Wind_Speed_9_2 + Wind_Speed_8_2 + Wind_Spee
      +                          d_7_2 + Wind_Speed_6_2 + Wind_Speed_5_2 + Wind_Speed_4_2 + Wind_Speed_3_2 + Wind_Speed_2
      +                          _2 + Wind_Speed_1_2 + Wind_Speed_0_2)/(10);
  8893  0146DE  C23C  F086         	movff	_Wind_Speed_0_2,___ftadd@f2
  8894  0146E2  C23D  F087         	movff	_Wind_Speed_0_2+1,___ftadd@f2+1
  8895  0146E6  C23E  F088         	movff	_Wind_Speed_0_2+2,___ftadd@f2+2
  8896  0146EA  C0BF  F083         	movff	_Wind_Average$8110,___ftadd@f1
  8897  0146EE  C0C0  F084         	movff	_Wind_Average$8110+1,___ftadd@f1+1
  8898  0146F2  C0C1  F085         	movff	_Wind_Average$8110+2,___ftadd@f1+2
  8899  0146F6  ECE4  F0AF         	call	___ftadd	;wreg free
  8900  0146FA  C083  F09B         	movff	?___ftadd,___ftdiv@f1
  8901  0146FE  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
  8902  014702  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
  8903  014706  0E00               	movlw	0
  8904  014708  0100               	movlb	0	; () banked
  8905  01470A  6F9E               	movwf	___ftdiv@f2& (0+255),b
  8906  01470C  0E20               	movlw	32
  8907  01470E  0100               	movlb	0	; () banked
  8908  014710  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  8909  014712  0E41               	movlw	65
  8910  014714  0100               	movlb	0	; () banked
  8911  014716  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  8912  014718  EC89  F0BF         	call	___ftdiv	;wreg free
  8913  01471C  C09B  F4BA         	movff	?___ftdiv,_Wind_Speed_Avg_2
  8914  014720  C09C  F4BB         	movff	?___ftdiv+1,_Wind_Speed_Avg_2+1
  8915  014724  C09D  F4BC         	movff	?___ftdiv+2,_Wind_Speed_Avg_2+2
  8916  014728  0012               	return	
  8917  01472A                     __end_of_Wind_Average:
  8918                           	opt stack 0
  8919                           tblptru	equ	0xFF8
  8920                           tblptrh	equ	0xFF7
  8921                           tblptrl	equ	0xFF6
  8922                           tablat	equ	0xFF5
  8923                           intcon	equ	0xFF2
  8924                           postinc0	equ	0xFEE
  8925                           wreg	equ	0xFE8
  8926                           postdec1	equ	0xFE5
  8927                           fsr1h	equ	0xFE2
  8928                           fsr1l	equ	0xFE1
  8929                           status	equ	0xFD8
  8930                           
  8931 ;; *************** function _VFD_RS485_Data_filter *****************
  8932 ;; Defined at:
  8933 ;;		line 67 in file "RS485_COMMUNICATION.c"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;		None
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;		None
  8938 ;; Return value:  Size  Location     Type
  8939 ;;                  1    wreg      void 
  8940 ;; Registers used:
  8941 ;;		wreg, status,2, status,0, cstack
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;Total ram usage:        0 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; Hardware stack levels required when called:    6
  8954 ;; This function calls:
  8955 ;;		_VFD_RS485_Data
  8956 ;; This function is called by:
  8957 ;;		_Timer0_OneSecond_Function
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	text15
  8962  019DFE                     __ptext15:
  8963                           	opt stack 0
  8964  019DFE                     _VFD_RS485_Data_filter:
  8965                           	opt stack 23
  8966                           
  8967                           ;RS485_COMMUNICATION.c: 69: if(Data_1[1] == Data_1[7])
  8968                           
  8969                           ;incstack = 0
  8970  019DFE  0105               	movlb	5	; () banked
  8971  019E00  510E               	movf	(_Data_1+14)& (0+255),w,b
  8972  019E02  0105               	movlb	5	; () banked
  8973  019E04  1902               	xorwf	(_Data_1+2)& (0+255),w,b
  8974  019E06  E109               	bnz	l21307
  8975  019E08  0105               	movlb	5	; () banked
  8976  019E0A  510F               	movf	(_Data_1+15)& (0+255),w,b
  8977  019E0C  0105               	movlb	5	; () banked
  8978  019E0E  1903               	xorwf	(_Data_1+3)& (0+255),w,b
  8979  019E10  A4D8               	btfss	status,2,c
  8980  019E12  D003               	goto	l21307
  8981                           
  8982                           ; BSR set to: 5
  8983                           ;RS485_COMMUNICATION.c: 70: {
  8984                           ;RS485_COMMUNICATION.c: 71: VFD_RS485_Data();
  8985  019E14  EC6B  F0D0         	call	_VFD_RS485_Data	;wreg free
  8986                           
  8987                           ;RS485_COMMUNICATION.c: 73: }
  8988  019E18  0012               	return	
  8989  019E1A                     l21307:
  8990                           
  8991                           ;RS485_COMMUNICATION.c: 74: else
  8992                           ;RS485_COMMUNICATION.c: 75: {
  8993                           ;RS485_COMMUNICATION.c: 76: Data_1[0] = 0; Data_1[1] = 0; Data_1[2] = 0; Data_1[3] = 0; 
      +                          Data_1[9] = 0;
  8994  019E1A  0E00               	movlw	0
  8995  019E1C  0105               	movlb	5	; () banked
  8996  019E1E  6F01               	movwf	(_Data_1+1)& (0+255),b
  8997  019E20  0E00               	movlw	0
  8998  019E22  6F00               	movwf	_Data_1& (0+255),b
  8999  019E24  0E00               	movlw	0
  9000  019E26  0105               	movlb	5	; () banked
  9001  019E28  6F03               	movwf	(_Data_1+3)& (0+255),b
  9002  019E2A  0E00               	movlw	0
  9003  019E2C  6F02               	movwf	(_Data_1+2)& (0+255),b
  9004  019E2E  0E00               	movlw	0
  9005  019E30  0105               	movlb	5	; () banked
  9006  019E32  6F05               	movwf	(_Data_1+5)& (0+255),b
  9007  019E34  0E00               	movlw	0
  9008  019E36  6F04               	movwf	(_Data_1+4)& (0+255),b
  9009  019E38  0E00               	movlw	0
  9010  019E3A  0105               	movlb	5	; () banked
  9011  019E3C  6F07               	movwf	(_Data_1+7)& (0+255),b
  9012  019E3E  0E00               	movlw	0
  9013  019E40  6F06               	movwf	(_Data_1+6)& (0+255),b
  9014  019E42  0E00               	movlw	0
  9015  019E44  0105               	movlb	5	; () banked
  9016  019E46  6F13               	movwf	(_Data_1+19)& (0+255),b
  9017  019E48  0E00               	movlw	0
  9018  019E4A  6F12               	movwf	(_Data_1+18)& (0+255),b
  9019                           
  9020                           ;RS485_COMMUNICATION.c: 77: Data_1[4] = 0; Data_1[5] = 0; Data_1[6] = 0; Data_1[7] = 0; 
      +                          Data_1[8] = 0;
  9021  019E4C  0E00               	movlw	0
  9022  019E4E  0105               	movlb	5	; () banked
  9023  019E50  6F09               	movwf	(_Data_1+9)& (0+255),b
  9024  019E52  0E00               	movlw	0
  9025  019E54  6F08               	movwf	(_Data_1+8)& (0+255),b
  9026  019E56  0E00               	movlw	0
  9027  019E58  0105               	movlb	5	; () banked
  9028  019E5A  6F0B               	movwf	(_Data_1+11)& (0+255),b
  9029  019E5C  0E00               	movlw	0
  9030  019E5E  6F0A               	movwf	(_Data_1+10)& (0+255),b
  9031  019E60  0E00               	movlw	0
  9032  019E62  0105               	movlb	5	; () banked
  9033  019E64  6F0D               	movwf	(_Data_1+13)& (0+255),b
  9034  019E66  0E00               	movlw	0
  9035  019E68  6F0C               	movwf	(_Data_1+12)& (0+255),b
  9036  019E6A  0E00               	movlw	0
  9037  019E6C  0105               	movlb	5	; () banked
  9038  019E6E  6F0F               	movwf	(_Data_1+15)& (0+255),b
  9039  019E70  0E00               	movlw	0
  9040  019E72  6F0E               	movwf	(_Data_1+14)& (0+255),b
  9041  019E74  0E00               	movlw	0
  9042  019E76  0105               	movlb	5	; () banked
  9043  019E78  6F11               	movwf	(_Data_1+17)& (0+255),b
  9044  019E7A  0E00               	movlw	0
  9045  019E7C  6F10               	movwf	(_Data_1+16)& (0+255),b
  9046  019E7E  0012               	return	
  9047  019E80                     __end_of_VFD_RS485_Data_filter:
  9048                           	opt stack 0
  9049                           tblptru	equ	0xFF8
  9050                           tblptrh	equ	0xFF7
  9051                           tblptrl	equ	0xFF6
  9052                           tablat	equ	0xFF5
  9053                           intcon	equ	0xFF2
  9054                           postinc0	equ	0xFEE
  9055                           wreg	equ	0xFE8
  9056                           postdec1	equ	0xFE5
  9057                           fsr1h	equ	0xFE2
  9058                           fsr1l	equ	0xFE1
  9059                           status	equ	0xFD8
  9060                           
  9061 ;; *************** function _VFD_RS485_Data *****************
  9062 ;; Defined at:
  9063 ;;		line 56 in file "RS485_COMMUNICATION.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;		None
  9066 ;; Auto vars:     Size  Location     Type
  9067 ;;		None
  9068 ;; Return value:  Size  Location     Type
  9069 ;;                  1    wreg      void 
  9070 ;; Registers used:
  9071 ;;		wreg, status,2, status,0, cstack
  9072 ;; Tracked objects:
  9073 ;;		On entry : 0/0
  9074 ;;		On exit  : 0/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9081 ;;Total ram usage:        2 bytes
  9082 ;; Hardware stack levels used:    1
  9083 ;; Hardware stack levels required when called:    5
  9084 ;; This function calls:
  9085 ;;		___ftdiv
  9086 ;;		___lwtoft
  9087 ;; This function is called by:
  9088 ;;		_Timer0_OneSecond_Function
  9089 ;;		_VFD_RS485_Data_filter
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           	psect	text16
  9094  01A0D6                     __ptext16:
  9095                           	opt stack 0
  9096  01A0D6                     _VFD_RS485_Data:
  9097                           	opt stack 23
  9098                           
  9099                           ;RS485_COMMUNICATION.c: 60: VFD_Frequency = Data_1[2];
  9100                           
  9101                           ;incstack = 0
  9102  01A0D6  C504  F1D4         	movff	_Data_1+4,_VFD_Frequency
  9103                           
  9104                           ;RS485_COMMUNICATION.c: 61: VFD_Bus_Voltage = Data_1[3] + (Data_1[4] * 256);
  9105  01A0DA  0105               	movlb	5	; () banked
  9106  01A0DC  5108               	movf	(_Data_1+8)& (0+255),w,b
  9107  01A0DE  0100               	movlb	0	; () banked
  9108  01A0E0  6FAB               	movwf	(??_VFD_RS485_Data+1)& (0+255),b
  9109  01A0E2  6BAA               	clrf	??_VFD_RS485_Data& (0+255),b
  9110  01A0E4  0105               	movlb	5	; () banked
  9111  01A0E6  5106               	movf	(_Data_1+6)& (0+255),w,b
  9112  01A0E8  0100               	movlb	0	; () banked
  9113  01A0EA  25AA               	addwf	??_VFD_RS485_Data& (0+255),w,b
  9114  01A0EC  0101               	movlb	1	; () banked
  9115  01A0EE  6F59               	movwf	_VFD_Bus_Voltage& (0+255),b
  9116  01A0F0  0105               	movlb	5	; () banked
  9117  01A0F2  5107               	movf	(_Data_1+7)& (0+255),w,b
  9118  01A0F4  0100               	movlb	0	; () banked
  9119  01A0F6  21AB               	addwfc	(??_VFD_RS485_Data+1)& (0+255),w,b
  9120  01A0F8  0101               	movlb	1	; () banked
  9121  01A0FA  6F5A               	movwf	(_VFD_Bus_Voltage+1)& (0+255),b
  9122                           
  9123                           ; BSR set to: 1
  9124                           ;RS485_COMMUNICATION.c: 62: DC_Bus_Current = Data_1[5];
  9125  01A0FC  C50A  F060         	movff	_Data_1+10,___lwtoft@c
  9126  01A100  C50B  F061         	movff	_Data_1+11,___lwtoft@c+1
  9127  01A104  EC84  F0D4         	call	___lwtoft	;wreg free
  9128  01A108  C060  F212         	movff	?___lwtoft,_DC_Bus_Current
  9129  01A10C  C061  F213         	movff	?___lwtoft+1,_DC_Bus_Current+1
  9130  01A110  C062  F214         	movff	?___lwtoft+2,_DC_Bus_Current+2
  9131                           
  9132                           ;RS485_COMMUNICATION.c: 63: DC_Bus_Current = DC_Bus_Current / 10;
  9133  01A114  C212  F09B         	movff	_DC_Bus_Current,___ftdiv@f1
  9134  01A118  C213  F09C         	movff	_DC_Bus_Current+1,___ftdiv@f1+1
  9135  01A11C  C214  F09D         	movff	_DC_Bus_Current+2,___ftdiv@f1+2
  9136  01A120  0E00               	movlw	0
  9137  01A122  0100               	movlb	0	; () banked
  9138  01A124  6F9E               	movwf	___ftdiv@f2& (0+255),b
  9139  01A126  0E20               	movlw	32
  9140  01A128  0100               	movlb	0	; () banked
  9141  01A12A  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
  9142  01A12C  0E41               	movlw	65
  9143  01A12E  0100               	movlb	0	; () banked
  9144  01A130  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
  9145  01A132  EC89  F0BF         	call	___ftdiv	;wreg free
  9146  01A136  C09B  F212         	movff	?___ftdiv,_DC_Bus_Current
  9147  01A13A  C09C  F213         	movff	?___ftdiv+1,_DC_Bus_Current+1
  9148  01A13E  C09D  F214         	movff	?___ftdiv+2,_DC_Bus_Current+2
  9149                           
  9150                           ;RS485_COMMUNICATION.c: 65: VFD_Error_No = Data_1[6];
  9151  01A142  C50C  F03E         	movff	_Data_1+12,_VFD_Error_No
  9152  01A146  0012               	return		;funcret
  9153  01A148                     __end_of_VFD_RS485_Data:
  9154                           	opt stack 0
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           intcon	equ	0xFF2
  9160                           postinc0	equ	0xFEE
  9161                           wreg	equ	0xFE8
  9162                           postdec1	equ	0xFE5
  9163                           fsr1h	equ	0xFE2
  9164                           fsr1l	equ	0xFE1
  9165                           status	equ	0xFD8
  9166                           
  9167 ;; *************** function _UART_Data *****************
  9168 ;; Defined at:
  9169 ;;		line 22 in file "UART.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;		None
  9172 ;; Auto vars:     Size  Location     Type
  9173 ;;		None
  9174 ;; Return value:  Size  Location     Type
  9175 ;;                  1    wreg      void 
  9176 ;; Registers used:
  9177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9178 ;; Tracked objects:
  9179 ;;		On entry : 0/0
  9180 ;;		On exit  : 0/0
  9181 ;;		Unchanged: 0/0
  9182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9187 ;;Total ram usage:        0 bytes
  9188 ;; Hardware stack levels used:    1
  9189 ;; Hardware stack levels required when called:    8
  9190 ;; This function calls:
  9191 ;;		_BCDtoI
  9192 ;;		_RTC_GetDateTime
  9193 ;;		_UART_Data_String
  9194 ;;		_printf
  9195 ;;		_usart_str
  9196 ;;		_usart_str_1
  9197 ;; This function is called by:
  9198 ;;		_Timer0_OneSecond_Function
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text17
  9203  010000                     __ptext17:
  9204                           	opt stack 0
  9205  010000                     _UART_Data:
  9206                           	opt stack 21
  9207                           
  9208                           ;UART.c: 24: if(Serial_No == 3)
  9209                           
  9210                           ;incstack = 0
  9211  010000  0E03               	movlw	3
  9212  010002  0101               	movlb	1	; () banked
  9213  010004  194B               	xorwf	_Serial_No& (0+255),w,b
  9214  010006  0101               	movlb	1	; () banked
  9215  010008  114C               	iorwf	(_Serial_No+1)& (0+255),w,b
  9216  01000A  B4D8               	btfsc	status,2,c
  9217                           
  9218                           ; BSR set to: 1
  9219                           ;UART.c: 25: {
  9220                           ;UART.c: 26: UART_Data_String();
  9221  01000C  ECCC  F098         	call	_UART_Data_String	;wreg free
  9222                           
  9223                           ;UART.c: 27: }
  9224                           ;UART.c: 29: printf("%u",Serial_No);
  9225  010010  0EF8               	movlw	low STR_1
  9226  010012  0100               	movlb	0	; () banked
  9227  010014  6FA7               	movwf	printf@f& (0+255),b
  9228  010016  0EFF               	movlw	high STR_1
  9229  010018  0100               	movlb	0	; () banked
  9230  01001A  6FA8               	movwf	(printf@f+1)& (0+255),b
  9231  01001C  C14B  F0A9         	movff	_Serial_No,?_printf+2
  9232  010020  C14C  F0AA         	movff	_Serial_No+1,?_printf+3
  9233  010024  EC9A  F086         	call	_printf	;wreg free
  9234                           
  9235                           ;UART.c: 30: usart_str_1(',');
  9236  010028  0E2C               	movlw	44
  9237  01002A  EC30  F0D5         	call	_usart_str_1
  9238                           
  9239                           ;UART.c: 32: printf("%s","RT01 Rv3 KAVANOOR");
  9240  01002E  0EF5               	movlw	low STR_2
  9241  010030  0100               	movlb	0	; () banked
  9242  010032  6FA7               	movwf	printf@f& (0+255),b
  9243  010034  0EFF               	movlw	high STR_2
  9244  010036  0100               	movlb	0	; () banked
  9245  010038  6FA8               	movwf	(printf@f+1)& (0+255),b
  9246  01003A  0EAB               	movlw	low STR_3
  9247  01003C  0100               	movlb	0	; () banked
  9248  01003E  6FA9               	movwf	(?_printf+2)& (0+255),b
  9249  010040  0EFC               	movlw	high STR_3
  9250  010042  0100               	movlb	0	; () banked
  9251  010044  6FAA               	movwf	(?_printf+3)& (0+255),b
  9252  010046  EC9A  F086         	call	_printf	;wreg free
  9253                           
  9254                           ;UART.c: 33: usart_str_1(',');
  9255  01004A  0E2C               	movlw	44
  9256  01004C  EC30  F0D5         	call	_usart_str_1
  9257                           
  9258                           ;UART.c: 35: printf("%4.02f",Wind_Speed);
  9259  010050  0EC6               	movlw	low STR_4
  9260  010052  0100               	movlb	0	; () banked
  9261  010054  6FA7               	movwf	printf@f& (0+255),b
  9262  010056  0EFF               	movlw	high STR_4
  9263  010058  0100               	movlb	0	; () banked
  9264  01005A  6FA8               	movwf	(printf@f+1)& (0+255),b
  9265  01005C  C236  F0A9         	movff	_Wind_Speed,?_printf+2
  9266  010060  C237  F0AA         	movff	_Wind_Speed+1,?_printf+3
  9267  010064  C238  F0AB         	movff	_Wind_Speed+2,?_printf+4
  9268  010068  EC9A  F086         	call	_printf	;wreg free
  9269                           
  9270                           ;UART.c: 36: usart_str_1(',');
  9271  01006C  0E2C               	movlw	44
  9272  01006E  EC30  F0D5         	call	_usart_str_1
  9273                           
  9274                           ;UART.c: 38: printf("%4.02f",Wind_Speed_Avg);
  9275  010072  0EC6               	movlw	low STR_4
  9276  010074  0100               	movlb	0	; () banked
  9277  010076  6FA7               	movwf	printf@f& (0+255),b
  9278  010078  0EFF               	movlw	high STR_4
  9279  01007A  0100               	movlb	0	; () banked
  9280  01007C  6FA8               	movwf	(printf@f+1)& (0+255),b
  9281  01007E  C0D2  F0A9         	movff	_Wind_Speed_Avg,?_printf+2
  9282  010082  C0D3  F0AA         	movff	_Wind_Speed_Avg+1,?_printf+3
  9283  010086  C0D4  F0AB         	movff	_Wind_Speed_Avg+2,?_printf+4
  9284  01008A  EC9A  F086         	call	_printf	;wreg free
  9285                           
  9286                           ;UART.c: 39: usart_str_1(',');
  9287  01008E  0E2C               	movlw	44
  9288  010090  EC30  F0D5         	call	_usart_str_1
  9289                           
  9290                           ;UART.c: 41: printf("%4.02f",Wind_Speed_2);
  9291  010094  0EC6               	movlw	low STR_4
  9292  010096  0100               	movlb	0	; () banked
  9293  010098  6FA7               	movwf	printf@f& (0+255),b
  9294  01009A  0EFF               	movlw	high STR_4
  9295  01009C  0100               	movlb	0	; () banked
  9296  01009E  6FA8               	movwf	(printf@f+1)& (0+255),b
  9297  0100A0  C245  F0A9         	movff	_Wind_Speed_2,?_printf+2
  9298  0100A4  C246  F0AA         	movff	_Wind_Speed_2+1,?_printf+3
  9299  0100A8  C247  F0AB         	movff	_Wind_Speed_2+2,?_printf+4
  9300  0100AC  EC9A  F086         	call	_printf	;wreg free
  9301                           
  9302                           ;UART.c: 42: usart_str_1(',');
  9303  0100B0  0E2C               	movlw	44
  9304  0100B2  EC30  F0D5         	call	_usart_str_1
  9305                           
  9306                           ;UART.c: 44: printf("%4.02f",Wind_Speed_Avg_2);
  9307  0100B6  0EC6               	movlw	low STR_4
  9308  0100B8  0100               	movlb	0	; () banked
  9309  0100BA  6FA7               	movwf	printf@f& (0+255),b
  9310  0100BC  0EFF               	movlw	high STR_4
  9311  0100BE  0100               	movlb	0	; () banked
  9312  0100C0  6FA8               	movwf	(printf@f+1)& (0+255),b
  9313  0100C2  C4BA  F0A9         	movff	_Wind_Speed_Avg_2,?_printf+2
  9314  0100C6  C4BB  F0AA         	movff	_Wind_Speed_Avg_2+1,?_printf+3
  9315  0100CA  C4BC  F0AB         	movff	_Wind_Speed_Avg_2+2,?_printf+4
  9316  0100CE  EC9A  F086         	call	_printf	;wreg free
  9317                           
  9318                           ;UART.c: 45: usart_str_1(',');
  9319  0100D2  0E2C               	movlw	44
  9320  0100D4  EC30  F0D5         	call	_usart_str_1
  9321                           
  9322                           ;UART.c: 47: printf("%4.02f",Turbine_RPM);
  9323  0100D8  0EC6               	movlw	low STR_4
  9324  0100DA  0100               	movlb	0	; () banked
  9325  0100DC  6FA7               	movwf	printf@f& (0+255),b
  9326  0100DE  0EFF               	movlw	high STR_4
  9327  0100E0  0100               	movlb	0	; () banked
  9328  0100E2  6FA8               	movwf	(printf@f+1)& (0+255),b
  9329  0100E4  C02D  F0A9         	movff	_Turbine_RPM,?_printf+2
  9330  0100E8  C02E  F0AA         	movff	_Turbine_RPM+1,?_printf+3
  9331  0100EC  C02F  F0AB         	movff	_Turbine_RPM+2,?_printf+4
  9332  0100F0  EC9A  F086         	call	_printf	;wreg free
  9333                           
  9334                           ;UART.c: 48: usart_str_1(',');
  9335  0100F4  0E2C               	movlw	44
  9336  0100F6  EC30  F0D5         	call	_usart_str_1
  9337                           
  9338                           ;UART.c: 50: printf("%d",Generator_RPM_INT);
  9339  0100FA  0EF2               	movlw	low STR_9
  9340  0100FC  0100               	movlb	0	; () banked
  9341  0100FE  6FA7               	movwf	printf@f& (0+255),b
  9342  010100  0EFF               	movlw	high STR_9
  9343  010102  0100               	movlb	0	; () banked
  9344  010104  6FA8               	movwf	(printf@f+1)& (0+255),b
  9345  010106  C28E  F0A9         	movff	_Generator_RPM_INT,?_printf+2
  9346  01010A  C28F  F0AA         	movff	_Generator_RPM_INT+1,?_printf+3
  9347  01010E  EC9A  F086         	call	_printf	;wreg free
  9348                           
  9349                           ;UART.c: 51: usart_str_1(',');
  9350  010112  0E2C               	movlw	44
  9351  010114  EC30  F0D5         	call	_usart_str_1
  9352                           
  9353                           ;UART.c: 53: printf("%4.02f",Motor_slip);
  9354  010118  0EC6               	movlw	low STR_4
  9355  01011A  0100               	movlb	0	; () banked
  9356  01011C  6FA7               	movwf	printf@f& (0+255),b
  9357  01011E  0EFF               	movlw	high STR_4
  9358  010120  0100               	movlb	0	; () banked
  9359  010122  6FA8               	movwf	(printf@f+1)& (0+255),b
  9360  010124  C112  F0A9         	movff	_Motor_slip,?_printf+2
  9361  010128  C113  F0AA         	movff	_Motor_slip+1,?_printf+3
  9362  01012C  C114  F0AB         	movff	_Motor_slip+2,?_printf+4
  9363  010130  EC9A  F086         	call	_printf	;wreg free
  9364                           
  9365                           ;UART.c: 54: usart_str_1(',');
  9366  010134  0E2C               	movlw	44
  9367  010136  EC30  F0D5         	call	_usart_str_1
  9368                           
  9369                           ;UART.c: 56: printf("%4.02f",Rotor_slip);
  9370  01013A  0EC6               	movlw	low STR_4
  9371  01013C  0100               	movlb	0	; () banked
  9372  01013E  6FA7               	movwf	printf@f& (0+255),b
  9373  010140  0EFF               	movlw	high STR_4
  9374  010142  0100               	movlb	0	; () banked
  9375  010144  6FA8               	movwf	(printf@f+1)& (0+255),b
  9376  010146  C124  F0A9         	movff	_Rotor_slip,?_printf+2
  9377  01014A  C125  F0AA         	movff	_Rotor_slip+1,?_printf+3
  9378  01014E  C126  F0AB         	movff	_Rotor_slip+2,?_printf+4
  9379  010152  EC9A  F086         	call	_printf	;wreg free
  9380                           
  9381                           ;UART.c: 57: usart_str_1(',');
  9382  010156  0E2C               	movlw	44
  9383  010158  EC30  F0D5         	call	_usart_str_1
  9384                           
  9385                           ;UART.c: 59: printf("%d",Desired_Frequency);
  9386  01015C  0EF2               	movlw	low STR_9
  9387  01015E  0100               	movlb	0	; () banked
  9388  010160  6FA7               	movwf	printf@f& (0+255),b
  9389  010162  0EFF               	movlw	high STR_9
  9390  010164  0100               	movlb	0	; () banked
  9391  010166  6FA8               	movwf	(printf@f+1)& (0+255),b
  9392  010168  C0D5  F0A9         	movff	_Desired_Frequency,?_printf+2
  9393  01016C  0100               	movlb	0	; () banked
  9394  01016E  6BAA               	clrf	(?_printf+3)& (0+255),b
  9395  010170  EC9A  F086         	call	_printf	;wreg free
  9396                           
  9397                           ;UART.c: 60: usart_str_1(',');
  9398  010174  0E2C               	movlw	44
  9399  010176  EC30  F0D5         	call	_usart_str_1
  9400                           
  9401                           ;UART.c: 62: printf("%d",VFD_Bus_Voltage);
  9402  01017A  0EF2               	movlw	low STR_9
  9403  01017C  0100               	movlb	0	; () banked
  9404  01017E  6FA7               	movwf	printf@f& (0+255),b
  9405  010180  0EFF               	movlw	high STR_9
  9406  010182  0100               	movlb	0	; () banked
  9407  010184  6FA8               	movwf	(printf@f+1)& (0+255),b
  9408  010186  C159  F0A9         	movff	_VFD_Bus_Voltage,?_printf+2
  9409  01018A  C15A  F0AA         	movff	_VFD_Bus_Voltage+1,?_printf+3
  9410  01018E  EC9A  F086         	call	_printf	;wreg free
  9411                           
  9412                           ;UART.c: 63: usart_str_1(',');
  9413  010192  0E2C               	movlw	44
  9414  010194  EC30  F0D5         	call	_usart_str_1
  9415                           
  9416                           ;UART.c: 65: printf("%4.01f",DC_Bus_Current);
  9417  010198  0EBF               	movlw	low STR_14
  9418  01019A  0100               	movlb	0	; () banked
  9419  01019C  6FA7               	movwf	printf@f& (0+255),b
  9420  01019E  0EFF               	movlw	high STR_14
  9421  0101A0  0100               	movlb	0	; () banked
  9422  0101A2  6FA8               	movwf	(printf@f+1)& (0+255),b
  9423  0101A4  C212  F0A9         	movff	_DC_Bus_Current,?_printf+2
  9424  0101A8  C213  F0AA         	movff	_DC_Bus_Current+1,?_printf+3
  9425  0101AC  C214  F0AB         	movff	_DC_Bus_Current+2,?_printf+4
  9426  0101B0  EC9A  F086         	call	_printf	;wreg free
  9427                           
  9428                           ;UART.c: 66: usart_str_1(',');
  9429  0101B4  0E2C               	movlw	44
  9430  0101B6  EC30  F0D5         	call	_usart_str_1
  9431                           
  9432                           ;UART.c: 68: printf("%4.0f",R_Volt);
  9433  0101BA  0ED4               	movlw	low STR_15
  9434  0101BC  0100               	movlb	0	; () banked
  9435  0101BE  6FA7               	movwf	printf@f& (0+255),b
  9436  0101C0  0EFF               	movlw	high STR_15
  9437  0101C2  0100               	movlb	0	; () banked
  9438  0101C4  6FA8               	movwf	(printf@f+1)& (0+255),b
  9439  0101C6  C02A  F0A9         	movff	_R_Volt,?_printf+2
  9440  0101CA  C02B  F0AA         	movff	_R_Volt+1,?_printf+3
  9441  0101CE  C02C  F0AB         	movff	_R_Volt+2,?_printf+4
  9442  0101D2  EC9A  F086         	call	_printf	;wreg free
  9443                           
  9444                           ;UART.c: 69: usart_str_1(',');
  9445  0101D6  0E2C               	movlw	44
  9446  0101D8  EC30  F0D5         	call	_usart_str_1
  9447                           
  9448                           ;UART.c: 71: printf("%4.0f",Y_Volt);
  9449  0101DC  0ED4               	movlw	low STR_15
  9450  0101DE  0100               	movlb	0	; () banked
  9451  0101E0  6FA7               	movwf	printf@f& (0+255),b
  9452  0101E2  0EFF               	movlw	high STR_15
  9453  0101E4  0100               	movlb	0	; () banked
  9454  0101E6  6FA8               	movwf	(printf@f+1)& (0+255),b
  9455  0101E8  C030  F0A9         	movff	_Y_Volt,?_printf+2
  9456  0101EC  C031  F0AA         	movff	_Y_Volt+1,?_printf+3
  9457  0101F0  C032  F0AB         	movff	_Y_Volt+2,?_printf+4
  9458  0101F4  EC9A  F086         	call	_printf	;wreg free
  9459                           
  9460                           ;UART.c: 72: usart_str_1(',');
  9461  0101F8  0E2C               	movlw	44
  9462  0101FA  EC30  F0D5         	call	_usart_str_1
  9463                           
  9464                           ;UART.c: 74: printf("%4.0f",B_Volt);
  9465  0101FE  0ED4               	movlw	low STR_15
  9466  010200  0100               	movlb	0	; () banked
  9467  010202  6FA7               	movwf	printf@f& (0+255),b
  9468  010204  0EFF               	movlw	high STR_15
  9469  010206  0100               	movlb	0	; () banked
  9470  010208  6FA8               	movwf	(printf@f+1)& (0+255),b
  9471  01020A  C027  F0A9         	movff	_B_Volt,?_printf+2
  9472  01020E  C028  F0AA         	movff	_B_Volt+1,?_printf+3
  9473  010212  C029  F0AB         	movff	_B_Volt+2,?_printf+4
  9474  010216  EC9A  F086         	call	_printf	;wreg free
  9475                           
  9476                           ;UART.c: 75: usart_str_1(',');
  9477  01021A  0E2C               	movlw	44
  9478  01021C  EC30  F0D5         	call	_usart_str_1
  9479                           
  9480                           ;UART.c: 77: printf("%4.01f",R_Curr);
  9481  010220  0EBF               	movlw	low STR_14
  9482  010222  0100               	movlb	0	; () banked
  9483  010224  6FA7               	movwf	printf@f& (0+255),b
  9484  010226  0EFF               	movlw	high STR_14
  9485  010228  0100               	movlb	0	; () banked
  9486  01022A  6FA8               	movwf	(printf@f+1)& (0+255),b
  9487  01022C  C118  F0A9         	movff	_R_Curr,?_printf+2
  9488  010230  C119  F0AA         	movff	_R_Curr+1,?_printf+3
  9489  010234  C11A  F0AB         	movff	_R_Curr+2,?_printf+4
  9490  010238  EC9A  F086         	call	_printf	;wreg free
  9491                           
  9492                           ;UART.c: 78: usart_str_1(',');
  9493  01023C  0E2C               	movlw	44
  9494  01023E  EC30  F0D5         	call	_usart_str_1
  9495                           
  9496                           ;UART.c: 80: printf("%4.01f",Y_Curr);
  9497  010242  0EBF               	movlw	low STR_14
  9498  010244  0100               	movlb	0	; () banked
  9499  010246  6FA7               	movwf	printf@f& (0+255),b
  9500  010248  0EFF               	movlw	high STR_14
  9501  01024A  0100               	movlb	0	; () banked
  9502  01024C  6FA8               	movwf	(printf@f+1)& (0+255),b
  9503  01024E  C12D  F0A9         	movff	_Y_Curr,?_printf+2
  9504  010252  C12E  F0AA         	movff	_Y_Curr+1,?_printf+3
  9505  010256  C12F  F0AB         	movff	_Y_Curr+2,?_printf+4
  9506  01025A  EC9A  F086         	call	_printf	;wreg free
  9507                           
  9508                           ;UART.c: 81: usart_str_1(',');
  9509  01025E  0E2C               	movlw	44
  9510  010260  EC30  F0D5         	call	_usart_str_1
  9511                           
  9512                           ;UART.c: 83: printf("%4.01f",B_Curr);
  9513  010264  0EBF               	movlw	low STR_14
  9514  010266  0100               	movlb	0	; () banked
  9515  010268  6FA7               	movwf	printf@f& (0+255),b
  9516  01026A  0EFF               	movlw	high STR_14
  9517  01026C  0100               	movlb	0	; () banked
  9518  01026E  6FA8               	movwf	(printf@f+1)& (0+255),b
  9519  010270  C103  F0A9         	movff	_B_Curr,?_printf+2
  9520  010274  C104  F0AA         	movff	_B_Curr+1,?_printf+3
  9521  010278  C105  F0AB         	movff	_B_Curr+2,?_printf+4
  9522  01027C  EC9A  F086         	call	_printf	;wreg free
  9523                           
  9524                           ;UART.c: 84: usart_str_1(',');
  9525  010280  0E2C               	movlw	44
  9526  010282  EC30  F0D5         	call	_usart_str_1
  9527                           
  9528                           ;UART.c: 86: printf("%4.02f",KW);
  9529  010286  0EC6               	movlw	low STR_4
  9530  010288  0100               	movlb	0	; () banked
  9531  01028A  6FA7               	movwf	printf@f& (0+255),b
  9532  01028C  0EFF               	movlw	high STR_4
  9533  01028E  0100               	movlb	0	; () banked
  9534  010290  6FA8               	movwf	(printf@f+1)& (0+255),b
  9535  010292  C040  F0A9         	movff	_KW,?_printf+2
  9536  010296  C041  F0AA         	movff	_KW+1,?_printf+3
  9537  01029A  C042  F0AB         	movff	_KW+2,?_printf+4
  9538  01029E  EC9A  F086         	call	_printf	;wreg free
  9539                           
  9540                           ;UART.c: 87: usart_str_1(',');
  9541  0102A2  0E2C               	movlw	44
  9542  0102A4  EC30  F0D5         	call	_usart_str_1
  9543                           
  9544                           ;UART.c: 89: printf("%4.02f",Y_KW);
  9545  0102A8  0EC6               	movlw	low STR_4
  9546  0102AA  0100               	movlb	0	; () banked
  9547  0102AC  6FA7               	movwf	printf@f& (0+255),b
  9548  0102AE  0EFF               	movlw	high STR_4
  9549  0102B0  0100               	movlb	0	; () banked
  9550  0102B2  6FA8               	movwf	(printf@f+1)& (0+255),b
  9551  0102B4  C2F1  F0A9         	movff	_Y_KW,?_printf+2
  9552  0102B8  C2F2  F0AA         	movff	_Y_KW+1,?_printf+3
  9553  0102BC  C2F3  F0AB         	movff	_Y_KW+2,?_printf+4
  9554  0102C0  EC9A  F086         	call	_printf	;wreg free
  9555                           
  9556                           ;UART.c: 90: usart_str_1(',');
  9557  0102C4  0E2C               	movlw	44
  9558  0102C6  EC30  F0D5         	call	_usart_str_1
  9559                           
  9560                           ;UART.c: 92: printf("%4.02f",KVA);
  9561  0102CA  0EC6               	movlw	low STR_4
  9562  0102CC  0100               	movlb	0	; () banked
  9563  0102CE  6FA7               	movwf	printf@f& (0+255),b
  9564  0102D0  0EFF               	movlw	high STR_4
  9565  0102D2  0100               	movlb	0	; () banked
  9566  0102D4  6FA8               	movwf	(printf@f+1)& (0+255),b
  9567  0102D6  C21B  F0A9         	movff	_KVA,?_printf+2
  9568  0102DA  C21C  F0AA         	movff	_KVA+1,?_printf+3
  9569  0102DE  C21D  F0AB         	movff	_KVA+2,?_printf+4
  9570  0102E2  EC9A  F086         	call	_printf	;wreg free
  9571                           
  9572                           ;UART.c: 93: usart_str_1(',');
  9573  0102E6  0E2C               	movlw	44
  9574  0102E8  EC30  F0D5         	call	_usart_str_1
  9575                           
  9576                           ;UART.c: 95: printf("%4.02f",KVAr);
  9577  0102EC  0EC6               	movlw	low STR_4
  9578  0102EE  0100               	movlb	0	; () banked
  9579  0102F0  6FA7               	movwf	printf@f& (0+255),b
  9580  0102F2  0EFF               	movlw	high STR_4
  9581  0102F4  0100               	movlb	0	; () banked
  9582  0102F6  6FA8               	movwf	(printf@f+1)& (0+255),b
  9583  0102F8  C490  F0A9         	movff	_KVAr,?_printf+2
  9584  0102FC  C491  F0AA         	movff	_KVAr+1,?_printf+3
  9585  010300  C492  F0AB         	movff	_KVAr+2,?_printf+4
  9586  010304  EC9A  F086         	call	_printf	;wreg free
  9587                           
  9588                           ;UART.c: 96: usart_str_1(',');
  9589  010308  0E2C               	movlw	44
  9590  01030A  EC30  F0D5         	call	_usart_str_1
  9591                           
  9592                           ;UART.c: 98: printf("%4.02f",Total_Power_Factor);
  9593  01030E  0EC6               	movlw	low STR_4
  9594  010310  0100               	movlb	0	; () banked
  9595  010312  6FA7               	movwf	printf@f& (0+255),b
  9596  010314  0EFF               	movlw	high STR_4
  9597  010316  0100               	movlb	0	; () banked
  9598  010318  6FA8               	movwf	(printf@f+1)& (0+255),b
  9599  01031A  C22D  F0A9         	movff	_Total_Power_Factor,?_printf+2
  9600  01031E  C22E  F0AA         	movff	_Total_Power_Factor+1,?_printf+3
  9601  010322  C22F  F0AB         	movff	_Total_Power_Factor+2,?_printf+4
  9602  010326  EC9A  F086         	call	_printf	;wreg free
  9603                           
  9604                           ;UART.c: 99: usart_str_1(',');
  9605  01032A  0E2C               	movlw	44
  9606  01032C  EC30  F0D5         	call	_usart_str_1
  9607                           
  9608                           ;UART.c: 101: printf("%4.02f",Y_Power_Factor);
  9609  010330  0EC6               	movlw	low STR_4
  9610  010332  0100               	movlb	0	; () banked
  9611  010334  6FA7               	movwf	printf@f& (0+255),b
  9612  010336  0EFF               	movlw	high STR_4
  9613  010338  0100               	movlb	0	; () banked
  9614  01033A  6FA8               	movwf	(printf@f+1)& (0+255),b
  9615  01033C  C275  F0A9         	movff	_Y_Power_Factor,?_printf+2
  9616  010340  C276  F0AA         	movff	_Y_Power_Factor+1,?_printf+3
  9617  010344  C277  F0AB         	movff	_Y_Power_Factor+2,?_printf+4
  9618  010348  EC9A  F086         	call	_printf	;wreg free
  9619                           
  9620                           ;UART.c: 102: usart_str_1(',');
  9621  01034C  0E2C               	movlw	44
  9622  01034E  EC30  F0D5         	call	_usart_str_1
  9623                           
  9624                           ;UART.c: 104: printf("%4.02f",Frequency);
  9625  010352  0EC6               	movlw	low STR_4
  9626  010354  0100               	movlb	0	; () banked
  9627  010356  6FA7               	movwf	printf@f& (0+255),b
  9628  010358  0EFF               	movlw	high STR_4
  9629  01035A  0100               	movlb	0	; () banked
  9630  01035C  6FA8               	movwf	(printf@f+1)& (0+255),b
  9631  01035E  C109  F0A9         	movff	_Frequency,?_printf+2
  9632  010362  C10A  F0AA         	movff	_Frequency+1,?_printf+3
  9633  010366  C10B  F0AB         	movff	_Frequency+2,?_printf+4
  9634  01036A  EC9A  F086         	call	_printf	;wreg free
  9635                           
  9636                           ;UART.c: 105: usart_str_1(',');
  9637  01036E  0E2C               	movlw	44
  9638  010370  EC30  F0D5         	call	_usart_str_1
  9639                           
  9640                           ;UART.c: 107: printf("%d",Phase_Sequence_Ok);
  9641  010374  0EF2               	movlw	low STR_9
  9642  010376  0100               	movlb	0	; () banked
  9643  010378  6FA7               	movwf	printf@f& (0+255),b
  9644  01037A  0EFF               	movlw	high STR_9
  9645  01037C  0100               	movlb	0	; () banked
  9646  01037E  6FA8               	movwf	(printf@f+1)& (0+255),b
  9647  010380  C03C  F0A9         	movff	_Phase_Sequence_Ok,?_printf+2
  9648  010384  0100               	movlb	0	; () banked
  9649  010386  6BAA               	clrf	(?_printf+3)& (0+255),b
  9650  010388  EC9A  F086         	call	_printf	;wreg free
  9651                           
  9652                           ;UART.c: 108: usart_str_1(',');
  9653  01038C  0E2C               	movlw	44
  9654  01038E  EC30  F0D5         	call	_usart_str_1
  9655                           
  9656                           ;UART.c: 110: printf("%d",VFD_Error_No);
  9657  010392  0EF2               	movlw	low STR_9
  9658  010394  0100               	movlb	0	; () banked
  9659  010396  6FA7               	movwf	printf@f& (0+255),b
  9660  010398  0EFF               	movlw	high STR_9
  9661  01039A  0100               	movlb	0	; () banked
  9662  01039C  6FA8               	movwf	(printf@f+1)& (0+255),b
  9663  01039E  C03E  F0A9         	movff	_VFD_Error_No,?_printf+2
  9664  0103A2  0100               	movlb	0	; () banked
  9665  0103A4  6BAA               	clrf	(?_printf+3)& (0+255),b
  9666  0103A6  EC9A  F086         	call	_printf	;wreg free
  9667                           
  9668                           ;UART.c: 111: usart_str_1(',');
  9669  0103AA  0E2C               	movlw	44
  9670  0103AC  EC30  F0D5         	call	_usart_str_1
  9671                           
  9672                           ;UART.c: 113: printf("%d",Initial_Delay_Second);
  9673  0103B0  0EF2               	movlw	low STR_9
  9674  0103B2  0100               	movlb	0	; () banked
  9675  0103B4  6FA7               	movwf	printf@f& (0+255),b
  9676  0103B6  0EFF               	movlw	high STR_9
  9677  0103B8  0100               	movlb	0	; () banked
  9678  0103BA  6FA8               	movwf	(printf@f+1)& (0+255),b
  9679  0103BC  C145  F0A9         	movff	_Initial_Delay_Second,?_printf+2
  9680  0103C0  C146  F0AA         	movff	_Initial_Delay_Second+1,?_printf+3
  9681  0103C4  EC9A  F086         	call	_printf	;wreg free
  9682                           
  9683                           ;UART.c: 114: usart_str_1(',');
  9684  0103C8  0E2C               	movlw	44
  9685  0103CA  EC30  F0D5         	call	_usart_str_1
  9686                           
  9687                           ;UART.c: 116: printf("%d",Errors);
  9688  0103CE  0EF2               	movlw	low STR_9
  9689  0103D0  0100               	movlb	0	; () banked
  9690  0103D2  6FA7               	movwf	printf@f& (0+255),b
  9691  0103D4  0EFF               	movlw	high STR_9
  9692  0103D6  0100               	movlb	0	; () banked
  9693  0103D8  6FA8               	movwf	(printf@f+1)& (0+255),b
  9694  0103DA  C03A  F0A9         	movff	_Errors,?_printf+2
  9695  0103DE  0100               	movlb	0	; () banked
  9696  0103E0  6BAA               	clrf	(?_printf+3)& (0+255),b
  9697  0103E2  EC9A  F086         	call	_printf	;wreg free
  9698                           
  9699                           ;UART.c: 117: usart_str_1(',');
  9700  0103E6  0E2C               	movlw	44
  9701  0103E8  EC30  F0D5         	call	_usart_str_1
  9702                           
  9703                           ;UART.c: 119: switch(Errors)
  9704  0103EC  D1D4               	goto	l21143
  9705  0103EE                     l21037:
  9706                           
  9707                           ;UART.c: 122: printf("%s","NO_ERROR");
  9708  0103EE  0EF5               	movlw	low STR_2
  9709  0103F0  0100               	movlb	0	; () banked
  9710  0103F2  6FA7               	movwf	printf@f& (0+255),b
  9711  0103F4  0EFF               	movlw	high STR_2
  9712  0103F6  0100               	movlb	0	; () banked
  9713  0103F8  6FA8               	movwf	(printf@f+1)& (0+255),b
  9714  0103FA  0E55               	movlw	low STR_33
  9715  0103FC  0100               	movlb	0	; () banked
  9716  0103FE  6FA9               	movwf	(?_printf+2)& (0+255),b
  9717  010400  0EFF               	movlw	high STR_33
  9718  010402  0100               	movlb	0	; () banked
  9719  010404  6FAA               	movwf	(?_printf+3)& (0+255),b
  9720  010406  EC9A  F086         	call	_printf	;wreg free
  9721                           
  9722                           ;UART.c: 123: usart_str_1(',');
  9723  01040A  0E2C               	movlw	44
  9724  01040C  EC30  F0D5         	call	_usart_str_1
  9725                           
  9726                           ;UART.c: 124: break;
  9727  010410  D25A               	goto	l21163
  9728  010412                     l21041:
  9729                           
  9730                           ;UART.c: 127: printf("%s","WS_MIN_MAX");
  9731  010412  0EF5               	movlw	low STR_2
  9732  010414  0100               	movlb	0	; () banked
  9733  010416  6FA7               	movwf	printf@f& (0+255),b
  9734  010418  0EFF               	movlw	high STR_2
  9735  01041A  0100               	movlb	0	; () banked
  9736  01041C  6FA8               	movwf	(printf@f+1)& (0+255),b
  9737  01041E  0EA4               	movlw	low STR_35
  9738  010420  0100               	movlb	0	; () banked
  9739  010422  6FA9               	movwf	(?_printf+2)& (0+255),b
  9740  010424  0EFE               	movlw	high STR_35
  9741  010426  0100               	movlb	0	; () banked
  9742  010428  6FAA               	movwf	(?_printf+3)& (0+255),b
  9743  01042A  EC9A  F086         	call	_printf	;wreg free
  9744                           
  9745                           ;UART.c: 128: usart_str_1(',');
  9746  01042E  0E2C               	movlw	44
  9747  010430  EC30  F0D5         	call	_usart_str_1
  9748                           
  9749                           ;UART.c: 129: break;
  9750  010434  D248               	goto	l21163
  9751  010436                     l21045:
  9752                           
  9753                           ;UART.c: 132: printf("%s","VOLT_HIGH");
  9754  010436  0EF5               	movlw	low STR_2
  9755  010438  0100               	movlb	0	; () banked
  9756  01043A  6FA7               	movwf	printf@f& (0+255),b
  9757  01043C  0EFF               	movlw	high STR_2
  9758  01043E  0100               	movlb	0	; () banked
  9759  010440  6FA8               	movwf	(printf@f+1)& (0+255),b
  9760  010442  0EAF               	movlw	low STR_37
  9761  010444  0100               	movlb	0	; () banked
  9762  010446  6FA9               	movwf	(?_printf+2)& (0+255),b
  9763  010448  0EFE               	movlw	high STR_37
  9764  01044A  0100               	movlb	0	; () banked
  9765  01044C  6FAA               	movwf	(?_printf+3)& (0+255),b
  9766  01044E  EC9A  F086         	call	_printf	;wreg free
  9767                           
  9768                           ;UART.c: 133: usart_str_1(',');
  9769  010452  0E2C               	movlw	44
  9770  010454  EC30  F0D5         	call	_usart_str_1
  9771                           
  9772                           ;UART.c: 134: break;
  9773  010458  D236               	goto	l21163
  9774  01045A                     l21049:
  9775                           
  9776                           ;UART.c: 137: printf("%s","VOLT_LOW");
  9777  01045A  0EF5               	movlw	low STR_2
  9778  01045C  0100               	movlb	0	; () banked
  9779  01045E  6FA7               	movwf	printf@f& (0+255),b
  9780  010460  0EFF               	movlw	high STR_2
  9781  010462  0100               	movlb	0	; () banked
  9782  010464  6FA8               	movwf	(printf@f+1)& (0+255),b
  9783  010466  0E5E               	movlw	low STR_39
  9784  010468  0100               	movlb	0	; () banked
  9785  01046A  6FA9               	movwf	(?_printf+2)& (0+255),b
  9786  01046C  0EFF               	movlw	high STR_39
  9787  01046E  0100               	movlb	0	; () banked
  9788  010470  6FAA               	movwf	(?_printf+3)& (0+255),b
  9789  010472  EC9A  F086         	call	_printf	;wreg free
  9790                           
  9791                           ;UART.c: 138: usart_str_1(',');
  9792  010476  0E2C               	movlw	44
  9793  010478  EC30  F0D5         	call	_usart_str_1
  9794                           
  9795                           ;UART.c: 139: break;
  9796  01047C  D224               	goto	l21163
  9797  01047E                     l21053:
  9798                           
  9799                           ;UART.c: 142: printf("%s","VFD_SHORT_CIRCUIT");
  9800  01047E  0EF5               	movlw	low STR_2
  9801  010480  0100               	movlb	0	; () banked
  9802  010482  6FA7               	movwf	printf@f& (0+255),b
  9803  010484  0EFF               	movlw	high STR_2
  9804  010486  0100               	movlb	0	; () banked
  9805  010488  6FA8               	movwf	(printf@f+1)& (0+255),b
  9806  01048A  0ECF               	movlw	low STR_41
  9807  01048C  0100               	movlb	0	; () banked
  9808  01048E  6FA9               	movwf	(?_printf+2)& (0+255),b
  9809  010490  0EFC               	movlw	high STR_41
  9810  010492  0100               	movlb	0	; () banked
  9811  010494  6FAA               	movwf	(?_printf+3)& (0+255),b
  9812  010496  EC9A  F086         	call	_printf	;wreg free
  9813                           
  9814                           ;UART.c: 143: usart_str_1(',');
  9815  01049A  0E2C               	movlw	44
  9816  01049C  EC30  F0D5         	call	_usart_str_1
  9817                           
  9818                           ;UART.c: 144: break;
  9819  0104A0  D212               	goto	l21163
  9820  0104A2                     l21057:
  9821                           
  9822                           ;UART.c: 147: printf("%s","PHASE_SEQ");
  9823  0104A2  0EF5               	movlw	low STR_2
  9824  0104A4  0100               	movlb	0	; () banked
  9825  0104A6  6FA7               	movwf	printf@f& (0+255),b
  9826  0104A8  0EFF               	movlw	high STR_2
  9827  0104AA  0100               	movlb	0	; () banked
  9828  0104AC  6FA8               	movwf	(printf@f+1)& (0+255),b
  9829  0104AE  0ED7               	movlw	low STR_43
  9830  0104B0  0100               	movlb	0	; () banked
  9831  0104B2  6FA9               	movwf	(?_printf+2)& (0+255),b
  9832  0104B4  0EFE               	movlw	high STR_43
  9833  0104B6  0100               	movlb	0	; () banked
  9834  0104B8  6FAA               	movwf	(?_printf+3)& (0+255),b
  9835  0104BA  EC9A  F086         	call	_printf	;wreg free
  9836                           
  9837                           ;UART.c: 148: usart_str_1(',');
  9838  0104BE  0E2C               	movlw	44
  9839  0104C0  EC30  F0D5         	call	_usart_str_1
  9840                           
  9841                           ;UART.c: 149: break;
  9842  0104C4  D200               	goto	l21163
  9843  0104C6                     l21061:
  9844                           
  9845                           ;UART.c: 152: printf("%s","FREQ");
  9846  0104C6  0EF5               	movlw	low STR_2
  9847  0104C8  0100               	movlb	0	; () banked
  9848  0104CA  6FA7               	movwf	printf@f& (0+255),b
  9849  0104CC  0EFF               	movlw	high STR_2
  9850  0104CE  0100               	movlb	0	; () banked
  9851  0104D0  6FA8               	movwf	(printf@f+1)& (0+255),b
  9852  0104D2  0EDF               	movlw	low STR_45
  9853  0104D4  0100               	movlb	0	; () banked
  9854  0104D6  6FA9               	movwf	(?_printf+2)& (0+255),b
  9855  0104D8  0EFF               	movlw	high STR_45
  9856  0104DA  0100               	movlb	0	; () banked
  9857  0104DC  6FAA               	movwf	(?_printf+3)& (0+255),b
  9858  0104DE  EC9A  F086         	call	_printf	;wreg free
  9859                           
  9860                           ;UART.c: 153: usart_str_1(',');
  9861  0104E2  0E2C               	movlw	44
  9862  0104E4  EC30  F0D5         	call	_usart_str_1
  9863                           
  9864                           ;UART.c: 154: break;
  9865  0104E8  D1EE               	goto	l21163
  9866  0104EA                     l21065:
  9867                           
  9868                           ;UART.c: 157: printf("%s","TURBINE_NR");
  9869  0104EA  0EF5               	movlw	low STR_2
  9870  0104EC  0100               	movlb	0	; () banked
  9871  0104EE  6FA7               	movwf	printf@f& (0+255),b
  9872  0104F0  0EFF               	movlw	high STR_2
  9873  0104F2  0100               	movlb	0	; () banked
  9874  0104F4  6FA8               	movwf	(printf@f+1)& (0+255),b
  9875  0104F6  0E78               	movlw	low STR_47
  9876  0104F8  0100               	movlb	0	; () banked
  9877  0104FA  6FA9               	movwf	(?_printf+2)& (0+255),b
  9878  0104FC  0EFE               	movlw	high STR_47
  9879  0104FE  0100               	movlb	0	; () banked
  9880  010500  6FAA               	movwf	(?_printf+3)& (0+255),b
  9881  010502  EC9A  F086         	call	_printf	;wreg free
  9882                           
  9883                           ;UART.c: 158: usart_str_1(',');
  9884  010506  0E2C               	movlw	44
  9885  010508  EC30  F0D5         	call	_usart_str_1
  9886                           
  9887                           ;UART.c: 159: break;
  9888  01050C  D1DC               	goto	l21163
  9889  01050E                     l21069:
  9890                           
  9891                           ;UART.c: 162: printf("%s","VFD_RUN_TIME");
  9892  01050E  0EF5               	movlw	low STR_2
  9893  010510  0100               	movlb	0	; () banked
  9894  010512  6FA7               	movwf	printf@f& (0+255),b
  9895  010514  0EFF               	movlw	high STR_2
  9896  010516  0100               	movlb	0	; () banked
  9897  010518  6FA8               	movwf	(printf@f+1)& (0+255),b
  9898  01051A  0EC3               	movlw	low STR_49
  9899  01051C  0100               	movlb	0	; () banked
  9900  01051E  6FA9               	movwf	(?_printf+2)& (0+255),b
  9901  010520  0EFD               	movlw	high STR_49
  9902  010522  0100               	movlb	0	; () banked
  9903  010524  6FAA               	movwf	(?_printf+3)& (0+255),b
  9904  010526  EC9A  F086         	call	_printf	;wreg free
  9905                           
  9906                           ;UART.c: 163: usart_str_1(',');
  9907  01052A  0E2C               	movlw	44
  9908  01052C  EC30  F0D5         	call	_usart_str_1
  9909                           
  9910                           ;UART.c: 164: break;
  9911  010530  D1CA               	goto	l21163
  9912  010532                     l21073:
  9913                           
  9914                           ;UART.c: 167: printf("%s","DCB_L_H");
  9915  010532  0EF5               	movlw	low STR_2
  9916  010534  0100               	movlb	0	; () banked
  9917  010536  6FA7               	movwf	printf@f& (0+255),b
  9918  010538  0EFF               	movlw	high STR_2
  9919  01053A  0100               	movlb	0	; () banked
  9920  01053C  6FA8               	movwf	(printf@f+1)& (0+255),b
  9921  01053E  0E6F               	movlw	low STR_51
  9922  010540  0100               	movlb	0	; () banked
  9923  010542  6FA9               	movwf	(?_printf+2)& (0+255),b
  9924  010544  0EFF               	movlw	high STR_51
  9925  010546  0100               	movlb	0	; () banked
  9926  010548  6FAA               	movwf	(?_printf+3)& (0+255),b
  9927  01054A  EC9A  F086         	call	_printf	;wreg free
  9928                           
  9929                           ;UART.c: 168: usart_str_1(',');
  9930  01054E  0E2C               	movlw	44
  9931  010550  EC30  F0D5         	call	_usart_str_1
  9932                           
  9933                           ;UART.c: 169: break;
  9934  010554  D1B8               	goto	l21163
  9935  010556                     l21077:
  9936                           
  9937                           ;UART.c: 172: printf("%s","VFD_OC");
  9938  010556  0EF5               	movlw	low STR_2
  9939  010558  0100               	movlb	0	; () banked
  9940  01055A  6FA7               	movwf	printf@f& (0+255),b
  9941  01055C  0EFF               	movlw	high STR_2
  9942  01055E  0100               	movlb	0	; () banked
  9943  010560  6FA8               	movwf	(printf@f+1)& (0+255),b
  9944  010562  0E95               	movlw	low STR_53
  9945  010564  0100               	movlb	0	; () banked
  9946  010566  6FA9               	movwf	(?_printf+2)& (0+255),b
  9947  010568  0EFF               	movlw	high STR_53
  9948  01056A  0100               	movlb	0	; () banked
  9949  01056C  6FAA               	movwf	(?_printf+3)& (0+255),b
  9950  01056E  EC9A  F086         	call	_printf	;wreg free
  9951                           
  9952                           ;UART.c: 173: usart_str_1(',');
  9953  010572  0E2C               	movlw	44
  9954  010574  EC30  F0D5         	call	_usart_str_1
  9955                           
  9956                           ;UART.c: 174: break;
  9957  010578  D1A6               	goto	l21163
  9958  01057A                     l21081:
  9959                           
  9960                           ;UART.c: 177: printf("%s","ROTOR_SLIP");
  9961  01057A  0EF5               	movlw	low STR_2
  9962  01057C  0100               	movlb	0	; () banked
  9963  01057E  6FA7               	movwf	printf@f& (0+255),b
  9964  010580  0EFF               	movlw	high STR_2
  9965  010582  0100               	movlb	0	; () banked
  9966  010584  6FA8               	movwf	(printf@f+1)& (0+255),b
  9967  010586  0E6D               	movlw	low STR_55
  9968  010588  0100               	movlb	0	; () banked
  9969  01058A  6FA9               	movwf	(?_printf+2)& (0+255),b
  9970  01058C  0EFE               	movlw	high STR_55
  9971  01058E  0100               	movlb	0	; () banked
  9972  010590  6FAA               	movwf	(?_printf+3)& (0+255),b
  9973  010592  EC9A  F086         	call	_printf	;wreg free
  9974                           
  9975                           ;UART.c: 178: usart_str_1(',');
  9976  010596  0E2C               	movlw	44
  9977  010598  EC30  F0D5         	call	_usart_str_1
  9978                           
  9979                           ;UART.c: 179: break;
  9980  01059C  D194               	goto	l21163
  9981  01059E                     l21085:
  9982                           
  9983                           ;UART.c: 182: printf("%s","MOTOR_SLIP");
  9984  01059E  0EF5               	movlw	low STR_2
  9985  0105A0  0100               	movlb	0	; () banked
  9986  0105A2  6FA7               	movwf	printf@f& (0+255),b
  9987  0105A4  0EFF               	movlw	high STR_2
  9988  0105A6  0100               	movlb	0	; () banked
  9989  0105A8  6FA8               	movwf	(printf@f+1)& (0+255),b
  9990  0105AA  0E62               	movlw	low STR_57
  9991  0105AC  0100               	movlb	0	; () banked
  9992  0105AE  6FA9               	movwf	(?_printf+2)& (0+255),b
  9993  0105B0  0EFE               	movlw	high STR_57
  9994  0105B2  0100               	movlb	0	; () banked
  9995  0105B4  6FAA               	movwf	(?_printf+3)& (0+255),b
  9996  0105B6  EC9A  F086         	call	_printf	;wreg free
  9997                           
  9998                           ;UART.c: 183: usart_str_1(',');
  9999  0105BA  0E2C               	movlw	44
 10000  0105BC  EC30  F0D5         	call	_usart_str_1
 10001                           
 10002                           ;UART.c: 184: break;
 10003  0105C0  D182               	goto	l21163
 10004  0105C2                     l21089:
 10005                           
 10006                           ;UART.c: 187: printf("%s","TURBINE_US_OS");
 10007  0105C2  0EF5               	movlw	low STR_2
 10008  0105C4  0100               	movlb	0	; () banked
 10009  0105C6  6FA7               	movwf	printf@f& (0+255),b
 10010  0105C8  0EFF               	movlw	high STR_2
 10011  0105CA  0100               	movlb	0	; () banked
 10012  0105CC  6FA8               	movwf	(printf@f+1)& (0+255),b
 10013  0105CE  0EA7               	movlw	low STR_59
 10014  0105D0  0100               	movlb	0	; () banked
 10015  0105D2  6FA9               	movwf	(?_printf+2)& (0+255),b
 10016  0105D4  0EFD               	movlw	high STR_59
 10017  0105D6  0100               	movlb	0	; () banked
 10018  0105D8  6FAA               	movwf	(?_printf+3)& (0+255),b
 10019  0105DA  EC9A  F086         	call	_printf	;wreg free
 10020                           
 10021                           ;UART.c: 188: usart_str_1(',');
 10022  0105DE  0E2C               	movlw	44
 10023  0105E0  EC30  F0D5         	call	_usart_str_1
 10024                           
 10025                           ;UART.c: 189: break;
 10026  0105E4  D170               	goto	l21163
 10027  0105E6                     l21093:
 10028                           
 10029                           ;UART.c: 192: printf("%s","GEN_OS");
 10030  0105E6  0EF5               	movlw	low STR_2
 10031  0105E8  0100               	movlb	0	; () banked
 10032  0105EA  6FA7               	movwf	printf@f& (0+255),b
 10033  0105EC  0EFF               	movlw	high STR_2
 10034  0105EE  0100               	movlb	0	; () banked
 10035  0105F0  6FA8               	movwf	(printf@f+1)& (0+255),b
 10036  0105F2  0EA3               	movlw	low STR_61
 10037  0105F4  0100               	movlb	0	; () banked
 10038  0105F6  6FA9               	movwf	(?_printf+2)& (0+255),b
 10039  0105F8  0EFF               	movlw	high STR_61
 10040  0105FA  0100               	movlb	0	; () banked
 10041  0105FC  6FAA               	movwf	(?_printf+3)& (0+255),b
 10042  0105FE  EC9A  F086         	call	_printf	;wreg free
 10043                           
 10044                           ;UART.c: 193: usart_str_1(',');
 10045  010602  0E2C               	movlw	44
 10046  010604  EC30  F0D5         	call	_usart_str_1
 10047                           
 10048                           ;UART.c: 194: break;
 10049  010608  D15E               	goto	l21163
 10050  01060A                     l21097:
 10051                           
 10052                           ;UART.c: 197: printf("%s","CURRENT_H");
 10053  01060A  0EF5               	movlw	low STR_2
 10054  01060C  0100               	movlb	0	; () banked
 10055  01060E  6FA7               	movwf	printf@f& (0+255),b
 10056  010610  0EFF               	movlw	high STR_2
 10057  010612  0100               	movlb	0	; () banked
 10058  010614  6FA8               	movwf	(printf@f+1)& (0+255),b
 10059  010616  0EB9               	movlw	low STR_63
 10060  010618  0100               	movlb	0	; () banked
 10061  01061A  6FA9               	movwf	(?_printf+2)& (0+255),b
 10062  01061C  0EFE               	movlw	high STR_63
 10063  01061E  0100               	movlb	0	; () banked
 10064  010620  6FAA               	movwf	(?_printf+3)& (0+255),b
 10065  010622  EC9A  F086         	call	_printf	;wreg free
 10066                           
 10067                           ;UART.c: 198: usart_str_1(',');
 10068  010626  0E2C               	movlw	44
 10069  010628  EC30  F0D5         	call	_usart_str_1
 10070                           
 10071                           ;UART.c: 199: break;
 10072  01062C  D14C               	goto	l21163
 10073  01062E                     l21101:
 10074                           
 10075                           ;UART.c: 202: printf("%s","POWER_MAX");
 10076  01062E  0EF5               	movlw	low STR_2
 10077  010630  0100               	movlb	0	; () banked
 10078  010632  6FA7               	movwf	printf@f& (0+255),b
 10079  010634  0EFF               	movlw	high STR_2
 10080  010636  0100               	movlb	0	; () banked
 10081  010638  6FA8               	movwf	(printf@f+1)& (0+255),b
 10082  01063A  0E13               	movlw	low STR_65
 10083  01063C  0100               	movlb	0	; () banked
 10084  01063E  6FA9               	movwf	(?_printf+2)& (0+255),b
 10085  010640  0EFF               	movlw	high STR_65
 10086  010642  0100               	movlb	0	; () banked
 10087  010644  6FAA               	movwf	(?_printf+3)& (0+255),b
 10088  010646  EC9A  F086         	call	_printf	;wreg free
 10089                           
 10090                           ;UART.c: 203: usart_str_1(',');
 10091  01064A  0E2C               	movlw	44
 10092  01064C  EC30  F0D5         	call	_usart_str_1
 10093                           
 10094                           ;UART.c: 204: break;
 10095  010650  D13A               	goto	l21163
 10096  010652                     l21105:
 10097                           
 10098                           ;UART.c: 207: printf("%s","POWER_MIN");
 10099  010652  0EF5               	movlw	low STR_2
 10100  010654  0100               	movlb	0	; () banked
 10101  010656  6FA7               	movwf	printf@f& (0+255),b
 10102  010658  0EFF               	movlw	high STR_2
 10103  01065A  0100               	movlb	0	; () banked
 10104  01065C  6FA8               	movwf	(printf@f+1)& (0+255),b
 10105  01065E  0EC3               	movlw	low STR_67
 10106  010660  0100               	movlb	0	; () banked
 10107  010662  6FA9               	movwf	(?_printf+2)& (0+255),b
 10108  010664  0EFE               	movlw	high STR_67
 10109  010666  0100               	movlb	0	; () banked
 10110  010668  6FAA               	movwf	(?_printf+3)& (0+255),b
 10111  01066A  EC9A  F086         	call	_printf	;wreg free
 10112                           
 10113                           ;UART.c: 208: usart_str_1(',');
 10114  01066E  0E2C               	movlw	44
 10115  010670  EC30  F0D5         	call	_usart_str_1
 10116                           
 10117                           ;UART.c: 209: break;
 10118  010674  D128               	goto	l21163
 10119  010676                     l21109:
 10120                           
 10121                           ;UART.c: 212: printf("%s","TURBINE_OL");
 10122  010676  0EF5               	movlw	low STR_2
 10123  010678  0100               	movlb	0	; () banked
 10124  01067A  6FA7               	movwf	printf@f& (0+255),b
 10125  01067C  0EFF               	movlw	high STR_2
 10126  01067E  0100               	movlb	0	; () banked
 10127  010680  6FA8               	movwf	(printf@f+1)& (0+255),b
 10128  010682  0E57               	movlw	low STR_69
 10129  010684  0100               	movlb	0	; () banked
 10130  010686  6FA9               	movwf	(?_printf+2)& (0+255),b
 10131  010688  0EFE               	movlw	high STR_69
 10132  01068A  0100               	movlb	0	; () banked
 10133  01068C  6FAA               	movwf	(?_printf+3)& (0+255),b
 10134  01068E  EC9A  F086         	call	_printf	;wreg free
 10135                           
 10136                           ;UART.c: 213: usart_str_1(',');
 10137  010692  0E2C               	movlw	44
 10138  010694  EC30  F0D5         	call	_usart_str_1
 10139                           
 10140                           ;UART.c: 214: break;
 10141  010698  D116               	goto	l21163
 10142  01069A                     l21113:
 10143                           
 10144                           ;UART.c: 217: printf("%s","DC_EXT_LOW");
 10145  01069A  0EF5               	movlw	low STR_2
 10146  01069C  0100               	movlb	0	; () banked
 10147  01069E  6FA7               	movwf	printf@f& (0+255),b
 10148  0106A0  0EFF               	movlw	high STR_2
 10149  0106A2  0100               	movlb	0	; () banked
 10150  0106A4  6FA8               	movwf	(printf@f+1)& (0+255),b
 10151  0106A6  0E99               	movlw	low STR_71
 10152  0106A8  0100               	movlb	0	; () banked
 10153  0106AA  6FA9               	movwf	(?_printf+2)& (0+255),b
 10154  0106AC  0EFE               	movlw	high STR_71
 10155  0106AE  0100               	movlb	0	; () banked
 10156  0106B0  6FAA               	movwf	(?_printf+3)& (0+255),b
 10157  0106B2  EC9A  F086         	call	_printf	;wreg free
 10158                           
 10159                           ;UART.c: 218: usart_str_1(',');
 10160  0106B6  0E2C               	movlw	44
 10161  0106B8  EC30  F0D5         	call	_usart_str_1
 10162                           
 10163                           ;UART.c: 219: break;
 10164  0106BC  D104               	goto	l21163
 10165  0106BE                     l21117:
 10166                           
 10167                           ;UART.c: 222: printf("%s","PITCH_FB");
 10168  0106BE  0EF5               	movlw	low STR_2
 10169  0106C0  0100               	movlb	0	; () banked
 10170  0106C2  6FA7               	movwf	printf@f& (0+255),b
 10171  0106C4  0EFF               	movlw	high STR_2
 10172  0106C6  0100               	movlb	0	; () banked
 10173  0106C8  6FA8               	movwf	(printf@f+1)& (0+255),b
 10174  0106CA  0E31               	movlw	low STR_73
 10175  0106CC  0100               	movlb	0	; () banked
 10176  0106CE  6FA9               	movwf	(?_printf+2)& (0+255),b
 10177  0106D0  0EFF               	movlw	high STR_73
 10178  0106D2  0100               	movlb	0	; () banked
 10179  0106D4  6FAA               	movwf	(?_printf+3)& (0+255),b
 10180  0106D6  EC9A  F086         	call	_printf	;wreg free
 10181                           
 10182                           ;UART.c: 223: usart_str_1(',');
 10183  0106DA  0E2C               	movlw	44
 10184  0106DC  EC30  F0D5         	call	_usart_str_1
 10185                           
 10186                           ;UART.c: 224: break;
 10187  0106E0  D0F2               	goto	l21163
 10188  0106E2                     l21121:
 10189                           
 10190                           ;UART.c: 227: printf("%s","GEN_FB");
 10191  0106E2  0EF5               	movlw	low STR_2
 10192  0106E4  0100               	movlb	0	; () banked
 10193  0106E6  6FA7               	movwf	printf@f& (0+255),b
 10194  0106E8  0EFF               	movlw	high STR_2
 10195  0106EA  0100               	movlb	0	; () banked
 10196  0106EC  6FA8               	movwf	(printf@f+1)& (0+255),b
 10197  0106EE  0E8E               	movlw	low STR_75
 10198  0106F0  0100               	movlb	0	; () banked
 10199  0106F2  6FA9               	movwf	(?_printf+2)& (0+255),b
 10200  0106F4  0EFF               	movlw	high STR_75
 10201  0106F6  0100               	movlb	0	; () banked
 10202  0106F8  6FAA               	movwf	(?_printf+3)& (0+255),b
 10203  0106FA  EC9A  F086         	call	_printf	;wreg free
 10204                           
 10205                           ;UART.c: 228: usart_str_1(',');
 10206  0106FE  0E2C               	movlw	44
 10207  010700  EC30  F0D5         	call	_usart_str_1
 10208                           
 10209                           ;UART.c: 229: break;
 10210  010704  D0E0               	goto	l21163
 10211  010706                     l21125:
 10212                           
 10213                           ;UART.c: 232: printf("%s","MANUAL_STOP");
 10214  010706  0EF5               	movlw	low STR_2
 10215  010708  0100               	movlb	0	; () banked
 10216  01070A  6FA7               	movwf	printf@f& (0+255),b
 10217  01070C  0EFF               	movlw	high STR_2
 10218  01070E  0100               	movlb	0	; () banked
 10219  010710  6FA8               	movwf	(printf@f+1)& (0+255),b
 10220  010712  0E35               	movlw	low STR_77
 10221  010714  0100               	movlb	0	; () banked
 10222  010716  6FA9               	movwf	(?_printf+2)& (0+255),b
 10223  010718  0EFE               	movlw	high STR_77
 10224  01071A  0100               	movlb	0	; () banked
 10225  01071C  6FAA               	movwf	(?_printf+3)& (0+255),b
 10226  01071E  EC9A  F086         	call	_printf	;wreg free
 10227                           
 10228                           ;UART.c: 233: usart_str_1(',');
 10229  010722  0E2C               	movlw	44
 10230  010724  EC30  F0D5         	call	_usart_str_1
 10231                           
 10232                           ;UART.c: 234: break;
 10233  010728  D0CE               	goto	l21163
 10234  01072A                     l21129:
 10235                           
 10236                           ;UART.c: 237: printf("%s","VFD_COMMU_ERR");
 10237  01072A  0EF5               	movlw	low STR_2
 10238  01072C  0100               	movlb	0	; () banked
 10239  01072E  6FA7               	movwf	printf@f& (0+255),b
 10240  010730  0EFF               	movlw	high STR_2
 10241  010732  0100               	movlb	0	; () banked
 10242  010734  6FA8               	movwf	(printf@f+1)& (0+255),b
 10243  010736  0E99               	movlw	low STR_79
 10244  010738  0100               	movlb	0	; () banked
 10245  01073A  6FA9               	movwf	(?_printf+2)& (0+255),b
 10246  01073C  0EFD               	movlw	high STR_79
 10247  01073E  0100               	movlb	0	; () banked
 10248  010740  6FAA               	movwf	(?_printf+3)& (0+255),b
 10249  010742  EC9A  F086         	call	_printf	;wreg free
 10250                           
 10251                           ;UART.c: 238: usart_str_1(',');
 10252  010746  0E2C               	movlw	44
 10253  010748  EC30  F0D5         	call	_usart_str_1
 10254                           
 10255                           ;UART.c: 239: break;
 10256  01074C  D0BC               	goto	l21163
 10257  01074E                     l21133:
 10258                           
 10259                           ;UART.c: 242: printf("%s","MEAURE_ERR");
 10260  01074E  0EF5               	movlw	low STR_2
 10261  010750  0100               	movlb	0	; () banked
 10262  010752  6FA7               	movwf	printf@f& (0+255),b
 10263  010754  0EFF               	movlw	high STR_2
 10264  010756  0100               	movlb	0	; () banked
 10265  010758  6FA8               	movwf	(printf@f+1)& (0+255),b
 10266  01075A  0E83               	movlw	low STR_81
 10267  01075C  0100               	movlb	0	; () banked
 10268  01075E  6FA9               	movwf	(?_printf+2)& (0+255),b
 10269  010760  0EFE               	movlw	high STR_81
 10270  010762  0100               	movlb	0	; () banked
 10271  010764  6FAA               	movwf	(?_printf+3)& (0+255),b
 10272  010766  EC9A  F086         	call	_printf	;wreg free
 10273                           
 10274                           ;UART.c: 243: usart_str_1(',');
 10275  01076A  0E2C               	movlw	44
 10276  01076C  EC30  F0D5         	call	_usart_str_1
 10277                           
 10278                           ;UART.c: 244: break;
 10279  010770  D0AA               	goto	l21163
 10280  010772                     l21137:
 10281                           
 10282                           ;UART.c: 247: printf("%s","VFD_ERROR_IO");
 10283  010772  0EF5               	movlw	low STR_2
 10284  010774  0100               	movlb	0	; () banked
 10285  010776  6FA7               	movwf	printf@f& (0+255),b
 10286  010778  0EFF               	movlw	high STR_2
 10287  01077A  0100               	movlb	0	; () banked
 10288  01077C  6FA8               	movwf	(printf@f+1)& (0+255),b
 10289  01077E  0ED0               	movlw	low STR_83
 10290  010780  0100               	movlb	0	; () banked
 10291  010782  6FA9               	movwf	(?_printf+2)& (0+255),b
 10292  010784  0EFD               	movlw	high STR_83
 10293  010786  0100               	movlb	0	; () banked
 10294  010788  6FAA               	movwf	(?_printf+3)& (0+255),b
 10295  01078A  EC9A  F086         	call	_printf	;wreg free
 10296                           
 10297                           ;UART.c: 248: usart_str_1(',');
 10298  01078E  0E2C               	movlw	44
 10299  010790  EC30  F0D5         	call	_usart_str_1
 10300                           
 10301                           ;UART.c: 250: }
 10302                           
 10303                           ;UART.c: 249: break;
 10304  010794  D098               	goto	l21163
 10305  010796                     l21143:
 10306  010796  503A               	movf	_Errors,w,c
 10307                           
 10308                           ; Switch size 1, requested type "space"
 10309                           ; Number of cases is 26, Range of values is 0 to 25
 10310                           ; switch strategies available:
 10311                           ; Name         Instructions Cycles
 10312                           ; simple_byte           79    40 (average)
 10313                           ;	Chosen strategy is simple_byte
 10314  010798  0A00               	xorlw	0	; case 0
 10315  01079A  B4D8               	btfsc	status,2,c
 10316  01079C  D628               	goto	l21037
 10317  01079E  0A01               	xorlw	1	; case 1
 10318  0107A0  B4D8               	btfsc	status,2,c
 10319  0107A2  D637               	goto	l21041
 10320  0107A4  0A03               	xorlw	3	; case 2
 10321  0107A6  B4D8               	btfsc	status,2,c
 10322  0107A8  D658               	goto	l21049
 10323  0107AA  0A01               	xorlw	1	; case 3
 10324  0107AC  B4D8               	btfsc	status,2,c
 10325  0107AE  D6C1               	goto	l21073
 10326  0107B0  0A07               	xorlw	7	; case 4
 10327  0107B2  B4D8               	btfsc	status,2,c
 10328  0107B4  D6AC               	goto	l21069
 10329  0107B6  0A01               	xorlw	1	; case 5
 10330  0107B8  B4D8               	btfsc	status,2,c
 10331  0107BA  D7B7               	goto	l21129
 10332  0107BC  0A03               	xorlw	3	; case 6
 10333  0107BE  B4D8               	btfsc	status,2,c
 10334  0107C0  D65E               	goto	l21053
 10335  0107C2  0A01               	xorlw	1	; case 7
 10336  0107C4  B4D8               	btfsc	status,2,c
 10337  0107C6  D769               	goto	l21113
 10338  0107C8  0A0F               	xorlw	15	; case 8
 10339  0107CA  B4D8               	btfsc	status,2,c
 10340  0107CC  D6C4               	goto	l21077
 10341  0107CE  0A01               	xorlw	1	; case 9
 10342  0107D0  B4D8               	btfsc	status,2,c
 10343  0107D2  D71B               	goto	l21097
 10344  0107D4  0A03               	xorlw	3	; case 10
 10345  0107D6  B4D8               	btfsc	status,2,c
 10346  0107D8  D6F4               	goto	l21089
 10347  0107DA  0A01               	xorlw	1	; case 11
 10348  0107DC  B4D8               	btfsc	status,2,c
 10349  0107DE  D703               	goto	l21093
 10350  0107E0  0A07               	xorlw	7	; case 12
 10351  0107E2  B4D8               	btfsc	status,2,c
 10352  0107E4  D670               	goto	l21061
 10353  0107E6  0A01               	xorlw	1	; case 13
 10354  0107E8  B4D8               	btfsc	status,2,c
 10355  0107EA  D65B               	goto	l21057
 10356  0107EC  0A03               	xorlw	3	; case 14
 10357  0107EE  B4D8               	btfsc	status,2,c
 10358  0107F0  D71E               	goto	l21101
 10359  0107F2  0A01               	xorlw	1	; case 15
 10360  0107F4  B4D8               	btfsc	status,2,c
 10361  0107F6  D72D               	goto	l21105
 10362  0107F8  0A1F               	xorlw	31	; case 16
 10363  0107FA  B4D8               	btfsc	status,2,c
 10364  0107FC  D6D0               	goto	l21085
 10365  0107FE  0A01               	xorlw	1	; case 17
 10366  010800  B4D8               	btfsc	status,2,c
 10367  010802  D6BB               	goto	l21081
 10368  010804  0A03               	xorlw	3	; case 18
 10369  010806  B4D8               	btfsc	status,2,c
 10370  010808  D736               	goto	l21109
 10371  01080A  0A01               	xorlw	1	; case 19
 10372  01080C  B4D8               	btfsc	status,2,c
 10373  01080E  D77B               	goto	l21125
 10374  010810  0A07               	xorlw	7	; case 20
 10375  010812  B4D8               	btfsc	status,2,c
 10376  010814  D766               	goto	l21121
 10377  010816  0A01               	xorlw	1	; case 21
 10378  010818  B4D8               	btfsc	status,2,c
 10379  01081A  D751               	goto	l21117
 10380  01081C  0A03               	xorlw	3	; case 22
 10381  01081E  B4D8               	btfsc	status,2,c
 10382  010820  D796               	goto	l21133
 10383  010822  0A01               	xorlw	1	; case 23
 10384  010824  B4D8               	btfsc	status,2,c
 10385  010826  D661               	goto	l21065
 10386  010828  0A0F               	xorlw	15	; case 24
 10387  01082A  B4D8               	btfsc	status,2,c
 10388  01082C  D604               	goto	l21045
 10389  01082E  0A01               	xorlw	1	; case 25
 10390  010830  B4D8               	btfsc	status,2,c
 10391  010832  D79F               	goto	l21137
 10392                           
 10393                           ;UART.c: 252: switch(Turbine_state)
 10394  010834  D048               	goto	l21163
 10395  010836                     l21145:
 10396                           
 10397                           ;UART.c: 255: printf("%s","STARTUP");
 10398  010836  0EF5               	movlw	low STR_2
 10399  010838  0100               	movlb	0	; () banked
 10400  01083A  6FA7               	movwf	printf@f& (0+255),b
 10401  01083C  0EFF               	movlw	high STR_2
 10402  01083E  0100               	movlb	0	; () banked
 10403  010840  6FA8               	movwf	(printf@f+1)& (0+255),b
 10404  010842  0E7F               	movlw	low STR_85
 10405  010844  0100               	movlb	0	; () banked
 10406  010846  6FA9               	movwf	(?_printf+2)& (0+255),b
 10407  010848  0EFF               	movlw	high STR_85
 10408  01084A  0100               	movlb	0	; () banked
 10409  01084C  6FAA               	movwf	(?_printf+3)& (0+255),b
 10410  01084E  EC9A  F086         	call	_printf	;wreg free
 10411                           
 10412                           ;UART.c: 256: usart_str_1(',');
 10413  010852  0E2C               	movlw	44
 10414  010854  EC30  F0D5         	call	_usart_str_1
 10415                           
 10416                           ;UART.c: 257: break;
 10417  010858  D044               	goto	l21165
 10418  01085A                     l21149:
 10419                           
 10420                           ;UART.c: 260: printf("%s","RAMPUP");
 10421  01085A  0EF5               	movlw	low STR_2
 10422  01085C  0100               	movlb	0	; () banked
 10423  01085E  6FA7               	movwf	printf@f& (0+255),b
 10424  010860  0EFF               	movlw	high STR_2
 10425  010862  0100               	movlb	0	; () banked
 10426  010864  6FA8               	movwf	(printf@f+1)& (0+255),b
 10427  010866  0E9C               	movlw	low STR_87
 10428  010868  0100               	movlb	0	; () banked
 10429  01086A  6FA9               	movwf	(?_printf+2)& (0+255),b
 10430  01086C  0EFF               	movlw	high STR_87
 10431  01086E  0100               	movlb	0	; () banked
 10432  010870  6FAA               	movwf	(?_printf+3)& (0+255),b
 10433  010872  EC9A  F086         	call	_printf	;wreg free
 10434                           
 10435                           ;UART.c: 261: usart_str_1(',');
 10436  010876  0E2C               	movlw	44
 10437  010878  EC30  F0D5         	call	_usart_str_1
 10438                           
 10439                           ;UART.c: 262: break;
 10440  01087C  D032               	goto	l21165
 10441  01087E                     l21153:
 10442                           
 10443                           ;UART.c: 265: printf("%s","RUNNING");
 10444  01087E  0EF5               	movlw	low STR_2
 10445  010880  0100               	movlb	0	; () banked
 10446  010882  6FA7               	movwf	printf@f& (0+255),b
 10447  010884  0EFF               	movlw	high STR_2
 10448  010886  0100               	movlb	0	; () banked
 10449  010888  6FA8               	movwf	(printf@f+1)& (0+255),b
 10450  01088A  0E67               	movlw	low STR_89
 10451  01088C  0100               	movlb	0	; () banked
 10452  01088E  6FA9               	movwf	(?_printf+2)& (0+255),b
 10453  010890  0EFF               	movlw	high STR_89
 10454  010892  0100               	movlb	0	; () banked
 10455  010894  6FAA               	movwf	(?_printf+3)& (0+255),b
 10456  010896  EC9A  F086         	call	_printf	;wreg free
 10457                           
 10458                           ;UART.c: 266: usart_str_1(',');
 10459  01089A  0E2C               	movlw	44
 10460  01089C  EC30  F0D5         	call	_usart_str_1
 10461                           
 10462                           ;UART.c: 267: break;
 10463  0108A0  D020               	goto	l21165
 10464  0108A2                     l21157:
 10465                           
 10466                           ;UART.c: 270: printf("%s","STOPPING");
 10467  0108A2  0EF5               	movlw	low STR_2
 10468  0108A4  0100               	movlb	0	; () banked
 10469  0108A6  6FA7               	movwf	printf@f& (0+255),b
 10470  0108A8  0EFF               	movlw	high STR_2
 10471  0108AA  0100               	movlb	0	; () banked
 10472  0108AC  6FA8               	movwf	(printf@f+1)& (0+255),b
 10473  0108AE  0E3A               	movlw	low STR_91
 10474  0108B0  0100               	movlb	0	; () banked
 10475  0108B2  6FA9               	movwf	(?_printf+2)& (0+255),b
 10476  0108B4  0EFF               	movlw	high STR_91
 10477  0108B6  0100               	movlb	0	; () banked
 10478  0108B8  6FAA               	movwf	(?_printf+3)& (0+255),b
 10479  0108BA  EC9A  F086         	call	_printf	;wreg free
 10480                           
 10481                           ;UART.c: 271: usart_str_1(',');
 10482  0108BE  0E2C               	movlw	44
 10483  0108C0  EC30  F0D5         	call	_usart_str_1
 10484                           
 10485                           ;UART.c: 273: }
 10486                           
 10487                           ;UART.c: 272: break;
 10488  0108C4  D00E               	goto	l21165
 10489  0108C6                     l21163:
 10490  0108C6  0100               	movlb	0	; () banked
 10491  0108C8  51D8               	movf	_Turbine_state& (0+255),w,b
 10492                           
 10493                           ; Switch size 1, requested type "space"
 10494                           ; Number of cases is 4, Range of values is 0 to 3
 10495                           ; switch strategies available:
 10496                           ; Name         Instructions Cycles
 10497                           ; simple_byte           13     7 (average)
 10498                           ;	Chosen strategy is simple_byte
 10499  0108CA  0A00               	xorlw	0	; case 0
 10500  0108CC  B4D8               	btfsc	status,2,c
 10501  0108CE  D7B3               	goto	l21145
 10502  0108D0  0A01               	xorlw	1	; case 1
 10503  0108D2  B4D8               	btfsc	status,2,c
 10504  0108D4  D7C2               	goto	l21149
 10505  0108D6  0A03               	xorlw	3	; case 2
 10506  0108D8  B4D8               	btfsc	status,2,c
 10507  0108DA  D7D1               	goto	l21153
 10508  0108DC  0A01               	xorlw	1	; case 3
 10509  0108DE  B4D8               	btfsc	status,2,c
 10510  0108E0  D7E0               	goto	l21157
 10511  0108E2                     l21165:
 10512                           
 10513                           ;UART.c: 276: RTC_GetDateTime(&rtc);
 10514  0108E2  0EF3               	movlw	low _rtc
 10515  0108E4  6E1F               	movwf	RTC_GetDateTime@rtc,c
 10516  0108E6  0E05               	movlw	high _rtc
 10517  0108E8  6E20               	movwf	RTC_GetDateTime@rtc+1,c
 10518  0108EA  EC4E  F0CC         	call	_RTC_GetDateTime	;wreg free
 10519                           
 10520                           ;UART.c: 277: GiHours = BCDtoI(rtc.hour);
 10521  0108EE  C5F5  F06A         	movff	_rtc+2,BCDtoI@BCD
 10522  0108F2  0100               	movlb	0	; () banked
 10523  0108F4  6B6B               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10524  0108F6  ECD1  F0C6         	call	_BCDtoI	;wreg free
 10525  0108FA  C06A  F292         	movff	?_BCDtoI,_GiHours
 10526  0108FE  C06B  F293         	movff	?_BCDtoI+1,_GiHours+1
 10527                           
 10528                           ;UART.c: 278: GiMinutes = BCDtoI(rtc.min);
 10529  010902  C5F4  F06A         	movff	_rtc+1,BCDtoI@BCD
 10530  010906  0100               	movlb	0	; () banked
 10531  010908  6B6B               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10532  01090A  ECD1  F0C6         	call	_BCDtoI	;wreg free
 10533  01090E  C06A  F294         	movff	?_BCDtoI,_GiMinutes
 10534  010912  C06B  F295         	movff	?_BCDtoI+1,_GiMinutes+1
 10535                           
 10536                           ;UART.c: 279: GiSeconds = BCDtoI(rtc.sec);
 10537  010916  C5F3  F06A         	movff	_rtc,BCDtoI@BCD
 10538  01091A  0100               	movlb	0	; () banked
 10539  01091C  6B6B               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10540  01091E  ECD1  F0C6         	call	_BCDtoI	;wreg free
 10541  010922  C06A  F298         	movff	?_BCDtoI,_GiSeconds
 10542  010926  C06B  F299         	movff	?_BCDtoI+1,_GiSeconds+1
 10543                           
 10544                           ;UART.c: 280: GiData = BCDtoI(rtc.date);
 10545  01092A  C5F7  F06A         	movff	_rtc+4,BCDtoI@BCD
 10546  01092E  0100               	movlb	0	; () banked
 10547  010930  6B6B               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10548  010932  ECD1  F0C6         	call	_BCDtoI	;wreg free
 10549  010936  C06A  F290         	movff	?_BCDtoI,_GiData
 10550  01093A  C06B  F291         	movff	?_BCDtoI+1,_GiData+1
 10551                           
 10552                           ;UART.c: 281: GiMonth = BCDtoI(rtc.month);
 10553  01093E  C5F8  F06A         	movff	_rtc+5,BCDtoI@BCD
 10554  010942  0100               	movlb	0	; () banked
 10555  010944  6B6B               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10556  010946  ECD1  F0C6         	call	_BCDtoI	;wreg free
 10557  01094A  C06A  F296         	movff	?_BCDtoI,_GiMonth
 10558  01094E  C06B  F297         	movff	?_BCDtoI+1,_GiMonth+1
 10559                           
 10560                           ;UART.c: 282: GiYear = BCDtoI(rtc.year);
 10561  010952  C5F9  F06A         	movff	_rtc+6,BCDtoI@BCD
 10562  010956  0100               	movlb	0	; () banked
 10563  010958  6B6B               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10564  01095A  ECD1  F0C6         	call	_BCDtoI	;wreg free
 10565  01095E  C06A  F29A         	movff	?_BCDtoI,_GiYear
 10566  010962  C06B  F29B         	movff	?_BCDtoI+1,_GiYear+1
 10567                           
 10568                           ;UART.c: 283: GiDay = BCDtoI(rtc.weekDay);
 10569  010966  C5F6  F06A         	movff	_rtc+3,BCDtoI@BCD
 10570  01096A  0100               	movlb	0	; () banked
 10571  01096C  6B6B               	clrf	(BCDtoI@BCD+1)& (0+255),b
 10572  01096E  ECD1  F0C6         	call	_BCDtoI	;wreg free
 10573  010972  C06A  F5C7         	movff	?_BCDtoI,_GiDay
 10574  010976  C06B  F5C8         	movff	?_BCDtoI+1,_GiDay+1
 10575                           
 10576                           ;UART.c: 285: printf("%d",GiData);
 10577  01097A  0EF2               	movlw	low STR_9
 10578  01097C  0100               	movlb	0	; () banked
 10579  01097E  6FA7               	movwf	printf@f& (0+255),b
 10580  010980  0EFF               	movlw	high STR_9
 10581  010982  0100               	movlb	0	; () banked
 10582  010984  6FA8               	movwf	(printf@f+1)& (0+255),b
 10583  010986  C290  F0A9         	movff	_GiData,?_printf+2
 10584  01098A  C291  F0AA         	movff	_GiData+1,?_printf+3
 10585  01098E  EC9A  F086         	call	_printf	;wreg free
 10586                           
 10587                           ;UART.c: 286: usart_str_1('-');
 10588  010992  0E2D               	movlw	45
 10589  010994  EC30  F0D5         	call	_usart_str_1
 10590                           
 10591                           ;UART.c: 287: printf("%d",GiMonth);
 10592  010998  0EF2               	movlw	low STR_9
 10593  01099A  0100               	movlb	0	; () banked
 10594  01099C  6FA7               	movwf	printf@f& (0+255),b
 10595  01099E  0EFF               	movlw	high STR_9
 10596  0109A0  0100               	movlb	0	; () banked
 10597  0109A2  6FA8               	movwf	(printf@f+1)& (0+255),b
 10598  0109A4  C296  F0A9         	movff	_GiMonth,?_printf+2
 10599  0109A8  C297  F0AA         	movff	_GiMonth+1,?_printf+3
 10600  0109AC  EC9A  F086         	call	_printf	;wreg free
 10601                           
 10602                           ;UART.c: 288: usart_str_1('-');
 10603  0109B0  0E2D               	movlw	45
 10604  0109B2  EC30  F0D5         	call	_usart_str_1
 10605                           
 10606                           ;UART.c: 289: printf("%d",GiYear);
 10607  0109B6  0EF2               	movlw	low STR_9
 10608  0109B8  0100               	movlb	0	; () banked
 10609  0109BA  6FA7               	movwf	printf@f& (0+255),b
 10610  0109BC  0EFF               	movlw	high STR_9
 10611  0109BE  0100               	movlb	0	; () banked
 10612  0109C0  6FA8               	movwf	(printf@f+1)& (0+255),b
 10613  0109C2  C29A  F0A9         	movff	_GiYear,?_printf+2
 10614  0109C6  C29B  F0AA         	movff	_GiYear+1,?_printf+3
 10615  0109CA  EC9A  F086         	call	_printf	;wreg free
 10616                           
 10617                           ;UART.c: 290: usart_str_1(',');
 10618  0109CE  0E2C               	movlw	44
 10619  0109D0  EC30  F0D5         	call	_usart_str_1
 10620                           
 10621                           ;UART.c: 292: printf("%d",GiHours);
 10622  0109D4  0EF2               	movlw	low STR_9
 10623  0109D6  0100               	movlb	0	; () banked
 10624  0109D8  6FA7               	movwf	printf@f& (0+255),b
 10625  0109DA  0EFF               	movlw	high STR_9
 10626  0109DC  0100               	movlb	0	; () banked
 10627  0109DE  6FA8               	movwf	(printf@f+1)& (0+255),b
 10628  0109E0  C292  F0A9         	movff	_GiHours,?_printf+2
 10629  0109E4  C293  F0AA         	movff	_GiHours+1,?_printf+3
 10630  0109E8  EC9A  F086         	call	_printf	;wreg free
 10631                           
 10632                           ;UART.c: 293: usart_str_1(':');
 10633  0109EC  0E3A               	movlw	58
 10634  0109EE  EC30  F0D5         	call	_usart_str_1
 10635                           
 10636                           ;UART.c: 294: printf("%d",GiMinutes);
 10637  0109F2  0EF2               	movlw	low STR_9
 10638  0109F4  0100               	movlb	0	; () banked
 10639  0109F6  6FA7               	movwf	printf@f& (0+255),b
 10640  0109F8  0EFF               	movlw	high STR_9
 10641  0109FA  0100               	movlb	0	; () banked
 10642  0109FC  6FA8               	movwf	(printf@f+1)& (0+255),b
 10643  0109FE  C294  F0A9         	movff	_GiMinutes,?_printf+2
 10644  010A02  C295  F0AA         	movff	_GiMinutes+1,?_printf+3
 10645  010A06  EC9A  F086         	call	_printf	;wreg free
 10646                           
 10647                           ;UART.c: 295: usart_str_1(':');
 10648  010A0A  0E3A               	movlw	58
 10649  010A0C  EC30  F0D5         	call	_usart_str_1
 10650                           
 10651                           ;UART.c: 296: printf("%d",GiSeconds);
 10652  010A10  0EF2               	movlw	low STR_9
 10653  010A12  0100               	movlb	0	; () banked
 10654  010A14  6FA7               	movwf	printf@f& (0+255),b
 10655  010A16  0EFF               	movlw	high STR_9
 10656  010A18  0100               	movlb	0	; () banked
 10657  010A1A  6FA8               	movwf	(printf@f+1)& (0+255),b
 10658  010A1C  C298  F0A9         	movff	_GiSeconds,?_printf+2
 10659  010A20  C299  F0AA         	movff	_GiSeconds+1,?_printf+3
 10660  010A24  EC9A  F086         	call	_printf	;wreg free
 10661                           
 10662                           ;UART.c: 297: usart_str_1(',');
 10663  010A28  0E2C               	movlw	44
 10664  010A2A  EC30  F0D5         	call	_usart_str_1
 10665                           
 10666                           ;UART.c: 299: printf("%4.01f",Temprature);
 10667  010A2E  0EBF               	movlw	low STR_14
 10668  010A30  0100               	movlb	0	; () banked
 10669  010A32  6FA7               	movwf	printf@f& (0+255),b
 10670  010A34  0EFF               	movlw	high STR_14
 10671  010A36  0100               	movlb	0	; () banked
 10672  010A38  6FA8               	movwf	(printf@f+1)& (0+255),b
 10673  010A3A  C227  F0A9         	movff	_Temprature,?_printf+2
 10674  010A3E  C228  F0AA         	movff	_Temprature+1,?_printf+3
 10675  010A42  C229  F0AB         	movff	_Temprature+2,?_printf+4
 10676  010A46  EC9A  F086         	call	_printf	;wreg free
 10677                           
 10678                           ;UART.c: 300: usart_str_1(',');
 10679  010A4A  0E2C               	movlw	44
 10680  010A4C  EC30  F0D5         	call	_usart_str_1
 10681                           
 10682                           ;UART.c: 303: printf("%d",Errors1);
 10683  010A50  0EF2               	movlw	low STR_9
 10684  010A52  0100               	movlb	0	; () banked
 10685  010A54  6FA7               	movwf	printf@f& (0+255),b
 10686  010A56  0EFF               	movlw	high STR_9
 10687  010A58  0100               	movlb	0	; () banked
 10688  010A5A  6FA8               	movwf	(printf@f+1)& (0+255),b
 10689  010A5C  C16D  F0A9         	movff	_Errors1,?_printf+2
 10690  010A60  0100               	movlb	0	; () banked
 10691  010A62  6BAA               	clrf	(?_printf+3)& (0+255),b
 10692  010A64  EC9A  F086         	call	_printf	;wreg free
 10693                           
 10694                           ;UART.c: 304: usart_str_1('.');
 10695  010A68  0E2E               	movlw	46
 10696  010A6A  EC30  F0D5         	call	_usart_str_1
 10697                           
 10698                           ;UART.c: 305: printf("%d",Errors2);
 10699  010A6E  0EF2               	movlw	low STR_9
 10700  010A70  0100               	movlb	0	; () banked
 10701  010A72  6FA7               	movwf	printf@f& (0+255),b
 10702  010A74  0EFF               	movlw	high STR_9
 10703  010A76  0100               	movlb	0	; () banked
 10704  010A78  6FA8               	movwf	(printf@f+1)& (0+255),b
 10705  010A7A  C16E  F0A9         	movff	_Errors2,?_printf+2
 10706  010A7E  0100               	movlb	0	; () banked
 10707  010A80  6BAA               	clrf	(?_printf+3)& (0+255),b
 10708  010A82  EC9A  F086         	call	_printf	;wreg free
 10709                           
 10710                           ;UART.c: 306: usart_str_1('.');
 10711  010A86  0E2E               	movlw	46
 10712  010A88  EC30  F0D5         	call	_usart_str_1
 10713                           
 10714                           ;UART.c: 307: printf("%d",Errors3);
 10715  010A8C  0EF2               	movlw	low STR_9
 10716  010A8E  0100               	movlb	0	; () banked
 10717  010A90  6FA7               	movwf	printf@f& (0+255),b
 10718  010A92  0EFF               	movlw	high STR_9
 10719  010A94  0100               	movlb	0	; () banked
 10720  010A96  6FA8               	movwf	(printf@f+1)& (0+255),b
 10721  010A98  C16F  F0A9         	movff	_Errors3,?_printf+2
 10722  010A9C  0100               	movlb	0	; () banked
 10723  010A9E  6BAA               	clrf	(?_printf+3)& (0+255),b
 10724  010AA0  EC9A  F086         	call	_printf	;wreg free
 10725                           
 10726                           ;UART.c: 308: usart_str_1('.');
 10727  010AA4  0E2E               	movlw	46
 10728  010AA6  EC30  F0D5         	call	_usart_str_1
 10729                           
 10730                           ;UART.c: 309: printf("%d",Errors4);
 10731  010AAA  0EF2               	movlw	low STR_9
 10732  010AAC  0100               	movlb	0	; () banked
 10733  010AAE  6FA7               	movwf	printf@f& (0+255),b
 10734  010AB0  0EFF               	movlw	high STR_9
 10735  010AB2  0100               	movlb	0	; () banked
 10736  010AB4  6FA8               	movwf	(printf@f+1)& (0+255),b
 10737  010AB6  C170  F0A9         	movff	_Errors4,?_printf+2
 10738  010ABA  0100               	movlb	0	; () banked
 10739  010ABC  6BAA               	clrf	(?_printf+3)& (0+255),b
 10740  010ABE  EC9A  F086         	call	_printf	;wreg free
 10741                           
 10742                           ;UART.c: 310: usart_str_1('.');
 10743  010AC2  0E2E               	movlw	46
 10744  010AC4  EC30  F0D5         	call	_usart_str_1
 10745                           
 10746                           ;UART.c: 311: printf("%d",Errors5);
 10747  010AC8  0EF2               	movlw	low STR_9
 10748  010ACA  0100               	movlb	0	; () banked
 10749  010ACC  6FA7               	movwf	printf@f& (0+255),b
 10750  010ACE  0EFF               	movlw	high STR_9
 10751  010AD0  0100               	movlb	0	; () banked
 10752  010AD2  6FA8               	movwf	(printf@f+1)& (0+255),b
 10753  010AD4  C171  F0A9         	movff	_Errors5,?_printf+2
 10754  010AD8  0100               	movlb	0	; () banked
 10755  010ADA  6BAA               	clrf	(?_printf+3)& (0+255),b
 10756  010ADC  EC9A  F086         	call	_printf	;wreg free
 10757                           
 10758                           ;UART.c: 312: usart_str_1(',');
 10759  010AE0  0E2C               	movlw	44
 10760  010AE2  EC30  F0D5         	call	_usart_str_1
 10761                           
 10762                           ;UART.c: 316: printf("%d",PORTD);
 10763  010AE6  0EF2               	movlw	low STR_9
 10764  010AE8  0100               	movlb	0	; () banked
 10765  010AEA  6FA7               	movwf	printf@f& (0+255),b
 10766  010AEC  0EFF               	movlw	high STR_9
 10767  010AEE  0100               	movlb	0	; () banked
 10768  010AF0  6FA8               	movwf	(printf@f+1)& (0+255),b
 10769  010AF2  CF83 F0A9          	movff	3971,?_printf+2	;volatile
 10770  010AF6  0100               	movlb	0	; () banked
 10771  010AF8  6BAA               	clrf	(?_printf+3)& (0+255),b
 10772  010AFA  EC9A  F086         	call	_printf	;wreg free
 10773                           
 10774                           ;UART.c: 317: usart_str_1(',');
 10775  010AFE  0E2C               	movlw	44
 10776  010B00  EC30  F0D5         	call	_usart_str_1
 10777                           
 10778                           ;UART.c: 319: printf("%d",VFD_RAMP);
 10779  010B04  0EF2               	movlw	low STR_9
 10780  010B06  0100               	movlb	0	; () banked
 10781  010B08  6FA7               	movwf	printf@f& (0+255),b
 10782  010B0A  0EFF               	movlw	high STR_9
 10783  010B0C  0100               	movlb	0	; () banked
 10784  010B0E  6FA8               	movwf	(printf@f+1)& (0+255),b
 10785  010B10  C1D7  F0A9         	movff	_VFD_RAMP,?_printf+2
 10786  010B14  0100               	movlb	0	; () banked
 10787  010B16  6BAA               	clrf	(?_printf+3)& (0+255),b
 10788  010B18  EC9A  F086         	call	_printf	;wreg free
 10789                           
 10790                           ;UART.c: 320: usart_str_1(',');
 10791  010B1C  0E2C               	movlw	44
 10792  010B1E  EC30  F0D5         	call	_usart_str_1
 10793                           
 10794                           ;UART.c: 322: printf("%d",VFD_Run_Time_Counter);
 10795  010B22  0EF2               	movlw	low STR_9
 10796  010B24  0100               	movlb	0	; () banked
 10797  010B26  6FA7               	movwf	printf@f& (0+255),b
 10798  010B28  0EFF               	movlw	high STR_9
 10799  010B2A  0100               	movlb	0	; () banked
 10800  010B2C  6FA8               	movwf	(printf@f+1)& (0+255),b
 10801  010B2E  C15B  F0A9         	movff	_VFD_Run_Time_Counter,?_printf+2
 10802  010B32  C15C  F0AA         	movff	_VFD_Run_Time_Counter+1,?_printf+3
 10803  010B36  EC9A  F086         	call	_printf	;wreg free
 10804                           
 10805                           ;UART.c: 323: usart_str_1(',');
 10806  010B3A  0E2C               	movlw	44
 10807  010B3C  EC30  F0D5         	call	_usart_str_1
 10808                           
 10809                           ;UART.c: 325: printf("%d",Slip_Error_Counter);
 10810  010B40  0EF2               	movlw	low STR_9
 10811  010B42  0100               	movlb	0	; () banked
 10812  010B44  6FA7               	movwf	printf@f& (0+255),b
 10813  010B46  0EFF               	movlw	high STR_9
 10814  010B48  0100               	movlb	0	; () banked
 10815  010B4A  6FA8               	movwf	(printf@f+1)& (0+255),b
 10816  010B4C  C1B7  F0A9         	movff	_Slip_Error_Counter,?_printf+2
 10817  010B50  0100               	movlb	0	; () banked
 10818  010B52  6BAA               	clrf	(?_printf+3)& (0+255),b
 10819  010B54  EC9A  F086         	call	_printf	;wreg free
 10820                           
 10821                           ;UART.c: 326: usart_str_1(',');
 10822  010B58  0E2C               	movlw	44
 10823  010B5A  EC30  F0D5         	call	_usart_str_1
 10824                           
 10825                           ;UART.c: 328: printf("%d",Slip_Error_Counter_1);
 10826  010B5E  0EF2               	movlw	low STR_9
 10827  010B60  0100               	movlb	0	; () banked
 10828  010B62  6FA7               	movwf	printf@f& (0+255),b
 10829  010B64  0EFF               	movlw	high STR_9
 10830  010B66  0100               	movlb	0	; () banked
 10831  010B68  6FA8               	movwf	(printf@f+1)& (0+255),b
 10832  010B6A  C1B8  F0A9         	movff	_Slip_Error_Counter_1,?_printf+2
 10833  010B6E  0100               	movlb	0	; () banked
 10834  010B70  6BAA               	clrf	(?_printf+3)& (0+255),b
 10835  010B72  EC9A  F086         	call	_printf	;wreg free
 10836                           
 10837                           ;UART.c: 329: usart_str_1(',');
 10838  010B76  0E2C               	movlw	44
 10839  010B78  EC30  F0D5         	call	_usart_str_1
 10840                           
 10841                           ;UART.c: 331: printf("%d",Data_1[1]);
 10842  010B7C  0EF2               	movlw	low STR_9
 10843  010B7E  0100               	movlb	0	; () banked
 10844  010B80  6FA7               	movwf	printf@f& (0+255),b
 10845  010B82  0EFF               	movlw	high STR_9
 10846  010B84  0100               	movlb	0	; () banked
 10847  010B86  6FA8               	movwf	(printf@f+1)& (0+255),b
 10848  010B88  C502  F0A9         	movff	_Data_1+2,?_printf+2
 10849  010B8C  C503  F0AA         	movff	_Data_1+3,?_printf+3
 10850  010B90  EC9A  F086         	call	_printf	;wreg free
 10851                           
 10852                           ;UART.c: 332: usart_str_1(',');
 10853  010B94  0E2C               	movlw	44
 10854  010B96  EC30  F0D5         	call	_usart_str_1
 10855                           
 10856                           ;UART.c: 334: printf("%d",Data_1[7]);
 10857  010B9A  0EF2               	movlw	low STR_9
 10858  010B9C  0100               	movlb	0	; () banked
 10859  010B9E  6FA7               	movwf	printf@f& (0+255),b
 10860  010BA0  0EFF               	movlw	high STR_9
 10861  010BA2  0100               	movlb	0	; () banked
 10862  010BA4  6FA8               	movwf	(printf@f+1)& (0+255),b
 10863  010BA6  C50E  F0A9         	movff	_Data_1+14,?_printf+2
 10864  010BAA  C50F  F0AA         	movff	_Data_1+15,?_printf+3
 10865  010BAE  EC9A  F086         	call	_printf	;wreg free
 10866                           
 10867                           ;UART.c: 335: usart_str_1(',');
 10868  010BB2  0E2C               	movlw	44
 10869  010BB4  EC30  F0D5         	call	_usart_str_1
 10870                           
 10871                           ;UART.c: 337: printf("%d",Communication_OTP);
 10872  010BB8  0EF2               	movlw	low STR_9
 10873  010BBA  0100               	movlb	0	; () banked
 10874  010BBC  6FA7               	movwf	printf@f& (0+255),b
 10875  010BBE  0EFF               	movlw	high STR_9
 10876  010BC0  0100               	movlb	0	; () banked
 10877  010BC2  6FA8               	movwf	(printf@f+1)& (0+255),b
 10878  010BC4  C035  F0A9         	movff	_Communication_OTP,?_printf+2
 10879  010BC8  0100               	movlb	0	; () banked
 10880  010BCA  6BAA               	clrf	(?_printf+3)& (0+255),b
 10881  010BCC  EC9A  F086         	call	_printf	;wreg free
 10882                           
 10883                           ;UART.c: 338: usart_str_1(',');
 10884  010BD0  0E2C               	movlw	44
 10885  010BD2  EC30  F0D5         	call	_usart_str_1
 10886                           
 10887                           ;UART.c: 340: printf("%d",Data_1[9]);
 10888  010BD6  0EF2               	movlw	low STR_9
 10889  010BD8  0100               	movlb	0	; () banked
 10890  010BDA  6FA7               	movwf	printf@f& (0+255),b
 10891  010BDC  0EFF               	movlw	high STR_9
 10892  010BDE  0100               	movlb	0	; () banked
 10893  010BE0  6FA8               	movwf	(printf@f+1)& (0+255),b
 10894  010BE2  C512  F0A9         	movff	_Data_1+18,?_printf+2
 10895  010BE6  C513  F0AA         	movff	_Data_1+19,?_printf+3
 10896  010BEA  EC9A  F086         	call	_printf	;wreg free
 10897                           
 10898                           ;UART.c: 341: usart_str_1(',');
 10899  010BEE  0E2C               	movlw	44
 10900  010BF0  EC30  F0D5         	call	_usart_str_1
 10901                           
 10902                           ;UART.c: 343: printf("%d",Gen_EP_Err_Flag);
 10903  010BF4  0EF2               	movlw	low STR_9
 10904  010BF6  0100               	movlb	0	; () banked
 10905  010BF8  6FA7               	movwf	printf@f& (0+255),b
 10906  010BFA  0EFF               	movlw	high STR_9
 10907  010BFC  0100               	movlb	0	; () banked
 10908  010BFE  6FA8               	movwf	(printf@f+1)& (0+255),b
 10909  010C00  C195  F0A9         	movff	_Gen_EP_Err_Flag,?_printf+2
 10910  010C04  0100               	movlb	0	; () banked
 10911  010C06  6BAA               	clrf	(?_printf+3)& (0+255),b
 10912  010C08  EC9A  F086         	call	_printf	;wreg free
 10913                           
 10914                           ;UART.c: 344: usart_str_1(',');
 10915  010C0C  0E2C               	movlw	44
 10916  010C0E  EC30  F0D5         	call	_usart_str_1
 10917                           
 10918                           ;UART.c: 346: printf("%d",Pitch_EP_Err_Flag);
 10919  010C12  0EF2               	movlw	low STR_9
 10920  010C14  0100               	movlb	0	; () banked
 10921  010C16  6FA7               	movwf	printf@f& (0+255),b
 10922  010C18  0EFF               	movlw	high STR_9
 10923  010C1A  0100               	movlb	0	; () banked
 10924  010C1C  6FA8               	movwf	(printf@f+1)& (0+255),b
 10925  010C1E  C1B0  F0A9         	movff	_Pitch_EP_Err_Flag,?_printf+2
 10926  010C22  0100               	movlb	0	; () banked
 10927  010C24  6BAA               	clrf	(?_printf+3)& (0+255),b
 10928  010C26  EC9A  F086         	call	_printf	;wreg free
 10929                           
 10930                           ;UART.c: 347: usart_str_1(',');
 10931  010C2A  0E2C               	movlw	44
 10932  010C2C  EC30  F0D5         	call	_usart_str_1
 10933                           
 10934                           ;UART.c: 349: printf("%d",Total_Min);
 10935  010C30  0EF2               	movlw	low STR_9
 10936  010C32  0100               	movlb	0	; () banked
 10937  010C34  6FA7               	movwf	printf@f& (0+255),b
 10938  010C36  0EFF               	movlw	high STR_9
 10939  010C38  0100               	movlb	0	; () banked
 10940  010C3A  6FA8               	movwf	(printf@f+1)& (0+255),b
 10941  010C3C  C1C7  F0A9         	movff	_Total_Min,?_printf+2
 10942  010C40  0100               	movlb	0	; () banked
 10943  010C42  6BAA               	clrf	(?_printf+3)& (0+255),b
 10944  010C44  EC9A  F086         	call	_printf	;wreg free
 10945                           
 10946                           ;UART.c: 350: usart_str_1(',');
 10947  010C48  0E2C               	movlw	44
 10948  010C4A  EC30  F0D5         	call	_usart_str_1
 10949                           
 10950                           ;UART.c: 352: printf("%d",EEPROM_Error_Flag);
 10951  010C4E  0EF2               	movlw	low STR_9
 10952  010C50  0100               	movlb	0	; () banked
 10953  010C52  6FA7               	movwf	printf@f& (0+255),b
 10954  010C54  0EFF               	movlw	high STR_9
 10955  010C56  0100               	movlb	0	; () banked
 10956  010C58  6FA8               	movwf	(printf@f+1)& (0+255),b
 10957  010C5A  C036  F0A9         	movff	_EEPROM_Error_Flag,?_printf+2
 10958  010C5E  0100               	movlb	0	; () banked
 10959  010C60  6BAA               	clrf	(?_printf+3)& (0+255),b
 10960  010C62  EC9A  F086         	call	_printf	;wreg free
 10961                           
 10962                           ;UART.c: 353: usart_str_1(',');
 10963  010C66  0E2C               	movlw	44
 10964  010C68  EC30  F0D5         	call	_usart_str_1
 10965                           
 10966                           ;UART.c: 356: printf("%d",EP_Errors1);
 10967  010C6C  0EF2               	movlw	low STR_9
 10968  010C6E  0100               	movlb	0	; () banked
 10969  010C70  6FA7               	movwf	printf@f& (0+255),b
 10970  010C72  0EFF               	movlw	high STR_9
 10971  010C74  0100               	movlb	0	; () banked
 10972  010C76  6FA8               	movwf	(printf@f+1)& (0+255),b
 10973  010C78  C037  F0A9         	movff	_EP_Errors1,?_printf+2
 10974  010C7C  0100               	movlb	0	; () banked
 10975  010C7E  6BAA               	clrf	(?_printf+3)& (0+255),b
 10976  010C80  EC9A  F086         	call	_printf	;wreg free
 10977                           
 10978                           ;UART.c: 357: usart_str_1('.');
 10979  010C84  0E2E               	movlw	46
 10980  010C86  EC30  F0D5         	call	_usart_str_1
 10981                           
 10982                           ;UART.c: 358: printf("%d",EP_Errors2);
 10983  010C8A  0EF2               	movlw	low STR_9
 10984  010C8C  0100               	movlb	0	; () banked
 10985  010C8E  6FA7               	movwf	printf@f& (0+255),b
 10986  010C90  0EFF               	movlw	high STR_9
 10987  010C92  0100               	movlb	0	; () banked
 10988  010C94  6FA8               	movwf	(printf@f+1)& (0+255),b
 10989  010C96  C038  F0A9         	movff	_EP_Errors2,?_printf+2
 10990  010C9A  0100               	movlb	0	; () banked
 10991  010C9C  6BAA               	clrf	(?_printf+3)& (0+255),b
 10992  010C9E  EC9A  F086         	call	_printf	;wreg free
 10993                           
 10994                           ;UART.c: 359: usart_str_1('.');
 10995  010CA2  0E2E               	movlw	46
 10996  010CA4  EC30  F0D5         	call	_usart_str_1
 10997                           
 10998                           ;UART.c: 360: printf("%d",EP_Errors3);
 10999  010CA8  0EF2               	movlw	low STR_9
 11000  010CAA  0100               	movlb	0	; () banked
 11001  010CAC  6FA7               	movwf	printf@f& (0+255),b
 11002  010CAE  0EFF               	movlw	high STR_9
 11003  010CB0  0100               	movlb	0	; () banked
 11004  010CB2  6FA8               	movwf	(printf@f+1)& (0+255),b
 11005  010CB4  C039  F0A9         	movff	_EP_Errors3,?_printf+2
 11006  010CB8  0100               	movlb	0	; () banked
 11007  010CBA  6BAA               	clrf	(?_printf+3)& (0+255),b
 11008  010CBC  EC9A  F086         	call	_printf	;wreg free
 11009                           
 11010                           ;UART.c: 361: usart_str_1(',');
 11011  010CC0  0E2C               	movlw	44
 11012  010CC2  EC30  F0D5         	call	_usart_str_1
 11013                           
 11014                           ;UART.c: 363: printf("%d",VFD_Error_Flag);
 11015  010CC6  0EF2               	movlw	low STR_9
 11016  010CC8  0100               	movlb	0	; () banked
 11017  010CCA  6FA7               	movwf	printf@f& (0+255),b
 11018  010CCC  0EFF               	movlw	high STR_9
 11019  010CCE  0100               	movlb	0	; () banked
 11020  010CD0  6FA8               	movwf	(printf@f+1)& (0+255),b
 11021  010CD2  C1D3  F0A9         	movff	_VFD_Error_Flag,?_printf+2
 11022  010CD6  0100               	movlb	0	; () banked
 11023  010CD8  6BAA               	clrf	(?_printf+3)& (0+255),b
 11024  010CDA  EC9A  F086         	call	_printf	;wreg free
 11025                           
 11026                           ;UART.c: 364: usart_str_1(',');
 11027  010CDE  0E2C               	movlw	44
 11028  010CE0  EC30  F0D5         	call	_usart_str_1
 11029                           
 11030                           ;UART.c: 366: printf("%d",wind_1_Temp_flag);
 11031  010CE4  0EF2               	movlw	low STR_9
 11032  010CE6  0100               	movlb	0	; () banked
 11033  010CE8  6FA7               	movwf	printf@f& (0+255),b
 11034  010CEA  0EFF               	movlw	high STR_9
 11035  010CEC  0100               	movlb	0	; () banked
 11036  010CEE  6FA8               	movwf	(printf@f+1)& (0+255),b
 11037  010CF0  C1E4  F0A9         	movff	_wind_1_Temp_flag,?_printf+2
 11038  010CF4  0100               	movlb	0	; () banked
 11039  010CF6  6BAA               	clrf	(?_printf+3)& (0+255),b
 11040  010CF8  EC9A  F086         	call	_printf	;wreg free
 11041                           
 11042                           ;UART.c: 367: usart_str_1(',');
 11043  010CFC  0E2C               	movlw	44
 11044  010CFE  EC30  F0D5         	call	_usart_str_1
 11045                           
 11046                           ;UART.c: 369: printf("%d",wind_2_Temp_flag);
 11047  010D02  0EF2               	movlw	low STR_9
 11048  010D04  0100               	movlb	0	; () banked
 11049  010D06  6FA7               	movwf	printf@f& (0+255),b
 11050  010D08  0EFF               	movlw	high STR_9
 11051  010D0A  0100               	movlb	0	; () banked
 11052  010D0C  6FA8               	movwf	(printf@f+1)& (0+255),b
 11053  010D0E  C1E5  F0A9         	movff	_wind_2_Temp_flag,?_printf+2
 11054  010D12  0100               	movlb	0	; () banked
 11055  010D14  6BAA               	clrf	(?_printf+3)& (0+255),b
 11056  010D16  EC9A  F086         	call	_printf	;wreg free
 11057                           
 11058                           ;UART.c: 371: usart_str("\r");
 11059  010D1A  0EFD               	movlw	low STR_123
 11060  010D1C  6E1D               	movwf	usart_str@str,c
 11061  010D1E  0EFF               	movlw	high STR_123
 11062  010D20  6E1E               	movwf	usart_str@str+1,c
 11063  010D22  EC66  F0D3         	call	_usart_str	;wreg free
 11064                           
 11065                           ;UART.c: 372: usart_str("\n");
 11066  010D26  0EFB               	movlw	low STR_124
 11067  010D28  6E1D               	movwf	usart_str@str,c
 11068  010D2A  0EFF               	movlw	high STR_124
 11069  010D2C  6E1E               	movwf	usart_str@str+1,c
 11070  010D2E  EC66  F0D3         	call	_usart_str	;wreg free
 11071  010D32  0012               	return		;funcret
 11072  010D34                     __end_of_UART_Data:
 11073                           	opt stack 0
 11074                           tblptru	equ	0xFF8
 11075                           tblptrh	equ	0xFF7
 11076                           tblptrl	equ	0xFF6
 11077                           tablat	equ	0xFF5
 11078                           intcon	equ	0xFF2
 11079                           postinc0	equ	0xFEE
 11080                           wreg	equ	0xFE8
 11081                           postdec1	equ	0xFE5
 11082                           fsr1h	equ	0xFE2
 11083                           fsr1l	equ	0xFE1
 11084                           status	equ	0xFD8
 11085                           
 11086 ;; *************** function _UART_Data_String *****************
 11087 ;; Defined at:
 11088 ;;		line 374 in file "UART.c"
 11089 ;; Parameters:    Size  Location     Type
 11090 ;;		None
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;		None
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  1    wreg      void 
 11095 ;; Registers used:
 11096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11097 ;; Tracked objects:
 11098 ;;		On entry : 0/0
 11099 ;;		On exit  : 0/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11106 ;;Total ram usage:        0 bytes
 11107 ;; Hardware stack levels used:    1
 11108 ;; Hardware stack levels required when called:    7
 11109 ;; This function calls:
 11110 ;;		_printf
 11111 ;;		_usart_str
 11112 ;;		_usart_str_1
 11113 ;; This function is called by:
 11114 ;;		_UART_Data
 11115 ;; This function uses a non-reentrant model
 11116 ;;
 11117                           
 11118                           	psect	text18
 11119  013198                     __ptext18:
 11120                           	opt stack 0
 11121  013198                     _UART_Data_String:
 11122                           	opt stack 21
 11123                           
 11124                           ;UART.c: 376: usart_str("\r");
 11125                           
 11126                           ;incstack = 0
 11127  013198  0EFD               	movlw	low STR_123
 11128  01319A  6E1D               	movwf	usart_str@str,c
 11129  01319C  0EFF               	movlw	high STR_123
 11130  01319E  6E1E               	movwf	usart_str@str+1,c
 11131  0131A0  EC66  F0D3         	call	_usart_str	;wreg free
 11132                           
 11133                           ;UART.c: 377: usart_str("\n");
 11134  0131A4  0EFB               	movlw	low STR_124
 11135  0131A6  6E1D               	movwf	usart_str@str,c
 11136  0131A8  0EFF               	movlw	high STR_124
 11137  0131AA  6E1E               	movwf	usart_str@str+1,c
 11138  0131AC  EC66  F0D3         	call	_usart_str	;wreg free
 11139                           
 11140                           ;UART.c: 379: printf("%s","Serial No");
 11141  0131B0  0EF5               	movlw	low STR_2
 11142  0131B2  0100               	movlb	0	; () banked
 11143  0131B4  6FA7               	movwf	printf@f& (0+255),b
 11144  0131B6  0EFF               	movlw	high STR_2
 11145  0131B8  0100               	movlb	0	; () banked
 11146  0131BA  6FA8               	movwf	(printf@f+1)& (0+255),b
 11147  0131BC  0E27               	movlw	low STR_128
 11148  0131BE  0100               	movlb	0	; () banked
 11149  0131C0  6FA9               	movwf	(?_printf+2)& (0+255),b
 11150  0131C2  0EFF               	movlw	high STR_128
 11151  0131C4  0100               	movlb	0	; () banked
 11152  0131C6  6FAA               	movwf	(?_printf+3)& (0+255),b
 11153  0131C8  EC9A  F086         	call	_printf	;wreg free
 11154                           
 11155                           ;UART.c: 380: usart_str_1(',');
 11156  0131CC  0E2C               	movlw	44
 11157  0131CE  EC30  F0D5         	call	_usart_str_1
 11158                           
 11159                           ;UART.c: 382: printf("%s","TURBINE ID");
 11160  0131D2  0EF5               	movlw	low STR_2
 11161  0131D4  0100               	movlb	0	; () banked
 11162  0131D6  6FA7               	movwf	printf@f& (0+255),b
 11163  0131D8  0EFF               	movlw	high STR_2
 11164  0131DA  0100               	movlb	0	; () banked
 11165  0131DC  6FA8               	movwf	(printf@f+1)& (0+255),b
 11166  0131DE  0E41               	movlw	low STR_130
 11167  0131E0  0100               	movlb	0	; () banked
 11168  0131E2  6FA9               	movwf	(?_printf+2)& (0+255),b
 11169  0131E4  0EFE               	movlw	high STR_130
 11170  0131E6  0100               	movlb	0	; () banked
 11171  0131E8  6FAA               	movwf	(?_printf+3)& (0+255),b
 11172  0131EA  EC9A  F086         	call	_printf	;wreg free
 11173                           
 11174                           ;UART.c: 383: usart_str_1(',');
 11175  0131EE  0E2C               	movlw	44
 11176  0131F0  EC30  F0D5         	call	_usart_str_1
 11177                           
 11178                           ;UART.c: 385: printf("%s","WIND_INSTANT");
 11179  0131F4  0EF5               	movlw	low STR_2
 11180  0131F6  0100               	movlb	0	; () banked
 11181  0131F8  6FA7               	movwf	printf@f& (0+255),b
 11182  0131FA  0EFF               	movlw	high STR_2
 11183  0131FC  0100               	movlb	0	; () banked
 11184  0131FE  6FA8               	movwf	(printf@f+1)& (0+255),b
 11185  013200  0EF7               	movlw	low STR_132
 11186  013202  0100               	movlb	0	; () banked
 11187  013204  6FA9               	movwf	(?_printf+2)& (0+255),b
 11188  013206  0EFD               	movlw	high STR_132
 11189  013208  0100               	movlb	0	; () banked
 11190  01320A  6FAA               	movwf	(?_printf+3)& (0+255),b
 11191  01320C  EC9A  F086         	call	_printf	;wreg free
 11192                           
 11193                           ;UART.c: 386: usart_str_1(',');
 11194  013210  0E2C               	movlw	44
 11195  013212  EC30  F0D5         	call	_usart_str_1
 11196                           
 11197                           ;UART.c: 388: printf("%s","WIND AVG");
 11198  013216  0EF5               	movlw	low STR_2
 11199  013218  0100               	movlb	0	; () banked
 11200  01321A  6FA7               	movwf	printf@f& (0+255),b
 11201  01321C  0EFF               	movlw	high STR_2
 11202  01321E  0100               	movlb	0	; () banked
 11203  013220  6FA8               	movwf	(printf@f+1)& (0+255),b
 11204  013222  0E43               	movlw	low STR_134
 11205  013224  0100               	movlb	0	; () banked
 11206  013226  6FA9               	movwf	(?_printf+2)& (0+255),b
 11207  013228  0EFF               	movlw	high STR_134
 11208  01322A  0100               	movlb	0	; () banked
 11209  01322C  6FAA               	movwf	(?_printf+3)& (0+255),b
 11210  01322E  EC9A  F086         	call	_printf	;wreg free
 11211                           
 11212                           ;UART.c: 389: usart_str_1(',');
 11213  013232  0E2C               	movlw	44
 11214  013234  EC30  F0D5         	call	_usart_str_1
 11215                           
 11216                           ;UART.c: 391: printf("%s","WIND 2 INSTANT");
 11217  013238  0EF5               	movlw	low STR_2
 11218  01323A  0100               	movlb	0	; () banked
 11219  01323C  6FA7               	movwf	printf@f& (0+255),b
 11220  01323E  0EFF               	movlw	high STR_2
 11221  013240  0100               	movlb	0	; () banked
 11222  013242  6FA8               	movwf	(printf@f+1)& (0+255),b
 11223  013244  0E5F               	movlw	low STR_136
 11224  013246  0100               	movlb	0	; () banked
 11225  013248  6FA9               	movwf	(?_printf+2)& (0+255),b
 11226  01324A  0EFD               	movlw	high STR_136
 11227  01324C  0100               	movlb	0	; () banked
 11228  01324E  6FAA               	movwf	(?_printf+3)& (0+255),b
 11229  013250  EC9A  F086         	call	_printf	;wreg free
 11230                           
 11231                           ;UART.c: 392: usart_str_1(',');
 11232  013254  0E2C               	movlw	44
 11233  013256  EC30  F0D5         	call	_usart_str_1
 11234                           
 11235                           ;UART.c: 394: printf("%s","WIND 2 AVG");
 11236  01325A  0EF5               	movlw	low STR_2
 11237  01325C  0100               	movlb	0	; () banked
 11238  01325E  6FA7               	movwf	printf@f& (0+255),b
 11239  013260  0EFF               	movlw	high STR_2
 11240  013262  0100               	movlb	0	; () banked
 11241  013264  6FA8               	movwf	(printf@f+1)& (0+255),b
 11242  013266  0E4C               	movlw	low STR_138
 11243  013268  0100               	movlb	0	; () banked
 11244  01326A  6FA9               	movwf	(?_printf+2)& (0+255),b
 11245  01326C  0EFE               	movlw	high STR_138
 11246  01326E  0100               	movlb	0	; () banked
 11247  013270  6FAA               	movwf	(?_printf+3)& (0+255),b
 11248  013272  EC9A  F086         	call	_printf	;wreg free
 11249                           
 11250                           ;UART.c: 395: usart_str_1(',');
 11251  013276  0E2C               	movlw	44
 11252  013278  EC30  F0D5         	call	_usart_str_1
 11253                           
 11254                           ;UART.c: 397: printf("%s","TURBINE RPM");
 11255  01327C  0EF5               	movlw	low STR_2
 11256  01327E  0100               	movlb	0	; () banked
 11257  013280  6FA7               	movwf	printf@f& (0+255),b
 11258  013282  0EFF               	movlw	high STR_2
 11259  013284  0100               	movlb	0	; () banked
 11260  013286  6FA8               	movwf	(printf@f+1)& (0+255),b
 11261  013288  0E29               	movlw	low STR_140
 11262  01328A  0100               	movlb	0	; () banked
 11263  01328C  6FA9               	movwf	(?_printf+2)& (0+255),b
 11264  01328E  0EFE               	movlw	high STR_140
 11265  013290  0100               	movlb	0	; () banked
 11266  013292  6FAA               	movwf	(?_printf+3)& (0+255),b
 11267  013294  EC9A  F086         	call	_printf	;wreg free
 11268                           
 11269                           ;UART.c: 398: usart_str_1(',');
 11270  013298  0E2C               	movlw	44
 11271  01329A  EC30  F0D5         	call	_usart_str_1
 11272                           
 11273                           ;UART.c: 400: printf("%s","GENERATOR RPM");
 11274  01329E  0EF5               	movlw	low STR_2
 11275  0132A0  0100               	movlb	0	; () banked
 11276  0132A2  6FA7               	movwf	printf@f& (0+255),b
 11277  0132A4  0EFF               	movlw	high STR_2
 11278  0132A6  0100               	movlb	0	; () banked
 11279  0132A8  6FA8               	movwf	(printf@f+1)& (0+255),b
 11280  0132AA  0E8B               	movlw	low STR_142
 11281  0132AC  0100               	movlb	0	; () banked
 11282  0132AE  6FA9               	movwf	(?_printf+2)& (0+255),b
 11283  0132B0  0EFD               	movlw	high STR_142
 11284  0132B2  0100               	movlb	0	; () banked
 11285  0132B4  6FAA               	movwf	(?_printf+3)& (0+255),b
 11286  0132B6  EC9A  F086         	call	_printf	;wreg free
 11287                           
 11288                           ;UART.c: 401: usart_str_1(',');
 11289  0132BA  0E2C               	movlw	44
 11290  0132BC  EC30  F0D5         	call	_usart_str_1
 11291                           
 11292                           ;UART.c: 403: printf("%s","MOTOR SLIP RPM");
 11293  0132C0  0EF5               	movlw	low STR_2
 11294  0132C2  0100               	movlb	0	; () banked
 11295  0132C4  6FA7               	movwf	printf@f& (0+255),b
 11296  0132C6  0EFF               	movlw	high STR_2
 11297  0132C8  0100               	movlb	0	; () banked
 11298  0132CA  6FA8               	movwf	(printf@f+1)& (0+255),b
 11299  0132CC  0E32               	movlw	low STR_144
 11300  0132CE  0100               	movlb	0	; () banked
 11301  0132D0  6FA9               	movwf	(?_printf+2)& (0+255),b
 11302  0132D2  0EFD               	movlw	high STR_144
 11303  0132D4  0100               	movlb	0	; () banked
 11304  0132D6  6FAA               	movwf	(?_printf+3)& (0+255),b
 11305  0132D8  EC9A  F086         	call	_printf	;wreg free
 11306                           
 11307                           ;UART.c: 404: usart_str_1(',');
 11308  0132DC  0E2C               	movlw	44
 11309  0132DE  EC30  F0D5         	call	_usart_str_1
 11310                           
 11311                           ;UART.c: 406: printf("%s","ROTOR SLIP RPM");
 11312  0132E2  0EF5               	movlw	low STR_2
 11313  0132E4  0100               	movlb	0	; () banked
 11314  0132E6  6FA7               	movwf	printf@f& (0+255),b
 11315  0132E8  0EFF               	movlw	high STR_2
 11316  0132EA  0100               	movlb	0	; () banked
 11317  0132EC  6FA8               	movwf	(printf@f+1)& (0+255),b
 11318  0132EE  0E41               	movlw	low STR_146
 11319  0132F0  0100               	movlb	0	; () banked
 11320  0132F2  6FA9               	movwf	(?_printf+2)& (0+255),b
 11321  0132F4  0EFD               	movlw	high STR_146
 11322  0132F6  0100               	movlb	0	; () banked
 11323  0132F8  6FAA               	movwf	(?_printf+3)& (0+255),b
 11324  0132FA  EC9A  F086         	call	_printf	;wreg free
 11325                           
 11326                           ;UART.c: 407: usart_str_1(',');
 11327  0132FE  0E2C               	movlw	44
 11328  013300  EC30  F0D5         	call	_usart_str_1
 11329                           
 11330                           ;UART.c: 409: printf("%s","VFD Hz");
 11331  013304  0EF5               	movlw	low STR_2
 11332  013306  0100               	movlb	0	; () banked
 11333  013308  6FA7               	movwf	printf@f& (0+255),b
 11334  01330A  0EFF               	movlw	high STR_2
 11335  01330C  0100               	movlb	0	; () banked
 11336  01330E  6FA8               	movwf	(printf@f+1)& (0+255),b
 11337  013310  0ECD               	movlw	low STR_148
 11338  013312  0100               	movlb	0	; () banked
 11339  013314  6FA9               	movwf	(?_printf+2)& (0+255),b
 11340  013316  0EFF               	movlw	high STR_148
 11341  013318  0100               	movlb	0	; () banked
 11342  01331A  6FAA               	movwf	(?_printf+3)& (0+255),b
 11343  01331C  EC9A  F086         	call	_printf	;wreg free
 11344                           
 11345                           ;UART.c: 410: usart_str_1(',');
 11346  013320  0E2C               	movlw	44
 11347  013322  EC30  F0D5         	call	_usart_str_1
 11348                           
 11349                           ;UART.c: 412: printf("%s","DC BUS VOLTAGE");
 11350  013326  0EF5               	movlw	low STR_2
 11351  013328  0100               	movlb	0	; () banked
 11352  01332A  6FA7               	movwf	printf@f& (0+255),b
 11353  01332C  0EFF               	movlw	high STR_2
 11354  01332E  0100               	movlb	0	; () banked
 11355  013330  6FA8               	movwf	(printf@f+1)& (0+255),b
 11356  013332  0E23               	movlw	low STR_150
 11357  013334  0100               	movlb	0	; () banked
 11358  013336  6FA9               	movwf	(?_printf+2)& (0+255),b
 11359  013338  0EFD               	movlw	high STR_150
 11360  01333A  0100               	movlb	0	; () banked
 11361  01333C  6FAA               	movwf	(?_printf+3)& (0+255),b
 11362  01333E  EC9A  F086         	call	_printf	;wreg free
 11363                           
 11364                           ;UART.c: 413: usart_str_1(',');
 11365  013342  0E2C               	movlw	44
 11366  013344  EC30  F0D5         	call	_usart_str_1
 11367                           
 11368                           ;UART.c: 415: printf("%s","DC BUS CURRENT");
 11369  013348  0EF5               	movlw	low STR_2
 11370  01334A  0100               	movlb	0	; () banked
 11371  01334C  6FA7               	movwf	printf@f& (0+255),b
 11372  01334E  0EFF               	movlw	high STR_2
 11373  013350  0100               	movlb	0	; () banked
 11374  013352  6FA8               	movwf	(printf@f+1)& (0+255),b
 11375  013354  0E6E               	movlw	low STR_152
 11376  013356  0100               	movlb	0	; () banked
 11377  013358  6FA9               	movwf	(?_printf+2)& (0+255),b
 11378  01335A  0EFD               	movlw	high STR_152
 11379  01335C  0100               	movlb	0	; () banked
 11380  01335E  6FAA               	movwf	(?_printf+3)& (0+255),b
 11381  013360  EC9A  F086         	call	_printf	;wreg free
 11382                           
 11383                           ;UART.c: 416: usart_str_1(',');
 11384  013364  0E2C               	movlw	44
 11385  013366  EC30  F0D5         	call	_usart_str_1
 11386                           
 11387                           ;UART.c: 418: printf("%s","R VOLT");
 11388  01336A  0EF5               	movlw	low STR_2
 11389  01336C  0100               	movlb	0	; () banked
 11390  01336E  6FA7               	movwf	printf@f& (0+255),b
 11391  013370  0EFF               	movlw	high STR_2
 11392  013372  0100               	movlb	0	; () banked
 11393  013374  6FA8               	movwf	(printf@f+1)& (0+255),b
 11394  013376  0EB1               	movlw	low STR_154
 11395  013378  0100               	movlb	0	; () banked
 11396  01337A  6FA9               	movwf	(?_printf+2)& (0+255),b
 11397  01337C  0EFF               	movlw	high STR_154
 11398  01337E  0100               	movlb	0	; () banked
 11399  013380  6FAA               	movwf	(?_printf+3)& (0+255),b
 11400  013382  EC9A  F086         	call	_printf	;wreg free
 11401                           
 11402                           ;UART.c: 419: usart_str_1(',');
 11403  013386  0E2C               	movlw	44
 11404  013388  EC30  F0D5         	call	_usart_str_1
 11405                           
 11406                           ;UART.c: 421: printf("%s","Y VOLT");
 11407  01338C  0EF5               	movlw	low STR_2
 11408  01338E  0100               	movlb	0	; () banked
 11409  013390  6FA7               	movwf	printf@f& (0+255),b
 11410  013392  0EFF               	movlw	high STR_2
 11411  013394  0100               	movlb	0	; () banked
 11412  013396  6FA8               	movwf	(printf@f+1)& (0+255),b
 11413  013398  0EB8               	movlw	low STR_156
 11414  01339A  0100               	movlb	0	; () banked
 11415  01339C  6FA9               	movwf	(?_printf+2)& (0+255),b
 11416  01339E  0EFF               	movlw	high STR_156
 11417  0133A0  0100               	movlb	0	; () banked
 11418  0133A2  6FAA               	movwf	(?_printf+3)& (0+255),b
 11419  0133A4  EC9A  F086         	call	_printf	;wreg free
 11420                           
 11421                           ;UART.c: 422: usart_str_1(',');
 11422  0133A8  0E2C               	movlw	44
 11423  0133AA  EC30  F0D5         	call	_usart_str_1
 11424                           
 11425                           ;UART.c: 424: printf("%s","B VOLT");
 11426  0133AE  0EF5               	movlw	low STR_2
 11427  0133B0  0100               	movlb	0	; () banked
 11428  0133B2  6FA7               	movwf	printf@f& (0+255),b
 11429  0133B4  0EFF               	movlw	high STR_2
 11430  0133B6  0100               	movlb	0	; () banked
 11431  0133B8  6FA8               	movwf	(printf@f+1)& (0+255),b
 11432  0133BA  0EAA               	movlw	low STR_158
 11433  0133BC  0100               	movlb	0	; () banked
 11434  0133BE  6FA9               	movwf	(?_printf+2)& (0+255),b
 11435  0133C0  0EFF               	movlw	high STR_158
 11436  0133C2  0100               	movlb	0	; () banked
 11437  0133C4  6FAA               	movwf	(?_printf+3)& (0+255),b
 11438  0133C6  EC9A  F086         	call	_printf	;wreg free
 11439                           
 11440                           ;UART.c: 425: usart_str_1(',');
 11441  0133CA  0E2C               	movlw	44
 11442  0133CC  EC30  F0D5         	call	_usart_str_1
 11443                           
 11444                           ;UART.c: 427: printf("%s","R CURRENT");
 11445  0133D0  0EF5               	movlw	low STR_2
 11446  0133D2  0100               	movlb	0	; () banked
 11447  0133D4  6FA7               	movwf	printf@f& (0+255),b
 11448  0133D6  0EFF               	movlw	high STR_2
 11449  0133D8  0100               	movlb	0	; () banked
 11450  0133DA  6FA8               	movwf	(printf@f+1)& (0+255),b
 11451  0133DC  0EFF               	movlw	low STR_160
 11452  0133DE  0100               	movlb	0	; () banked
 11453  0133E0  6FA9               	movwf	(?_printf+2)& (0+255),b
 11454  0133E2  0EFE               	movlw	high STR_160
 11455  0133E4  0100               	movlb	0	; () banked
 11456  0133E6  6FAA               	movwf	(?_printf+3)& (0+255),b
 11457  0133E8  EC9A  F086         	call	_printf	;wreg free
 11458                           
 11459                           ;UART.c: 428: usart_str_1(',');
 11460  0133EC  0E2C               	movlw	44
 11461  0133EE  EC30  F0D5         	call	_usart_str_1
 11462                           
 11463                           ;UART.c: 430: printf("%s","Y CURRENT");
 11464  0133F2  0EF5               	movlw	low STR_2
 11465  0133F4  0100               	movlb	0	; () banked
 11466  0133F6  6FA7               	movwf	printf@f& (0+255),b
 11467  0133F8  0EFF               	movlw	high STR_2
 11468  0133FA  0100               	movlb	0	; () banked
 11469  0133FC  6FA8               	movwf	(printf@f+1)& (0+255),b
 11470  0133FE  0E09               	movlw	low STR_162
 11471  013400  0100               	movlb	0	; () banked
 11472  013402  6FA9               	movwf	(?_printf+2)& (0+255),b
 11473  013404  0EFF               	movlw	high STR_162
 11474  013406  0100               	movlb	0	; () banked
 11475  013408  6FAA               	movwf	(?_printf+3)& (0+255),b
 11476  01340A  EC9A  F086         	call	_printf	;wreg free
 11477                           
 11478                           ;UART.c: 431: usart_str_1(',');
 11479  01340E  0E2C               	movlw	44
 11480  013410  EC30  F0D5         	call	_usart_str_1
 11481                           
 11482                           ;UART.c: 433: printf("%s","B CURRENT");
 11483  013414  0EF5               	movlw	low STR_2
 11484  013416  0100               	movlb	0	; () banked
 11485  013418  6FA7               	movwf	printf@f& (0+255),b
 11486  01341A  0EFF               	movlw	high STR_2
 11487  01341C  0100               	movlb	0	; () banked
 11488  01341E  6FA8               	movwf	(printf@f+1)& (0+255),b
 11489  013420  0EF5               	movlw	low STR_164
 11490  013422  0100               	movlb	0	; () banked
 11491  013424  6FA9               	movwf	(?_printf+2)& (0+255),b
 11492  013426  0EFE               	movlw	high STR_164
 11493  013428  0100               	movlb	0	; () banked
 11494  01342A  6FAA               	movwf	(?_printf+3)& (0+255),b
 11495  01342C  EC9A  F086         	call	_printf	;wreg free
 11496                           
 11497                           ;UART.c: 434: usart_str_1(',');
 11498  013430  0E2C               	movlw	44
 11499  013432  EC30  F0D5         	call	_usart_str_1
 11500                           
 11501                           ;UART.c: 436: printf("%s","KW");
 11502  013436  0EF5               	movlw	low STR_2
 11503  013438  0100               	movlb	0	; () banked
 11504  01343A  6FA7               	movwf	printf@f& (0+255),b
 11505  01343C  0EFF               	movlw	high STR_2
 11506  01343E  0100               	movlb	0	; () banked
 11507  013440  6FA8               	movwf	(printf@f+1)& (0+255),b
 11508  013442  0EEB               	movlw	low (STR_168+2)
 11509  013444  0100               	movlb	0	; () banked
 11510  013446  6FA9               	movwf	(?_printf+2)& (0+255),b
 11511  013448  0EFF               	movlw	high (STR_168+2)
 11512  01344A  0100               	movlb	0	; () banked
 11513  01344C  6FAA               	movwf	(?_printf+3)& (0+255),b
 11514  01344E  EC9A  F086         	call	_printf	;wreg free
 11515                           
 11516                           ;UART.c: 437: usart_str_1(',');
 11517  013452  0E2C               	movlw	44
 11518  013454  EC30  F0D5         	call	_usart_str_1
 11519                           
 11520                           ;UART.c: 439: printf("%s","Y-KW");
 11521  013458  0EF5               	movlw	low STR_2
 11522  01345A  0100               	movlb	0	; () banked
 11523  01345C  6FA7               	movwf	printf@f& (0+255),b
 11524  01345E  0EFF               	movlw	high STR_2
 11525  013460  0100               	movlb	0	; () banked
 11526  013462  6FA8               	movwf	(printf@f+1)& (0+255),b
 11527  013464  0EE9               	movlw	low STR_168
 11528  013466  0100               	movlb	0	; () banked
 11529  013468  6FA9               	movwf	(?_printf+2)& (0+255),b
 11530  01346A  0EFF               	movlw	high STR_168
 11531  01346C  0100               	movlb	0	; () banked
 11532  01346E  6FAA               	movwf	(?_printf+3)& (0+255),b
 11533  013470  EC9A  F086         	call	_printf	;wreg free
 11534                           
 11535                           ;UART.c: 440: usart_str_1(',');
 11536  013474  0E2C               	movlw	44
 11537  013476  EC30  F0D5         	call	_usart_str_1
 11538                           
 11539                           ;UART.c: 442: printf("%s","KVA");
 11540  01347A  0EF5               	movlw	low STR_2
 11541  01347C  0100               	movlb	0	; () banked
 11542  01347E  6FA7               	movwf	printf@f& (0+255),b
 11543  013480  0EFF               	movlw	high STR_2
 11544  013482  0100               	movlb	0	; () banked
 11545  013484  6FA8               	movwf	(printf@f+1)& (0+255),b
 11546  013486  0EEE               	movlw	low STR_170
 11547  013488  0100               	movlb	0	; () banked
 11548  01348A  6FA9               	movwf	(?_printf+2)& (0+255),b
 11549  01348C  0EFF               	movlw	high STR_170
 11550  01348E  0100               	movlb	0	; () banked
 11551  013490  6FAA               	movwf	(?_printf+3)& (0+255),b
 11552  013492  EC9A  F086         	call	_printf	;wreg free
 11553                           
 11554                           ;UART.c: 443: usart_str_1(',');
 11555  013496  0E2C               	movlw	44
 11556  013498  EC30  F0D5         	call	_usart_str_1
 11557                           
 11558                           ;UART.c: 445: printf("%s","KVAR");
 11559  01349C  0EF5               	movlw	low STR_2
 11560  01349E  0100               	movlb	0	; () banked
 11561  0134A0  6FA7               	movwf	printf@f& (0+255),b
 11562  0134A2  0EFF               	movlw	high STR_2
 11563  0134A4  0100               	movlb	0	; () banked
 11564  0134A6  6FA8               	movwf	(printf@f+1)& (0+255),b
 11565  0134A8  0EE4               	movlw	low STR_172
 11566  0134AA  0100               	movlb	0	; () banked
 11567  0134AC  6FA9               	movwf	(?_printf+2)& (0+255),b
 11568  0134AE  0EFF               	movlw	high STR_172
 11569  0134B0  0100               	movlb	0	; () banked
 11570  0134B2  6FAA               	movwf	(?_printf+3)& (0+255),b
 11571  0134B4  EC9A  F086         	call	_printf	;wreg free
 11572                           
 11573                           ;UART.c: 446: usart_str_1(',');
 11574  0134B8  0E2C               	movlw	44
 11575  0134BA  EC30  F0D5         	call	_usart_str_1
 11576                           
 11577                           ;UART.c: 448: printf("%s","TOAL POWER FACTOR");
 11578  0134BE  0EF5               	movlw	low STR_2
 11579  0134C0  0100               	movlb	0	; () banked
 11580  0134C2  6FA7               	movwf	printf@f& (0+255),b
 11581  0134C4  0EFF               	movlw	high STR_2
 11582  0134C6  0100               	movlb	0	; () banked
 11583  0134C8  6FA8               	movwf	(printf@f+1)& (0+255),b
 11584  0134CA  0EBD               	movlw	low STR_174
 11585  0134CC  0100               	movlb	0	; () banked
 11586  0134CE  6FA9               	movwf	(?_printf+2)& (0+255),b
 11587  0134D0  0EFC               	movlw	high STR_174
 11588  0134D2  0100               	movlb	0	; () banked
 11589  0134D4  6FAA               	movwf	(?_printf+3)& (0+255),b
 11590  0134D6  EC9A  F086         	call	_printf	;wreg free
 11591                           
 11592                           ;UART.c: 449: usart_str_1(',');
 11593  0134DA  0E2C               	movlw	44
 11594  0134DC  EC30  F0D5         	call	_usart_str_1
 11595                           
 11596                           ;UART.c: 451: printf("%s","Y-POWER FACTOR");
 11597  0134E0  0EF5               	movlw	low STR_2
 11598  0134E2  0100               	movlb	0	; () banked
 11599  0134E4  6FA7               	movwf	printf@f& (0+255),b
 11600  0134E6  0EFF               	movlw	high STR_2
 11601  0134E8  0100               	movlb	0	; () banked
 11602  0134EA  6FA8               	movwf	(printf@f+1)& (0+255),b
 11603  0134EC  0E50               	movlw	low STR_176
 11604  0134EE  0100               	movlb	0	; () banked
 11605  0134F0  6FA9               	movwf	(?_printf+2)& (0+255),b
 11606  0134F2  0EFD               	movlw	high STR_176
 11607  0134F4  0100               	movlb	0	; () banked
 11608  0134F6  6FAA               	movwf	(?_printf+3)& (0+255),b
 11609  0134F8  EC9A  F086         	call	_printf	;wreg free
 11610                           
 11611                           ;UART.c: 452: usart_str_1(',');
 11612  0134FC  0E2C               	movlw	44
 11613  0134FE  EC30  F0D5         	call	_usart_str_1
 11614                           
 11615                           ;UART.c: 454: printf("%s","FREQUENCY");
 11616  013502  0EF5               	movlw	low STR_2
 11617  013504  0100               	movlb	0	; () banked
 11618  013506  6FA7               	movwf	printf@f& (0+255),b
 11619  013508  0EFF               	movlw	high STR_2
 11620  01350A  0100               	movlb	0	; () banked
 11621  01350C  6FA8               	movwf	(printf@f+1)& (0+255),b
 11622  01350E  0E1D               	movlw	low STR_178
 11623  013510  0100               	movlb	0	; () banked
 11624  013512  6FA9               	movwf	(?_printf+2)& (0+255),b
 11625  013514  0EFF               	movlw	high STR_178
 11626  013516  0100               	movlb	0	; () banked
 11627  013518  6FAA               	movwf	(?_printf+3)& (0+255),b
 11628  01351A  EC9A  F086         	call	_printf	;wreg free
 11629                           
 11630                           ;UART.c: 455: usart_str_1(',');
 11631  01351E  0E2C               	movlw	44
 11632  013520  EC30  F0D5         	call	_usart_str_1
 11633                           
 11634                           ;UART.c: 457: printf("%s","PHASE ANGLE");
 11635  013524  0EF5               	movlw	low STR_2
 11636  013526  0100               	movlb	0	; () banked
 11637  013528  6FA7               	movwf	printf@f& (0+255),b
 11638  01352A  0EFF               	movlw	high STR_2
 11639  01352C  0100               	movlb	0	; () banked
 11640  01352E  6FA8               	movwf	(printf@f+1)& (0+255),b
 11641  013530  0E11               	movlw	low STR_180
 11642  013532  0100               	movlb	0	; () banked
 11643  013534  6FA9               	movwf	(?_printf+2)& (0+255),b
 11644  013536  0EFE               	movlw	high STR_180
 11645  013538  0100               	movlb	0	; () banked
 11646  01353A  6FAA               	movwf	(?_printf+3)& (0+255),b
 11647  01353C  EC9A  F086         	call	_printf	;wreg free
 11648                           
 11649                           ;UART.c: 458: usart_str_1(',');
 11650  013540  0E2C               	movlw	44
 11651  013542  EC30  F0D5         	call	_usart_str_1
 11652                           
 11653                           ;UART.c: 460: printf("%s","VFD ERROR");
 11654  013546  0EF5               	movlw	low STR_2
 11655  013548  0100               	movlb	0	; () banked
 11656  01354A  6FA7               	movwf	printf@f& (0+255),b
 11657  01354C  0EFF               	movlw	high STR_2
 11658  01354E  0100               	movlb	0	; () banked
 11659  013550  6FA8               	movwf	(printf@f+1)& (0+255),b
 11660  013552  0EE1               	movlw	low STR_182
 11661  013554  0100               	movlb	0	; () banked
 11662  013556  6FA9               	movwf	(?_printf+2)& (0+255),b
 11663  013558  0EFE               	movlw	high STR_182
 11664  01355A  0100               	movlb	0	; () banked
 11665  01355C  6FAA               	movwf	(?_printf+3)& (0+255),b
 11666  01355E  EC9A  F086         	call	_printf	;wreg free
 11667                           
 11668                           ;UART.c: 461: usart_str_1(',');
 11669  013562  0E2C               	movlw	44
 11670  013564  EC30  F0D5         	call	_usart_str_1
 11671                           
 11672                           ;UART.c: 463: printf("%s","INITAL DELAY");
 11673  013568  0EF5               	movlw	low STR_2
 11674  01356A  0100               	movlb	0	; () banked
 11675  01356C  6FA7               	movwf	printf@f& (0+255),b
 11676  01356E  0EFF               	movlw	high STR_2
 11677  013570  0100               	movlb	0	; () banked
 11678  013572  6FA8               	movwf	(printf@f+1)& (0+255),b
 11679  013574  0E04               	movlw	low STR_184
 11680  013576  0100               	movlb	0	; () banked
 11681  013578  6FA9               	movwf	(?_printf+2)& (0+255),b
 11682  01357A  0EFE               	movlw	high STR_184
 11683  01357C  0100               	movlb	0	; () banked
 11684  01357E  6FAA               	movwf	(?_printf+3)& (0+255),b
 11685  013580  EC9A  F086         	call	_printf	;wreg free
 11686                           
 11687                           ;UART.c: 464: usart_str_1(',');
 11688  013584  0E2C               	movlw	44
 11689  013586  EC30  F0D5         	call	_usart_str_1
 11690                           
 11691                           ;UART.c: 466: printf("%s","ERROR NO");
 11692  01358A  0EF5               	movlw	low STR_2
 11693  01358C  0100               	movlb	0	; () banked
 11694  01358E  6FA7               	movwf	printf@f& (0+255),b
 11695  013590  0EFF               	movlw	high STR_2
 11696  013592  0100               	movlb	0	; () banked
 11697  013594  6FA8               	movwf	(printf@f+1)& (0+255),b
 11698  013596  0E4C               	movlw	low STR_186
 11699  013598  0100               	movlb	0	; () banked
 11700  01359A  6FA9               	movwf	(?_printf+2)& (0+255),b
 11701  01359C  0EFF               	movlw	high STR_186
 11702  01359E  0100               	movlb	0	; () banked
 11703  0135A0  6FAA               	movwf	(?_printf+3)& (0+255),b
 11704  0135A2  EC9A  F086         	call	_printf	;wreg free
 11705                           
 11706                           ;UART.c: 467: usart_str_1(',');
 11707  0135A6  0E2C               	movlw	44
 11708  0135A8  EC30  F0D5         	call	_usart_str_1
 11709                           
 11710                           ;UART.c: 469: printf("%s","ERROR IN STRING");
 11711  0135AC  0EF5               	movlw	low STR_2
 11712  0135AE  0100               	movlb	0	; () banked
 11713  0135B0  6FA7               	movwf	printf@f& (0+255),b
 11714  0135B2  0EFF               	movlw	high STR_2
 11715  0135B4  0100               	movlb	0	; () banked
 11716  0135B6  6FA8               	movwf	(printf@f+1)& (0+255),b
 11717  0135B8  0E13               	movlw	low STR_188
 11718  0135BA  0100               	movlb	0	; () banked
 11719  0135BC  6FA9               	movwf	(?_printf+2)& (0+255),b
 11720  0135BE  0EFD               	movlw	high STR_188
 11721  0135C0  0100               	movlb	0	; () banked
 11722  0135C2  6FAA               	movwf	(?_printf+3)& (0+255),b
 11723  0135C4  EC9A  F086         	call	_printf	;wreg free
 11724                           
 11725                           ;UART.c: 470: usart_str_1(',');
 11726  0135C8  0E2C               	movlw	44
 11727  0135CA  EC30  F0D5         	call	_usart_str_1
 11728                           
 11729                           ;UART.c: 472: printf("%s","TURBINE STATE");
 11730  0135CE  0EF5               	movlw	low STR_2
 11731  0135D0  0100               	movlb	0	; () banked
 11732  0135D2  6FA7               	movwf	printf@f& (0+255),b
 11733  0135D4  0EFF               	movlw	high STR_2
 11734  0135D6  0100               	movlb	0	; () banked
 11735  0135D8  6FA8               	movwf	(printf@f+1)& (0+255),b
 11736  0135DA  0E7D               	movlw	low STR_190
 11737  0135DC  0100               	movlb	0	; () banked
 11738  0135DE  6FA9               	movwf	(?_printf+2)& (0+255),b
 11739  0135E0  0EFD               	movlw	high STR_190
 11740  0135E2  0100               	movlb	0	; () banked
 11741  0135E4  6FAA               	movwf	(?_printf+3)& (0+255),b
 11742  0135E6  EC9A  F086         	call	_printf	;wreg free
 11743                           
 11744                           ;UART.c: 473: usart_str_1(',');
 11745  0135EA  0E2C               	movlw	44
 11746  0135EC  EC30  F0D5         	call	_usart_str_1
 11747                           
 11748                           ;UART.c: 475: printf("%s","DATE");
 11749  0135F0  0EF5               	movlw	low STR_2
 11750  0135F2  0100               	movlb	0	; () banked
 11751  0135F4  6FA7               	movwf	printf@f& (0+255),b
 11752  0135F6  0EFF               	movlw	high STR_2
 11753  0135F8  0100               	movlb	0	; () banked
 11754  0135FA  6FA8               	movwf	(printf@f+1)& (0+255),b
 11755  0135FC  0EDA               	movlw	low STR_192
 11756  0135FE  0100               	movlb	0	; () banked
 11757  013600  6FA9               	movwf	(?_printf+2)& (0+255),b
 11758  013602  0EFF               	movlw	high STR_192
 11759  013604  0100               	movlb	0	; () banked
 11760  013606  6FAA               	movwf	(?_printf+3)& (0+255),b
 11761  013608  EC9A  F086         	call	_printf	;wreg free
 11762                           
 11763                           ;UART.c: 476: usart_str_1(',');
 11764  01360C  0E2C               	movlw	44
 11765  01360E  EC30  F0D5         	call	_usart_str_1
 11766                           
 11767                           ;UART.c: 478: printf("%s","TIME");
 11768  013612  0EF5               	movlw	low STR_2
 11769  013614  0100               	movlb	0	; () banked
 11770  013616  6FA7               	movwf	printf@f& (0+255),b
 11771  013618  0EFF               	movlw	high STR_2
 11772  01361A  0100               	movlb	0	; () banked
 11773  01361C  6FA8               	movwf	(printf@f+1)& (0+255),b
 11774  01361E  0E70               	movlw	low (STR_222+13)
 11775  013620  0100               	movlb	0	; () banked
 11776  013622  6FA9               	movwf	(?_printf+2)& (0+255),b
 11777  013624  0EFC               	movlw	high (STR_222+13)
 11778  013626  0100               	movlb	0	; () banked
 11779  013628  6FAA               	movwf	(?_printf+3)& (0+255),b
 11780  01362A  EC9A  F086         	call	_printf	;wreg free
 11781                           
 11782                           ;UART.c: 479: usart_str_1(',');
 11783  01362E  0E2C               	movlw	44
 11784  013630  EC30  F0D5         	call	_usart_str_1
 11785                           
 11786                           ;UART.c: 481: printf("%s","TEMPERATURE");
 11787  013634  0EF5               	movlw	low STR_2
 11788  013636  0100               	movlb	0	; () banked
 11789  013638  6FA7               	movwf	printf@f& (0+255),b
 11790  01363A  0EFF               	movlw	high STR_2
 11791  01363C  0100               	movlb	0	; () banked
 11792  01363E  6FA8               	movwf	(printf@f+1)& (0+255),b
 11793  013640  0E1D               	movlw	low STR_196
 11794  013642  0100               	movlb	0	; () banked
 11795  013644  6FA9               	movwf	(?_printf+2)& (0+255),b
 11796  013646  0EFE               	movlw	high STR_196
 11797  013648  0100               	movlb	0	; () banked
 11798  01364A  6FAA               	movwf	(?_printf+3)& (0+255),b
 11799  01364C  EC9A  F086         	call	_printf	;wreg free
 11800                           
 11801                           ;UART.c: 482: usart_str_1(',');
 11802  013650  0E2C               	movlw	44
 11803  013652  EC30  F0D5         	call	_usart_str_1
 11804                           
 11805                           ;UART.c: 484: printf("%s","LAST 5 ERROR");
 11806  013656  0EF5               	movlw	low STR_2
 11807  013658  0100               	movlb	0	; () banked
 11808  01365A  6FA7               	movwf	printf@f& (0+255),b
 11809  01365C  0EFF               	movlw	high STR_2
 11810  01365E  0100               	movlb	0	; () banked
 11811  013660  6FA8               	movwf	(printf@f+1)& (0+255),b
 11812  013662  0EEA               	movlw	low STR_198
 11813  013664  0100               	movlb	0	; () banked
 11814  013666  6FA9               	movwf	(?_printf+2)& (0+255),b
 11815  013668  0EFD               	movlw	high STR_198
 11816  01366A  0100               	movlb	0	; () banked
 11817  01366C  6FAA               	movwf	(?_printf+3)& (0+255),b
 11818  01366E  EC9A  F086         	call	_printf	;wreg free
 11819                           
 11820                           ;UART.c: 485: usart_str_1(',');
 11821  013672  0E2C               	movlw	44
 11822  013674  EC30  F0D5         	call	_usart_str_1
 11823                           
 11824                           ;UART.c: 487: printf("%s","CONTACTOR");
 11825  013678  0EF5               	movlw	low STR_2
 11826  01367A  0100               	movlb	0	; () banked
 11827  01367C  6FA7               	movwf	printf@f& (0+255),b
 11828  01367E  0EFF               	movlw	high STR_2
 11829  013680  0100               	movlb	0	; () banked
 11830  013682  6FA8               	movwf	(printf@f+1)& (0+255),b
 11831  013684  0EEB               	movlw	low STR_200
 11832  013686  0100               	movlb	0	; () banked
 11833  013688  6FA9               	movwf	(?_printf+2)& (0+255),b
 11834  01368A  0EFE               	movlw	high STR_200
 11835  01368C  0100               	movlb	0	; () banked
 11836  01368E  6FAA               	movwf	(?_printf+3)& (0+255),b
 11837  013690  EC9A  F086         	call	_printf	;wreg free
 11838                           
 11839                           ;UART.c: 488: usart_str_1(',');
 11840  013694  0E2C               	movlw	44
 11841  013696  EC30  F0D5         	call	_usart_str_1
 11842                           
 11843                           ;UART.c: 490: printf("%s","RAMP UP LOOP");
 11844  01369A  0EF5               	movlw	low STR_2
 11845  01369C  0100               	movlb	0	; () banked
 11846  01369E  6FA7               	movwf	printf@f& (0+255),b
 11847  0136A0  0EFF               	movlw	high STR_2
 11848  0136A2  0100               	movlb	0	; () banked
 11849  0136A4  6FA8               	movwf	(printf@f+1)& (0+255),b
 11850  0136A6  0EDD               	movlw	low STR_202
 11851  0136A8  0100               	movlb	0	; () banked
 11852  0136AA  6FA9               	movwf	(?_printf+2)& (0+255),b
 11853  0136AC  0EFD               	movlw	high STR_202
 11854  0136AE  0100               	movlb	0	; () banked
 11855  0136B0  6FAA               	movwf	(?_printf+3)& (0+255),b
 11856  0136B2  EC9A  F086         	call	_printf	;wreg free
 11857                           
 11858                           ;UART.c: 491: usart_str_1(',');
 11859  0136B6  0E2C               	movlw	44
 11860  0136B8  EC30  F0D5         	call	_usart_str_1
 11861                           
 11862                           ;UART.c: 493: printf("%s","VFD RUN TIME ERROR COUNTER");
 11863  0136BC  0EF5               	movlw	low STR_2
 11864  0136BE  0100               	movlb	0	; () banked
 11865  0136C0  6FA7               	movwf	printf@f& (0+255),b
 11866  0136C2  0EFF               	movlw	high STR_2
 11867  0136C4  0100               	movlb	0	; () banked
 11868  0136C6  6FA8               	movwf	(printf@f+1)& (0+255),b
 11869  0136C8  0E0A               	movlw	low STR_204
 11870  0136CA  0100               	movlb	0	; () banked
 11871  0136CC  6FA9               	movwf	(?_printf+2)& (0+255),b
 11872  0136CE  0EFC               	movlw	high STR_204
 11873  0136D0  0100               	movlb	0	; () banked
 11874  0136D2  6FAA               	movwf	(?_printf+3)& (0+255),b
 11875  0136D4  EC9A  F086         	call	_printf	;wreg free
 11876                           
 11877                           ;UART.c: 494: usart_str_1(',');
 11878  0136D8  0E2C               	movlw	44
 11879  0136DA  EC30  F0D5         	call	_usart_str_1
 11880                           
 11881                           ;UART.c: 496: printf("%s","ROTOR SLIP COUNTER");
 11882  0136DE  0EF5               	movlw	low STR_2
 11883  0136E0  0100               	movlb	0	; () banked
 11884  0136E2  6FA7               	movwf	printf@f& (0+255),b
 11885  0136E4  0EFF               	movlw	high STR_2
 11886  0136E6  0100               	movlb	0	; () banked
 11887  0136E8  6FA8               	movwf	(printf@f+1)& (0+255),b
 11888  0136EA  0E50               	movlw	low STR_206
 11889  0136EC  0100               	movlb	0	; () banked
 11890  0136EE  6FA9               	movwf	(?_printf+2)& (0+255),b
 11891  0136F0  0EFC               	movlw	high STR_206
 11892  0136F2  0100               	movlb	0	; () banked
 11893  0136F4  6FAA               	movwf	(?_printf+3)& (0+255),b
 11894  0136F6  EC9A  F086         	call	_printf	;wreg free
 11895                           
 11896                           ;UART.c: 497: usart_str_1(',');
 11897  0136FA  0E2C               	movlw	44
 11898  0136FC  EC30  F0D5         	call	_usart_str_1
 11899                           
 11900                           ;UART.c: 499: printf("%s","MOTOR SLIP COUNTER");
 11901  013700  0EF5               	movlw	low STR_2
 11902  013702  0100               	movlb	0	; () banked
 11903  013704  6FA7               	movwf	printf@f& (0+255),b
 11904  013706  0EFF               	movlw	high STR_2
 11905  013708  0100               	movlb	0	; () banked
 11906  01370A  6FA8               	movwf	(printf@f+1)& (0+255),b
 11907  01370C  0E3D               	movlw	low STR_208
 11908  01370E  0100               	movlb	0	; () banked
 11909  013710  6FA9               	movwf	(?_printf+2)& (0+255),b
 11910  013712  0EFC               	movlw	high STR_208
 11911  013714  0100               	movlb	0	; () banked
 11912  013716  6FAA               	movwf	(?_printf+3)& (0+255),b
 11913  013718  EC9A  F086         	call	_printf	;wreg free
 11914                           
 11915                           ;UART.c: 500: usart_str_1(',');
 11916  01371C  0E2C               	movlw	44
 11917  01371E  EC30  F0D5         	call	_usart_str_1
 11918                           
 11919                           ;UART.c: 502: printf("%s","VFD TOP CT");
 11920  013722  0EF5               	movlw	low STR_2
 11921  013724  0100               	movlb	0	; () banked
 11922  013726  6FA7               	movwf	printf@f& (0+255),b
 11923  013728  0EFF               	movlw	high STR_2
 11924  01372A  0100               	movlb	0	; () banked
 11925  01372C  6FA8               	movwf	(printf@f+1)& (0+255),b
 11926  01372E  0E8E               	movlw	low STR_210
 11927  013730  0100               	movlb	0	; () banked
 11928  013732  6FA9               	movwf	(?_printf+2)& (0+255),b
 11929  013734  0EFE               	movlw	high STR_210
 11930  013736  0100               	movlb	0	; () banked
 11931  013738  6FAA               	movwf	(?_printf+3)& (0+255),b
 11932  01373A  EC9A  F086         	call	_printf	;wreg free
 11933                           
 11934                           ;UART.c: 503: usart_str_1(',');
 11935  01373E  0E2C               	movlw	44
 11936  013740  EC30  F0D5         	call	_usart_str_1
 11937                           
 11938                           ;UART.c: 505: printf("%s","VFD BOTTOM CT");
 11939  013744  0EF5               	movlw	low STR_2
 11940  013746  0100               	movlb	0	; () banked
 11941  013748  6FA7               	movwf	printf@f& (0+255),b
 11942  01374A  0EFF               	movlw	high STR_2
 11943  01374C  0100               	movlb	0	; () banked
 11944  01374E  6FA8               	movwf	(printf@f+1)& (0+255),b
 11945  013750  0EB5               	movlw	low STR_212
 11946  013752  0100               	movlb	0	; () banked
 11947  013754  6FA9               	movwf	(?_printf+2)& (0+255),b
 11948  013756  0EFD               	movlw	high STR_212
 11949  013758  0100               	movlb	0	; () banked
 11950  01375A  6FAA               	movwf	(?_printf+3)& (0+255),b
 11951  01375C  EC9A  F086         	call	_printf	;wreg free
 11952                           
 11953                           ;UART.c: 506: usart_str_1(',');
 11954  013760  0E2C               	movlw	44
 11955  013762  EC30  F0D5         	call	_usart_str_1
 11956                           
 11957                           ;UART.c: 508: printf("%s","LOGIC OTP");
 11958  013766  0EF5               	movlw	low STR_2
 11959  013768  0100               	movlb	0	; () banked
 11960  01376A  6FA7               	movwf	printf@f& (0+255),b
 11961  01376C  0EFF               	movlw	high STR_2
 11962  01376E  0100               	movlb	0	; () banked
 11963  013770  6FA8               	movwf	(printf@f+1)& (0+255),b
 11964  013772  0ECD               	movlw	low STR_214
 11965  013774  0100               	movlb	0	; () banked
 11966  013776  6FA9               	movwf	(?_printf+2)& (0+255),b
 11967  013778  0EFE               	movlw	high STR_214
 11968  01377A  0100               	movlb	0	; () banked
 11969  01377C  6FAA               	movwf	(?_printf+3)& (0+255),b
 11970  01377E  EC9A  F086         	call	_printf	;wreg free
 11971                           
 11972                           ;UART.c: 509: usart_str_1(',');
 11973  013782  0E2C               	movlw	44
 11974  013784  EC30  F0D5         	call	_usart_str_1
 11975                           
 11976                           ;UART.c: 511: printf("%s","VFD OTP");
 11977  013788  0EF5               	movlw	low STR_2
 11978  01378A  0100               	movlb	0	; () banked
 11979  01378C  6FA7               	movwf	printf@f& (0+255),b
 11980  01378E  0EFF               	movlw	high STR_2
 11981  013790  0100               	movlb	0	; () banked
 11982  013792  6FA8               	movwf	(printf@f+1)& (0+255),b
 11983  013794  0E77               	movlw	low STR_216
 11984  013796  0100               	movlb	0	; () banked
 11985  013798  6FA9               	movwf	(?_printf+2)& (0+255),b
 11986  01379A  0EFF               	movlw	high STR_216
 11987  01379C  0100               	movlb	0	; () banked
 11988  01379E  6FAA               	movwf	(?_printf+3)& (0+255),b
 11989  0137A0  EC9A  F086         	call	_printf	;wreg free
 11990                           
 11991                           ;UART.c: 512: usart_str_1(',');
 11992  0137A4  0E2C               	movlw	44
 11993  0137A6  EC30  F0D5         	call	_usart_str_1
 11994                           
 11995                           ;UART.c: 514: printf("%s","GEN EEPROM FLAG");
 11996  0137AA  0EF5               	movlw	low STR_2
 11997  0137AC  0100               	movlb	0	; () banked
 11998  0137AE  6FA7               	movwf	printf@f& (0+255),b
 11999  0137B0  0EFF               	movlw	high STR_2
 12000  0137B2  0100               	movlb	0	; () banked
 12001  0137B4  6FA8               	movwf	(printf@f+1)& (0+255),b
 12002  0137B6  0E03               	movlw	low STR_218
 12003  0137B8  0100               	movlb	0	; () banked
 12004  0137BA  6FA9               	movwf	(?_printf+2)& (0+255),b
 12005  0137BC  0EFD               	movlw	high STR_218
 12006  0137BE  0100               	movlb	0	; () banked
 12007  0137C0  6FAA               	movwf	(?_printf+3)& (0+255),b
 12008  0137C2  EC9A  F086         	call	_printf	;wreg free
 12009                           
 12010                           ;UART.c: 515: usart_str_1(',');
 12011  0137C6  0E2C               	movlw	44
 12012  0137C8  EC30  F0D5         	call	_usart_str_1
 12013                           
 12014                           ;UART.c: 517: printf("%s","PITCH EEPROM FLAG");
 12015  0137CC  0EF5               	movlw	low STR_2
 12016  0137CE  0100               	movlb	0	; () banked
 12017  0137D0  6FA7               	movwf	printf@f& (0+255),b
 12018  0137D2  0EFF               	movlw	high STR_2
 12019  0137D4  0100               	movlb	0	; () banked
 12020  0137D6  6FA8               	movwf	(printf@f+1)& (0+255),b
 12021  0137D8  0E75               	movlw	low STR_220
 12022  0137DA  0100               	movlb	0	; () banked
 12023  0137DC  6FA9               	movwf	(?_printf+2)& (0+255),b
 12024  0137DE  0EFC               	movlw	high STR_220
 12025  0137E0  0100               	movlb	0	; () banked
 12026  0137E2  6FAA               	movwf	(?_printf+3)& (0+255),b
 12027  0137E4  EC9A  F086         	call	_printf	;wreg free
 12028                           
 12029                           ;UART.c: 518: usart_str_1(',');
 12030  0137E8  0E2C               	movlw	44
 12031  0137EA  EC30  F0D5         	call	_usart_str_1
 12032                           
 12033                           ;UART.c: 520: printf("%s","EEPROM ERROR TIME");
 12034  0137EE  0EF5               	movlw	low STR_2
 12035  0137F0  0100               	movlb	0	; () banked
 12036  0137F2  6FA7               	movwf	printf@f& (0+255),b
 12037  0137F4  0EFF               	movlw	high STR_2
 12038  0137F6  0100               	movlb	0	; () banked
 12039  0137F8  6FA8               	movwf	(printf@f+1)& (0+255),b
 12040  0137FA  0E63               	movlw	low STR_222
 12041  0137FC  0100               	movlb	0	; () banked
 12042  0137FE  6FA9               	movwf	(?_printf+2)& (0+255),b
 12043  013800  0EFC               	movlw	high STR_222
 12044  013802  0100               	movlb	0	; () banked
 12045  013804  6FAA               	movwf	(?_printf+3)& (0+255),b
 12046  013806  EC9A  F086         	call	_printf	;wreg free
 12047                           
 12048                           ;UART.c: 521: usart_str_1(',');
 12049  01380A  0E2C               	movlw	44
 12050  01380C  EC30  F0D5         	call	_usart_str_1
 12051                           
 12052                           ;UART.c: 523: printf("%s","EEPROM ERROR FLAG");
 12053  013810  0EF5               	movlw	low STR_2
 12054  013812  0100               	movlb	0	; () banked
 12055  013814  6FA7               	movwf	printf@f& (0+255),b
 12056  013816  0EFF               	movlw	high STR_2
 12057  013818  0100               	movlb	0	; () banked
 12058  01381A  6FA8               	movwf	(printf@f+1)& (0+255),b
 12059  01381C  0E87               	movlw	low STR_224
 12060  01381E  0100               	movlb	0	; () banked
 12061  013820  6FA9               	movwf	(?_printf+2)& (0+255),b
 12062  013822  0EFC               	movlw	high STR_224
 12063  013824  0100               	movlb	0	; () banked
 12064  013826  6FAA               	movwf	(?_printf+3)& (0+255),b
 12065  013828  EC9A  F086         	call	_printf	;wreg free
 12066                           
 12067                           ;UART.c: 524: usart_str_1(',');
 12068  01382C  0E2C               	movlw	44
 12069  01382E  EC30  F0D5         	call	_usart_str_1
 12070                           
 12071                           ;UART.c: 526: printf("%s","EEPROM LAST THREE ERROR");
 12072  013832  0EF5               	movlw	low STR_2
 12073  013834  0100               	movlb	0	; () banked
 12074  013836  6FA7               	movwf	printf@f& (0+255),b
 12075  013838  0EFF               	movlw	high STR_2
 12076  01383A  0100               	movlb	0	; () banked
 12077  01383C  6FA8               	movwf	(printf@f+1)& (0+255),b
 12078  01383E  0E25               	movlw	low STR_226
 12079  013840  0100               	movlb	0	; () banked
 12080  013842  6FA9               	movwf	(?_printf+2)& (0+255),b
 12081  013844  0EFC               	movlw	high STR_226
 12082  013846  0100               	movlb	0	; () banked
 12083  013848  6FAA               	movwf	(?_printf+3)& (0+255),b
 12084  01384A  EC9A  F086         	call	_printf	;wreg free
 12085                           
 12086                           ;UART.c: 527: usart_str_1(',');
 12087  01384E  0E2C               	movlw	44
 12088  013850  EC30  F0D5         	call	_usart_str_1
 12089                           
 12090                           ;UART.c: 529: printf("%s","VFD IO ERROR FLAG");
 12091  013854  0EF5               	movlw	low STR_2
 12092  013856  0100               	movlb	0	; () banked
 12093  013858  6FA7               	movwf	printf@f& (0+255),b
 12094  01385A  0EFF               	movlw	high STR_2
 12095  01385C  0100               	movlb	0	; () banked
 12096  01385E  6FA8               	movwf	(printf@f+1)& (0+255),b
 12097  013860  0E99               	movlw	low STR_228
 12098  013862  0100               	movlb	0	; () banked
 12099  013864  6FA9               	movwf	(?_printf+2)& (0+255),b
 12100  013866  0EFC               	movlw	high STR_228
 12101  013868  0100               	movlb	0	; () banked
 12102  01386A  6FAA               	movwf	(?_printf+3)& (0+255),b
 12103  01386C  EC9A  F086         	call	_printf	;wreg free
 12104                           
 12105                           ;UART.c: 530: usart_str_1(',');
 12106  013870  0E2C               	movlw	44
 12107  013872  EC30  F0D5         	call	_usart_str_1
 12108                           
 12109                           ;UART.c: 532: printf("%s","WIND 1 TEMP FLAG");
 12110  013876  0EF5               	movlw	low STR_2
 12111  013878  0100               	movlb	0	; () banked
 12112  01387A  6FA7               	movwf	printf@f& (0+255),b
 12113  01387C  0EFF               	movlw	high STR_2
 12114  01387E  0100               	movlb	0	; () banked
 12115  013880  6FA8               	movwf	(printf@f+1)& (0+255),b
 12116  013882  0EE1               	movlw	low STR_230
 12117  013884  0100               	movlb	0	; () banked
 12118  013886  6FA9               	movwf	(?_printf+2)& (0+255),b
 12119  013888  0EFC               	movlw	high STR_230
 12120  01388A  0100               	movlb	0	; () banked
 12121  01388C  6FAA               	movwf	(?_printf+3)& (0+255),b
 12122  01388E  EC9A  F086         	call	_printf	;wreg free
 12123                           
 12124                           ;UART.c: 533: usart_str_1(',');
 12125  013892  0E2C               	movlw	44
 12126  013894  EC30  F0D5         	call	_usart_str_1
 12127                           
 12128                           ;UART.c: 535: printf("%s","WIND 2 TEMP FLAG");
 12129  013898  0EF5               	movlw	low STR_2
 12130  01389A  0100               	movlb	0	; () banked
 12131  01389C  6FA7               	movwf	printf@f& (0+255),b
 12132  01389E  0EFF               	movlw	high STR_2
 12133  0138A0  0100               	movlb	0	; () banked
 12134  0138A2  6FA8               	movwf	(printf@f+1)& (0+255),b
 12135  0138A4  0EF2               	movlw	low STR_232
 12136  0138A6  0100               	movlb	0	; () banked
 12137  0138A8  6FA9               	movwf	(?_printf+2)& (0+255),b
 12138  0138AA  0EFC               	movlw	high STR_232
 12139  0138AC  0100               	movlb	0	; () banked
 12140  0138AE  6FAA               	movwf	(?_printf+3)& (0+255),b
 12141  0138B0  EC9A  F086         	call	_printf	;wreg free
 12142                           
 12143                           ;UART.c: 536: usart_str_1(',');
 12144  0138B4  0E2C               	movlw	44
 12145  0138B6  EC30  F0D5         	call	_usart_str_1
 12146                           
 12147                           ;UART.c: 538: usart_str("\r");
 12148  0138BA  0EFD               	movlw	low STR_123
 12149  0138BC  6E1D               	movwf	usart_str@str,c
 12150  0138BE  0EFF               	movlw	high STR_123
 12151  0138C0  6E1E               	movwf	usart_str@str+1,c
 12152  0138C2  EC66  F0D3         	call	_usart_str	;wreg free
 12153                           
 12154                           ;UART.c: 539: usart_str("\n");
 12155  0138C6  0EFB               	movlw	low STR_124
 12156  0138C8  6E1D               	movwf	usart_str@str,c
 12157  0138CA  0EFF               	movlw	high STR_124
 12158  0138CC  6E1E               	movwf	usart_str@str+1,c
 12159  0138CE  EC66  F0D3         	call	_usart_str	;wreg free
 12160  0138D2  0012               	return		;funcret
 12161  0138D4                     __end_of_UART_Data_String:
 12162                           	opt stack 0
 12163                           tblptru	equ	0xFF8
 12164                           tblptrh	equ	0xFF7
 12165                           tblptrl	equ	0xFF6
 12166                           tablat	equ	0xFF5
 12167                           intcon	equ	0xFF2
 12168                           postinc0	equ	0xFEE
 12169                           wreg	equ	0xFE8
 12170                           postdec1	equ	0xFE5
 12171                           fsr1h	equ	0xFE2
 12172                           fsr1l	equ	0xFE1
 12173                           status	equ	0xFD8
 12174                           
 12175 ;; *************** function _usart_str_1 *****************
 12176 ;; Defined at:
 12177 ;;		line 586 in file "UART.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;  str             1    wreg     const unsigned char 
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;  str             1   28[COMRAM] const unsigned char 
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  1    wreg      void 
 12184 ;; Registers used:
 12185 ;;		wreg
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12195 ;;Total ram usage:        1 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    3
 12198 ;; This function calls:
 12199 ;;		Nothing
 12200 ;; This function is called by:
 12201 ;;		_UART_Data
 12202 ;;		_UART_Data_String
 12203 ;; This function uses a non-reentrant model
 12204 ;;
 12205                           
 12206                           	psect	text19
 12207  01AA60                     __ptext19:
 12208                           	opt stack 0
 12209  01AA60                     _usart_str_1:
 12210                           	opt stack 25
 12211                           
 12212                           ;incstack = 0
 12213                           ;usart_str_1@str stored from wreg
 12214  01AA60  6E1D               	movwf	usart_str_1@str,c
 12215  01AA62                     l2449:
 12216  01AA62  A89E               	btfss	3998,4,c	;volatile
 12217  01AA64  D7FE               	goto	l2449
 12218                           
 12219                           ;UART.c: 589: TXREG=(str);
 12220  01AA66  C01D  FFAD         	movff	usart_str_1@str,4013	;volatile
 12221  01AA6A  0012               	return		;funcret
 12222  01AA6C                     __end_of_usart_str_1:
 12223                           	opt stack 0
 12224                           tblptru	equ	0xFF8
 12225                           tblptrh	equ	0xFF7
 12226                           tblptrl	equ	0xFF6
 12227                           tablat	equ	0xFF5
 12228                           intcon	equ	0xFF2
 12229                           postinc0	equ	0xFEE
 12230                           wreg	equ	0xFE8
 12231                           postdec1	equ	0xFE5
 12232                           fsr1h	equ	0xFE2
 12233                           fsr1l	equ	0xFE1
 12234                           status	equ	0xFD8
 12235                           
 12236 ;; *************** function _usart_str *****************
 12237 ;; Defined at:
 12238 ;;		line 577 in file "UART.c"
 12239 ;; Parameters:    Size  Location     Type
 12240 ;;  str             2   28[COMRAM] PTR const unsigned char 
 12241 ;;		 -> STR_234(2), STR_233(2), STR_126(2), STR_125(2), 
 12242 ;;		 -> STR_124(2), STR_123(2), 
 12243 ;; Auto vars:     Size  Location     Type
 12244 ;;		None
 12245 ;; Return value:  Size  Location     Type
 12246 ;;                  1    wreg      void 
 12247 ;; Registers used:
 12248 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 12249 ;; Tracked objects:
 12250 ;;		On entry : 0/0
 12251 ;;		On exit  : 0/0
 12252 ;;		Unchanged: 0/0
 12253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12254 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12257 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12258 ;;Total ram usage:        2 bytes
 12259 ;; Hardware stack levels used:    1
 12260 ;; Hardware stack levels required when called:    3
 12261 ;; This function calls:
 12262 ;;		Nothing
 12263 ;; This function is called by:
 12264 ;;		_UART_Data
 12265 ;;		_UART_Data_String
 12266 ;; This function uses a non-reentrant model
 12267 ;;
 12268                           
 12269                           	psect	text20
 12270  01A6CC                     __ptext20:
 12271                           	opt stack 0
 12272  01A6CC                     _usart_str:
 12273                           	opt stack 25
 12274                           
 12275                           ;UART.c: 579: while((*str)!='\0')
 12276                           
 12277                           ;incstack = 0
 12278  01A6CC  D00D               	goto	l16357
 12279  01A6CE                     l2442:
 12280  01A6CE  A89E               	btfss	3998,4,c	;volatile
 12281  01A6D0  D7FE               	goto	l2442
 12282                           
 12283                           ;UART.c: 582: TXREG=(*str);
 12284  01A6D2  C01D  FFF6         	movff	usart_str@str,tblptrl
 12285  01A6D6  C01E  FFF7         	movff	usart_str@str+1,tblptrh
 12286  01A6DA                     	if	0	;tblptru may be non-zero
 12287  01A6DA                     	endif
 12288  01A6DA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12289  01A6DA  0E00               	movlw	low (__mediumconst shr (0+16))
 12290  01A6DC  6EF8               	movwf	tblptru,c
 12291  01A6DE                     	endif
 12292  01A6DE  0008               	tblrd		*
 12293  01A6E0  CFF5 FFAD          	movff	tablat,4013	;volatile
 12294                           
 12295                           ;UART.c: 583: str++;
 12296  01A6E4  4A1D               	infsnz	usart_str@str,f,c
 12297  01A6E6  2A1E               	incf	usart_str@str+1,f,c
 12298  01A6E8                     l16357:
 12299  01A6E8  C01D  FFF6         	movff	usart_str@str,tblptrl
 12300  01A6EC  C01E  FFF7         	movff	usart_str@str+1,tblptrh
 12301  01A6F0                     	if	0	;tblptru may be non-zero
 12302  01A6F0                     	endif
 12303  01A6F0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12304  01A6F0  0E00               	movlw	low (__mediumconst shr (0+16))
 12305  01A6F2  6EF8               	movwf	tblptru,c
 12306  01A6F4                     	endif
 12307  01A6F4  0008               	tblrd		*
 12308  01A6F6  50F5               	movf	tablat,w,c
 12309  01A6F8  0900               	iorlw	0
 12310  01A6FA  B4D8               	btfsc	status,2,c
 12311  01A6FC  0012               	return	
 12312  01A6FE  D7E7               	goto	l2442
 12313  01A700                     __end_of_usart_str:
 12314                           	opt stack 0
 12315                           tblptru	equ	0xFF8
 12316                           tblptrh	equ	0xFF7
 12317                           tblptrl	equ	0xFF6
 12318                           tablat	equ	0xFF5
 12319                           intcon	equ	0xFF2
 12320                           postinc0	equ	0xFEE
 12321                           wreg	equ	0xFE8
 12322                           postdec1	equ	0xFE5
 12323                           fsr1h	equ	0xFE2
 12324                           fsr1l	equ	0xFE1
 12325                           status	equ	0xFD8
 12326                           
 12327 ;; *************** function _printf *****************
 12328 ;; Defined at:
 12329 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 12330 ;; Parameters:    Size  Location     Type
 12331 ;;  f               2   71[BANK0 ] PTR const unsigned char 
 12332 ;;		 -> STR_231(3), STR_229(3), STR_227(3), STR_225(3), 
 12333 ;;		 -> STR_223(3), STR_221(3), STR_219(3), STR_217(3), 
 12334 ;;		 -> STR_215(3), STR_213(3), STR_211(3), STR_209(3), 
 12335 ;;		 -> STR_207(3), STR_205(3), STR_203(3), STR_201(3), 
 12336 ;;		 -> STR_199(3), STR_197(3), STR_195(3), STR_193(3), 
 12337 ;;		 -> STR_191(3), STR_189(3), STR_187(3), STR_185(3), 
 12338 ;;		 -> STR_183(3), STR_181(3), STR_179(3), STR_177(3), 
 12339 ;;		 -> STR_175(3), STR_173(3), STR_171(3), STR_169(3), 
 12340 ;;		 -> STR_167(3), STR_165(3), STR_163(3), STR_161(3), 
 12341 ;;		 -> STR_159(3), STR_157(3), STR_155(3), STR_153(3), 
 12342 ;;		 -> STR_151(3), STR_149(3), STR_147(3), STR_145(3), 
 12343 ;;		 -> STR_143(3), STR_141(3), STR_139(3), STR_137(3), 
 12344 ;;		 -> STR_135(3), STR_133(3), STR_131(3), STR_129(3), 
 12345 ;;		 -> STR_127(3), STR_122(3), STR_121(3), STR_120(3), 
 12346 ;;		 -> STR_119(3), STR_118(3), STR_117(3), STR_116(3), 
 12347 ;;		 -> STR_115(3), STR_114(3), STR_113(3), STR_112(3), 
 12348 ;;		 -> STR_111(3), STR_110(3), STR_109(3), STR_108(3), 
 12349 ;;		 -> STR_107(3), STR_106(3), STR_105(3), STR_104(3), 
 12350 ;;		 -> STR_103(3), STR_102(3), STR_101(3), STR_100(3), 
 12351 ;;		 -> STR_99(3), STR_98(7), STR_97(3), STR_96(3), 
 12352 ;;		 -> STR_95(3), STR_94(3), STR_93(3), STR_92(3), 
 12353 ;;		 -> STR_90(3), STR_88(3), STR_86(3), STR_84(3), 
 12354 ;;		 -> STR_82(3), STR_80(3), STR_78(3), STR_76(3), 
 12355 ;;		 -> STR_74(3), STR_72(3), STR_70(3), STR_68(3), 
 12356 ;;		 -> STR_66(3), STR_64(3), STR_62(3), STR_60(3), 
 12357 ;;		 -> STR_58(3), STR_56(3), STR_54(3), STR_52(3), 
 12358 ;;		 -> STR_50(3), STR_48(3), STR_46(3), STR_44(3), 
 12359 ;;		 -> STR_42(3), STR_40(3), STR_38(3), STR_36(3), 
 12360 ;;		 -> STR_34(3), STR_32(3), STR_31(3), STR_30(3), 
 12361 ;;		 -> STR_29(3), STR_28(3), STR_27(7), STR_26(7), 
 12362 ;;		 -> STR_25(7), STR_24(7), STR_23(7), STR_22(7), 
 12363 ;;		 -> STR_21(7), STR_20(7), STR_19(7), STR_18(7), 
 12364 ;;		 -> STR_17(6), STR_16(6), STR_15(6), STR_14(7), 
 12365 ;;		 -> STR_13(3), STR_12(3), STR_11(7), STR_10(7), 
 12366 ;;		 -> STR_9(3), STR_8(7), STR_7(7), STR_6(7), 
 12367 ;;		 -> STR_5(7), STR_4(7), STR_2(3), STR_1(3), 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  val             4   97[BANK0 ] unsigned long 
 12370 ;;  tmpval          4   93[BANK0 ] struct .
 12371 ;;  fval            3  105[BANK0 ] struct .
 12372 ;;  prec            2  108[BANK0 ] int 
 12373 ;;  width           2  103[BANK0 ] int 
 12374 ;;  exp             2  101[BANK0 ] int 
 12375 ;;  flag            2   91[BANK0 ] unsigned short 
 12376 ;;  len             2   89[BANK0 ] unsigned int 
 12377 ;;  ap              2   87[BANK0 ] PTR void [1]
 12378 ;;		 -> ?_printf(2), 
 12379 ;;  cp              2   85[BANK0 ] PTR const unsigned char 
 12380 ;;		 -> STR_235(7), Hours_2(2), Mot_Frequency(3), Time_New(3), 
 12381 ;;		 -> wind_Time_1_2(3), Wind_Time_1(3), GRPM_Frequency(3), GRPM_Time_1(3), 
 12382 ;;		 -> TRPM_Frequency(3), TRPM_Time(3), STR_232(17), STR_230(17), 
 12383 ;;		 -> STR_228(18), STR_226(24), STR_224(18), STR_222(18), 
 12384 ;;		 -> STR_220(18), STR_218(16), STR_216(8), STR_214(10), 
 12385 ;;		 -> STR_212(14), STR_210(11), STR_208(19), STR_206(19), 
 12386 ;;		 -> STR_204(27), STR_202(13), STR_200(10), STR_198(13), 
 12387 ;;		 -> STR_196(12), STR_194(5), STR_192(5), STR_190(14), 
 12388 ;;		 -> STR_188(16), STR_186(9), STR_184(13), STR_182(10), 
 12389 ;;		 -> STR_180(12), STR_178(10), STR_176(15), STR_174(18), 
 12390 ;;		 -> STR_172(5), STR_170(4), STR_168(5), STR_166(3), 
 12391 ;;		 -> STR_164(10), STR_162(10), STR_160(10), STR_158(7), 
 12392 ;;		 -> STR_156(7), STR_154(7), STR_152(15), STR_150(15), 
 12393 ;;		 -> STR_148(7), STR_146(15), STR_144(15), STR_142(14), 
 12394 ;;		 -> STR_140(12), STR_138(11), STR_136(15), STR_134(9), 
 12395 ;;		 -> STR_132(13), STR_130(11), STR_128(10), STR_91(9), 
 12396 ;;		 -> STR_89(8), STR_87(7), STR_85(8), STR_83(13), 
 12397 ;;		 -> STR_81(11), STR_79(14), STR_77(12), STR_75(7), 
 12398 ;;		 -> STR_73(9), STR_71(11), STR_69(11), STR_67(10), 
 12399 ;;		 -> STR_65(10), STR_63(10), STR_61(7), STR_59(14), 
 12400 ;;		 -> STR_57(11), STR_55(11), STR_53(7), STR_51(8), 
 12401 ;;		 -> STR_49(13), STR_47(11), STR_45(5), STR_43(10), 
 12402 ;;		 -> STR_41(18), STR_39(9), STR_37(10), STR_35(11), 
 12403 ;;		 -> STR_33(9), Y_KW(3), KW(3), STR_3(18), 
 12404 ;;  c               1  110[BANK0 ] char 
 12405 ;;  d               1    0        unsigned char 
 12406 ;; Return value:  Size  Location     Type
 12407 ;;                  2   71[BANK0 ] int 
 12408 ;; Registers used:
 12409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12415 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12417 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12418 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;Total ram usage:       40 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    6
 12422 ;; This function calls:
 12423 ;;		___awdiv
 12424 ;;		___ftadd
 12425 ;;		___ftge
 12426 ;;		___ftmul
 12427 ;;		___ftneg
 12428 ;;		___ftsub
 12429 ;;		___fttol
 12430 ;;		___lldiv
 12431 ;;		___llmod
 12432 ;;		___lltoft
 12433 ;;		___wmul
 12434 ;;		__div_to_l_
 12435 ;;		__tdiv_to_l_
 12436 ;;		_fround
 12437 ;;		_isdigit
 12438 ;;		_putch
 12439 ;;		_scale
 12440 ;; This function is called by:
 12441 ;;		_UART_Data
 12442 ;;		_UART_Data_String
 12443 ;; This function uses a non-reentrant model
 12444 ;;
 12445                           
 12446                           	psect	text21
 12447  010D34                     __ptext21:
 12448                           	opt stack 0
 12449  010D34                     _printf:
 12450                           	opt stack 22
 12451                           
 12452                           ;doprnt.c: 466: va_list ap;
 12453                           ;doprnt.c: 499: signed char c;
 12454                           ;doprnt.c: 501: int width;
 12455                           ;doprnt.c: 504: int prec;
 12456                           ;doprnt.c: 508: unsigned short flag;
 12457                           ;doprnt.c: 515: char d;
 12458                           ;doprnt.c: 516: double fval;
 12459                           ;doprnt.c: 517: int exp;
 12460                           ;doprnt.c: 523: union {
 12461                           ;doprnt.c: 524: unsigned long vd;
 12462                           ;doprnt.c: 525: double integ;
 12463                           ;doprnt.c: 526: } tmpval;
 12464                           ;doprnt.c: 528: unsigned long val;
 12465                           ;doprnt.c: 529: unsigned len;
 12466                           ;doprnt.c: 530: const char * cp;
 12467                           ;doprnt.c: 533: *ap = __va_start();
 12468                           
 12469                           ;incstack = 0
 12470  010D34  0EA9               	movlw	low (?_printf+2)
 12471  010D36  0100               	movlb	0	; () banked
 12472  010D38  6FB7               	movwf	printf@ap& (0+255),b
 12473  010D3A  0E00               	movlw	high (?_printf+2)
 12474  010D3C  0100               	movlb	0	; () banked
 12475  010D3E  6FB8               	movwf	(printf@ap+1)& (0+255),b
 12476                           
 12477                           ;doprnt.c: 536: while(c = *f++) {
 12478  010D40  EFF9  F08C         	goto	l20247
 12479  010D44                     l19943:
 12480                           
 12481                           ; BSR set to: 0
 12482                           ;doprnt.c: 538: if(c != '%')
 12483  010D44  0E25               	movlw	37
 12484  010D46  0100               	movlb	0	; () banked
 12485  010D48  19CE               	xorwf	printf@c& (0+255),w,b
 12486  010D4A  B4D8               	btfsc	status,2,c
 12487  010D4C  D006               	goto	l19947
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;doprnt.c: 540: {
 12491                           ;doprnt.c: 541: (putch(c) );
 12492  010D4E  0100               	movlb	0	; () banked
 12493  010D50  51CE               	movf	printf@c& (0+255),w,b
 12494  010D52  EC36  F0D5         	call	_putch
 12495                           
 12496                           ;doprnt.c: 542: continue;
 12497  010D56  EFF9  F08C         	goto	l20247
 12498  010D5A                     l19947:
 12499                           
 12500                           ;doprnt.c: 543: }
 12501                           ;doprnt.c: 546: width = 0;
 12502  010D5A  0E00               	movlw	0
 12503  010D5C  0100               	movlb	0	; () banked
 12504  010D5E  6FC8               	movwf	(printf@width+1)& (0+255),b
 12505  010D60  0E00               	movlw	0
 12506  010D62  6FC7               	movwf	printf@width& (0+255),b
 12507                           
 12508                           ;doprnt.c: 548: flag = 0;
 12509  010D64  0E00               	movlw	0
 12510  010D66  0100               	movlb	0	; () banked
 12511  010D68  6FBC               	movwf	(printf@flag+1)& (0+255),b
 12512  010D6A  0E00               	movlw	0
 12513  010D6C  6FBB               	movwf	printf@flag& (0+255),b
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12517  010D6E  C0A7  FFF6         	movff	printf@f,tblptrl
 12518  010D72  C0A8  FFF7         	movff	printf@f+1,tblptrh
 12519  010D76                     	if	0	;tblptru may be non-zero
 12520  010D76                     	endif
 12521  010D76                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12522  010D76  0E00               	movlw	low (__mediumconst shr (0+16))
 12523  010D78  6EF8               	movwf	tblptru,c
 12524  010D7A                     	endif
 12525  010D7A  0008               	tblrd		*
 12526  010D7C  50F5               	movf	tablat,w,c
 12527  010D7E  ECC6  F0D4         	call	_isdigit
 12528  010D82  A0D8               	btfss	status,0,c
 12529  010D84  D044               	goto	l19961
 12530                           
 12531                           ;doprnt.c: 598: width = 0;
 12532  010D86  0E00               	movlw	0
 12533  010D88  0100               	movlb	0	; () banked
 12534  010D8A  6FC8               	movwf	(printf@width+1)& (0+255),b
 12535  010D8C  0E00               	movlw	0
 12536  010D8E  6FC7               	movwf	printf@width& (0+255),b
 12537  010D90                     l19953:
 12538                           
 12539                           ;doprnt.c: 600: width *= 10;
 12540  010D90  C0C7  F064         	movff	printf@width,___wmul@multiplier
 12541  010D94  C0C8  F065         	movff	printf@width+1,___wmul@multiplier+1
 12542  010D98  0E00               	movlw	0
 12543  010D9A  0100               	movlb	0	; () banked
 12544  010D9C  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12545  010D9E  0E0A               	movlw	10
 12546  010DA0  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12547  010DA2  EC4B  F0D3         	call	___wmul	;wreg free
 12548  010DA6  C064  F0C7         	movff	?___wmul,printf@width
 12549  010DAA  C065  F0C8         	movff	?___wmul+1,printf@width+1
 12550                           
 12551                           ;doprnt.c: 601: width += *f++ - '0';
 12552  010DAE  0ED0               	movlw	208
 12553  010DB0  0100               	movlb	0	; () banked
 12554  010DB2  6FAC               	movwf	??_printf& (0+255),b
 12555  010DB4  0EFF               	movlw	255
 12556  010DB6  0100               	movlb	0	; () banked
 12557  010DB8  6FAD               	movwf	(??_printf+1)& (0+255),b
 12558  010DBA  C0A7  FFF6         	movff	printf@f,tblptrl
 12559  010DBE  C0A8  FFF7         	movff	printf@f+1,tblptrh
 12560  010DC2                     	if	0	;tblptru may be non-zero
 12561  010DC2                     	endif
 12562  010DC2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12563  010DC2  0E00               	movlw	low (__mediumconst shr (0+16))
 12564  010DC4  6EF8               	movwf	tblptru,c
 12565  010DC6                     	endif
 12566  010DC6  0008               	tblrd		*
 12567  010DC8  50F5               	movf	tablat,w,c
 12568  010DCA  0100               	movlb	0	; () banked
 12569  010DCC  6FAE               	movwf	(??_printf+2)& (0+255),b
 12570  010DCE  6BAF               	clrf	(??_printf+3)& (0+255),b
 12571  010DD0  0100               	movlb	0	; () banked
 12572  010DD2  51AC               	movf	??_printf& (0+255),w,b
 12573  010DD4  0100               	movlb	0	; () banked
 12574  010DD6  27AE               	addwf	(??_printf+2)& (0+255),f,b
 12575  010DD8  0100               	movlb	0	; () banked
 12576  010DDA  51AD               	movf	(??_printf+1)& (0+255),w,b
 12577  010DDC  0100               	movlb	0	; () banked
 12578  010DDE  23AF               	addwfc	(??_printf+3)& (0+255),f,b
 12579  010DE0  0100               	movlb	0	; () banked
 12580  010DE2  51AE               	movf	(??_printf+2)& (0+255),w,b
 12581  010DE4  0100               	movlb	0	; () banked
 12582  010DE6  27C7               	addwf	printf@width& (0+255),f,b
 12583  010DE8  0100               	movlb	0	; () banked
 12584  010DEA  51AF               	movf	(??_printf+3)& (0+255),w,b
 12585  010DEC  0100               	movlb	0	; () banked
 12586  010DEE  23C8               	addwfc	(printf@width+1)& (0+255),f,b
 12587                           
 12588                           ; BSR set to: 0
 12589  010DF0  0100               	movlb	0	; () banked
 12590  010DF2  4BA7               	infsnz	printf@f& (0+255),f,b
 12591  010DF4  2BA8               	incf	(printf@f+1)& (0+255),f,b
 12592                           
 12593                           ; BSR set to: 0
 12594                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12595  010DF6  C0A7  FFF6         	movff	printf@f,tblptrl
 12596  010DFA  C0A8  FFF7         	movff	printf@f+1,tblptrh
 12597  010DFE                     	if	0	;tblptru may be non-zero
 12598  010DFE                     	endif
 12599  010DFE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12600  010DFE  0E00               	movlw	low (__mediumconst shr (0+16))
 12601  010E00  6EF8               	movwf	tblptru,c
 12602  010E02                     	endif
 12603  010E02  0008               	tblrd		*
 12604  010E04  50F5               	movf	tablat,w,c
 12605  010E06  ECC6  F0D4         	call	_isdigit
 12606  010E0A  B0D8               	btfsc	status,0,c
 12607  010E0C  D7C1               	goto	l19953
 12608  010E0E                     l19961:
 12609                           
 12610                           ;doprnt.c: 608: }
 12611                           ;doprnt.c: 611: if(*f == '.') {
 12612  010E0E  C0A7  FFF6         	movff	printf@f,tblptrl
 12613  010E12  C0A8  FFF7         	movff	printf@f+1,tblptrh
 12614  010E16                     	if	0	;tblptru may be non-zero
 12615  010E16                     	endif
 12616  010E16                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12617  010E16  0E00               	movlw	low (__mediumconst shr (0+16))
 12618  010E18  6EF8               	movwf	tblptru,c
 12619  010E1A                     	endif
 12620  010E1A  0008               	tblrd		*
 12621  010E1C  50F5               	movf	tablat,w,c
 12622  010E1E  0A2E               	xorlw	46
 12623  010E20  A4D8               	btfss	status,2,c
 12624  010E22  D03D               	goto	l19973
 12625                           
 12626                           ;doprnt.c: 612: flag |= 0x4000;
 12627  010E24  0100               	movlb	0	; () banked
 12628  010E26  8DBC               	bsf	(printf@flag+1)& (0+255),6,b
 12629                           
 12630                           ;doprnt.c: 613: f++;
 12631  010E28  0100               	movlb	0	; () banked
 12632  010E2A  4BA7               	infsnz	printf@f& (0+255),f,b
 12633  010E2C  2BA8               	incf	(printf@f+1)& (0+255),f,b
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;doprnt.c: 620: {
 12637                           ;doprnt.c: 621: prec = 0;
 12638  010E2E  0E00               	movlw	0
 12639  010E30  0100               	movlb	0	; () banked
 12640  010E32  6FCD               	movwf	(printf@prec+1)& (0+255),b
 12641  010E34  0E00               	movlw	0
 12642  010E36  6FCC               	movwf	printf@prec& (0+255),b
 12643                           
 12644                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 12645  010E38  D025               	goto	l19971
 12646  010E3A                     l19967:
 12647                           
 12648                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 12649  010E3A  C0CC  F064         	movff	printf@prec,___wmul@multiplier
 12650  010E3E  C0CD  F065         	movff	printf@prec+1,___wmul@multiplier+1
 12651  010E42  0E00               	movlw	0
 12652  010E44  0100               	movlb	0	; () banked
 12653  010E46  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12654  010E48  0E0A               	movlw	10
 12655  010E4A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 12656  010E4C  EC4B  F0D3         	call	___wmul	;wreg free
 12657  010E50  C0A7  FFF6         	movff	printf@f,tblptrl
 12658  010E54  C0A8  FFF7         	movff	printf@f+1,tblptrh
 12659  010E58                     	if	0	;tblptru may be non-zero
 12660  010E58                     	endif
 12661  010E58                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12662  010E58  0E00               	movlw	low (__mediumconst shr (0+16))
 12663  010E5A  6EF8               	movwf	tblptru,c
 12664  010E5C                     	endif
 12665  010E5C  0008               	tblrd		*
 12666  010E5E  50F5               	movf	tablat,w,c
 12667  010E60  0100               	movlb	0	; () banked
 12668  010E62  2764               	addwf	?___wmul& (0+255),f,b
 12669  010E64  0E00               	movlw	0
 12670  010E66  0100               	movlb	0	; () banked
 12671  010E68  2365               	addwfc	(?___wmul+1)& (0+255),f,b
 12672  010E6A  0ED0               	movlw	208
 12673  010E6C  0100               	movlb	0	; () banked
 12674  010E6E  2564               	addwf	?___wmul& (0+255),w,b
 12675  010E70  0100               	movlb	0	; () banked
 12676  010E72  6FCC               	movwf	printf@prec& (0+255),b
 12677  010E74  0EFF               	movlw	255
 12678  010E76  0100               	movlb	0	; () banked
 12679  010E78  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 12680  010E7A  0100               	movlb	0	; () banked
 12681  010E7C  6FCD               	movwf	(printf@prec+1)& (0+255),b
 12682                           
 12683                           ; BSR set to: 0
 12684  010E7E  0100               	movlb	0	; () banked
 12685  010E80  4BA7               	infsnz	printf@f& (0+255),f,b
 12686  010E82  2BA8               	incf	(printf@f+1)& (0+255),f,b
 12687  010E84                     l19971:
 12688                           
 12689                           ; BSR set to: 0
 12690  010E84  C0A7  FFF6         	movff	printf@f,tblptrl
 12691  010E88  C0A8  FFF7         	movff	printf@f+1,tblptrh
 12692  010E8C                     	if	0	;tblptru may be non-zero
 12693  010E8C                     	endif
 12694  010E8C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12695  010E8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12696  010E8E  6EF8               	movwf	tblptru,c
 12697  010E90                     	endif
 12698  010E90  0008               	tblrd		*
 12699  010E92  50F5               	movf	tablat,w,c
 12700  010E94  ECC6  F0D4         	call	_isdigit
 12701  010E98  A0D8               	btfss	status,0,c
 12702  010E9A  D0B0               	goto	l20019
 12703  010E9C  D7CE               	goto	l19967
 12704  010E9E                     l19973:
 12705                           
 12706                           ;doprnt.c: 626: prec = 0;
 12707  010E9E  0E00               	movlw	0
 12708  010EA0  0100               	movlb	0	; () banked
 12709  010EA2  6FCD               	movwf	(printf@prec+1)& (0+255),b
 12710  010EA4  0E00               	movlw	0
 12711  010EA6  6FCC               	movwf	printf@prec& (0+255),b
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;doprnt.c: 628: flag |= 0x1000;
 12715  010EA8  0100               	movlb	0	; () banked
 12716  010EAA  89BC               	bsf	(printf@flag+1)& (0+255),4,b
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;doprnt.c: 630: }
 12720                           ;doprnt.c: 635: switch(c = *f++) {
 12721  010EAC  D0A7               	goto	l20019
 12722  010EAE                     l19977:
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;doprnt.c: 663: flag |= 0x400;
 12726  010EAE  0100               	movlb	0	; () banked
 12727  010EB0  85BC               	bsf	(printf@flag+1)& (0+255),2,b
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;doprnt.c: 698: case 'i':
 12731                           ;doprnt.c: 699: break;
 12732                           
 12733                           ; BSR set to: 0
 12734                           
 12735                           ;doprnt.c: 697: case 'd':
 12736                           
 12737                           ;doprnt.c: 664: break;
 12738  010EB2  D0C6               	goto	l20021
 12739  010EB4                     l19979:
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12743  010EB4  C0B7  FFD9         	movff	printf@ap,fsr2l
 12744  010EB8  C0B8  FFDA         	movff	printf@ap+1,fsr2h
 12745  010EBC  CFDE F0B5          	movff	postinc2,printf@cp
 12746  010EC0  CFDD F0B6          	movff	postdec2,printf@cp+1
 12747                           
 12748                           ; BSR set to: 0
 12749  010EC4  0E02               	movlw	2
 12750  010EC6  0100               	movlb	0	; () banked
 12751  010EC8  27B7               	addwf	printf@ap& (0+255),f,b
 12752  010ECA  0E00               	movlw	0
 12753  010ECC  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
 12754                           
 12755                           ; BSR set to: 0
 12756                           ;doprnt.c: 740: if(!cp)
 12757  010ECE  0100               	movlb	0	; () banked
 12758  010ED0  51B5               	movf	printf@cp& (0+255),w,b
 12759  010ED2  0100               	movlb	0	; () banked
 12760  010ED4  11B6               	iorwf	(printf@cp+1)& (0+255),w,b
 12761  010ED6  A4D8               	btfss	status,2,c
 12762  010ED8  D006               	goto	l19987
 12763                           
 12764                           ; BSR set to: 0
 12765                           ;doprnt.c: 741: cp = "(null)";
 12766  010EDA  0E87               	movlw	low STR_235
 12767  010EDC  0100               	movlb	0	; () banked
 12768  010EDE  6FB5               	movwf	printf@cp& (0+255),b
 12769  010EE0  0EFF               	movlw	high STR_235
 12770  010EE2  0100               	movlb	0	; () banked
 12771  010EE4  6FB6               	movwf	(printf@cp+1)& (0+255),b
 12772  010EE6                     l19987:
 12773                           
 12774                           ; BSR set to: 0
 12775                           ;doprnt.c: 745: len = 0;
 12776  010EE6  0E00               	movlw	0
 12777  010EE8  0100               	movlb	0	; () banked
 12778  010EEA  6FBA               	movwf	(printf@len+1)& (0+255),b
 12779  010EEC  0E00               	movlw	0
 12780  010EEE  6FB9               	movwf	printf@len& (0+255),b
 12781                           
 12782                           ;doprnt.c: 746: while(cp[len])
 12783  010EF0  D003               	goto	l19991
 12784  010EF2                     l19989:
 12785                           
 12786                           ;doprnt.c: 747: len++;
 12787  010EF2  0100               	movlb	0	; () banked
 12788  010EF4  4BB9               	infsnz	printf@len& (0+255),f,b
 12789  010EF6  2BBA               	incf	(printf@len+1)& (0+255),f,b
 12790  010EF8                     l19991:
 12791                           
 12792                           ; BSR set to: 0
 12793  010EF8  0100               	movlb	0	; () banked
 12794  010EFA  51B9               	movf	printf@len& (0+255),w,b
 12795  010EFC  0100               	movlb	0	; () banked
 12796  010EFE  25B5               	addwf	printf@cp& (0+255),w,b
 12797  010F00  0100               	movlb	0	; () banked
 12798  010F02  6FAC               	movwf	??_printf& (0+255),b
 12799  010F04  0100               	movlb	0	; () banked
 12800  010F06  51BA               	movf	(printf@len+1)& (0+255),w,b
 12801  010F08  0100               	movlb	0	; () banked
 12802  010F0A  21B6               	addwfc	(printf@cp+1)& (0+255),w,b
 12803  010F0C  0100               	movlb	0	; () banked
 12804  010F0E  6FAD               	movwf	(??_printf+1)& (0+255),b
 12805  010F10  C0AC  FFF6         	movff	??_printf,tblptrl
 12806  010F14  C0AD  FFF7         	movff	??_printf+1,tblptrh
 12807  010F18  0E00               	movlw	low (__mediumconst shr (0+16))
 12808  010F1A  6EF8               	movwf	tblptru,c
 12809  010F1C  0E0F               	movlw	(high __ramtop+-1)
 12810  010F1E  64F7               	cpfsgt	tblptrh,c
 12811  010F20  D003               	bra	u13157
 12812  010F22  0008               	tblrd		*
 12813  010F24  50F5               	movf	tablat,w,c
 12814  010F26  D005               	bra	u13150
 12815  010F28                     u13157:
 12816  010F28  CFF6 FFD9          	movff	tblptrl,fsr2l
 12817  010F2C  CFF7 FFDA          	movff	tblptrh,fsr2h
 12818  010F30  50DF               	movf	indf2,w,c
 12819  010F32                     u13150:
 12820  010F32  0900               	iorlw	0
 12821  010F34  A4D8               	btfss	status,2,c
 12822  010F36  D7DD               	goto	l19989
 12823                           
 12824                           ;doprnt.c: 753: if(prec && prec < len)
 12825  010F38  0100               	movlb	0	; () banked
 12826  010F3A  51CC               	movf	printf@prec& (0+255),w,b
 12827  010F3C  0100               	movlb	0	; () banked
 12828  010F3E  11CD               	iorwf	(printf@prec+1)& (0+255),w,b
 12829  010F40  B4D8               	btfsc	status,2,c
 12830  010F42  D00E               	goto	l19999
 12831                           
 12832                           ; BSR set to: 0
 12833  010F44  0100               	movlb	0	; () banked
 12834  010F46  51B9               	movf	printf@len& (0+255),w,b
 12835  010F48  0100               	movlb	0	; () banked
 12836  010F4A  5DCC               	subwf	printf@prec& (0+255),w,b
 12837  010F4C  0100               	movlb	0	; () banked
 12838  010F4E  51BA               	movf	(printf@len+1)& (0+255),w,b
 12839  010F50  0100               	movlb	0	; () banked
 12840  010F52  59CD               	subwfb	(printf@prec+1)& (0+255),w,b
 12841  010F54  B0D8               	btfsc	status,0,c
 12842  010F56  D004               	goto	l19999
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;doprnt.c: 754: len = prec;
 12846  010F58  C0CC  F0B9         	movff	printf@prec,printf@len
 12847  010F5C  C0CD  F0BA         	movff	printf@prec+1,printf@len+1
 12848  010F60                     l19999:
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;doprnt.c: 757: if(width > len)
 12852  010F60  0100               	movlb	0	; () banked
 12853  010F62  51C7               	movf	printf@width& (0+255),w,b
 12854  010F64  0100               	movlb	0	; () banked
 12855  010F66  5DB9               	subwf	printf@len& (0+255),w,b
 12856  010F68  0100               	movlb	0	; () banked
 12857  010F6A  51C8               	movf	(printf@width+1)& (0+255),w,b
 12858  010F6C  0100               	movlb	0	; () banked
 12859  010F6E  59BA               	subwfb	(printf@len+1)& (0+255),w,b
 12860  010F70  B0D8               	btfsc	status,0,c
 12861  010F72  D009               	goto	l20003
 12862                           
 12863                           ; BSR set to: 0
 12864                           ;doprnt.c: 758: width -= len;
 12865  010F74  0100               	movlb	0	; () banked
 12866  010F76  51B9               	movf	printf@len& (0+255),w,b
 12867  010F78  0100               	movlb	0	; () banked
 12868  010F7A  5FC7               	subwf	printf@width& (0+255),f,b
 12869  010F7C  0100               	movlb	0	; () banked
 12870  010F7E  51BA               	movf	(printf@len+1)& (0+255),w,b
 12871  010F80  0100               	movlb	0	; () banked
 12872  010F82  5BC8               	subwfb	(printf@width+1)& (0+255),f,b
 12873  010F84  D009               	goto	l20007
 12874  010F86                     l20003:
 12875                           
 12876                           ; BSR set to: 0
 12877                           ;doprnt.c: 759: else
 12878                           ;doprnt.c: 760: width = 0;
 12879  010F86  0E00               	movlw	0
 12880  010F88  0100               	movlb	0	; () banked
 12881  010F8A  6FC8               	movwf	(printf@width+1)& (0+255),b
 12882  010F8C  0E00               	movlw	0
 12883  010F8E  6FC7               	movwf	printf@width& (0+255),b
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;doprnt.c: 764: while(width--)
 12887  010F90  D003               	goto	l20007
 12888  010F92                     l20005:
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;doprnt.c: 765: (putch(' ') );
 12892  010F92  0E20               	movlw	32
 12893  010F94  EC36  F0D5         	call	_putch
 12894  010F98                     l20007:
 12895  010F98  0100               	movlb	0	; () banked
 12896  010F9A  07C7               	decf	printf@width& (0+255),f,b
 12897  010F9C  A0D8               	btfss	status,0,c
 12898  010F9E  07C8               	decf	(printf@width+1)& (0+255),f,b
 12899  010FA0  0100               	movlb	0	; () banked
 12900  010FA2  29C7               	incf	printf@width& (0+255),w,b
 12901  010FA4  E1F6               	bnz	l20005
 12902  010FA6  0100               	movlb	0	; () banked
 12903  010FA8  29C8               	incf	(printf@width+1)& (0+255),w,b
 12904  010FAA  B4D8               	btfsc	status,2,c
 12905  010FAC  D017               	goto	l20013
 12906  010FAE  D7F1               	goto	l20005
 12907  010FB0                     l20009:
 12908                           
 12909                           ; BSR set to: 0
 12910                           ;doprnt.c: 768: (putch(*cp++) );
 12911  010FB0  C0B5  FFF6         	movff	printf@cp,tblptrl
 12912  010FB4  C0B6  FFF7         	movff	printf@cp+1,tblptrh
 12913  010FB8  0E00               	movlw	low (__mediumconst shr (0+16))
 12914  010FBA  6EF8               	movwf	tblptru,c
 12915  010FBC  0E0F               	movlw	(high __ramtop+-1)
 12916  010FBE  64F7               	cpfsgt	tblptrh,c
 12917  010FC0  D003               	bra	u13217
 12918  010FC2  0008               	tblrd		*
 12919  010FC4  50F5               	movf	tablat,w,c
 12920  010FC6  D005               	bra	u13210
 12921  010FC8                     u13217:
 12922  010FC8  CFF6 FFD9          	movff	tblptrl,fsr2l
 12923  010FCC  CFF7 FFDA          	movff	tblptrh,fsr2h
 12924  010FD0  50DF               	movf	indf2,w,c
 12925  010FD2                     u13210:
 12926  010FD2  EC36  F0D5         	call	_putch
 12927  010FD6  0100               	movlb	0	; () banked
 12928  010FD8  4BB5               	infsnz	printf@cp& (0+255),f,b
 12929  010FDA  2BB6               	incf	(printf@cp+1)& (0+255),f,b
 12930  010FDC                     l20013:
 12931                           
 12932                           ; BSR set to: 0
 12933  010FDC  0100               	movlb	0	; () banked
 12934  010FDE  07B9               	decf	printf@len& (0+255),f,b
 12935  010FE0  A0D8               	btfss	status,0,c
 12936  010FE2  07BA               	decf	(printf@len+1)& (0+255),f,b
 12937  010FE4  0100               	movlb	0	; () banked
 12938  010FE6  29B9               	incf	printf@len& (0+255),w,b
 12939  010FE8  E1E3               	bnz	l20009
 12940  010FEA  0100               	movlb	0	; () banked
 12941  010FEC  29BA               	incf	(printf@len+1)& (0+255),w,b
 12942  010FEE  B4D8               	btfsc	status,2,c
 12943  010FF0  EFF9  F08C         	goto	l20247
 12944  010FF4  D7DD               	goto	l20009
 12945  010FF6                     l20015:
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;doprnt.c: 818: flag |= 0x40;
 12949  010FF6  0100               	movlb	0	; () banked
 12950  010FF8  8DBB               	bsf	printf@flag& (0+255),6,b
 12951                           
 12952                           ; BSR set to: 0
 12953                           ;doprnt.c: 822: }
 12954                           
 12955                           ;doprnt.c: 819: break;
 12956  010FFA  D022               	goto	l20021
 12957  010FFC                     l20019:
 12958  010FFC  C0A7  FFF6         	movff	printf@f,tblptrl
 12959  011000  C0A8  FFF7         	movff	printf@f+1,tblptrh
 12960  011004  0100               	movlb	0	; () banked
 12961  011006  4BA7               	infsnz	printf@f& (0+255),f,b
 12962  011008  2BA8               	incf	(printf@f+1)& (0+255),f,b
 12963  01100A                     	if	0	;tblptru may be non-zero
 12964  01100A                     	endif
 12965  01100A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 12966  01100A  0E00               	movlw	low (__mediumconst shr (0+16))
 12967  01100C  6EF8               	movwf	tblptru,c
 12968  01100E                     	endif
 12969  01100E  0008               	tblrd		*
 12970  011010  CFF5 F0CE          	movff	tablat,printf@c
 12971  011014  0100               	movlb	0	; () banked
 12972  011016  51CE               	movf	printf@c& (0+255),w,b
 12973                           
 12974                           ; Switch size 1, requested type "space"
 12975                           ; Number of cases is 6, Range of values is 0 to 117
 12976                           ; switch strategies available:
 12977                           ; Name         Instructions Cycles
 12978                           ; simple_byte           19    10 (average)
 12979                           ;	Chosen strategy is simple_byte
 12980  011018  0A00               	xorlw	0	; case 0
 12981  01101A  B4D8               	btfsc	status,2,c
 12982  01101C  0012               	return	
 12983  01101E  0A64               	xorlw	100	; case 100
 12984  011020  B4D8               	btfsc	status,2,c
 12985  011022  D00E               	goto	l20021
 12986  011024  0A02               	xorlw	2	; case 102
 12987  011026  B4D8               	btfsc	status,2,c
 12988  011028  D742               	goto	l19977
 12989  01102A  0A0F               	xorlw	15	; case 105
 12990  01102C  B4D8               	btfsc	status,2,c
 12991  01102E  D008               	goto	l20021
 12992  011030  0A1A               	xorlw	26	; case 115
 12993  011032  B4D8               	btfsc	status,2,c
 12994  011034  D73F               	goto	l19979
 12995  011036  0A06               	xorlw	6	; case 117
 12996  011038  B4D8               	btfsc	status,2,c
 12997  01103A  D7DD               	goto	l20015
 12998  01103C  EFF9  F08C         	goto	l20247
 12999  011040                     l20021:
 13000                           
 13001                           ; BSR set to: 0
 13002                           ;doprnt.c: 825: if(flag & (0x700)) {
 13003  011040  0E07               	movlw	7
 13004  011042  0100               	movlb	0	; () banked
 13005  011044  15BC               	andwf	(printf@flag+1)& (0+255),w,b
 13006  011046  B4D8               	btfsc	status,2,c
 13007  011048  D35C               	goto	l10376
 13008                           
 13009                           ; BSR set to: 0
 13010                           ;doprnt.c: 827: if(flag & 0x1000)
 13011  01104A  0100               	movlb	0	; () banked
 13012  01104C  A9BC               	btfss	(printf@flag+1)& (0+255),4,b
 13013  01104E  D005               	goto	l20027
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;doprnt.c: 829: prec = 6;
 13017  011050  0E00               	movlw	0
 13018  011052  0100               	movlb	0	; () banked
 13019  011054  6FCD               	movwf	(printf@prec+1)& (0+255),b
 13020  011056  0E06               	movlw	6
 13021  011058  6FCC               	movwf	printf@prec& (0+255),b
 13022  01105A                     l20027:
 13023                           
 13024                           ; BSR set to: 0
 13025                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 13026  01105A  C0B7  FFD9         	movff	printf@ap,fsr2l
 13027  01105E  C0B8  FFDA         	movff	printf@ap+1,fsr2h
 13028  011062  CFDE F0C9          	movff	postinc2,printf@fval
 13029  011066  CFDE F0CA          	movff	postinc2,printf@fval+1
 13030  01106A  CFDD F0CB          	movff	postdec2,printf@fval+2
 13031                           
 13032                           ; BSR set to: 0
 13033  01106E  0E03               	movlw	3
 13034  011070  0100               	movlb	0	; () banked
 13035  011072  27B7               	addwf	printf@ap& (0+255),f,b
 13036  011074  0E00               	movlw	0
 13037  011076  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
 13038                           
 13039                           ; BSR set to: 0
 13040                           ;doprnt.c: 831: if(fval < 0.0) {
 13041  011078  0100               	movlb	0	; () banked
 13042  01107A  AFCB               	btfss	(printf@fval+2)& (0+255),7,b
 13043  01107C  D011               	goto	l20037
 13044                           
 13045                           ; BSR set to: 0
 13046                           ;doprnt.c: 832: fval = -fval;
 13047  01107E  C0C9  F079         	movff	printf@fval,___ftneg@f1
 13048  011082  C0CA  F07A         	movff	printf@fval+1,___ftneg@f1+1
 13049  011086  C0CB  F07B         	movff	printf@fval+2,___ftneg@f1+2
 13050  01108A  ECE0  F0D3         	call	___ftneg	;wreg free
 13051  01108E  C079  F0C9         	movff	?___ftneg,printf@fval
 13052  011092  C07A  F0CA         	movff	?___ftneg+1,printf@fval+1
 13053  011096  C07B  F0CB         	movff	?___ftneg+2,printf@fval+2
 13054                           
 13055                           ;doprnt.c: 833: flag |= 0x03;
 13056  01109A  0E03               	movlw	3
 13057  01109C  0100               	movlb	0	; () banked
 13058  01109E  13BB               	iorwf	printf@flag& (0+255),f,b
 13059  0110A0                     l20037:
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;doprnt.c: 834: }
 13063                           ;doprnt.c: 835: exp = 0;
 13064  0110A0  0E00               	movlw	0
 13065  0110A2  0100               	movlb	0	; () banked
 13066  0110A4  6FC6               	movwf	(printf@exp+1)& (0+255),b
 13067  0110A6  0E00               	movlw	0
 13068  0110A8  6FC5               	movwf	printf@exp& (0+255),b
 13069                           
 13070                           ; BSR set to: 0
 13071                           ;doprnt.c: 836: if( fval!=0) {
 13072  0110AA  0100               	movlb	0	; () banked
 13073  0110AC  51C9               	movf	printf@fval& (0+255),w,b
 13074  0110AE  0100               	movlb	0	; () banked
 13075  0110B0  11CA               	iorwf	(printf@fval+1)& (0+255),w,b
 13076  0110B2  0100               	movlb	0	; () banked
 13077  0110B4  11CB               	iorwf	(printf@fval+2)& (0+255),w,b
 13078  0110B6  B4D8               	btfsc	status,2,c
 13079  0110B8  D09A               	goto	l20065
 13080                           
 13081                           ; BSR set to: 0
 13082                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 13083  0110BA  0E82               	movlw	130
 13084  0110BC  0100               	movlb	0	; () banked
 13085  0110BE  6FAC               	movwf	??_printf& (0+255),b
 13086  0110C0  0EFF               	movlw	255
 13087  0110C2  0100               	movlb	0	; () banked
 13088  0110C4  6FAD               	movwf	(??_printf+1)& (0+255),b
 13089  0110C6  C0C9  F0AE         	movff	printf@fval,??_printf+2
 13090  0110CA  C0CA  F0AF         	movff	printf@fval+1,??_printf+3
 13091  0110CE  C0CB  F0B0         	movff	printf@fval+2,??_printf+4
 13092  0110D2  C0CC  F0B1         	movff	printf@fval+3,??_printf+5
 13093  0110D6  0E10               	movlw	16
 13094  0110D8  D006               	goto	u13270
 13095  0110DA                     u13275:
 13096  0110DA  0100               	movlb	0	; () banked
 13097  0110DC  90D8               	bcf	status,0,c
 13098  0110DE  33B1               	rrcf	(??_printf+5)& (0+255),f,b
 13099  0110E0  33B0               	rrcf	(??_printf+4)& (0+255),f,b
 13100  0110E2  33AF               	rrcf	(??_printf+3)& (0+255),f,b
 13101  0110E4  33AE               	rrcf	(??_printf+2)& (0+255),f,b
 13102  0110E6                     u13270:
 13103  0110E6  2EE8               	decfsz	wreg,f,c
 13104  0110E8  D7F8               	goto	u13275
 13105  0110EA  0100               	movlb	0	; () banked
 13106  0110EC  51AE               	movf	(??_printf+2)& (0+255),w,b
 13107  0110EE  0100               	movlb	0	; () banked
 13108  0110F0  25AC               	addwf	??_printf& (0+255),w,b
 13109  0110F2  0100               	movlb	0	; () banked
 13110  0110F4  6FC5               	movwf	printf@exp& (0+255),b
 13111  0110F6  0E00               	movlw	0
 13112  0110F8  0100               	movlb	0	; () banked
 13113  0110FA  21AD               	addwfc	(??_printf+1)& (0+255),w,b
 13114  0110FC  0100               	movlb	0	; () banked
 13115  0110FE  6FC6               	movwf	(printf@exp+1)& (0+255),b
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;doprnt.c: 838: exp--;
 13119  011100  0100               	movlb	0	; () banked
 13120  011102  07C5               	decf	printf@exp& (0+255),f,b
 13121  011104  A0D8               	btfss	status,0,c
 13122  011106  07C6               	decf	(printf@exp+1)& (0+255),f,b
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;doprnt.c: 839: exp *= 3;
 13126  011108  C0C5  F064         	movff	printf@exp,___wmul@multiplier
 13127  01110C  C0C6  F065         	movff	printf@exp+1,___wmul@multiplier+1
 13128  011110  0E00               	movlw	0
 13129  011112  0100               	movlb	0	; () banked
 13130  011114  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13131  011116  0E03               	movlw	3
 13132  011118  6F66               	movwf	___wmul@multiplicand& (0+255),b
 13133  01111A  EC4B  F0D3         	call	___wmul	;wreg free
 13134  01111E  C064  F0C5         	movff	?___wmul,printf@exp
 13135  011122  C065  F0C6         	movff	?___wmul+1,printf@exp+1
 13136                           
 13137                           ;doprnt.c: 840: exp /= 10;
 13138  011126  C0C5  F023         	movff	printf@exp,___awdiv@dividend
 13139  01112A  C0C6  F024         	movff	printf@exp+1,___awdiv@dividend+1
 13140  01112E  0E00               	movlw	0
 13141  011130  6E26               	movwf	___awdiv@divisor+1,c
 13142  011132  0E0A               	movlw	10
 13143  011134  6E25               	movwf	___awdiv@divisor,c
 13144  011136  EC96  F0CD         	call	___awdiv	;wreg free
 13145  01113A  C023  F0C5         	movff	?___awdiv,printf@exp
 13146  01113E  C024  F0C6         	movff	?___awdiv+1,printf@exp+1
 13147                           
 13148                           ;doprnt.c: 841: if(exp < 0)
 13149  011142  0100               	movlb	0	; () banked
 13150  011144  AFC6               	btfss	(printf@exp+1)& (0+255),7,b
 13151  011146  D004               	goto	l20053
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;doprnt.c: 842: exp--;
 13155  011148  0100               	movlb	0	; () banked
 13156  01114A  07C5               	decf	printf@exp& (0+255),f,b
 13157  01114C  A0D8               	btfss	status,0,c
 13158  01114E  07C6               	decf	(printf@exp+1)& (0+255),f,b
 13159  011150                     l20053:
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 13163  011150  0100               	movlb	0	; () banked
 13164  011152  51C5               	movf	printf@exp& (0+255),w,b
 13165  011154  0800               	sublw	0
 13166  011156  EC23  F09F         	call	_scale
 13167  01115A  C079  F0BD         	movff	?_scale,printf@tmpval
 13168  01115E  C07A  F0BE         	movff	?_scale+1,printf@tmpval+1
 13169  011162  C07B  F0BF         	movff	?_scale+2,printf@tmpval+2
 13170                           
 13171                           ;doprnt.c: 847: tmpval.integ *= fval;
 13172  011166  C0BD  F06A         	movff	printf@tmpval,___ftmul@f1
 13173  01116A  C0BE  F06B         	movff	printf@tmpval+1,___ftmul@f1+1
 13174  01116E  C0BF  F06C         	movff	printf@tmpval+2,___ftmul@f1+2
 13175  011172  C0C9  F06D         	movff	printf@fval,___ftmul@f2
 13176  011176  C0CA  F06E         	movff	printf@fval+1,___ftmul@f2+1
 13177  01117A  C0CB  F06F         	movff	printf@fval+2,___ftmul@f2+2
 13178  01117E  EC83  F0BD         	call	___ftmul	;wreg free
 13179  011182  C06A  F0BD         	movff	?___ftmul,printf@tmpval
 13180  011186  C06B  F0BE         	movff	?___ftmul+1,printf@tmpval+1
 13181  01118A  C06C  F0BF         	movff	?___ftmul+2,printf@tmpval+2
 13182                           
 13183                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 13184  01118E  C0BD  F08F         	movff	printf@tmpval,___ftge@ff1
 13185  011192  C0BE  F090         	movff	printf@tmpval+1,___ftge@ff1+1
 13186  011196  C0BF  F091         	movff	printf@tmpval+2,___ftge@ff1+2
 13187  01119A  0E00               	movlw	0
 13188  01119C  0100               	movlb	0	; () banked
 13189  01119E  6F92               	movwf	___ftge@ff2& (0+255),b
 13190  0111A0  0E80               	movlw	128
 13191  0111A2  0100               	movlb	0	; () banked
 13192  0111A4  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 13193  0111A6  0E3F               	movlw	63
 13194  0111A8  0100               	movlb	0	; () banked
 13195  0111AA  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 13196  0111AC  EC09  F0C8         	call	___ftge	;wreg free
 13197  0111B0  0100               	movlb	0	; () banked
 13198  0111B2  B0D8               	btfsc	status,0,c
 13199  0111B4  D005               	goto	l20061
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;doprnt.c: 849: exp--;
 13203  0111B6  0100               	movlb	0	; () banked
 13204  0111B8  07C5               	decf	printf@exp& (0+255),f,b
 13205  0111BA  A0D8               	btfss	status,0,c
 13206  0111BC  07C6               	decf	(printf@exp+1)& (0+255),f,b
 13207  0111BE  D017               	goto	l20065
 13208  0111C0                     l20061:
 13209                           
 13210                           ; BSR set to: 0
 13211                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 13212  0111C0  C0BD  F08F         	movff	printf@tmpval,___ftge@ff1
 13213  0111C4  C0BE  F090         	movff	printf@tmpval+1,___ftge@ff1+1
 13214  0111C8  C0BF  F091         	movff	printf@tmpval+2,___ftge@ff1+2
 13215  0111CC  0E00               	movlw	0
 13216  0111CE  0100               	movlb	0	; () banked
 13217  0111D0  6F92               	movwf	___ftge@ff2& (0+255),b
 13218  0111D2  0E20               	movlw	32
 13219  0111D4  0100               	movlb	0	; () banked
 13220  0111D6  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 13221  0111D8  0E41               	movlw	65
 13222  0111DA  0100               	movlb	0	; () banked
 13223  0111DC  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 13224  0111DE  EC09  F0C8         	call	___ftge	;wreg free
 13225  0111E2  0100               	movlb	0	; () banked
 13226  0111E4  A0D8               	btfss	status,0,c
 13227  0111E6  D003               	goto	l20065
 13228                           
 13229                           ; BSR set to: 0
 13230                           ;doprnt.c: 851: exp++;
 13231  0111E8  0100               	movlb	0	; () banked
 13232  0111EA  4BC5               	infsnz	printf@exp& (0+255),f,b
 13233  0111EC  2BC6               	incf	(printf@exp+1)& (0+255),f,b
 13234  0111EE                     l20065:
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;doprnt.c: 852: }
 13238                           ;doprnt.c: 1112: if(prec <= 12)
 13239  0111EE  0100               	movlb	0	; () banked
 13240  0111F0  BFCD               	btfsc	(printf@prec+1)& (0+255),7,b
 13241  0111F2  D008               	goto	l20067
 13242  0111F4  0100               	movlb	0	; () banked
 13243  0111F6  51CD               	movf	(printf@prec+1)& (0+255),w,b
 13244  0111F8  E11D               	bnz	l20069
 13245  0111FA  0E0D               	movlw	13
 13246  0111FC  0100               	movlb	0	; () banked
 13247  0111FE  5DCC               	subwf	printf@prec& (0+255),w,b
 13248  011200  B0D8               	btfsc	status,0,c
 13249  011202  D018               	goto	l20069
 13250  011204                     l20067:
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;doprnt.c: 1113: fval += fround(prec);
 13254  011204  C0C9  F083         	movff	printf@fval,___ftadd@f1
 13255  011208  C0CA  F084         	movff	printf@fval+1,___ftadd@f1+1
 13256  01120C  C0CB  F085         	movff	printf@fval+2,___ftadd@f1+2
 13257  011210  0100               	movlb	0	; () banked
 13258  011212  51CC               	movf	printf@prec& (0+255),w,b
 13259  011214  EC0A  F0AC         	call	_fround
 13260  011218  C079  F086         	movff	?_fround,___ftadd@f2
 13261  01121C  C07A  F087         	movff	?_fround+1,___ftadd@f2+1
 13262  011220  C07B  F088         	movff	?_fround+2,___ftadd@f2+2
 13263  011224  ECE4  F0AF         	call	___ftadd	;wreg free
 13264  011228  C083  F0C9         	movff	?___ftadd,printf@fval
 13265  01122C  C084  F0CA         	movff	?___ftadd+1,printf@fval+1
 13266  011230  C085  F0CB         	movff	?___ftadd+2,printf@fval+2
 13267  011234                     l20069:
 13268                           
 13269                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 13270  011234  0100               	movlb	0	; () banked
 13271  011236  BFC6               	btfsc	(printf@exp+1)& (0+255),7,b
 13272  011238  D008               	goto	l20071
 13273  01123A  0100               	movlb	0	; () banked
 13274  01123C  51C6               	movf	(printf@exp+1)& (0+255),w,b
 13275  01123E  E12A               	bnz	l20077
 13276  011240  0E0A               	movlw	10
 13277  011242  0100               	movlb	0	; () banked
 13278  011244  5DC5               	subwf	printf@exp& (0+255),w,b
 13279  011246  B0D8               	btfsc	status,0,c
 13280  011248  D025               	goto	l20077
 13281  01124A                     l20071:
 13282                           
 13283                           ; BSR set to: 0
 13284  01124A  0100               	movlb	0	; () banked
 13285  01124C  51C9               	movf	printf@fval& (0+255),w,b
 13286  01124E  0100               	movlb	0	; () banked
 13287  011250  11CA               	iorwf	(printf@fval+1)& (0+255),w,b
 13288  011252  0100               	movlb	0	; () banked
 13289  011254  11CB               	iorwf	(printf@fval+2)& (0+255),w,b
 13290  011256  B4D8               	btfsc	status,2,c
 13291  011258  D063               	goto	l20091
 13292                           
 13293                           ; BSR set to: 0
 13294  01125A  C0C9  F080         	movff	printf@fval,___fttol@f1
 13295  01125E  C0CA  F081         	movff	printf@fval+1,___fttol@f1+1
 13296  011262  C0CB  F082         	movff	printf@fval+2,___fttol@f1+2
 13297  011266  ECD3  F0C0         	call	___fttol	;wreg free
 13298  01126A  0100               	movlb	0	; () banked
 13299  01126C  5180               	movf	?___fttol& (0+255),w,b
 13300  01126E  0100               	movlb	0	; () banked
 13301  011270  1181               	iorwf	(?___fttol+1)& (0+255),w,b
 13302  011272  0100               	movlb	0	; () banked
 13303  011274  1182               	iorwf	(?___fttol+2)& (0+255),w,b
 13304  011276  0100               	movlb	0	; () banked
 13305  011278  1183               	iorwf	(?___fttol+3)& (0+255),w,b
 13306  01127A  A4D8               	btfss	status,2,c
 13307  01127C  D051               	goto	l20091
 13308                           
 13309                           ; BSR set to: 0
 13310  01127E  0100               	movlb	0	; () banked
 13311  011280  BFC6               	btfsc	(printf@exp+1)& (0+255),7,b
 13312  011282  D04E               	goto	l20091
 13313  011284  0100               	movlb	0	; () banked
 13314  011286  51C6               	movf	(printf@exp+1)& (0+255),w,b
 13315  011288  E105               	bnz	l20077
 13316  01128A  0E02               	movlw	2
 13317  01128C  0100               	movlb	0	; () banked
 13318  01128E  5DC5               	subwf	printf@exp& (0+255),w,b
 13319  011290  A0D8               	btfss	status,0,c
 13320  011292  D046               	goto	l20091
 13321  011294                     l20077:
 13322                           
 13323                           ; BSR set to: 0
 13324                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 13325  011294  C0BD  F08F         	movff	printf@tmpval,___ftge@ff1
 13326  011298  C0BE  F090         	movff	printf@tmpval+1,___ftge@ff1+1
 13327  01129C  C0BF  F091         	movff	printf@tmpval+2,___ftge@ff1+2
 13328  0112A0  0E70               	movlw	112
 13329  0112A2  0100               	movlb	0	; () banked
 13330  0112A4  6F92               	movwf	___ftge@ff2& (0+255),b
 13331  0112A6  0E89               	movlw	137
 13332  0112A8  0100               	movlb	0	; () banked
 13333  0112AA  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 13334  0112AC  0E40               	movlw	64
 13335  0112AE  0100               	movlb	0	; () banked
 13336  0112B0  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 13337  0112B2  EC09  F0C8         	call	___ftge	;wreg free
 13338  0112B6  0100               	movlb	0	; () banked
 13339  0112B8  B0D8               	btfsc	status,0,c
 13340  0112BA  D003               	goto	l20081
 13341                           
 13342                           ; BSR set to: 0
 13343                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 13344  0112BC  0100               	movlb	0	; () banked
 13345  0112BE  0EF7               	movlw	247
 13346  0112C0  D002               	goto	L5
 13347  0112C2                     l20081:
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 13351  0112C2  0100               	movlb	0	; () banked
 13352  0112C4  0EF8               	movlw	248
 13353  0112C6                     L5:
 13354  0112C6  27C5               	addwf	printf@exp& (0+255),f,b
 13355  0112C8  0EFF               	movlw	255
 13356  0112CA  23C6               	addwfc	(printf@exp+1)& (0+255),f,b
 13357                           
 13358                           ; BSR set to: 0
 13359                           ;doprnt.c: 1124: }
 13360                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 13361                           
 13362                           ; BSR set to: 0
 13363  0112CC  0100               	movlb	0	; () banked
 13364  0112CE  51C5               	movf	printf@exp& (0+255),w,b
 13365  0112D0  EC23  F09F         	call	_scale
 13366  0112D4  C079  F0BD         	movff	?_scale,printf@tmpval
 13367  0112D8  C07A  F0BE         	movff	?_scale+1,printf@tmpval+1
 13368  0112DC  C07B  F0BF         	movff	?_scale+2,printf@tmpval+2
 13369                           
 13370                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 13371  0112E0  C0C9  F01D         	movff	printf@fval,__tdiv_to_l_@f1
 13372  0112E4  C0CA  F01E         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 13373  0112E8  C0CB  F01F         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 13374  0112EC  C0BD  F020         	movff	printf@tmpval,__tdiv_to_l_@f2
 13375  0112F0  C0BE  F021         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 13376  0112F4  C0BF  F022         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 13377  0112F8  EC32  F0BE         	call	__tdiv_to_l_	;wreg free
 13378  0112FC  C01D  F0C1         	movff	?__tdiv_to_l_,printf@val
 13379  011300  C01E  F0C2         	movff	?__tdiv_to_l_+1,printf@val+1
 13380  011304  C01F  F0C3         	movff	?__tdiv_to_l_+2,printf@val+2
 13381  011308  C020  F0C4         	movff	?__tdiv_to_l_+3,printf@val+3
 13382                           
 13383                           ;doprnt.c: 1129: fval = 0.0;
 13384  01130C  0E00               	movlw	0
 13385  01130E  0100               	movlb	0	; () banked
 13386  011310  6FC9               	movwf	printf@fval& (0+255),b
 13387  011312  0E00               	movlw	0
 13388  011314  0100               	movlb	0	; () banked
 13389  011316  6FCA               	movwf	(printf@fval+1)& (0+255),b
 13390  011318  0E00               	movlw	0
 13391  01131A  0100               	movlb	0	; () banked
 13392  01131C  6FCB               	movwf	(printf@fval+2)& (0+255),b
 13393                           
 13394                           ;doprnt.c: 1130: } else {
 13395  01131E  D033               	goto	l20095
 13396  011320                     l20091:
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;doprnt.c: 1131: val = (unsigned long)fval;
 13400  011320  C0C9  F080         	movff	printf@fval,___fttol@f1
 13401  011324  C0CA  F081         	movff	printf@fval+1,___fttol@f1+1
 13402  011328  C0CB  F082         	movff	printf@fval+2,___fttol@f1+2
 13403  01132C  ECD3  F0C0         	call	___fttol	;wreg free
 13404  011330  C080  F0C1         	movff	?___fttol,printf@val
 13405  011334  C081  F0C2         	movff	?___fttol+1,printf@val+1
 13406  011338  C082  F0C3         	movff	?___fttol+2,printf@val+2
 13407  01133C  C083  F0C4         	movff	?___fttol+3,printf@val+3
 13408                           
 13409                           ;doprnt.c: 1132: fval -= (double)val;
 13410  011340  C0C9  F0A1         	movff	printf@fval,___ftsub@f1
 13411  011344  C0CA  F0A2         	movff	printf@fval+1,___ftsub@f1+1
 13412  011348  C0CB  F0A3         	movff	printf@fval+2,___ftsub@f1+2
 13413  01134C  C0C1  F060         	movff	printf@val,___lltoft@c
 13414  011350  C0C2  F061         	movff	printf@val+1,___lltoft@c+1
 13415  011354  C0C3  F062         	movff	printf@val+2,___lltoft@c+2
 13416  011358  C0C4  F063         	movff	printf@val+3,___lltoft@c+3
 13417  01135C  ECF6  F0CF         	call	___lltoft	;wreg free
 13418  011360  C060  F0A4         	movff	?___lltoft,___ftsub@f2
 13419  011364  C061  F0A5         	movff	?___lltoft+1,___ftsub@f2+1
 13420  011368  C062  F0A6         	movff	?___lltoft+2,___ftsub@f2+2
 13421  01136C  ECA9  F0D2         	call	___ftsub	;wreg free
 13422  011370  C0A1  F0C9         	movff	?___ftsub,printf@fval
 13423  011374  C0A2  F0CA         	movff	?___ftsub+1,printf@fval+1
 13424  011378  C0A3  F0CB         	movff	?___ftsub+2,printf@fval+2
 13425                           
 13426                           ;doprnt.c: 1133: exp = 0;
 13427  01137C  0E00               	movlw	0
 13428  01137E  0100               	movlb	0	; () banked
 13429  011380  6FC6               	movwf	(printf@exp+1)& (0+255),b
 13430  011382  0E00               	movlw	0
 13431  011384  6FC5               	movwf	printf@exp& (0+255),b
 13432  011386                     l20095:
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;doprnt.c: 1134: }
 13436                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 13437  011386  0E01               	movlw	1
 13438  011388  0100               	movlb	0	; () banked
 13439  01138A  6FCE               	movwf	printf@c& (0+255),b
 13440  01138C                     l20097:
 13441                           
 13442                           ; BSR set to: 0
 13443  01138C  0E0A               	movlw	10
 13444  01138E  0100               	movlb	0	; () banked
 13445  011390  19CE               	xorwf	printf@c& (0+255),w,b
 13446  011392  B4D8               	btfsc	status,2,c
 13447  011394  D021               	goto	l20109
 13448                           
 13449                           ; BSR set to: 0
 13450                           ;doprnt.c: 1137: if(val < dpowers[c])
 13451                           
 13452                           ; BSR set to: 0
 13453                           
 13454                           ; BSR set to: 0
 13455  011396  0100               	movlb	0	; () banked
 13456  011398  51CE               	movf	printf@c& (0+255),w,b
 13457  01139A  0D04               	mullw	4
 13458  01139C  0E79               	movlw	low _dpowers
 13459  01139E  24F3               	addwf	prodl,w,c
 13460  0113A0  6EF6               	movwf	tblptrl,c
 13461  0113A2  0EFB               	movlw	high _dpowers
 13462  0113A4  20F4               	addwfc	prodh,w,c
 13463  0113A6  6EF7               	movwf	tblptrh,c
 13464  0113A8                     	if	1	;There are 3 active tblptr bytes
 13465  0113A8  6AF8               	clrf	tblptru,c
 13466  0113AA  0E00               	movlw	low (__mediumconst shr (0+16))
 13467  0113AC  22F8               	addwfc	tblptru,f,c
 13468  0113AE                     	endif
 13469  0113AE  0009               	tblrd		*+
 13470  0113B0  50F5               	movf	tablat,w,c
 13471  0113B2  0100               	movlb	0	; () banked
 13472  0113B4  5DC1               	subwf	printf@val& (0+255),w,b
 13473  0113B6  0009               	tblrd		*+
 13474  0113B8  50F5               	movf	tablat,w,c
 13475  0113BA  0100               	movlb	0	; () banked
 13476  0113BC  59C2               	subwfb	(printf@val+1)& (0+255),w,b
 13477  0113BE  0009               	tblrd		*+
 13478  0113C0  50F5               	movf	tablat,w,c
 13479  0113C2  0100               	movlb	0	; () banked
 13480  0113C4  59C3               	subwfb	(printf@val+2)& (0+255),w,b
 13481  0113C6  0009               	tblrd		*+
 13482  0113C8  50F5               	movf	tablat,w,c
 13483  0113CA  0100               	movlb	0	; () banked
 13484  0113CC  59C4               	subwfb	(printf@val+3)& (0+255),w,b
 13485  0113CE  A0D8               	btfss	status,0,c
 13486  0113D0  D003               	goto	l20109
 13487                           
 13488                           ; BSR set to: 0
 13489                           
 13490                           ; BSR set to: 0
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;doprnt.c: 1138: break;
 13494  0113D2  0100               	movlb	0	; () banked
 13495  0113D4  2BCE               	incf	printf@c& (0+255),f,b
 13496  0113D6  D7DA               	goto	l20097
 13497  0113D8                     l20109:
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;doprnt.c: 1142: width -= prec + c + exp;
 13501  0113D8  C0CE  F0AC         	movff	printf@c,??_printf
 13502  0113DC  0100               	movlb	0	; () banked
 13503  0113DE  6BAD               	clrf	(??_printf+1)& (0+255),b
 13504  0113E0  BFAC               	btfsc	??_printf& (0+255),7,b
 13505  0113E2  07AD               	decf	(??_printf+1)& (0+255),f,b
 13506  0113E4  0100               	movlb	0	; () banked
 13507  0113E6  51CC               	movf	printf@prec& (0+255),w,b
 13508  0113E8  0100               	movlb	0	; () banked
 13509  0113EA  27AC               	addwf	??_printf& (0+255),f,b
 13510  0113EC  0100               	movlb	0	; () banked
 13511  0113EE  51CD               	movf	(printf@prec+1)& (0+255),w,b
 13512  0113F0  0100               	movlb	0	; () banked
 13513  0113F2  23AD               	addwfc	(??_printf+1)& (0+255),f,b
 13514  0113F4  0100               	movlb	0	; () banked
 13515  0113F6  51C5               	movf	printf@exp& (0+255),w,b
 13516  0113F8  0100               	movlb	0	; () banked
 13517  0113FA  27AC               	addwf	??_printf& (0+255),f,b
 13518  0113FC  0100               	movlb	0	; () banked
 13519  0113FE  51C6               	movf	(printf@exp+1)& (0+255),w,b
 13520  011400  0100               	movlb	0	; () banked
 13521  011402  23AD               	addwfc	(??_printf+1)& (0+255),f,b
 13522  011404  0100               	movlb	0	; () banked
 13523  011406  51AC               	movf	??_printf& (0+255),w,b
 13524  011408  0100               	movlb	0	; () banked
 13525  01140A  5FC7               	subwf	printf@width& (0+255),f,b
 13526  01140C  0100               	movlb	0	; () banked
 13527  01140E  51AD               	movf	(??_printf+1)& (0+255),w,b
 13528  011410  0100               	movlb	0	; () banked
 13529  011412  5BC8               	subwfb	(printf@width+1)& (0+255),f,b
 13530                           
 13531                           ;doprnt.c: 1143: if(
 13532                           ;doprnt.c: 1147: prec)
 13533  011414  0100               	movlb	0	; () banked
 13534  011416  51CC               	movf	printf@prec& (0+255),w,b
 13535  011418  0100               	movlb	0	; () banked
 13536  01141A  11CD               	iorwf	(printf@prec+1)& (0+255),w,b
 13537  01141C  B4D8               	btfsc	status,2,c
 13538  01141E  D004               	goto	l20113
 13539                           
 13540                           ; BSR set to: 0
 13541                           ;doprnt.c: 1148: width--;
 13542  011420  0100               	movlb	0	; () banked
 13543  011422  07C7               	decf	printf@width& (0+255),f,b
 13544  011424  A0D8               	btfss	status,0,c
 13545  011426  07C8               	decf	(printf@width+1)& (0+255),f,b
 13546  011428                     l20113:
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;doprnt.c: 1149: if(flag & 0x03)
 13550  011428  0E03               	movlw	3
 13551  01142A  0100               	movlb	0	; () banked
 13552  01142C  15BB               	andwf	printf@flag& (0+255),w,b
 13553  01142E  0100               	movlb	0	; () banked
 13554  011430  6FAC               	movwf	??_printf& (0+255),b
 13555  011432  0E00               	movlw	0
 13556  011434  0100               	movlb	0	; () banked
 13557  011436  15BC               	andwf	(printf@flag+1)& (0+255),w,b
 13558  011438  0100               	movlb	0	; () banked
 13559  01143A  6FAD               	movwf	(??_printf+1)& (0+255),b
 13560  01143C  0100               	movlb	0	; () banked
 13561  01143E  51AC               	movf	??_printf& (0+255),w,b
 13562  011440  0100               	movlb	0	; () banked
 13563  011442  11AD               	iorwf	(??_printf+1)& (0+255),w,b
 13564  011444  B4D8               	btfsc	status,2,c
 13565  011446  D008               	goto	l20121
 13566  011448  D003               	goto	l20119
 13567  01144A                     l20117:
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;doprnt.c: 1181: (putch(' ') );
 13571  01144A  0E20               	movlw	32
 13572  01144C  EC36  F0D5         	call	_putch
 13573  011450                     l20119:
 13574                           
 13575                           ;doprnt.c: 1182: width--;
 13576  011450  0100               	movlb	0	; () banked
 13577  011452  07C7               	decf	printf@width& (0+255),f,b
 13578  011454  A0D8               	btfss	status,0,c
 13579  011456  07C8               	decf	(printf@width+1)& (0+255),f,b
 13580  011458                     l20121:
 13581                           
 13582                           ; BSR set to: 0
 13583  011458  0100               	movlb	0	; () banked
 13584  01145A  BFC8               	btfsc	(printf@width+1)& (0+255),7,b
 13585  01145C  D007               	goto	l20123
 13586  01145E  0100               	movlb	0	; () banked
 13587  011460  51C8               	movf	(printf@width+1)& (0+255),w,b
 13588  011462  E1F3               	bnz	l20117
 13589  011464  0100               	movlb	0	; () banked
 13590  011466  05C7               	decf	printf@width& (0+255),w,b
 13591  011468  B0D8               	btfsc	status,0,c
 13592  01146A  D7EF               	goto	l20117
 13593  01146C                     l20123:
 13594                           
 13595                           ; BSR set to: 0
 13596                           ;doprnt.c: 1183: }
 13597                           ;doprnt.c: 1188: if(flag & 0x03)
 13598  01146C  0E03               	movlw	3
 13599  01146E  0100               	movlb	0	; () banked
 13600  011470  15BB               	andwf	printf@flag& (0+255),w,b
 13601  011472  0100               	movlb	0	; () banked
 13602  011474  6FAC               	movwf	??_printf& (0+255),b
 13603  011476  0E00               	movlw	0
 13604  011478  0100               	movlb	0	; () banked
 13605  01147A  15BC               	andwf	(printf@flag+1)& (0+255),w,b
 13606  01147C  0100               	movlb	0	; () banked
 13607  01147E  6FAD               	movwf	(??_printf+1)& (0+255),b
 13608  011480  0100               	movlb	0	; () banked
 13609  011482  51AC               	movf	??_printf& (0+255),w,b
 13610  011484  0100               	movlb	0	; () banked
 13611  011486  11AD               	iorwf	(??_printf+1)& (0+255),w,b
 13612  011488  B4D8               	btfsc	status,2,c
 13613  01148A  D04E               	goto	l20133
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;doprnt.c: 1190: (putch('-') );
 13617  01148C  0E2D               	movlw	45
 13618  01148E  EC36  F0D5         	call	_putch
 13619                           
 13620                           ;doprnt.c: 1195: }
 13621                           ;doprnt.c: 1196: while(c--) {
 13622  011492  D04A               	goto	l20133
 13623  011494                     l20127:
 13624                           
 13625                           ;doprnt.c: 1200: {
 13626                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 13627  011494  C0C1  F01D         	movff	printf@val,___lldiv@dividend
 13628  011498  C0C2  F01E         	movff	printf@val+1,___lldiv@dividend+1
 13629  01149C  C0C3  F01F         	movff	printf@val+2,___lldiv@dividend+2
 13630  0114A0  C0C4  F020         	movff	printf@val+3,___lldiv@dividend+3
 13631  0114A4  0100               	movlb	0	; () banked
 13632  0114A6  51CE               	movf	printf@c& (0+255),w,b
 13633  0114A8  0D04               	mullw	4
 13634  0114AA  0E79               	movlw	low _dpowers
 13635  0114AC  24F3               	addwf	prodl,w,c
 13636  0114AE  6EF6               	movwf	tblptrl,c
 13637  0114B0  0EFB               	movlw	high _dpowers
 13638  0114B2  20F4               	addwfc	prodh,w,c
 13639  0114B4  6EF7               	movwf	tblptrh,c
 13640  0114B6                     	if	1	;There are 3 active tblptr bytes
 13641  0114B6  6AF8               	clrf	tblptru,c
 13642  0114B8  0E00               	movlw	low (__mediumconst shr (0+16))
 13643  0114BA  22F8               	addwfc	tblptru,f,c
 13644  0114BC                     	endif
 13645  0114BC  0009               	tblrd		*+
 13646  0114BE  CFF5 F021          	movff	tablat,___lldiv@divisor
 13647  0114C2  0009               	tblrd		*+
 13648  0114C4  CFF5 F022          	movff	tablat,___lldiv@divisor+1
 13649  0114C8  0009               	tblrd		*+
 13650  0114CA  CFF5 F023          	movff	tablat,___lldiv@divisor+2
 13651  0114CE  000A               	tblrd		*-
 13652  0114D0  CFF5 F024          	movff	tablat,___lldiv@divisor+3
 13653  0114D4  EC76  F0CE         	call	___lldiv	;wreg free
 13654  0114D8  C01D  F0BD         	movff	?___lldiv,printf@tmpval
 13655  0114DC  C01E  F0BE         	movff	?___lldiv+1,printf@tmpval+1
 13656  0114E0  C01F  F0BF         	movff	?___lldiv+2,printf@tmpval+2
 13657  0114E4  C020  F0C0         	movff	?___lldiv+3,printf@tmpval+3
 13658                           
 13659                           ;doprnt.c: 1202: tmpval.vd %= 10;
 13660  0114E8  C0BD  F065         	movff	printf@tmpval,___llmod@dividend
 13661  0114EC  C0BE  F066         	movff	printf@tmpval+1,___llmod@dividend+1
 13662  0114F0  C0BF  F067         	movff	printf@tmpval+2,___llmod@dividend+2
 13663  0114F4  C0C0  F068         	movff	printf@tmpval+3,___llmod@dividend+3
 13664  0114F8  0E0A               	movlw	10
 13665  0114FA  0100               	movlb	0	; () banked
 13666  0114FC  6F69               	movwf	___llmod@divisor& (0+255),b
 13667  0114FE  0E00               	movlw	0
 13668  011500  6F6A               	movwf	(___llmod@divisor+1)& (0+255),b
 13669  011502  0E00               	movlw	0
 13670  011504  6F6B               	movwf	(___llmod@divisor+2)& (0+255),b
 13671  011506  0E00               	movlw	0
 13672  011508  6F6C               	movwf	(___llmod@divisor+3)& (0+255),b
 13673  01150A  ECE4  F0CD         	call	___llmod	;wreg free
 13674  01150E  C065  F0BD         	movff	?___llmod,printf@tmpval
 13675  011512  C066  F0BE         	movff	?___llmod+1,printf@tmpval+1
 13676  011516  C067  F0BF         	movff	?___llmod+2,printf@tmpval+2
 13677  01151A  C068  F0C0         	movff	?___llmod+3,printf@tmpval+3
 13678                           
 13679                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 13680  01151E  0100               	movlb	0	; () banked
 13681  011520  51BD               	movf	printf@tmpval& (0+255),w,b
 13682  011522  0F30               	addlw	48
 13683  011524  EC36  F0D5         	call	_putch
 13684  011528                     l20133:
 13685  011528  0100               	movlb	0	; () banked
 13686  01152A  07CE               	decf	printf@c& (0+255),f,b
 13687  01152C  0100               	movlb	0	; () banked
 13688  01152E  29CE               	incf	printf@c& (0+255),w,b
 13689  011530  B4D8               	btfsc	status,2,c
 13690  011532  D008               	goto	l20139
 13691  011534  D7AF               	goto	l20127
 13692  011536                     l20135:
 13693                           
 13694                           ; BSR set to: 0
 13695                           ;doprnt.c: 1208: (putch('0') );
 13696  011536  0E30               	movlw	48
 13697  011538  EC36  F0D5         	call	_putch
 13698                           
 13699                           ;doprnt.c: 1209: exp--;
 13700  01153C  0100               	movlb	0	; () banked
 13701  01153E  07C5               	decf	printf@exp& (0+255),f,b
 13702  011540  A0D8               	btfss	status,0,c
 13703  011542  07C6               	decf	(printf@exp+1)& (0+255),f,b
 13704  011544                     l20139:
 13705                           
 13706                           ; BSR set to: 0
 13707  011544  0100               	movlb	0	; () banked
 13708  011546  BFC6               	btfsc	(printf@exp+1)& (0+255),7,b
 13709  011548  D007               	goto	l20141
 13710  01154A  0100               	movlb	0	; () banked
 13711  01154C  51C6               	movf	(printf@exp+1)& (0+255),w,b
 13712  01154E  E1F3               	bnz	l20135
 13713  011550  0100               	movlb	0	; () banked
 13714  011552  05C5               	decf	printf@exp& (0+255),w,b
 13715  011554  B0D8               	btfsc	status,0,c
 13716  011556  D7EF               	goto	l20135
 13717  011558                     l20141:
 13718                           
 13719                           ; BSR set to: 0
 13720                           ;doprnt.c: 1210: }
 13721                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 13722  011558  0100               	movlb	0	; () banked
 13723  01155A  BFCD               	btfsc	(printf@prec+1)& (0+255),7,b
 13724  01155C  D00C               	goto	l10410
 13725  01155E  0100               	movlb	0	; () banked
 13726  011560  51CD               	movf	(printf@prec+1)& (0+255),w,b
 13727  011562  E105               	bnz	u13460
 13728  011564  0E09               	movlw	9
 13729  011566  0100               	movlb	0	; () banked
 13730  011568  5DCC               	subwf	printf@prec& (0+255),w,b
 13731  01156A  A0D8               	btfss	status,0,c
 13732  01156C  D004               	goto	l10410
 13733  01156E                     u13460:
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 13737  01156E  0E08               	movlw	8
 13738  011570  0100               	movlb	0	; () banked
 13739  011572  6FCE               	movwf	printf@c& (0+255),b
 13740  011574  D002               	goto	l20145
 13741  011576                     l10410:
 13742                           
 13743                           ; BSR set to: 0
 13744                           ;doprnt.c: 1213: else
 13745                           ;doprnt.c: 1214: c = prec;
 13746  011576  C0CC  F0CE         	movff	printf@prec,printf@c
 13747  01157A                     l20145:
 13748                           
 13749                           ; BSR set to: 0
 13750                           ;doprnt.c: 1215: prec -= c;
 13751  01157A  0100               	movlb	0	; () banked
 13752  01157C  51CE               	movf	printf@c& (0+255),w,b
 13753  01157E  0100               	movlb	0	; () banked
 13754  011580  5FCC               	subwf	printf@prec& (0+255),f,b
 13755  011582  0E00               	movlw	0
 13756  011584  0100               	movlb	0	; () banked
 13757  011586  BFCE               	btfsc	printf@c& (0+255),7,b
 13758  011588  0EFF               	movlw	255
 13759  01158A  0100               	movlb	0	; () banked
 13760  01158C  5BCD               	subwfb	(printf@prec+1)& (0+255),f,b
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;doprnt.c: 1219: if(c)
 13764  01158E  0100               	movlb	0	; () banked
 13765  011590  51CE               	movf	printf@c& (0+255),w,b
 13766  011592  0100               	movlb	0	; () banked
 13767  011594  B4D8               	btfsc	status,2,c
 13768  011596  D003               	goto	l20151
 13769                           
 13770                           ; BSR set to: 0
 13771                           ;doprnt.c: 1221: (putch('.') );
 13772  011598  0E2E               	movlw	46
 13773  01159A  EC36  F0D5         	call	_putch
 13774  01159E                     l20151:
 13775                           
 13776                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13777  01159E  0100               	movlb	0	; () banked
 13778  0115A0  51CE               	movf	printf@c& (0+255),w,b
 13779  0115A2  EC23  F09F         	call	_scale
 13780  0115A6  C079  F0B2         	movff	?_scale,_printf$8211
 13781  0115AA  C07A  F0B3         	movff	?_scale+1,_printf$8211+1
 13782  0115AE  C07B  F0B4         	movff	?_scale+2,_printf$8211+2
 13783                           
 13784                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 13785  0115B2  C0C9  F06D         	movff	printf@fval,___ftmul@f2
 13786  0115B6  C0CA  F06E         	movff	printf@fval+1,___ftmul@f2+1
 13787  0115BA  C0CB  F06F         	movff	printf@fval+2,___ftmul@f2+2
 13788  0115BE  C0B2  F06A         	movff	_printf$8211,___ftmul@f1
 13789  0115C2  C0B3  F06B         	movff	_printf$8211+1,___ftmul@f1+1
 13790  0115C6  C0B4  F06C         	movff	_printf$8211+2,___ftmul@f1+2
 13791  0115CA  EC83  F0BD         	call	___ftmul	;wreg free
 13792  0115CE  C06A  F080         	movff	?___ftmul,___fttol@f1
 13793  0115D2  C06B  F081         	movff	?___ftmul+1,___fttol@f1+1
 13794  0115D6  C06C  F082         	movff	?___ftmul+2,___fttol@f1+2
 13795  0115DA  ECD3  F0C0         	call	___fttol	;wreg free
 13796  0115DE  C080  F0C1         	movff	?___fttol,printf@val
 13797  0115E2  C081  F0C2         	movff	?___fttol+1,printf@val+1
 13798  0115E6  C082  F0C3         	movff	?___fttol+2,printf@val+2
 13799  0115EA  C083  F0C4         	movff	?___fttol+3,printf@val+3
 13800                           
 13801                           ;doprnt.c: 1228: while(c--) {
 13802  0115EE  D074               	goto	l20161
 13803  0115F0                     l20155:
 13804                           
 13805                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 13806  0115F0  C0C1  F01D         	movff	printf@val,___lldiv@dividend
 13807  0115F4  C0C2  F01E         	movff	printf@val+1,___lldiv@dividend+1
 13808  0115F8  C0C3  F01F         	movff	printf@val+2,___lldiv@dividend+2
 13809  0115FC  C0C4  F020         	movff	printf@val+3,___lldiv@dividend+3
 13810  011600  0100               	movlb	0	; () banked
 13811  011602  51CE               	movf	printf@c& (0+255),w,b
 13812  011604  0D04               	mullw	4
 13813  011606  0E79               	movlw	low _dpowers
 13814  011608  24F3               	addwf	prodl,w,c
 13815  01160A  6EF6               	movwf	tblptrl,c
 13816  01160C  0EFB               	movlw	high _dpowers
 13817  01160E  20F4               	addwfc	prodh,w,c
 13818  011610  6EF7               	movwf	tblptrh,c
 13819  011612                     	if	1	;There are 3 active tblptr bytes
 13820  011612  6AF8               	clrf	tblptru,c
 13821  011614  0E00               	movlw	low (__mediumconst shr (0+16))
 13822  011616  22F8               	addwfc	tblptru,f,c
 13823  011618                     	endif
 13824  011618  0009               	tblrd		*+
 13825  01161A  CFF5 F021          	movff	tablat,___lldiv@divisor
 13826  01161E  0009               	tblrd		*+
 13827  011620  CFF5 F022          	movff	tablat,___lldiv@divisor+1
 13828  011624  0009               	tblrd		*+
 13829  011626  CFF5 F023          	movff	tablat,___lldiv@divisor+2
 13830  01162A  000A               	tblrd		*-
 13831  01162C  CFF5 F024          	movff	tablat,___lldiv@divisor+3
 13832  011630  EC76  F0CE         	call	___lldiv	;wreg free
 13833  011634  C01D  F0BD         	movff	?___lldiv,printf@tmpval
 13834  011638  C01E  F0BE         	movff	?___lldiv+1,printf@tmpval+1
 13835  01163C  C01F  F0BF         	movff	?___lldiv+2,printf@tmpval+2
 13836  011640  C020  F0C0         	movff	?___lldiv+3,printf@tmpval+3
 13837                           
 13838                           ;doprnt.c: 1230: tmpval.vd %= 10;
 13839  011644  C0BD  F065         	movff	printf@tmpval,___llmod@dividend
 13840  011648  C0BE  F066         	movff	printf@tmpval+1,___llmod@dividend+1
 13841  01164C  C0BF  F067         	movff	printf@tmpval+2,___llmod@dividend+2
 13842  011650  C0C0  F068         	movff	printf@tmpval+3,___llmod@dividend+3
 13843  011654  0E0A               	movlw	10
 13844  011656  0100               	movlb	0	; () banked
 13845  011658  6F69               	movwf	___llmod@divisor& (0+255),b
 13846  01165A  0E00               	movlw	0
 13847  01165C  6F6A               	movwf	(___llmod@divisor+1)& (0+255),b
 13848  01165E  0E00               	movlw	0
 13849  011660  6F6B               	movwf	(___llmod@divisor+2)& (0+255),b
 13850  011662  0E00               	movlw	0
 13851  011664  6F6C               	movwf	(___llmod@divisor+3)& (0+255),b
 13852  011666  ECE4  F0CD         	call	___llmod	;wreg free
 13853  01166A  C065  F0BD         	movff	?___llmod,printf@tmpval
 13854  01166E  C066  F0BE         	movff	?___llmod+1,printf@tmpval+1
 13855  011672  C067  F0BF         	movff	?___llmod+2,printf@tmpval+2
 13856  011676  C068  F0C0         	movff	?___llmod+3,printf@tmpval+3
 13857                           
 13858                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 13859  01167A  0100               	movlb	0	; () banked
 13860  01167C  51BD               	movf	printf@tmpval& (0+255),w,b
 13861  01167E  0F30               	addlw	48
 13862  011680  EC36  F0D5         	call	_putch
 13863                           
 13864                           ;doprnt.c: 1232: val %= dpowers[c];
 13865  011684  C0C1  F065         	movff	printf@val,___llmod@dividend
 13866  011688  C0C2  F066         	movff	printf@val+1,___llmod@dividend+1
 13867  01168C  C0C3  F067         	movff	printf@val+2,___llmod@dividend+2
 13868  011690  C0C4  F068         	movff	printf@val+3,___llmod@dividend+3
 13869  011694  0100               	movlb	0	; () banked
 13870  011696  51CE               	movf	printf@c& (0+255),w,b
 13871  011698  0D04               	mullw	4
 13872  01169A  0E79               	movlw	low _dpowers
 13873  01169C  24F3               	addwf	prodl,w,c
 13874  01169E  6EF6               	movwf	tblptrl,c
 13875  0116A0  0EFB               	movlw	high _dpowers
 13876  0116A2  20F4               	addwfc	prodh,w,c
 13877  0116A4  6EF7               	movwf	tblptrh,c
 13878  0116A6                     	if	1	;There are 3 active tblptr bytes
 13879  0116A6  6AF8               	clrf	tblptru,c
 13880  0116A8  0E00               	movlw	low (__mediumconst shr (0+16))
 13881  0116AA  22F8               	addwfc	tblptru,f,c
 13882  0116AC                     	endif
 13883  0116AC  0009               	tblrd		*+
 13884  0116AE  CFF5 F069          	movff	tablat,___llmod@divisor
 13885  0116B2  0009               	tblrd		*+
 13886  0116B4  CFF5 F06A          	movff	tablat,___llmod@divisor+1
 13887  0116B8  0009               	tblrd		*+
 13888  0116BA  CFF5 F06B          	movff	tablat,___llmod@divisor+2
 13889  0116BE  000A               	tblrd		*-
 13890  0116C0  CFF5 F06C          	movff	tablat,___llmod@divisor+3
 13891  0116C4  ECE4  F0CD         	call	___llmod	;wreg free
 13892  0116C8  C065  F0C1         	movff	?___llmod,printf@val
 13893  0116CC  C066  F0C2         	movff	?___llmod+1,printf@val+1
 13894  0116D0  C067  F0C3         	movff	?___llmod+2,printf@val+2
 13895  0116D4  C068  F0C4         	movff	?___llmod+3,printf@val+3
 13896  0116D8                     l20161:
 13897  0116D8  0100               	movlb	0	; () banked
 13898  0116DA  07CE               	decf	printf@c& (0+255),f,b
 13899  0116DC  0100               	movlb	0	; () banked
 13900  0116DE  29CE               	incf	printf@c& (0+255),w,b
 13901  0116E0  B4D8               	btfsc	status,2,c
 13902  0116E2  D008               	goto	l20167
 13903  0116E4  D785               	goto	l20155
 13904  0116E6                     l20163:
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;doprnt.c: 1236: (putch('0') );
 13908  0116E6  0E30               	movlw	48
 13909  0116E8  EC36  F0D5         	call	_putch
 13910                           
 13911                           ;doprnt.c: 1237: prec--;
 13912  0116EC  0100               	movlb	0	; () banked
 13913  0116EE  07CC               	decf	printf@prec& (0+255),f,b
 13914  0116F0  A0D8               	btfss	status,0,c
 13915  0116F2  07CD               	decf	(printf@prec+1)& (0+255),f,b
 13916  0116F4                     l20167:
 13917                           
 13918                           ; BSR set to: 0
 13919  0116F4  0100               	movlb	0	; () banked
 13920  0116F6  51CC               	movf	printf@prec& (0+255),w,b
 13921  0116F8  0100               	movlb	0	; () banked
 13922  0116FA  11CD               	iorwf	(printf@prec+1)& (0+255),w,b
 13923  0116FC  B4D8               	btfsc	status,2,c
 13924  0116FE  D179               	goto	l20247
 13925  011700  D7F2               	goto	l20163
 13926  011702                     l10376:
 13927                           
 13928                           ; BSR set to: 0
 13929                           ;doprnt.c: 1246: }
 13930                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13931  011702  0100               	movlb	0	; () banked
 13932  011704  BDBB               	btfsc	printf@flag& (0+255),6,b
 13933  011706  D023               	goto	l20179
 13934                           
 13935                           ; BSR set to: 0
 13936                           ;doprnt.c: 1253: {
 13937                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 13938  011708  C0B7  FFD9         	movff	printf@ap,fsr2l
 13939  01170C  C0B8  FFDA         	movff	printf@ap+1,fsr2h
 13940  011710  CFDE F0C1          	movff	postinc2,printf@val
 13941  011714  CFDD F0C2          	movff	postdec2,printf@val+1
 13942  011718  0100               	movlb	0	; () banked
 13943  01171A  0E00               	movlw	0
 13944  01171C  BFC2               	btfsc	(printf@val+1)& (0+255),7,b
 13945  01171E  0EFF               	movlw	-1
 13946  011720  6FC3               	movwf	(printf@val+2)& (0+255),b
 13947  011722  6FC4               	movwf	(printf@val+3)& (0+255),b
 13948                           
 13949                           ; BSR set to: 0
 13950  011724  0E02               	movlw	2
 13951  011726  0100               	movlb	0	; () banked
 13952  011728  27B7               	addwf	printf@ap& (0+255),f,b
 13953  01172A  0E00               	movlw	0
 13954  01172C  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
 13955                           
 13956                           ; BSR set to: 0
 13957                           ;doprnt.c: 1261: if((long)val < 0) {
 13958  01172E  0100               	movlb	0	; () banked
 13959  011730  AFC4               	btfss	(printf@val+3)& (0+255),7,b
 13960  011732  D021               	goto	l20183
 13961                           
 13962                           ; BSR set to: 0
 13963                           ;doprnt.c: 1262: flag |= 0x03;
 13964  011734  0E03               	movlw	3
 13965  011736  0100               	movlb	0	; () banked
 13966  011738  13BB               	iorwf	printf@flag& (0+255),f,b
 13967                           
 13968                           ; BSR set to: 0
 13969                           ;doprnt.c: 1263: val = -val;
 13970  01173A  0100               	movlb	0	; () banked
 13971  01173C  1FC4               	comf	(printf@val+3)& (0+255),f,b
 13972  01173E  1FC3               	comf	(printf@val+2)& (0+255),f,b
 13973  011740  1FC2               	comf	(printf@val+1)& (0+255),f,b
 13974  011742  6DC1               	negf	printf@val& (0+255),b
 13975  011744  0E00               	movlw	0
 13976  011746  23C2               	addwfc	(printf@val+1)& (0+255),f,b
 13977  011748  23C3               	addwfc	(printf@val+2)& (0+255),f,b
 13978  01174A  23C4               	addwfc	(printf@val+3)& (0+255),f,b
 13979                           
 13980                           ; BSR set to: 0
 13981                           ;doprnt.c: 1264: }
 13982                           ;doprnt.c: 1266: }
 13983  01174C  D014               	goto	l20183
 13984  01174E                     l20179:
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;doprnt.c: 1268: else
 13988                           ;doprnt.c: 1273: {
 13989                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13990  01174E  C0B7  FFD9         	movff	printf@ap,fsr2l
 13991  011752  C0B8  FFDA         	movff	printf@ap+1,fsr2h
 13992  011756  CFDE F0AC          	movff	postinc2,??_printf
 13993  01175A  CFDD F0AD          	movff	postdec2,??_printf+1
 13994  01175E  C0AC  F0C1         	movff	??_printf,printf@val
 13995  011762  C0AD  F0C2         	movff	??_printf+1,printf@val+1
 13996  011766  0100               	movlb	0	; () banked
 13997  011768  6BC3               	clrf	(printf@val+2)& (0+255),b
 13998  01176A  6BC4               	clrf	(printf@val+3)& (0+255),b
 13999                           
 14000                           ; BSR set to: 0
 14001  01176C  0E02               	movlw	2
 14002  01176E  0100               	movlb	0	; () banked
 14003  011770  27B7               	addwf	printf@ap& (0+255),f,b
 14004  011772  0E00               	movlw	0
 14005  011774  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
 14006  011776                     l20183:
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;doprnt.c: 1287: }
 14010                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 14011  011776  0100               	movlb	0	; () banked
 14012  011778  51CC               	movf	printf@prec& (0+255),w,b
 14013  01177A  0100               	movlb	0	; () banked
 14014  01177C  11CD               	iorwf	(printf@prec+1)& (0+255),w,b
 14015  01177E  A4D8               	btfss	status,2,c
 14016  011780  D00D               	goto	l20189
 14017                           
 14018                           ; BSR set to: 0
 14019  011782  0100               	movlb	0	; () banked
 14020  011784  51C1               	movf	printf@val& (0+255),w,b
 14021  011786  0100               	movlb	0	; () banked
 14022  011788  11C2               	iorwf	(printf@val+1)& (0+255),w,b
 14023  01178A  0100               	movlb	0	; () banked
 14024  01178C  11C3               	iorwf	(printf@val+2)& (0+255),w,b
 14025  01178E  0100               	movlb	0	; () banked
 14026  011790  11C4               	iorwf	(printf@val+3)& (0+255),w,b
 14027  011792  A4D8               	btfss	status,2,c
 14028  011794  D003               	goto	l20189
 14029                           
 14030                           ; BSR set to: 0
 14031                           ;doprnt.c: 1291: prec++;
 14032  011796  0100               	movlb	0	; () banked
 14033  011798  4BCC               	infsnz	printf@prec& (0+255),f,b
 14034  01179A  2BCD               	incf	(printf@prec+1)& (0+255),f,b
 14035  01179C                     l20189:
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14039  01179C  0E01               	movlw	1
 14040  01179E  0100               	movlb	0	; () banked
 14041  0117A0  6FCE               	movwf	printf@c& (0+255),b
 14042  0117A2                     l20191:
 14043                           
 14044                           ; BSR set to: 0
 14045  0117A2  0E0A               	movlw	10
 14046  0117A4  0100               	movlb	0	; () banked
 14047  0117A6  19CE               	xorwf	printf@c& (0+255),w,b
 14048  0117A8  B4D8               	btfsc	status,2,c
 14049  0117AA  D021               	goto	l20203
 14050                           
 14051                           ; BSR set to: 0
 14052                           ;doprnt.c: 1306: if(val < dpowers[c])
 14053                           
 14054                           ; BSR set to: 0
 14055                           
 14056                           ; BSR set to: 0
 14057  0117AC  0100               	movlb	0	; () banked
 14058  0117AE  51CE               	movf	printf@c& (0+255),w,b
 14059  0117B0  0D04               	mullw	4
 14060  0117B2  0E79               	movlw	low _dpowers
 14061  0117B4  24F3               	addwf	prodl,w,c
 14062  0117B6  6EF6               	movwf	tblptrl,c
 14063  0117B8  0EFB               	movlw	high _dpowers
 14064  0117BA  20F4               	addwfc	prodh,w,c
 14065  0117BC  6EF7               	movwf	tblptrh,c
 14066  0117BE                     	if	1	;There are 3 active tblptr bytes
 14067  0117BE  6AF8               	clrf	tblptru,c
 14068  0117C0  0E00               	movlw	low (__mediumconst shr (0+16))
 14069  0117C2  22F8               	addwfc	tblptru,f,c
 14070  0117C4                     	endif
 14071  0117C4  0009               	tblrd		*+
 14072  0117C6  50F5               	movf	tablat,w,c
 14073  0117C8  0100               	movlb	0	; () banked
 14074  0117CA  5DC1               	subwf	printf@val& (0+255),w,b
 14075  0117CC  0009               	tblrd		*+
 14076  0117CE  50F5               	movf	tablat,w,c
 14077  0117D0  0100               	movlb	0	; () banked
 14078  0117D2  59C2               	subwfb	(printf@val+1)& (0+255),w,b
 14079  0117D4  0009               	tblrd		*+
 14080  0117D6  50F5               	movf	tablat,w,c
 14081  0117D8  0100               	movlb	0	; () banked
 14082  0117DA  59C3               	subwfb	(printf@val+2)& (0+255),w,b
 14083  0117DC  0009               	tblrd		*+
 14084  0117DE  50F5               	movf	tablat,w,c
 14085  0117E0  0100               	movlb	0	; () banked
 14086  0117E2  59C4               	subwfb	(printf@val+3)& (0+255),w,b
 14087  0117E4  A0D8               	btfss	status,0,c
 14088  0117E6  D003               	goto	l20203
 14089                           
 14090                           ; BSR set to: 0
 14091                           
 14092                           ; BSR set to: 0
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;doprnt.c: 1307: break;
 14096  0117E8  0100               	movlb	0	; () banked
 14097  0117EA  2BCE               	incf	printf@c& (0+255),f,b
 14098  0117EC  D7DA               	goto	l20191
 14099  0117EE                     l20203:
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;doprnt.c: 1339: if(c < prec)
 14103  0117EE  0E80               	movlw	128
 14104  0117F0  0100               	movlb	0	; () banked
 14105  0117F2  BFCE               	btfsc	printf@c& (0+255),7,b
 14106  0117F4  0E7F               	movlw	127
 14107  0117F6  0100               	movlb	0	; () banked
 14108  0117F8  6FAC               	movwf	??_printf& (0+255),b
 14109  0117FA  0100               	movlb	0	; () banked
 14110  0117FC  51CC               	movf	printf@prec& (0+255),w,b
 14111  0117FE  0100               	movlb	0	; () banked
 14112  011800  5DCE               	subwf	printf@c& (0+255),w,b
 14113  011802  0100               	movlb	0	; () banked
 14114  011804  51CD               	movf	(printf@prec+1)& (0+255),w,b
 14115  011806  0A80               	xorlw	128
 14116  011808  0100               	movlb	0	; () banked
 14117  01180A  59AC               	subwfb	??_printf& (0+255),w,b
 14118  01180C  B0D8               	btfsc	status,0,c
 14119  01180E  D003               	goto	l20207
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;doprnt.c: 1340: c = prec;
 14123  011810  C0CC  F0CE         	movff	printf@prec,printf@c
 14124  011814  D018               	goto	l20211
 14125  011816                     l20207:
 14126                           
 14127                           ; BSR set to: 0
 14128                           ;doprnt.c: 1341: else if(prec < c)
 14129  011816  0100               	movlb	0	; () banked
 14130  011818  51CD               	movf	(printf@prec+1)& (0+255),w,b
 14131  01181A  0A80               	xorlw	128
 14132  01181C  0100               	movlb	0	; () banked
 14133  01181E  6FAC               	movwf	??_printf& (0+255),b
 14134  011820  0100               	movlb	0	; () banked
 14135  011822  51CE               	movf	printf@c& (0+255),w,b
 14136  011824  0100               	movlb	0	; () banked
 14137  011826  5DCC               	subwf	printf@prec& (0+255),w,b
 14138  011828  0E80               	movlw	128
 14139  01182A  0100               	movlb	0	; () banked
 14140  01182C  BFCE               	btfsc	printf@c& (0+255),7,b
 14141  01182E  0E7F               	movlw	127
 14142  011830  0100               	movlb	0	; () banked
 14143  011832  59AC               	subwfb	??_printf& (0+255),w,b
 14144  011834  B0D8               	btfsc	status,0,c
 14145  011836  D007               	goto	l20211
 14146                           
 14147                           ; BSR set to: 0
 14148                           ;doprnt.c: 1342: prec = c;
 14149  011838  0100               	movlb	0	; () banked
 14150  01183A  51CE               	movf	printf@c& (0+255),w,b
 14151  01183C  0100               	movlb	0	; () banked
 14152  01183E  6FCC               	movwf	printf@prec& (0+255),b
 14153  011840  6BCD               	clrf	(printf@prec+1)& (0+255),b
 14154  011842  BFCC               	btfsc	printf@prec& (0+255),7,b
 14155  011844  07CD               	decf	(printf@prec+1)& (0+255),f,b
 14156  011846                     l20211:
 14157                           
 14158                           ; BSR set to: 0
 14159                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14160  011846  0100               	movlb	0	; () banked
 14161  011848  51C7               	movf	printf@width& (0+255),w,b
 14162  01184A  0100               	movlb	0	; () banked
 14163  01184C  11C8               	iorwf	(printf@width+1)& (0+255),w,b
 14164  01184E  B4D8               	btfsc	status,2,c
 14165  011850  D014               	goto	l20217
 14166                           
 14167                           ; BSR set to: 0
 14168  011852  0E03               	movlw	3
 14169  011854  0100               	movlb	0	; () banked
 14170  011856  15BB               	andwf	printf@flag& (0+255),w,b
 14171  011858  0100               	movlb	0	; () banked
 14172  01185A  6FAC               	movwf	??_printf& (0+255),b
 14173  01185C  0E00               	movlw	0
 14174  01185E  0100               	movlb	0	; () banked
 14175  011860  15BC               	andwf	(printf@flag+1)& (0+255),w,b
 14176  011862  0100               	movlb	0	; () banked
 14177  011864  6FAD               	movwf	(??_printf+1)& (0+255),b
 14178  011866  0100               	movlb	0	; () banked
 14179  011868  51AC               	movf	??_printf& (0+255),w,b
 14180  01186A  0100               	movlb	0	; () banked
 14181  01186C  11AD               	iorwf	(??_printf+1)& (0+255),w,b
 14182  01186E  B4D8               	btfsc	status,2,c
 14183  011870  D004               	goto	l20217
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;doprnt.c: 1346: width--;
 14187  011872  0100               	movlb	0	; () banked
 14188  011874  07C7               	decf	printf@width& (0+255),f,b
 14189  011876  A0D8               	btfss	status,0,c
 14190  011878  07C8               	decf	(printf@width+1)& (0+255),f,b
 14191  01187A                     l20217:
 14192                           
 14193                           ; BSR set to: 0
 14194                           ;doprnt.c: 1348: if(flag & 0x4000) {
 14195  01187A  0100               	movlb	0	; () banked
 14196  01187C  ADBC               	btfss	(printf@flag+1)& (0+255),6,b
 14197  01187E  D01E               	goto	l20225
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;doprnt.c: 1349: if(width > prec)
 14201  011880  0100               	movlb	0	; () banked
 14202  011882  51C7               	movf	printf@width& (0+255),w,b
 14203  011884  0100               	movlb	0	; () banked
 14204  011886  5DCC               	subwf	printf@prec& (0+255),w,b
 14205  011888  0100               	movlb	0	; () banked
 14206  01188A  51CD               	movf	(printf@prec+1)& (0+255),w,b
 14207  01188C  0A80               	xorlw	128
 14208  01188E  0100               	movlb	0	; () banked
 14209  011890  6FAC               	movwf	??_printf& (0+255),b
 14210  011892  0100               	movlb	0	; () banked
 14211  011894  51C8               	movf	(printf@width+1)& (0+255),w,b
 14212  011896  0A80               	xorlw	128
 14213  011898  0100               	movlb	0	; () banked
 14214  01189A  59AC               	subwfb	??_printf& (0+255),w,b
 14215  01189C  B0D8               	btfsc	status,0,c
 14216  01189E  D009               	goto	l20223
 14217                           
 14218                           ; BSR set to: 0
 14219                           ;doprnt.c: 1350: width -= prec;
 14220  0118A0  0100               	movlb	0	; () banked
 14221  0118A2  51CC               	movf	printf@prec& (0+255),w,b
 14222  0118A4  0100               	movlb	0	; () banked
 14223  0118A6  5FC7               	subwf	printf@width& (0+255),f,b
 14224  0118A8  0100               	movlb	0	; () banked
 14225  0118AA  51CD               	movf	(printf@prec+1)& (0+255),w,b
 14226  0118AC  0100               	movlb	0	; () banked
 14227  0118AE  5BC8               	subwfb	(printf@width+1)& (0+255),f,b
 14228  0118B0  D005               	goto	l20225
 14229  0118B2                     l20223:
 14230                           
 14231                           ; BSR set to: 0
 14232                           ;doprnt.c: 1351: else
 14233                           ;doprnt.c: 1352: width = 0;
 14234  0118B2  0E00               	movlw	0
 14235  0118B4  0100               	movlb	0	; () banked
 14236  0118B6  6FC8               	movwf	(printf@width+1)& (0+255),b
 14237  0118B8  0E00               	movlw	0
 14238  0118BA  6FC7               	movwf	printf@width& (0+255),b
 14239  0118BC                     l20225:
 14240                           
 14241                           ; BSR set to: 0
 14242                           ;doprnt.c: 1353: }
 14243                           ;doprnt.c: 1381: if(width > c)
 14244  0118BC  0E80               	movlw	128
 14245  0118BE  0100               	movlb	0	; () banked
 14246  0118C0  BFCE               	btfsc	printf@c& (0+255),7,b
 14247  0118C2  0E7F               	movlw	127
 14248  0118C4  0100               	movlb	0	; () banked
 14249  0118C6  6FAC               	movwf	??_printf& (0+255),b
 14250  0118C8  0100               	movlb	0	; () banked
 14251  0118CA  51C7               	movf	printf@width& (0+255),w,b
 14252  0118CC  0100               	movlb	0	; () banked
 14253  0118CE  5DCE               	subwf	printf@c& (0+255),w,b
 14254  0118D0  0100               	movlb	0	; () banked
 14255  0118D2  51C8               	movf	(printf@width+1)& (0+255),w,b
 14256  0118D4  0A80               	xorlw	128
 14257  0118D6  0100               	movlb	0	; () banked
 14258  0118D8  59AC               	subwfb	??_printf& (0+255),w,b
 14259  0118DA  B0D8               	btfsc	status,0,c
 14260  0118DC  D00B               	goto	l20229
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;doprnt.c: 1382: width -= c;
 14264  0118DE  0100               	movlb	0	; () banked
 14265  0118E0  51CE               	movf	printf@c& (0+255),w,b
 14266  0118E2  0100               	movlb	0	; () banked
 14267  0118E4  5FC7               	subwf	printf@width& (0+255),f,b
 14268  0118E6  0E00               	movlw	0
 14269  0118E8  0100               	movlb	0	; () banked
 14270  0118EA  BFCE               	btfsc	printf@c& (0+255),7,b
 14271  0118EC  0EFF               	movlw	255
 14272  0118EE  0100               	movlb	0	; () banked
 14273  0118F0  5BC8               	subwfb	(printf@width+1)& (0+255),f,b
 14274  0118F2  D005               	goto	l20231
 14275  0118F4                     l20229:
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;doprnt.c: 1383: else
 14279                           ;doprnt.c: 1384: width = 0;
 14280  0118F4  0E00               	movlw	0
 14281  0118F6  0100               	movlb	0	; () banked
 14282  0118F8  6FC8               	movwf	(printf@width+1)& (0+255),b
 14283  0118FA  0E00               	movlw	0
 14284  0118FC  6FC7               	movwf	printf@width& (0+255),b
 14285  0118FE                     l20231:
 14286                           
 14287                           ; BSR set to: 0
 14288                           ;doprnt.c: 1422: {
 14289                           ;doprnt.c: 1424: if(width
 14290                           ;doprnt.c: 1428: )
 14291  0118FE  0100               	movlb	0	; () banked
 14292  011900  51C7               	movf	printf@width& (0+255),w,b
 14293  011902  0100               	movlb	0	; () banked
 14294  011904  11C8               	iorwf	(printf@width+1)& (0+255),w,b
 14295  011906  B4D8               	btfsc	status,2,c
 14296  011908  D00D               	goto	l20237
 14297  01190A                     l20233:
 14298                           
 14299                           ; BSR set to: 0
 14300                           ;doprnt.c: 1430: (putch(' ') );
 14301  01190A  0E20               	movlw	32
 14302  01190C  EC36  F0D5         	call	_putch
 14303                           
 14304                           ;doprnt.c: 1431: while(--width);
 14305  011910  0100               	movlb	0	; () banked
 14306  011912  07C7               	decf	printf@width& (0+255),f,b
 14307  011914  A0D8               	btfss	status,0,c
 14308  011916  07C8               	decf	(printf@width+1)& (0+255),f,b
 14309  011918  0100               	movlb	0	; () banked
 14310  01191A  51C7               	movf	printf@width& (0+255),w,b
 14311  01191C  0100               	movlb	0	; () banked
 14312  01191E  11C8               	iorwf	(printf@width+1)& (0+255),w,b
 14313  011920  A4D8               	btfss	status,2,c
 14314  011922  D7F3               	goto	l20233
 14315  011924                     l20237:
 14316                           
 14317                           ; BSR set to: 0
 14318                           ;doprnt.c: 1438: if(flag & 0x03)
 14319  011924  0E03               	movlw	3
 14320  011926  0100               	movlb	0	; () banked
 14321  011928  15BB               	andwf	printf@flag& (0+255),w,b
 14322  01192A  0100               	movlb	0	; () banked
 14323  01192C  6FAC               	movwf	??_printf& (0+255),b
 14324  01192E  0E00               	movlw	0
 14325  011930  0100               	movlb	0	; () banked
 14326  011932  15BC               	andwf	(printf@flag+1)& (0+255),w,b
 14327  011934  0100               	movlb	0	; () banked
 14328  011936  6FAD               	movwf	(??_printf+1)& (0+255),b
 14329  011938  0100               	movlb	0	; () banked
 14330  01193A  51AC               	movf	??_printf& (0+255),w,b
 14331  01193C  0100               	movlb	0	; () banked
 14332  01193E  11AD               	iorwf	(??_printf+1)& (0+255),w,b
 14333  011940  B4D8               	btfsc	status,2,c
 14334  011942  D04C               	goto	l20245
 14335                           
 14336                           ; BSR set to: 0
 14337                           ;doprnt.c: 1439: (putch('-') );
 14338  011944  0E2D               	movlw	45
 14339  011946  EC36  F0D5         	call	_putch
 14340                           
 14341                           ;doprnt.c: 1469: }
 14342                           ;doprnt.c: 1474: while(prec--) {
 14343  01194A  D048               	goto	l20245
 14344  01194C                     l20241:
 14345                           
 14346                           ;doprnt.c: 1478: {
 14347                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 14348  01194C  C0CC  F0AC         	movff	printf@prec,??_printf
 14349  011950  C0CD  F0AD         	movff	printf@prec+1,??_printf+1
 14350  011954  0100               	movlb	0	; () banked
 14351  011956  90D8               	bcf	status,0,c
 14352  011958  37AC               	rlcf	??_printf& (0+255),f,b
 14353  01195A  37AD               	rlcf	(??_printf+1)& (0+255),f,b
 14354  01195C  0100               	movlb	0	; () banked
 14355  01195E  90D8               	bcf	status,0,c
 14356  011960  37AC               	rlcf	??_printf& (0+255),f,b
 14357  011962  37AD               	rlcf	(??_printf+1)& (0+255),f,b
 14358  011964  0E79               	movlw	low _dpowers
 14359  011966  0100               	movlb	0	; () banked
 14360  011968  25AC               	addwf	??_printf& (0+255),w,b
 14361  01196A  6EF6               	movwf	tblptrl,c
 14362  01196C  0EFB               	movlw	high _dpowers
 14363  01196E  21AD               	addwfc	(??_printf+1)& (0+255),w,b
 14364  011970  6EF7               	movwf	tblptrh,c
 14365  011972                     	if	1	;There are 3 active tblptr bytes
 14366  011972  6AF8               	clrf	tblptru,c
 14367  011974  0E00               	movlw	low (__mediumconst shr (0+16))
 14368  011976  22F8               	addwfc	tblptru,f,c
 14369  011978                     	endif
 14370  011978  0009               	tblrd		*+
 14371  01197A  CFF5 F021          	movff	tablat,___lldiv@divisor
 14372  01197E  0009               	tblrd		*+
 14373  011980  CFF5 F022          	movff	tablat,___lldiv@divisor+1
 14374  011984  0009               	tblrd		*+
 14375  011986  CFF5 F023          	movff	tablat,___lldiv@divisor+2
 14376  01198A  000A               	tblrd		*-
 14377  01198C  CFF5 F024          	movff	tablat,___lldiv@divisor+3
 14378  011990  C0C1  F01D         	movff	printf@val,___lldiv@dividend
 14379  011994  C0C2  F01E         	movff	printf@val+1,___lldiv@dividend+1
 14380  011998  C0C3  F01F         	movff	printf@val+2,___lldiv@dividend+2
 14381  01199C  C0C4  F020         	movff	printf@val+3,___lldiv@dividend+3
 14382  0119A0  EC76  F0CE         	call	___lldiv	;wreg free
 14383  0119A4  C01D  F065         	movff	?___lldiv,___llmod@dividend
 14384  0119A8  C01E  F066         	movff	?___lldiv+1,___llmod@dividend+1
 14385  0119AC  C01F  F067         	movff	?___lldiv+2,___llmod@dividend+2
 14386  0119B0  C020  F068         	movff	?___lldiv+3,___llmod@dividend+3
 14387  0119B4  0E0A               	movlw	10
 14388  0119B6  0100               	movlb	0	; () banked
 14389  0119B8  6F69               	movwf	___llmod@divisor& (0+255),b
 14390  0119BA  0E00               	movlw	0
 14391  0119BC  6F6A               	movwf	(___llmod@divisor+1)& (0+255),b
 14392  0119BE  0E00               	movlw	0
 14393  0119C0  6F6B               	movwf	(___llmod@divisor+2)& (0+255),b
 14394  0119C2  0E00               	movlw	0
 14395  0119C4  6F6C               	movwf	(___llmod@divisor+3)& (0+255),b
 14396  0119C6  ECE4  F0CD         	call	___llmod	;wreg free
 14397  0119CA  0100               	movlb	0	; () banked
 14398  0119CC  5165               	movf	?___llmod& (0+255),w,b
 14399  0119CE  0F30               	addlw	48
 14400  0119D0  0100               	movlb	0	; () banked
 14401  0119D2  6FCE               	movwf	printf@c& (0+255),b
 14402                           
 14403                           ; BSR set to: 0
 14404                           ;doprnt.c: 1523: }
 14405                           ;doprnt.c: 1524: (putch(c) );
 14406  0119D4  0100               	movlb	0	; () banked
 14407  0119D6  51CE               	movf	printf@c& (0+255),w,b
 14408  0119D8  EC36  F0D5         	call	_putch
 14409  0119DC                     l20245:
 14410  0119DC  0100               	movlb	0	; () banked
 14411  0119DE  07CC               	decf	printf@prec& (0+255),f,b
 14412  0119E0  A0D8               	btfss	status,0,c
 14413  0119E2  07CD               	decf	(printf@prec+1)& (0+255),f,b
 14414  0119E4  0100               	movlb	0	; () banked
 14415  0119E6  29CC               	incf	printf@prec& (0+255),w,b
 14416  0119E8  E1B1               	bnz	l20241
 14417  0119EA  0100               	movlb	0	; () banked
 14418  0119EC  29CD               	incf	(printf@prec+1)& (0+255),w,b
 14419  0119EE  A4D8               	btfss	status,2,c
 14420  0119F0  D7AD               	goto	l20241
 14421  0119F2                     l20247:
 14422  0119F2  C0A7  FFF6         	movff	printf@f,tblptrl
 14423  0119F6  C0A8  FFF7         	movff	printf@f+1,tblptrh
 14424  0119FA  0100               	movlb	0	; () banked
 14425  0119FC  4BA7               	infsnz	printf@f& (0+255),f,b
 14426  0119FE  2BA8               	incf	(printf@f+1)& (0+255),f,b
 14427  011A00                     	if	0	;tblptru may be non-zero
 14428  011A00                     	endif
 14429  011A00                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 14430  011A00  0E00               	movlw	low (__mediumconst shr (0+16))
 14431  011A02  6EF8               	movwf	tblptru,c
 14432  011A04                     	endif
 14433  011A04  0008               	tblrd		*
 14434  011A06  CFF5 F0CE          	movff	tablat,printf@c
 14435  011A0A  0100               	movlb	0	; () banked
 14436  011A0C  51CE               	movf	printf@c& (0+255),w,b
 14437  011A0E  B4D8               	btfsc	status,2,c
 14438  011A10  0012               	return	
 14439  011A12  EFA2  F086         	goto	l19943
 14440  011A16                     __end_of_printf:
 14441                           	opt stack 0
 14442                           tblptru	equ	0xFF8
 14443                           tblptrh	equ	0xFF7
 14444                           tblptrl	equ	0xFF6
 14445                           tablat	equ	0xFF5
 14446                           prodh	equ	0xFF4
 14447                           prodl	equ	0xFF3
 14448                           intcon	equ	0xFF2
 14449                           postinc0	equ	0xFEE
 14450                           wreg	equ	0xFE8
 14451                           postdec1	equ	0xFE5
 14452                           fsr1h	equ	0xFE2
 14453                           fsr1l	equ	0xFE1
 14454                           indf2	equ	0xFDF
 14455                           postinc2	equ	0xFDE
 14456                           postdec2	equ	0xFDD
 14457                           fsr2h	equ	0xFDA
 14458                           fsr2l	equ	0xFD9
 14459                           status	equ	0xFD8
 14460                           
 14461 ;; *************** function _scale *****************
 14462 ;; Defined at:
 14463 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 14464 ;; Parameters:    Size  Location     Type
 14465 ;;  scl             1    wreg     char 
 14466 ;; Auto vars:     Size  Location     Type
 14467 ;;  scl             1   31[BANK0 ] char 
 14468 ;; Return value:  Size  Location     Type
 14469 ;;                  3   25[BANK0 ] char 
 14470 ;; Registers used:
 14471 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14472 ;; Tracked objects:
 14473 ;;		On entry : 0/0
 14474 ;;		On exit  : 0/0
 14475 ;;		Unchanged: 0/0
 14476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14477 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14478 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14480 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14481 ;;Total ram usage:        7 bytes
 14482 ;; Hardware stack levels used:    1
 14483 ;; Hardware stack levels required when called:    5
 14484 ;; This function calls:
 14485 ;;		___awdiv
 14486 ;;		___awmod
 14487 ;;		___ftmul
 14488 ;;		___wmul
 14489 ;; This function is called by:
 14490 ;;		_printf
 14491 ;; This function uses a non-reentrant model
 14492 ;;
 14493                           
 14494                           	psect	text22
 14495  013E46                     __ptext22:
 14496                           	opt stack 0
 14497  013E46                     _scale:
 14498                           	opt stack 22
 14499                           
 14500                           ; BSR set to: 0
 14501                           ;incstack = 0
 14502                           ;scale@scl stored from wreg
 14503  013E46  0100               	movlb	0	; () banked
 14504  013E48  6F7F               	movwf	scale@scl& (0+255),b
 14505                           
 14506                           ;doprnt.c: 428: if(scl < 0) {
 14507  013E4A  0100               	movlb	0	; () banked
 14508  013E4C  AF7F               	btfss	scale@scl& (0+255),7,b
 14509  013E4E  D12B               	goto	l19651
 14510                           
 14511                           ; BSR set to: 0
 14512                           ;doprnt.c: 429: scl = -scl;
 14513  013E50  0100               	movlb	0	; () banked
 14514  013E52  6D7F               	negf	scale@scl& (0+255),b
 14515                           
 14516                           ;doprnt.c: 430: if(scl>=110)
 14517  013E54  0100               	movlb	0	; () banked
 14518  013E56  517F               	movf	scale@scl& (0+255),w,b
 14519  013E58  0A80               	xorlw	128
 14520  013E5A  0F12               	addlw	-238
 14521  013E5C  A0D8               	btfss	status,0,c
 14522  013E5E  D0AA               	goto	l19641
 14523                           
 14524                           ; BSR set to: 0
 14525                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14526  013E60  0E00               	movlw	0
 14527  013E62  0100               	movlb	0	; () banked
 14528  013E64  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14529  013E66  0E03               	movlw	3
 14530  013E68  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14531  013E6A  0E00               	movlw	0
 14532  013E6C  6E26               	movwf	___awdiv@divisor+1,c
 14533  013E6E  0E0A               	movlw	10
 14534  013E70  6E25               	movwf	___awdiv@divisor,c
 14535  013E72  0E00               	movlw	0
 14536  013E74  6E20               	movwf	___awmod@divisor+1,c
 14537  013E76  0E64               	movlw	100
 14538  013E78  6E1F               	movwf	___awmod@divisor,c
 14539  013E7A  0100               	movlb	0	; () banked
 14540  013E7C  517F               	movf	scale@scl& (0+255),w,b
 14541  013E7E  6E1D               	movwf	___awmod@dividend,c
 14542  013E80  6A1E               	clrf	___awmod@dividend+1,c
 14543  013E82  BE1D               	btfsc	___awmod@dividend,7,c
 14544  013E84  061E               	decf	___awmod@dividend+1,f,c
 14545  013E86  ECA4  F0D0         	call	___awmod	;wreg free
 14546  013E8A  C01D  F023         	movff	?___awmod,___awdiv@dividend
 14547  013E8E  C01E  F024         	movff	?___awmod+1,___awdiv@dividend+1
 14548  013E92  EC96  F0CD         	call	___awdiv	;wreg free
 14549  013E96  0E09               	movlw	9
 14550  013E98  2423               	addwf	?___awdiv,w,c
 14551  013E9A  0100               	movlb	0	; () banked
 14552  013E9C  6F64               	movwf	___wmul@multiplier& (0+255),b
 14553  013E9E  0E00               	movlw	0
 14554  013EA0  2024               	addwfc	?___awdiv+1,w,c
 14555  013EA2  0100               	movlb	0	; () banked
 14556  013EA4  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 14557  013EA6  EC4B  F0D3         	call	___wmul	;wreg free
 14558  013EAA  0EA1               	movlw	low __npowers_
 14559  013EAC  0100               	movlb	0	; () banked
 14560  013EAE  2564               	addwf	?___wmul& (0+255),w,b
 14561  013EB0  6EF6               	movwf	tblptrl,c
 14562  013EB2  0EFB               	movlw	high __npowers_
 14563  013EB4  0100               	movlb	0	; () banked
 14564  013EB6  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14565  013EB8  6EF7               	movwf	tblptrh,c
 14566  013EBA                     	if	1	;There are 3 active tblptr bytes
 14567  013EBA  6AF8               	clrf	tblptru,c
 14568  013EBC  0E00               	movlw	low (__mediumconst shr (0+16))
 14569  013EBE  22F8               	addwfc	tblptru,f,c
 14570  013EC0                     	endif
 14571  013EC0  0009               	tblrd		*+
 14572  013EC2  CFF5 F06D          	movff	tablat,___ftmul@f2
 14573  013EC6  0009               	tblrd		*+
 14574  013EC8  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 14575  013ECC  000A               	tblrd		*-
 14576  013ECE  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 14577  013ED2  0E00               	movlw	0
 14578  013ED4  6E26               	movwf	___awdiv@divisor+1,c
 14579  013ED6  0E64               	movlw	100
 14580  013ED8  6E25               	movwf	___awdiv@divisor,c
 14581  013EDA  0100               	movlb	0	; () banked
 14582  013EDC  517F               	movf	scale@scl& (0+255),w,b
 14583  013EDE  6E23               	movwf	___awdiv@dividend,c
 14584  013EE0  6A24               	clrf	___awdiv@dividend+1,c
 14585  013EE2  BE23               	btfsc	___awdiv@dividend,7,c
 14586  013EE4  0624               	decf	___awdiv@dividend+1,f,c
 14587  013EE6  EC96  F0CD         	call	___awdiv	;wreg free
 14588  013EEA  0E12               	movlw	18
 14589  013EEC  2423               	addwf	?___awdiv,w,c
 14590  013EEE  0100               	movlb	0	; () banked
 14591  013EF0  6F64               	movwf	___wmul@multiplier& (0+255),b
 14592  013EF2  0E00               	movlw	0
 14593  013EF4  2024               	addwfc	?___awdiv+1,w,c
 14594  013EF6  0100               	movlb	0	; () banked
 14595  013EF8  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 14596  013EFA  0E00               	movlw	0
 14597  013EFC  0100               	movlb	0	; () banked
 14598  013EFE  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14599  013F00  0E03               	movlw	3
 14600  013F02  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14601  013F04  EC4B  F0D3         	call	___wmul	;wreg free
 14602  013F08  0EA1               	movlw	low __npowers_
 14603  013F0A  0100               	movlb	0	; () banked
 14604  013F0C  2564               	addwf	?___wmul& (0+255),w,b
 14605  013F0E  6EF6               	movwf	tblptrl,c
 14606  013F10  0EFB               	movlw	high __npowers_
 14607  013F12  0100               	movlb	0	; () banked
 14608  013F14  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14609  013F16  6EF7               	movwf	tblptrh,c
 14610  013F18                     	if	1	;There are 3 active tblptr bytes
 14611  013F18  6AF8               	clrf	tblptru,c
 14612  013F1A  0E00               	movlw	low (__mediumconst shr (0+16))
 14613  013F1C  22F8               	addwfc	tblptru,f,c
 14614  013F1E                     	endif
 14615  013F1E  0009               	tblrd		*+
 14616  013F20  CFF5 F06A          	movff	tablat,___ftmul@f1
 14617  013F24  0009               	tblrd		*+
 14618  013F26  CFF5 F06B          	movff	tablat,___ftmul@f1+1
 14619  013F2A  000A               	tblrd		*-
 14620  013F2C  CFF5 F06C          	movff	tablat,___ftmul@f1+2
 14621  013F30  EC83  F0BD         	call	___ftmul	;wreg free
 14622  013F34  C06A  F07C         	movff	?___ftmul,_scale$8210
 14623  013F38  C06B  F07D         	movff	?___ftmul+1,_scale$8210+1
 14624  013F3C  C06C  F07E         	movff	?___ftmul+2,_scale$8210+2
 14625                           
 14626                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 14627  013F40  C07C  F06A         	movff	_scale$8210,___ftmul@f1
 14628  013F44  C07D  F06B         	movff	_scale$8210+1,___ftmul@f1+1
 14629  013F48  C07E  F06C         	movff	_scale$8210+2,___ftmul@f1+2
 14630  013F4C  0E00               	movlw	0
 14631  013F4E  0100               	movlb	0	; () banked
 14632  013F50  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14633  013F52  0E03               	movlw	3
 14634  013F54  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14635  013F56  0E00               	movlw	0
 14636  013F58  6E20               	movwf	___awmod@divisor+1,c
 14637  013F5A  0E0A               	movlw	10
 14638  013F5C  6E1F               	movwf	___awmod@divisor,c
 14639  013F5E  0100               	movlb	0	; () banked
 14640  013F60  517F               	movf	scale@scl& (0+255),w,b
 14641  013F62  6E1D               	movwf	___awmod@dividend,c
 14642  013F64  6A1E               	clrf	___awmod@dividend+1,c
 14643  013F66  BE1D               	btfsc	___awmod@dividend,7,c
 14644  013F68  061E               	decf	___awmod@dividend+1,f,c
 14645  013F6A  ECA4  F0D0         	call	___awmod	;wreg free
 14646  013F6E  C01D  F064         	movff	?___awmod,___wmul@multiplier
 14647  013F72  C01E  F065         	movff	?___awmod+1,___wmul@multiplier+1
 14648  013F76  EC4B  F0D3         	call	___wmul	;wreg free
 14649  013F7A  0EA1               	movlw	low __npowers_
 14650  013F7C  0100               	movlb	0	; () banked
 14651  013F7E  2564               	addwf	?___wmul& (0+255),w,b
 14652  013F80  6EF6               	movwf	tblptrl,c
 14653  013F82  0EFB               	movlw	high __npowers_
 14654  013F84  0100               	movlb	0	; () banked
 14655  013F86  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14656  013F88  6EF7               	movwf	tblptrh,c
 14657  013F8A                     	if	1	;There are 3 active tblptr bytes
 14658  013F8A  6AF8               	clrf	tblptru,c
 14659  013F8C  0E00               	movlw	low (__mediumconst shr (0+16))
 14660  013F8E  22F8               	addwfc	tblptru,f,c
 14661  013F90                     	endif
 14662  013F90  0009               	tblrd		*+
 14663  013F92  CFF5 F06D          	movff	tablat,___ftmul@f2
 14664  013F96  0009               	tblrd		*+
 14665  013F98  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 14666  013F9C  000A               	tblrd		*-
 14667  013F9E  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 14668  013FA2  EC83  F0BD         	call	___ftmul	;wreg free
 14669  013FA6  C06A  F079         	movff	?___ftmul,?_scale
 14670  013FAA  C06B  F07A         	movff	?___ftmul+1,?_scale+1
 14671  013FAE  C06C  F07B         	movff	?___ftmul+2,?_scale+2
 14672  013FB2  0012               	return	
 14673  013FB4                     l19641:
 14674                           
 14675                           ;doprnt.c: 432: else if(scl > 10)
 14676  013FB4  0100               	movlb	0	; () banked
 14677  013FB6  517F               	movf	scale@scl& (0+255),w,b
 14678  013FB8  0A80               	xorlw	128
 14679  013FBA  0F75               	addlw	-139
 14680  013FBC  A0D8               	btfss	status,0,c
 14681  013FBE  D05D               	goto	l19647
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 14685  013FC0  0E00               	movlw	0
 14686  013FC2  6E26               	movwf	___awdiv@divisor+1,c
 14687  013FC4  0E0A               	movlw	10
 14688  013FC6  6E25               	movwf	___awdiv@divisor,c
 14689  013FC8  0100               	movlb	0	; () banked
 14690  013FCA  517F               	movf	scale@scl& (0+255),w,b
 14691  013FCC  6E23               	movwf	___awdiv@dividend,c
 14692  013FCE  6A24               	clrf	___awdiv@dividend+1,c
 14693  013FD0  BE23               	btfsc	___awdiv@dividend,7,c
 14694  013FD2  0624               	decf	___awdiv@dividend+1,f,c
 14695  013FD4  EC96  F0CD         	call	___awdiv	;wreg free
 14696  013FD8  0E09               	movlw	9
 14697  013FDA  2423               	addwf	?___awdiv,w,c
 14698  013FDC  0100               	movlb	0	; () banked
 14699  013FDE  6F64               	movwf	___wmul@multiplier& (0+255),b
 14700  013FE0  0E00               	movlw	0
 14701  013FE2  2024               	addwfc	?___awdiv+1,w,c
 14702  013FE4  0100               	movlb	0	; () banked
 14703  013FE6  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 14704  013FE8  0E00               	movlw	0
 14705  013FEA  0100               	movlb	0	; () banked
 14706  013FEC  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14707  013FEE  0E03               	movlw	3
 14708  013FF0  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14709  013FF2  EC4B  F0D3         	call	___wmul	;wreg free
 14710  013FF6  0EA1               	movlw	low __npowers_
 14711  013FF8  0100               	movlb	0	; () banked
 14712  013FFA  2564               	addwf	?___wmul& (0+255),w,b
 14713  013FFC  6EF6               	movwf	tblptrl,c
 14714  013FFE  0EFB               	movlw	high __npowers_
 14715  014000  0100               	movlb	0	; () banked
 14716  014002  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14717  014004  6EF7               	movwf	tblptrh,c
 14718  014006                     	if	1	;There are 3 active tblptr bytes
 14719  014006  6AF8               	clrf	tblptru,c
 14720  014008  0E00               	movlw	low (__mediumconst shr (0+16))
 14721  01400A  22F8               	addwfc	tblptru,f,c
 14722  01400C                     	endif
 14723  01400C  0009               	tblrd		*+
 14724  01400E  CFF5 F06A          	movff	tablat,___ftmul@f1
 14725  014012  0009               	tblrd		*+
 14726  014014  CFF5 F06B          	movff	tablat,___ftmul@f1+1
 14727  014018  000A               	tblrd		*-
 14728  01401A  CFF5 F06C          	movff	tablat,___ftmul@f1+2
 14729  01401E  0E00               	movlw	0
 14730  014020  0100               	movlb	0	; () banked
 14731  014022  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14732  014024  0E03               	movlw	3
 14733  014026  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14734  014028  0E00               	movlw	0
 14735  01402A  6E20               	movwf	___awmod@divisor+1,c
 14736  01402C  0E0A               	movlw	10
 14737  01402E  6E1F               	movwf	___awmod@divisor,c
 14738  014030  0100               	movlb	0	; () banked
 14739  014032  517F               	movf	scale@scl& (0+255),w,b
 14740  014034  6E1D               	movwf	___awmod@dividend,c
 14741  014036  6A1E               	clrf	___awmod@dividend+1,c
 14742  014038  BE1D               	btfsc	___awmod@dividend,7,c
 14743  01403A  061E               	decf	___awmod@dividend+1,f,c
 14744  01403C  ECA4  F0D0         	call	___awmod	;wreg free
 14745  014040  C01D  F064         	movff	?___awmod,___wmul@multiplier
 14746  014044  C01E  F065         	movff	?___awmod+1,___wmul@multiplier+1
 14747  014048  EC4B  F0D3         	call	___wmul	;wreg free
 14748  01404C  0EA1               	movlw	low __npowers_
 14749  01404E  0100               	movlb	0	; () banked
 14750  014050  2564               	addwf	?___wmul& (0+255),w,b
 14751  014052  6EF6               	movwf	tblptrl,c
 14752  014054  0EFB               	movlw	high __npowers_
 14753  014056  0100               	movlb	0	; () banked
 14754  014058  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14755  01405A  6EF7               	movwf	tblptrh,c
 14756  01405C                     	if	1	;There are 3 active tblptr bytes
 14757  01405C  6AF8               	clrf	tblptru,c
 14758  01405E  0E00               	movlw	low (__mediumconst shr (0+16))
 14759  014060  22F8               	addwfc	tblptru,f,c
 14760  014062                     	endif
 14761  014062  0009               	tblrd		*+
 14762  014064  CFF5 F06D          	movff	tablat,___ftmul@f2
 14763  014068  0009               	tblrd		*+
 14764  01406A  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 14765  01406E  000A               	tblrd		*-
 14766  014070  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 14767  014074  EC83  F0BD         	call	___ftmul	;wreg free
 14768  014078  D796               	goto	L6
 14769  01407A                     l19647:
 14770                           
 14771                           ;doprnt.c: 434: return _npowers_[scl];
 14772  01407A  0100               	movlb	0	; () banked
 14773  01407C  517F               	movf	scale@scl& (0+255),w,b
 14774  01407E  0D03               	mullw	3
 14775  014080  0EA1               	movlw	low __npowers_
 14776  014082  24F3               	addwf	prodl,w,c
 14777  014084  6EF6               	movwf	tblptrl,c
 14778  014086  0EFB               	movlw	high __npowers_
 14779  014088  20F4               	addwfc	prodh,w,c
 14780  01408A  6EF7               	movwf	tblptrh,c
 14781  01408C                     	if	1	;There are 3 active tblptr bytes
 14782  01408C  6AF8               	clrf	tblptru,c
 14783  01408E  0E00               	movlw	low (__mediumconst shr (0+16))
 14784  014090  22F8               	addwfc	tblptru,f,c
 14785  014092                     	endif
 14786  014092  0009               	tblrd		*+
 14787  014094  CFF5 F079          	movff	tablat,?_scale
 14788  014098  0009               	tblrd		*+
 14789  01409A  CFF5 F07A          	movff	tablat,?_scale+1
 14790  01409E  000A               	tblrd		*-
 14791  0140A0  CFF5 F07B          	movff	tablat,?_scale+2
 14792                           
 14793                           ; BSR set to: 0
 14794  0140A4  0012               	return	
 14795  0140A6                     l19651:
 14796                           
 14797                           ; BSR set to: 0
 14798                           ;doprnt.c: 435: }
 14799                           ;doprnt.c: 436: if(scl>=110)
 14800  0140A6  0100               	movlb	0	; () banked
 14801  0140A8  517F               	movf	scale@scl& (0+255),w,b
 14802  0140AA  0A80               	xorlw	128
 14803  0140AC  0F12               	addlw	-238
 14804  0140AE  A0D8               	btfss	status,0,c
 14805  0140B0  D0AA               	goto	l19659
 14806                           
 14807                           ; BSR set to: 0
 14808                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14809  0140B2  0E00               	movlw	0
 14810  0140B4  0100               	movlb	0	; () banked
 14811  0140B6  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14812  0140B8  0E03               	movlw	3
 14813  0140BA  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14814  0140BC  0E00               	movlw	0
 14815  0140BE  6E26               	movwf	___awdiv@divisor+1,c
 14816  0140C0  0E0A               	movlw	10
 14817  0140C2  6E25               	movwf	___awdiv@divisor,c
 14818  0140C4  0E00               	movlw	0
 14819  0140C6  6E20               	movwf	___awmod@divisor+1,c
 14820  0140C8  0E64               	movlw	100
 14821  0140CA  6E1F               	movwf	___awmod@divisor,c
 14822  0140CC  0100               	movlb	0	; () banked
 14823  0140CE  517F               	movf	scale@scl& (0+255),w,b
 14824  0140D0  6E1D               	movwf	___awmod@dividend,c
 14825  0140D2  6A1E               	clrf	___awmod@dividend+1,c
 14826  0140D4  BE1D               	btfsc	___awmod@dividend,7,c
 14827  0140D6  061E               	decf	___awmod@dividend+1,f,c
 14828  0140D8  ECA4  F0D0         	call	___awmod	;wreg free
 14829  0140DC  C01D  F023         	movff	?___awmod,___awdiv@dividend
 14830  0140E0  C01E  F024         	movff	?___awmod+1,___awdiv@dividend+1
 14831  0140E4  EC96  F0CD         	call	___awdiv	;wreg free
 14832  0140E8  0E09               	movlw	9
 14833  0140EA  2423               	addwf	?___awdiv,w,c
 14834  0140EC  0100               	movlb	0	; () banked
 14835  0140EE  6F64               	movwf	___wmul@multiplier& (0+255),b
 14836  0140F0  0E00               	movlw	0
 14837  0140F2  2024               	addwfc	?___awdiv+1,w,c
 14838  0140F4  0100               	movlb	0	; () banked
 14839  0140F6  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 14840  0140F8  EC4B  F0D3         	call	___wmul	;wreg free
 14841  0140FC  0EC8               	movlw	low __powers_
 14842  0140FE  0100               	movlb	0	; () banked
 14843  014100  2564               	addwf	?___wmul& (0+255),w,b
 14844  014102  6EF6               	movwf	tblptrl,c
 14845  014104  0EFB               	movlw	high __powers_
 14846  014106  0100               	movlb	0	; () banked
 14847  014108  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14848  01410A  6EF7               	movwf	tblptrh,c
 14849  01410C                     	if	1	;There are 3 active tblptr bytes
 14850  01410C  6AF8               	clrf	tblptru,c
 14851  01410E  0E00               	movlw	low (__mediumconst shr (0+16))
 14852  014110  22F8               	addwfc	tblptru,f,c
 14853  014112                     	endif
 14854  014112  0009               	tblrd		*+
 14855  014114  CFF5 F06D          	movff	tablat,___ftmul@f2
 14856  014118  0009               	tblrd		*+
 14857  01411A  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 14858  01411E  000A               	tblrd		*-
 14859  014120  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 14860  014124  0E00               	movlw	0
 14861  014126  6E26               	movwf	___awdiv@divisor+1,c
 14862  014128  0E64               	movlw	100
 14863  01412A  6E25               	movwf	___awdiv@divisor,c
 14864  01412C  0100               	movlb	0	; () banked
 14865  01412E  517F               	movf	scale@scl& (0+255),w,b
 14866  014130  6E23               	movwf	___awdiv@dividend,c
 14867  014132  6A24               	clrf	___awdiv@dividend+1,c
 14868  014134  BE23               	btfsc	___awdiv@dividend,7,c
 14869  014136  0624               	decf	___awdiv@dividend+1,f,c
 14870  014138  EC96  F0CD         	call	___awdiv	;wreg free
 14871  01413C  0E12               	movlw	18
 14872  01413E  2423               	addwf	?___awdiv,w,c
 14873  014140  0100               	movlb	0	; () banked
 14874  014142  6F64               	movwf	___wmul@multiplier& (0+255),b
 14875  014144  0E00               	movlw	0
 14876  014146  2024               	addwfc	?___awdiv+1,w,c
 14877  014148  0100               	movlb	0	; () banked
 14878  01414A  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 14879  01414C  0E00               	movlw	0
 14880  01414E  0100               	movlb	0	; () banked
 14881  014150  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14882  014152  0E03               	movlw	3
 14883  014154  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14884  014156  EC4B  F0D3         	call	___wmul	;wreg free
 14885  01415A  0EC8               	movlw	low __powers_
 14886  01415C  0100               	movlb	0	; () banked
 14887  01415E  2564               	addwf	?___wmul& (0+255),w,b
 14888  014160  6EF6               	movwf	tblptrl,c
 14889  014162  0EFB               	movlw	high __powers_
 14890  014164  0100               	movlb	0	; () banked
 14891  014166  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14892  014168  6EF7               	movwf	tblptrh,c
 14893  01416A                     	if	1	;There are 3 active tblptr bytes
 14894  01416A  6AF8               	clrf	tblptru,c
 14895  01416C  0E00               	movlw	low (__mediumconst shr (0+16))
 14896  01416E  22F8               	addwfc	tblptru,f,c
 14897  014170                     	endif
 14898  014170  0009               	tblrd		*+
 14899  014172  CFF5 F06A          	movff	tablat,___ftmul@f1
 14900  014176  0009               	tblrd		*+
 14901  014178  CFF5 F06B          	movff	tablat,___ftmul@f1+1
 14902  01417C  000A               	tblrd		*-
 14903  01417E  CFF5 F06C          	movff	tablat,___ftmul@f1+2
 14904  014182  EC83  F0BD         	call	___ftmul	;wreg free
 14905  014186  C06A  F07C         	movff	?___ftmul,_scale$8210
 14906  01418A  C06B  F07D         	movff	?___ftmul+1,_scale$8210+1
 14907  01418E  C06C  F07E         	movff	?___ftmul+2,_scale$8210+2
 14908                           
 14909                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 14910  014192  C07C  F06A         	movff	_scale$8210,___ftmul@f1
 14911  014196  C07D  F06B         	movff	_scale$8210+1,___ftmul@f1+1
 14912  01419A  C07E  F06C         	movff	_scale$8210+2,___ftmul@f1+2
 14913  01419E  0E00               	movlw	0
 14914  0141A0  0100               	movlb	0	; () banked
 14915  0141A2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14916  0141A4  0E03               	movlw	3
 14917  0141A6  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14918  0141A8  0E00               	movlw	0
 14919  0141AA  6E20               	movwf	___awmod@divisor+1,c
 14920  0141AC  0E0A               	movlw	10
 14921  0141AE  6E1F               	movwf	___awmod@divisor,c
 14922  0141B0  0100               	movlb	0	; () banked
 14923  0141B2  517F               	movf	scale@scl& (0+255),w,b
 14924  0141B4  6E1D               	movwf	___awmod@dividend,c
 14925  0141B6  6A1E               	clrf	___awmod@dividend+1,c
 14926  0141B8  BE1D               	btfsc	___awmod@dividend,7,c
 14927  0141BA  061E               	decf	___awmod@dividend+1,f,c
 14928  0141BC  ECA4  F0D0         	call	___awmod	;wreg free
 14929  0141C0  C01D  F064         	movff	?___awmod,___wmul@multiplier
 14930  0141C4  C01E  F065         	movff	?___awmod+1,___wmul@multiplier+1
 14931  0141C8  EC4B  F0D3         	call	___wmul	;wreg free
 14932  0141CC  0EC8               	movlw	low __powers_
 14933  0141CE  0100               	movlb	0	; () banked
 14934  0141D0  2564               	addwf	?___wmul& (0+255),w,b
 14935  0141D2  6EF6               	movwf	tblptrl,c
 14936  0141D4  0EFB               	movlw	high __powers_
 14937  0141D6  0100               	movlb	0	; () banked
 14938  0141D8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 14939  0141DA  6EF7               	movwf	tblptrh,c
 14940  0141DC                     	if	1	;There are 3 active tblptr bytes
 14941  0141DC  6AF8               	clrf	tblptru,c
 14942  0141DE  0E00               	movlw	low (__mediumconst shr (0+16))
 14943  0141E0  22F8               	addwfc	tblptru,f,c
 14944  0141E2                     	endif
 14945  0141E2  0009               	tblrd		*+
 14946  0141E4  CFF5 F06D          	movff	tablat,___ftmul@f2
 14947  0141E8  0009               	tblrd		*+
 14948  0141EA  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 14949  0141EE  000A               	tblrd		*-
 14950  0141F0  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 14951  0141F4  EC83  F0BD         	call	___ftmul	;wreg free
 14952  0141F8  C06A  F079         	movff	?___ftmul,?_scale
 14953  0141FC  C06B  F07A         	movff	?___ftmul+1,?_scale+1
 14954  014200  C06C  F07B         	movff	?___ftmul+2,?_scale+2
 14955  014204  0012               	return	
 14956  014206                     l19659:
 14957                           
 14958                           ;doprnt.c: 438: else if(scl > 10)
 14959  014206  0100               	movlb	0	; () banked
 14960  014208  517F               	movf	scale@scl& (0+255),w,b
 14961  01420A  0A80               	xorlw	128
 14962  01420C  0F75               	addlw	-139
 14963  01420E  A0D8               	btfss	status,0,c
 14964  014210  D05D               	goto	l19665
 14965                           
 14966                           ; BSR set to: 0
 14967                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 14968  014212  0E00               	movlw	0
 14969  014214  6E26               	movwf	___awdiv@divisor+1,c
 14970  014216  0E0A               	movlw	10
 14971  014218  6E25               	movwf	___awdiv@divisor,c
 14972  01421A  0100               	movlb	0	; () banked
 14973  01421C  517F               	movf	scale@scl& (0+255),w,b
 14974  01421E  6E23               	movwf	___awdiv@dividend,c
 14975  014220  6A24               	clrf	___awdiv@dividend+1,c
 14976  014222  BE23               	btfsc	___awdiv@dividend,7,c
 14977  014224  0624               	decf	___awdiv@dividend+1,f,c
 14978  014226  EC96  F0CD         	call	___awdiv	;wreg free
 14979  01422A  0E09               	movlw	9
 14980  01422C  2423               	addwf	?___awdiv,w,c
 14981  01422E  0100               	movlb	0	; () banked
 14982  014230  6F64               	movwf	___wmul@multiplier& (0+255),b
 14983  014232  0E00               	movlw	0
 14984  014234  2024               	addwfc	?___awdiv+1,w,c
 14985  014236  0100               	movlb	0	; () banked
 14986  014238  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 14987  01423A  0E00               	movlw	0
 14988  01423C  0100               	movlb	0	; () banked
 14989  01423E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14990  014240  0E03               	movlw	3
 14991  014242  6F66               	movwf	___wmul@multiplicand& (0+255),b
 14992  014244  EC4B  F0D3         	call	___wmul	;wreg free
 14993  014248  0EC8               	movlw	low __powers_
 14994  01424A  0100               	movlb	0	; () banked
 14995  01424C  2564               	addwf	?___wmul& (0+255),w,b
 14996  01424E  6EF6               	movwf	tblptrl,c
 14997  014250  0EFB               	movlw	high __powers_
 14998  014252  0100               	movlb	0	; () banked
 14999  014254  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15000  014256  6EF7               	movwf	tblptrh,c
 15001  014258                     	if	1	;There are 3 active tblptr bytes
 15002  014258  6AF8               	clrf	tblptru,c
 15003  01425A  0E00               	movlw	low (__mediumconst shr (0+16))
 15004  01425C  22F8               	addwfc	tblptru,f,c
 15005  01425E                     	endif
 15006  01425E  0009               	tblrd		*+
 15007  014260  CFF5 F06A          	movff	tablat,___ftmul@f1
 15008  014264  0009               	tblrd		*+
 15009  014266  CFF5 F06B          	movff	tablat,___ftmul@f1+1
 15010  01426A  000A               	tblrd		*-
 15011  01426C  CFF5 F06C          	movff	tablat,___ftmul@f1+2
 15012  014270  0E00               	movlw	0
 15013  014272  0100               	movlb	0	; () banked
 15014  014274  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15015  014276  0E03               	movlw	3
 15016  014278  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15017  01427A  0E00               	movlw	0
 15018  01427C  6E20               	movwf	___awmod@divisor+1,c
 15019  01427E  0E0A               	movlw	10
 15020  014280  6E1F               	movwf	___awmod@divisor,c
 15021  014282  0100               	movlb	0	; () banked
 15022  014284  517F               	movf	scale@scl& (0+255),w,b
 15023  014286  6E1D               	movwf	___awmod@dividend,c
 15024  014288  6A1E               	clrf	___awmod@dividend+1,c
 15025  01428A  BE1D               	btfsc	___awmod@dividend,7,c
 15026  01428C  061E               	decf	___awmod@dividend+1,f,c
 15027  01428E  ECA4  F0D0         	call	___awmod	;wreg free
 15028  014292  C01D  F064         	movff	?___awmod,___wmul@multiplier
 15029  014296  C01E  F065         	movff	?___awmod+1,___wmul@multiplier+1
 15030  01429A  EC4B  F0D3         	call	___wmul	;wreg free
 15031  01429E  0EC8               	movlw	low __powers_
 15032  0142A0  0100               	movlb	0	; () banked
 15033  0142A2  2564               	addwf	?___wmul& (0+255),w,b
 15034  0142A4  6EF6               	movwf	tblptrl,c
 15035  0142A6  0EFB               	movlw	high __powers_
 15036  0142A8  0100               	movlb	0	; () banked
 15037  0142AA  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15038  0142AC  6EF7               	movwf	tblptrh,c
 15039  0142AE                     	if	1	;There are 3 active tblptr bytes
 15040  0142AE  6AF8               	clrf	tblptru,c
 15041  0142B0  0E00               	movlw	low (__mediumconst shr (0+16))
 15042  0142B2  22F8               	addwfc	tblptru,f,c
 15043  0142B4                     	endif
 15044  0142B4  0009               	tblrd		*+
 15045  0142B6  CFF5 F06D          	movff	tablat,___ftmul@f2
 15046  0142BA  0009               	tblrd		*+
 15047  0142BC  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 15048  0142C0  000A               	tblrd		*-
 15049  0142C2  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 15050  0142C6  EC83  F0BD         	call	___ftmul	;wreg free
 15051  0142CA  D796               	goto	L7
 15052  0142CC                     l19665:
 15053                           
 15054                           ;doprnt.c: 440: return _powers_[scl];
 15055  0142CC  0100               	movlb	0	; () banked
 15056  0142CE  517F               	movf	scale@scl& (0+255),w,b
 15057  0142D0  0D03               	mullw	3
 15058  0142D2  0EC8               	movlw	low __powers_
 15059  0142D4  24F3               	addwf	prodl,w,c
 15060  0142D6  6EF6               	movwf	tblptrl,c
 15061  0142D8  0EFB               	movlw	high __powers_
 15062  0142DA  20F4               	addwfc	prodh,w,c
 15063  0142DC  6EF7               	movwf	tblptrh,c
 15064  0142DE                     	if	1	;There are 3 active tblptr bytes
 15065  0142DE  6AF8               	clrf	tblptru,c
 15066  0142E0  0E00               	movlw	low (__mediumconst shr (0+16))
 15067  0142E2  22F8               	addwfc	tblptru,f,c
 15068  0142E4                     	endif
 15069  0142E4  0009               	tblrd		*+
 15070  0142E6  CFF5 F079          	movff	tablat,?_scale
 15071  0142EA  0009               	tblrd		*+
 15072  0142EC  CFF5 F07A          	movff	tablat,?_scale+1
 15073  0142F0  000A               	tblrd		*-
 15074  0142F2  CFF5 F07B          	movff	tablat,?_scale+2
 15075  0142F6  0012               	return	
 15076  0142F8                     __end_of_scale:
 15077                           	opt stack 0
 15078                           tblptru	equ	0xFF8
 15079                           tblptrh	equ	0xFF7
 15080                           tblptrl	equ	0xFF6
 15081                           tablat	equ	0xFF5
 15082                           prodh	equ	0xFF4
 15083                           prodl	equ	0xFF3
 15084                           intcon	equ	0xFF2
 15085                           postinc0	equ	0xFEE
 15086                           wreg	equ	0xFE8
 15087                           postdec1	equ	0xFE5
 15088                           fsr1h	equ	0xFE2
 15089                           fsr1l	equ	0xFE1
 15090                           indf2	equ	0xFDF
 15091                           postinc2	equ	0xFDE
 15092                           postdec2	equ	0xFDD
 15093                           fsr2h	equ	0xFDA
 15094                           fsr2l	equ	0xFD9
 15095                           status	equ	0xFD8
 15096                           
 15097 ;; *************** function _putch *****************
 15098 ;; Defined at:
 15099 ;;		line 591 in file "UART.c"
 15100 ;; Parameters:    Size  Location     Type
 15101 ;;  data            1    wreg     unsigned char 
 15102 ;; Auto vars:     Size  Location     Type
 15103 ;;  data            1   28[COMRAM] unsigned char 
 15104 ;; Return value:  Size  Location     Type
 15105 ;;                  1    wreg      void 
 15106 ;; Registers used:
 15107 ;;		wreg
 15108 ;; Tracked objects:
 15109 ;;		On entry : 0/0
 15110 ;;		On exit  : 0/0
 15111 ;;		Unchanged: 0/0
 15112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15117 ;;Total ram usage:        1 bytes
 15118 ;; Hardware stack levels used:    1
 15119 ;; Hardware stack levels required when called:    3
 15120 ;; This function calls:
 15121 ;;		Nothing
 15122 ;; This function is called by:
 15123 ;;		_printf
 15124 ;; This function uses a non-reentrant model
 15125 ;;
 15126                           
 15127                           	psect	text23
 15128  01AA6C                     __ptext23:
 15129                           	opt stack 0
 15130  01AA6C                     _putch:
 15131                           	opt stack 24
 15132                           
 15133                           ;incstack = 0
 15134                           ;putch@data stored from wreg
 15135  01AA6C  6E1D               	movwf	putch@data,c
 15136  01AA6E                     l2455:
 15137  01AA6E  A89E               	btfss	3998,4,c	;volatile
 15138  01AA70  D7FE               	goto	l2455
 15139                           
 15140                           ;UART.c: 595: TXREG1 = data;
 15141  01AA72  C01D  FFAD         	movff	putch@data,4013	;volatile
 15142  01AA76  0012               	return		;funcret
 15143  01AA78                     __end_of_putch:
 15144                           	opt stack 0
 15145                           tblptru	equ	0xFF8
 15146                           tblptrh	equ	0xFF7
 15147                           tblptrl	equ	0xFF6
 15148                           tablat	equ	0xFF5
 15149                           prodh	equ	0xFF4
 15150                           prodl	equ	0xFF3
 15151                           intcon	equ	0xFF2
 15152                           postinc0	equ	0xFEE
 15153                           wreg	equ	0xFE8
 15154                           postdec1	equ	0xFE5
 15155                           fsr1h	equ	0xFE2
 15156                           fsr1l	equ	0xFE1
 15157                           indf2	equ	0xFDF
 15158                           postinc2	equ	0xFDE
 15159                           postdec2	equ	0xFDD
 15160                           fsr2h	equ	0xFDA
 15161                           fsr2l	equ	0xFD9
 15162                           status	equ	0xFD8
 15163                           
 15164 ;; *************** function _isdigit *****************
 15165 ;; Defined at:
 15166 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
 15167 ;; Parameters:    Size  Location     Type
 15168 ;;  c               1    wreg     unsigned char 
 15169 ;; Auto vars:     Size  Location     Type
 15170 ;;  c               1   30[COMRAM] unsigned char 
 15171 ;; Return value:  Size  Location     Type
 15172 ;;		None               void
 15173 ;; Registers used:
 15174 ;;		wreg, status,2, status,0
 15175 ;; Tracked objects:
 15176 ;;		On entry : 0/0
 15177 ;;		On exit  : 0/0
 15178 ;;		Unchanged: 0/0
 15179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15184 ;;Total ram usage:        3 bytes
 15185 ;; Hardware stack levels used:    1
 15186 ;; Hardware stack levels required when called:    3
 15187 ;; This function calls:
 15188 ;;		Nothing
 15189 ;; This function is called by:
 15190 ;;		_printf
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           	psect	text24
 15195  01A98C                     __ptext24:
 15196                           	opt stack 0
 15197  01A98C                     _isdigit:
 15198                           	opt stack 24
 15199                           
 15200                           ;incstack = 0
 15201                           ;isdigit@c stored from wreg
 15202  01A98C  6E1F               	movwf	isdigit@c,c
 15203  01A98E  0E00               	movlw	0
 15204  01A990  6E1E               	movwf	_isdigit$7673,c
 15205  01A992  0E3A               	movlw	58
 15206  01A994  601F               	cpfslt	isdigit@c,c
 15207  01A996  D005               	goto	l15679
 15208  01A998  0E2F               	movlw	47
 15209  01A99A  641F               	cpfsgt	isdigit@c,c
 15210  01A99C  D002               	goto	l15679
 15211  01A99E  0E01               	movlw	1
 15212  01A9A0  6E1E               	movwf	_isdigit$7673,c
 15213  01A9A2                     l15679:
 15214  01A9A2  C01E  F01D         	movff	_isdigit$7673,??_isdigit
 15215  01A9A6  301D               	rrcf	??_isdigit,w,c
 15216  01A9A8  0012               	return	
 15217  01A9AA                     __end_of_isdigit:
 15218                           	opt stack 0
 15219                           tblptru	equ	0xFF8
 15220                           tblptrh	equ	0xFF7
 15221                           tblptrl	equ	0xFF6
 15222                           tablat	equ	0xFF5
 15223                           prodh	equ	0xFF4
 15224                           prodl	equ	0xFF3
 15225                           intcon	equ	0xFF2
 15226                           postinc0	equ	0xFEE
 15227                           wreg	equ	0xFE8
 15228                           postdec1	equ	0xFE5
 15229                           fsr1h	equ	0xFE2
 15230                           fsr1l	equ	0xFE1
 15231                           indf2	equ	0xFDF
 15232                           postinc2	equ	0xFDE
 15233                           postdec2	equ	0xFDD
 15234                           fsr2h	equ	0xFDA
 15235                           fsr2l	equ	0xFD9
 15236                           status	equ	0xFD8
 15237                           
 15238 ;; *************** function _fround *****************
 15239 ;; Defined at:
 15240 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
 15241 ;; Parameters:    Size  Location     Type
 15242 ;;  prec            1    wreg     unsigned char 
 15243 ;; Auto vars:     Size  Location     Type
 15244 ;;  prec            1   34[BANK0 ] unsigned char 
 15245 ;; Return value:  Size  Location     Type
 15246 ;;                  3   25[BANK0 ] unsigned char 
 15247 ;; Registers used:
 15248 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15249 ;; Tracked objects:
 15250 ;;		On entry : 0/0
 15251 ;;		On exit  : 0/0
 15252 ;;		Unchanged: 0/0
 15253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15254 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15255 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15257 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15258 ;;Total ram usage:       10 bytes
 15259 ;; Hardware stack levels used:    1
 15260 ;; Hardware stack levels required when called:    5
 15261 ;; This function calls:
 15262 ;;		___awdiv
 15263 ;;		___awmod
 15264 ;;		___ftmul
 15265 ;;		___wmul
 15266 ;; This function is called by:
 15267 ;;		_printf
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           	psect	text25
 15272  015814                     __ptext25:
 15273                           	opt stack 0
 15274  015814                     _fround:
 15275                           	opt stack 22
 15276                           
 15277                           ;incstack = 0
 15278                           ;fround@prec stored from wreg
 15279  015814  0100               	movlb	0	; () banked
 15280  015816  6F82               	movwf	fround@prec& (0+255),b
 15281                           
 15282                           ;doprnt.c: 413: if(prec>=110)
 15283  015818  0E6D               	movlw	109
 15284  01581A  0100               	movlb	0	; () banked
 15285  01581C  6582               	cpfsgt	fround@prec& (0+255),b
 15286  01581E  D0B8               	goto	l19619
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15290  015820  0E00               	movlw	0
 15291  015822  0100               	movlb	0	; () banked
 15292  015824  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15293  015826  0E03               	movlw	3
 15294  015828  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15295  01582A  0E00               	movlw	0
 15296  01582C  6E26               	movwf	___awdiv@divisor+1,c
 15297  01582E  0E0A               	movlw	10
 15298  015830  6E25               	movwf	___awdiv@divisor,c
 15299  015832  0E00               	movlw	0
 15300  015834  6E20               	movwf	___awmod@divisor+1,c
 15301  015836  0E64               	movlw	100
 15302  015838  6E1F               	movwf	___awmod@divisor,c
 15303  01583A  C082  F01D         	movff	fround@prec,___awmod@dividend
 15304  01583E  6A1E               	clrf	___awmod@dividend+1,c
 15305  015840  ECA4  F0D0         	call	___awmod	;wreg free
 15306  015844  C01D  F023         	movff	?___awmod,___awdiv@dividend
 15307  015848  C01E  F024         	movff	?___awmod+1,___awdiv@dividend+1
 15308  01584C  EC96  F0CD         	call	___awdiv	;wreg free
 15309  015850  0E09               	movlw	9
 15310  015852  2423               	addwf	?___awdiv,w,c
 15311  015854  0100               	movlb	0	; () banked
 15312  015856  6F64               	movwf	___wmul@multiplier& (0+255),b
 15313  015858  0E00               	movlw	0
 15314  01585A  2024               	addwfc	?___awdiv+1,w,c
 15315  01585C  0100               	movlb	0	; () banked
 15316  01585E  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 15317  015860  EC4B  F0D3         	call	___wmul	;wreg free
 15318  015864  0EA1               	movlw	low __npowers_
 15319  015866  0100               	movlb	0	; () banked
 15320  015868  2564               	addwf	?___wmul& (0+255),w,b
 15321  01586A  6EF6               	movwf	tblptrl,c
 15322  01586C  0EFB               	movlw	high __npowers_
 15323  01586E  0100               	movlb	0	; () banked
 15324  015870  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15325  015872  6EF7               	movwf	tblptrh,c
 15326  015874                     	if	1	;There are 3 active tblptr bytes
 15327  015874  6AF8               	clrf	tblptru,c
 15328  015876  0E00               	movlw	low (__mediumconst shr (0+16))
 15329  015878  22F8               	addwfc	tblptru,f,c
 15330  01587A                     	endif
 15331  01587A  0009               	tblrd		*+
 15332  01587C  CFF5 F06D          	movff	tablat,___ftmul@f2
 15333  015880  0009               	tblrd		*+
 15334  015882  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 15335  015886  000A               	tblrd		*-
 15336  015888  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 15337  01588C  0E00               	movlw	0
 15338  01588E  6E26               	movwf	___awdiv@divisor+1,c
 15339  015890  0E64               	movlw	100
 15340  015892  6E25               	movwf	___awdiv@divisor,c
 15341  015894  C082  F023         	movff	fround@prec,___awdiv@dividend
 15342  015898  6A24               	clrf	___awdiv@dividend+1,c
 15343  01589A  EC96  F0CD         	call	___awdiv	;wreg free
 15344  01589E  0E12               	movlw	18
 15345  0158A0  2423               	addwf	?___awdiv,w,c
 15346  0158A2  0100               	movlb	0	; () banked
 15347  0158A4  6F64               	movwf	___wmul@multiplier& (0+255),b
 15348  0158A6  0E00               	movlw	0
 15349  0158A8  2024               	addwfc	?___awdiv+1,w,c
 15350  0158AA  0100               	movlb	0	; () banked
 15351  0158AC  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 15352  0158AE  0E00               	movlw	0
 15353  0158B0  0100               	movlb	0	; () banked
 15354  0158B2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15355  0158B4  0E03               	movlw	3
 15356  0158B6  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15357  0158B8  EC4B  F0D3         	call	___wmul	;wreg free
 15358  0158BC  0EA1               	movlw	low __npowers_
 15359  0158BE  0100               	movlb	0	; () banked
 15360  0158C0  2564               	addwf	?___wmul& (0+255),w,b
 15361  0158C2  6EF6               	movwf	tblptrl,c
 15362  0158C4  0EFB               	movlw	high __npowers_
 15363  0158C6  0100               	movlb	0	; () banked
 15364  0158C8  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15365  0158CA  6EF7               	movwf	tblptrh,c
 15366  0158CC                     	if	1	;There are 3 active tblptr bytes
 15367  0158CC  6AF8               	clrf	tblptru,c
 15368  0158CE  0E00               	movlw	low (__mediumconst shr (0+16))
 15369  0158D0  22F8               	addwfc	tblptru,f,c
 15370  0158D2                     	endif
 15371  0158D2  0009               	tblrd		*+
 15372  0158D4  CFF5 F06A          	movff	tablat,___ftmul@f1
 15373  0158D8  0009               	tblrd		*+
 15374  0158DA  CFF5 F06B          	movff	tablat,___ftmul@f1+1
 15375  0158DE  000A               	tblrd		*-
 15376  0158E0  CFF5 F06C          	movff	tablat,___ftmul@f1+2
 15377  0158E4  EC83  F0BD         	call	___ftmul	;wreg free
 15378  0158E8  C06A  F07F         	movff	?___ftmul,_fround$8208
 15379  0158EC  C06B  F080         	movff	?___ftmul+1,_fround$8208+1
 15380  0158F0  C06C  F081         	movff	?___ftmul+2,_fround$8208+2
 15381                           
 15382                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15383  0158F4  0E00               	movlw	0
 15384  0158F6  0100               	movlb	0	; () banked
 15385  0158F8  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15386  0158FA  0E03               	movlw	3
 15387  0158FC  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15388  0158FE  0E00               	movlw	0
 15389  015900  6E20               	movwf	___awmod@divisor+1,c
 15390  015902  0E0A               	movlw	10
 15391  015904  6E1F               	movwf	___awmod@divisor,c
 15392  015906  C082  F01D         	movff	fround@prec,___awmod@dividend
 15393  01590A  6A1E               	clrf	___awmod@dividend+1,c
 15394  01590C  ECA4  F0D0         	call	___awmod	;wreg free
 15395  015910  C01D  F064         	movff	?___awmod,___wmul@multiplier
 15396  015914  C01E  F065         	movff	?___awmod+1,___wmul@multiplier+1
 15397  015918  EC4B  F0D3         	call	___wmul	;wreg free
 15398  01591C  0EA1               	movlw	low __npowers_
 15399  01591E  0100               	movlb	0	; () banked
 15400  015920  2564               	addwf	?___wmul& (0+255),w,b
 15401  015922  6EF6               	movwf	tblptrl,c
 15402  015924  0EFB               	movlw	high __npowers_
 15403  015926  0100               	movlb	0	; () banked
 15404  015928  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15405  01592A  6EF7               	movwf	tblptrh,c
 15406  01592C                     	if	1	;There are 3 active tblptr bytes
 15407  01592C  6AF8               	clrf	tblptru,c
 15408  01592E  0E00               	movlw	low (__mediumconst shr (0+16))
 15409  015930  22F8               	addwfc	tblptru,f,c
 15410  015932                     	endif
 15411  015932  0009               	tblrd		*+
 15412  015934  CFF5 F06D          	movff	tablat,___ftmul@f2
 15413  015938  0009               	tblrd		*+
 15414  01593A  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 15415  01593E  000A               	tblrd		*-
 15416  015940  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 15417  015944  C07F  F06A         	movff	_fround$8208,___ftmul@f1
 15418  015948  C080  F06B         	movff	_fround$8208+1,___ftmul@f1+1
 15419  01594C  C081  F06C         	movff	_fround$8208+2,___ftmul@f1+2
 15420  015950  EC83  F0BD         	call	___ftmul	;wreg free
 15421  015954  C06A  F07C         	movff	?___ftmul,_fround$8209
 15422  015958  C06B  F07D         	movff	?___ftmul+1,_fround$8209+1
 15423  01595C  C06C  F07E         	movff	?___ftmul+2,_fround$8209+2
 15424                           
 15425                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 15426  015960  C07C  F06A         	movff	_fround$8209,___ftmul@f1
 15427  015964  C07D  F06B         	movff	_fround$8209+1,___ftmul@f1+1
 15428  015968  C07E  F06C         	movff	_fround$8209+2,___ftmul@f1+2
 15429  01596C  0E00               	movlw	0
 15430  01596E  0100               	movlb	0	; () banked
 15431  015970  6F6D               	movwf	___ftmul@f2& (0+255),b
 15432  015972  0E00               	movlw	0
 15433  015974  0100               	movlb	0	; () banked
 15434  015976  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 15435  015978  0E3F               	movlw	63
 15436  01597A  0100               	movlb	0	; () banked
 15437  01597C  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 15438  01597E  EC83  F0BD         	call	___ftmul	;wreg free
 15439  015982  C06A  F079         	movff	?___ftmul,?_fround
 15440  015986  C06B  F07A         	movff	?___ftmul+1,?_fround+1
 15441  01598A  C06C  F07B         	movff	?___ftmul+2,?_fround+2
 15442  01598E  0012               	return	
 15443  015990                     l19619:
 15444                           
 15445                           ;doprnt.c: 415: else if(prec > 10)
 15446  015990  0E0A               	movlw	10
 15447  015992  0100               	movlb	0	; () banked
 15448  015994  6582               	cpfsgt	fround@prec& (0+255),b
 15449  015996  D06E               	goto	l19627
 15450                           
 15451                           ; BSR set to: 0
 15452                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15453  015998  0E00               	movlw	0
 15454  01599A  0100               	movlb	0	; () banked
 15455  01599C  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15456  01599E  0E03               	movlw	3
 15457  0159A0  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15458  0159A2  0E00               	movlw	0
 15459  0159A4  6E20               	movwf	___awmod@divisor+1,c
 15460  0159A6  0E0A               	movlw	10
 15461  0159A8  6E1F               	movwf	___awmod@divisor,c
 15462  0159AA  C082  F01D         	movff	fround@prec,___awmod@dividend
 15463  0159AE  6A1E               	clrf	___awmod@dividend+1,c
 15464  0159B0  ECA4  F0D0         	call	___awmod	;wreg free
 15465  0159B4  C01D  F064         	movff	?___awmod,___wmul@multiplier
 15466  0159B8  C01E  F065         	movff	?___awmod+1,___wmul@multiplier+1
 15467  0159BC  EC4B  F0D3         	call	___wmul	;wreg free
 15468  0159C0  0EA1               	movlw	low __npowers_
 15469  0159C2  0100               	movlb	0	; () banked
 15470  0159C4  2564               	addwf	?___wmul& (0+255),w,b
 15471  0159C6  6EF6               	movwf	tblptrl,c
 15472  0159C8  0EFB               	movlw	high __npowers_
 15473  0159CA  0100               	movlb	0	; () banked
 15474  0159CC  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15475  0159CE  6EF7               	movwf	tblptrh,c
 15476  0159D0                     	if	1	;There are 3 active tblptr bytes
 15477  0159D0  6AF8               	clrf	tblptru,c
 15478  0159D2  0E00               	movlw	low (__mediumconst shr (0+16))
 15479  0159D4  22F8               	addwfc	tblptru,f,c
 15480  0159D6                     	endif
 15481  0159D6  0009               	tblrd		*+
 15482  0159D8  CFF5 F06D          	movff	tablat,___ftmul@f2
 15483  0159DC  0009               	tblrd		*+
 15484  0159DE  CFF5 F06E          	movff	tablat,___ftmul@f2+1
 15485  0159E2  000A               	tblrd		*-
 15486  0159E4  CFF5 F06F          	movff	tablat,___ftmul@f2+2
 15487  0159E8  0E00               	movlw	0
 15488  0159EA  6E26               	movwf	___awdiv@divisor+1,c
 15489  0159EC  0E0A               	movlw	10
 15490  0159EE  6E25               	movwf	___awdiv@divisor,c
 15491  0159F0  C082  F023         	movff	fround@prec,___awdiv@dividend
 15492  0159F4  6A24               	clrf	___awdiv@dividend+1,c
 15493  0159F6  EC96  F0CD         	call	___awdiv	;wreg free
 15494  0159FA  0E09               	movlw	9
 15495  0159FC  2423               	addwf	?___awdiv,w,c
 15496  0159FE  0100               	movlb	0	; () banked
 15497  015A00  6F64               	movwf	___wmul@multiplier& (0+255),b
 15498  015A02  0E00               	movlw	0
 15499  015A04  2024               	addwfc	?___awdiv+1,w,c
 15500  015A06  0100               	movlb	0	; () banked
 15501  015A08  6F65               	movwf	(___wmul@multiplier+1)& (0+255),b
 15502  015A0A  0E00               	movlw	0
 15503  015A0C  0100               	movlb	0	; () banked
 15504  015A0E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15505  015A10  0E03               	movlw	3
 15506  015A12  6F66               	movwf	___wmul@multiplicand& (0+255),b
 15507  015A14  EC4B  F0D3         	call	___wmul	;wreg free
 15508  015A18  0EA1               	movlw	low __npowers_
 15509  015A1A  0100               	movlb	0	; () banked
 15510  015A1C  2564               	addwf	?___wmul& (0+255),w,b
 15511  015A1E  6EF6               	movwf	tblptrl,c
 15512  015A20  0EFB               	movlw	high __npowers_
 15513  015A22  0100               	movlb	0	; () banked
 15514  015A24  2165               	addwfc	(?___wmul+1)& (0+255),w,b
 15515  015A26  6EF7               	movwf	tblptrh,c
 15516  015A28                     	if	1	;There are 3 active tblptr bytes
 15517  015A28  6AF8               	clrf	tblptru,c
 15518  015A2A  0E00               	movlw	low (__mediumconst shr (0+16))
 15519  015A2C  22F8               	addwfc	tblptru,f,c
 15520  015A2E                     	endif
 15521  015A2E  0009               	tblrd		*+
 15522  015A30  CFF5 F06A          	movff	tablat,___ftmul@f1
 15523  015A34  0009               	tblrd		*+
 15524  015A36  CFF5 F06B          	movff	tablat,___ftmul@f1+1
 15525  015A3A  000A               	tblrd		*-
 15526  015A3C  CFF5 F06C          	movff	tablat,___ftmul@f1+2
 15527  015A40  EC83  F0BD         	call	___ftmul	;wreg free
 15528  015A44  C06A  F07F         	movff	?___ftmul,_fround$8208
 15529  015A48  C06B  F080         	movff	?___ftmul+1,_fround$8208+1
 15530  015A4C  C06C  F081         	movff	?___ftmul+2,_fround$8208+2
 15531                           
 15532                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15533  015A50  C07F  F06A         	movff	_fround$8208,___ftmul@f1
 15534  015A54  C080  F06B         	movff	_fround$8208+1,___ftmul@f1+1
 15535  015A58  C081  F06C         	movff	_fround$8208+2,___ftmul@f1+2
 15536  015A5C  0E00               	movlw	0
 15537  015A5E  0100               	movlb	0	; () banked
 15538  015A60  6F6D               	movwf	___ftmul@f2& (0+255),b
 15539  015A62  0E00               	movlw	0
 15540  015A64  0100               	movlb	0	; () banked
 15541  015A66  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 15542  015A68  0E3F               	movlw	63
 15543  015A6A  0100               	movlb	0	; () banked
 15544  015A6C  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 15545  015A6E  EC83  F0BD         	call	___ftmul	;wreg free
 15546  015A72  D787               	goto	L8
 15547  015A74                     l19627:
 15548                           
 15549                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15550  015A74  0100               	movlb	0	; () banked
 15551  015A76  5182               	movf	fround@prec& (0+255),w,b
 15552  015A78  0D03               	mullw	3
 15553  015A7A  0EA1               	movlw	low __npowers_
 15554  015A7C  24F3               	addwf	prodl,w,c
 15555  015A7E  6EF6               	movwf	tblptrl,c
 15556  015A80  0EFB               	movlw	high __npowers_
 15557  015A82  20F4               	addwfc	prodh,w,c
 15558  015A84  6EF7               	movwf	tblptrh,c
 15559  015A86                     	if	1	;There are 3 active tblptr bytes
 15560  015A86  6AF8               	clrf	tblptru,c
 15561  015A88  0E00               	movlw	low (__mediumconst shr (0+16))
 15562  015A8A  22F8               	addwfc	tblptru,f,c
 15563  015A8C                     	endif
 15564  015A8C  0009               	tblrd		*+
 15565  015A8E  CFF5 F06A          	movff	tablat,___ftmul@f1
 15566  015A92  0009               	tblrd		*+
 15567  015A94  CFF5 F06B          	movff	tablat,___ftmul@f1+1
 15568  015A98  000A               	tblrd		*-
 15569  015A9A  CFF5 F06C          	movff	tablat,___ftmul@f1+2
 15570  015A9E  0E00               	movlw	0
 15571  015AA0  0100               	movlb	0	; () banked
 15572  015AA2  6F6D               	movwf	___ftmul@f2& (0+255),b
 15573  015AA4  0E00               	movlw	0
 15574  015AA6  0100               	movlb	0	; () banked
 15575  015AA8  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 15576  015AAA  0E3F               	movlw	63
 15577  015AAC  0100               	movlb	0	; () banked
 15578  015AAE  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 15579  015AB0  EC83  F0BD         	call	___ftmul	;wreg free
 15580  015AB4  C06A  F079         	movff	?___ftmul,?_fround
 15581  015AB8  C06B  F07A         	movff	?___ftmul+1,?_fround+1
 15582  015ABC  C06C  F07B         	movff	?___ftmul+2,?_fround+2
 15583  015AC0  0012               	return	
 15584  015AC2                     __end_of_fround:
 15585                           	opt stack 0
 15586                           tblptru	equ	0xFF8
 15587                           tblptrh	equ	0xFF7
 15588                           tblptrl	equ	0xFF6
 15589                           tablat	equ	0xFF5
 15590                           prodh	equ	0xFF4
 15591                           prodl	equ	0xFF3
 15592                           intcon	equ	0xFF2
 15593                           postinc0	equ	0xFEE
 15594                           wreg	equ	0xFE8
 15595                           postdec1	equ	0xFE5
 15596                           fsr1h	equ	0xFE2
 15597                           fsr1l	equ	0xFE1
 15598                           indf2	equ	0xFDF
 15599                           postinc2	equ	0xFDE
 15600                           postdec2	equ	0xFDD
 15601                           fsr2h	equ	0xFDA
 15602                           fsr2l	equ	0xFD9
 15603                           status	equ	0xFD8
 15604                           
 15605 ;; *************** function ___awmod *****************
 15606 ;; Defined at:
 15607 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 15608 ;; Parameters:    Size  Location     Type
 15609 ;;  dividend        2   28[COMRAM] int 
 15610 ;;  divisor         2   30[COMRAM] int 
 15611 ;; Auto vars:     Size  Location     Type
 15612 ;;  sign            1   33[COMRAM] unsigned char 
 15613 ;;  counter         1   32[COMRAM] unsigned char 
 15614 ;; Return value:  Size  Location     Type
 15615 ;;                  2   28[COMRAM] int 
 15616 ;; Registers used:
 15617 ;;		wreg, status,2, status,0
 15618 ;; Tracked objects:
 15619 ;;		On entry : 0/0
 15620 ;;		On exit  : 0/0
 15621 ;;		Unchanged: 0/0
 15622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15623 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15624 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15626 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15627 ;;Total ram usage:        6 bytes
 15628 ;; Hardware stack levels used:    1
 15629 ;; Hardware stack levels required when called:    3
 15630 ;; This function calls:
 15631 ;;		Nothing
 15632 ;; This function is called by:
 15633 ;;		_fround
 15634 ;;		_scale
 15635 ;; This function uses a non-reentrant model
 15636 ;;
 15637                           
 15638                           	psect	text26
 15639  01A148                     __ptext26:
 15640                           	opt stack 0
 15641  01A148                     ___awmod:
 15642                           	opt stack 23
 15643                           
 15644                           ;incstack = 0
 15645  01A148  0E00               	movlw	0
 15646  01A14A  6E22               	movwf	___awmod@sign,c
 15647  01A14C  AE1E               	btfss	___awmod@dividend+1,7,c
 15648  01A14E  D006               	goto	l15527
 15649  01A150  6C1D               	negf	___awmod@dividend,c
 15650  01A152  1E1E               	comf	___awmod@dividend+1,f,c
 15651  01A154  B0D8               	btfsc	status,0,c
 15652  01A156  2A1E               	incf	___awmod@dividend+1,f,c
 15653  01A158  0E01               	movlw	1
 15654  01A15A  6E22               	movwf	___awmod@sign,c
 15655  01A15C                     l15527:
 15656  01A15C  AE20               	btfss	___awmod@divisor+1,7,c
 15657  01A15E  D004               	goto	l15531
 15658  01A160  6C1F               	negf	___awmod@divisor,c
 15659  01A162  1E20               	comf	___awmod@divisor+1,f,c
 15660  01A164  B0D8               	btfsc	status,0,c
 15661  01A166  2A20               	incf	___awmod@divisor+1,f,c
 15662  01A168                     l15531:
 15663  01A168  501F               	movf	___awmod@divisor,w,c
 15664  01A16A  1020               	iorwf	___awmod@divisor+1,w,c
 15665  01A16C  B4D8               	btfsc	status,2,c
 15666  01A16E  D018               	goto	l15547
 15667  01A170  0E01               	movlw	1
 15668  01A172  6E21               	movwf	___awmod@counter,c
 15669  01A174  D004               	goto	l15537
 15670  01A176                     l15535:
 15671  01A176  90D8               	bcf	status,0,c
 15672  01A178  361F               	rlcf	___awmod@divisor,f,c
 15673  01A17A  3620               	rlcf	___awmod@divisor+1,f,c
 15674  01A17C  2A21               	incf	___awmod@counter,f,c
 15675  01A17E                     l15537:
 15676  01A17E  AE20               	btfss	___awmod@divisor+1,7,c
 15677  01A180  D7FA               	goto	l15535
 15678  01A182                     l15539:
 15679  01A182  501F               	movf	___awmod@divisor,w,c
 15680  01A184  5C1D               	subwf	___awmod@dividend,w,c
 15681  01A186  5020               	movf	___awmod@divisor+1,w,c
 15682  01A188  581E               	subwfb	___awmod@dividend+1,w,c
 15683  01A18A  A0D8               	btfss	status,0,c
 15684  01A18C  D004               	goto	l15543
 15685  01A18E  501F               	movf	___awmod@divisor,w,c
 15686  01A190  5E1D               	subwf	___awmod@dividend,f,c
 15687  01A192  5020               	movf	___awmod@divisor+1,w,c
 15688  01A194  5A1E               	subwfb	___awmod@dividend+1,f,c
 15689  01A196                     l15543:
 15690  01A196  90D8               	bcf	status,0,c
 15691  01A198  3220               	rrcf	___awmod@divisor+1,f,c
 15692  01A19A  321F               	rrcf	___awmod@divisor,f,c
 15693  01A19C  2E21               	decfsz	___awmod@counter,f,c
 15694  01A19E  D7F1               	goto	l15539
 15695  01A1A0                     l15547:
 15696  01A1A0  5022               	movf	___awmod@sign,w,c
 15697  01A1A2  B4D8               	btfsc	status,2,c
 15698  01A1A4  D004               	goto	l15551
 15699  01A1A6  6C1D               	negf	___awmod@dividend,c
 15700  01A1A8  1E1E               	comf	___awmod@dividend+1,f,c
 15701  01A1AA  B0D8               	btfsc	status,0,c
 15702  01A1AC  2A1E               	incf	___awmod@dividend+1,f,c
 15703  01A1AE                     l15551:
 15704  01A1AE  C01D  F01D         	movff	___awmod@dividend,?___awmod
 15705  01A1B2  C01E  F01E         	movff	___awmod@dividend+1,?___awmod+1
 15706  01A1B6  0012               	return	
 15707  01A1B8                     __end_of___awmod:
 15708                           	opt stack 0
 15709                           tblptru	equ	0xFF8
 15710                           tblptrh	equ	0xFF7
 15711                           tblptrl	equ	0xFF6
 15712                           tablat	equ	0xFF5
 15713                           prodh	equ	0xFF4
 15714                           prodl	equ	0xFF3
 15715                           intcon	equ	0xFF2
 15716                           postinc0	equ	0xFEE
 15717                           wreg	equ	0xFE8
 15718                           postdec1	equ	0xFE5
 15719                           fsr1h	equ	0xFE2
 15720                           fsr1l	equ	0xFE1
 15721                           indf2	equ	0xFDF
 15722                           postinc2	equ	0xFDE
 15723                           postdec2	equ	0xFDD
 15724                           fsr2h	equ	0xFDA
 15725                           fsr2l	equ	0xFD9
 15726                           status	equ	0xFD8
 15727                           
 15728 ;; *************** function ___awdiv *****************
 15729 ;; Defined at:
 15730 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 15731 ;; Parameters:    Size  Location     Type
 15732 ;;  dividend        2   34[COMRAM] int 
 15733 ;;  divisor         2   36[COMRAM] int 
 15734 ;; Auto vars:     Size  Location     Type
 15735 ;;  quotient        2    2[BANK0 ] int 
 15736 ;;  sign            1    1[BANK0 ] unsigned char 
 15737 ;;  counter         1    0[BANK0 ] unsigned char 
 15738 ;; Return value:  Size  Location     Type
 15739 ;;                  2   34[COMRAM] int 
 15740 ;; Registers used:
 15741 ;;		wreg, status,2, status,0
 15742 ;; Tracked objects:
 15743 ;;		On entry : 0/0
 15744 ;;		On exit  : 0/0
 15745 ;;		Unchanged: 0/0
 15746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15748 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15750 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15751 ;;Total ram usage:        8 bytes
 15752 ;; Hardware stack levels used:    1
 15753 ;; Hardware stack levels required when called:    3
 15754 ;; This function calls:
 15755 ;;		Nothing
 15756 ;; This function is called by:
 15757 ;;		_fround
 15758 ;;		_scale
 15759 ;;		_printf
 15760 ;; This function uses a non-reentrant model
 15761 ;;
 15762                           
 15763                           	psect	text27
 15764  019B2C                     __ptext27:
 15765                           	opt stack 0
 15766  019B2C                     ___awdiv:
 15767                           	opt stack 23
 15768                           
 15769                           ;incstack = 0
 15770  019B2C  0E00               	movlw	0
 15771  019B2E  0100               	movlb	0	; () banked
 15772  019B30  6F61               	movwf	___awdiv@sign& (0+255),b
 15773                           
 15774                           ; BSR set to: 0
 15775  019B32  AE26               	btfss	___awdiv@divisor+1,7,c
 15776  019B34  D007               	goto	l19573
 15777                           
 15778                           ; BSR set to: 0
 15779  019B36  6C25               	negf	___awdiv@divisor,c
 15780  019B38  1E26               	comf	___awdiv@divisor+1,f,c
 15781  019B3A  B0D8               	btfsc	status,0,c
 15782  019B3C  2A26               	incf	___awdiv@divisor+1,f,c
 15783                           
 15784                           ; BSR set to: 0
 15785  019B3E  0E01               	movlw	1
 15786  019B40  0100               	movlb	0	; () banked
 15787  019B42  6F61               	movwf	___awdiv@sign& (0+255),b
 15788  019B44                     l19573:
 15789                           
 15790                           ; BSR set to: 0
 15791  019B44  AE24               	btfss	___awdiv@dividend+1,7,c
 15792  019B46  D007               	goto	l19579
 15793                           
 15794                           ; BSR set to: 0
 15795  019B48  6C23               	negf	___awdiv@dividend,c
 15796  019B4A  1E24               	comf	___awdiv@dividend+1,f,c
 15797  019B4C  B0D8               	btfsc	status,0,c
 15798  019B4E  2A24               	incf	___awdiv@dividend+1,f,c
 15799                           
 15800                           ; BSR set to: 0
 15801  019B50  0E01               	movlw	1
 15802  019B52  0100               	movlb	0	; () banked
 15803  019B54  1B61               	xorwf	___awdiv@sign& (0+255),f,b
 15804  019B56                     l19579:
 15805                           
 15806                           ; BSR set to: 0
 15807  019B56  0E00               	movlw	0
 15808  019B58  0100               	movlb	0	; () banked
 15809  019B5A  6F63               	movwf	(___awdiv@quotient+1)& (0+255),b
 15810  019B5C  0E00               	movlw	0
 15811  019B5E  6F62               	movwf	___awdiv@quotient& (0+255),b
 15812                           
 15813                           ; BSR set to: 0
 15814  019B60  5025               	movf	___awdiv@divisor,w,c
 15815  019B62  1026               	iorwf	___awdiv@divisor+1,w,c
 15816  019B64  B4D8               	btfsc	status,2,c
 15817  019B66  D021               	goto	l19601
 15818                           
 15819                           ; BSR set to: 0
 15820  019B68  0E01               	movlw	1
 15821  019B6A  0100               	movlb	0	; () banked
 15822  019B6C  6F60               	movwf	___awdiv@counter& (0+255),b
 15823  019B6E  D005               	goto	l19587
 15824  019B70                     l19585:
 15825                           
 15826                           ; BSR set to: 0
 15827  019B70  90D8               	bcf	status,0,c
 15828  019B72  3625               	rlcf	___awdiv@divisor,f,c
 15829  019B74  3626               	rlcf	___awdiv@divisor+1,f,c
 15830  019B76  0100               	movlb	0	; () banked
 15831  019B78  2B60               	incf	___awdiv@counter& (0+255),f,b
 15832  019B7A                     l19587:
 15833                           
 15834                           ; BSR set to: 0
 15835  019B7A  AE26               	btfss	___awdiv@divisor+1,7,c
 15836  019B7C  D7F9               	goto	l19585
 15837  019B7E                     l19589:
 15838                           
 15839                           ; BSR set to: 0
 15840  019B7E  0100               	movlb	0	; () banked
 15841  019B80  90D8               	bcf	status,0,c
 15842  019B82  3762               	rlcf	___awdiv@quotient& (0+255),f,b
 15843  019B84  3763               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 15844                           
 15845                           ; BSR set to: 0
 15846  019B86  5025               	movf	___awdiv@divisor,w,c
 15847  019B88  5C23               	subwf	___awdiv@dividend,w,c
 15848  019B8A  5026               	movf	___awdiv@divisor+1,w,c
 15849  019B8C  5824               	subwfb	___awdiv@dividend+1,w,c
 15850  019B8E  A0D8               	btfss	status,0,c
 15851  019B90  D006               	goto	l19597
 15852                           
 15853                           ; BSR set to: 0
 15854  019B92  5025               	movf	___awdiv@divisor,w,c
 15855  019B94  5E23               	subwf	___awdiv@dividend,f,c
 15856  019B96  5026               	movf	___awdiv@divisor+1,w,c
 15857  019B98  5A24               	subwfb	___awdiv@dividend+1,f,c
 15858                           
 15859                           ; BSR set to: 0
 15860  019B9A  0100               	movlb	0	; () banked
 15861  019B9C  8162               	bsf	___awdiv@quotient& (0+255),0,b
 15862  019B9E                     l19597:
 15863                           
 15864                           ; BSR set to: 0
 15865  019B9E  90D8               	bcf	status,0,c
 15866  019BA0  3226               	rrcf	___awdiv@divisor+1,f,c
 15867  019BA2  3225               	rrcf	___awdiv@divisor,f,c
 15868                           
 15869                           ; BSR set to: 0
 15870  019BA4  0100               	movlb	0	; () banked
 15871  019BA6  2F60               	decfsz	___awdiv@counter& (0+255),f,b
 15872  019BA8  D7EA               	goto	l19589
 15873  019BAA                     l19601:
 15874                           
 15875                           ; BSR set to: 0
 15876  019BAA  0100               	movlb	0	; () banked
 15877  019BAC  5161               	movf	___awdiv@sign& (0+255),w,b
 15878  019BAE  0100               	movlb	0	; () banked
 15879  019BB0  B4D8               	btfsc	status,2,c
 15880  019BB2  D005               	goto	l19605
 15881                           
 15882                           ; BSR set to: 0
 15883  019BB4  0100               	movlb	0	; () banked
 15884  019BB6  6D62               	negf	___awdiv@quotient& (0+255),b
 15885  019BB8  1F63               	comf	(___awdiv@quotient+1)& (0+255),f,b
 15886  019BBA  B0D8               	btfsc	status,0,c
 15887  019BBC  2B63               	incf	(___awdiv@quotient+1)& (0+255),f,b
 15888  019BBE                     l19605:
 15889                           
 15890                           ; BSR set to: 0
 15891  019BBE  C062  F023         	movff	___awdiv@quotient,?___awdiv
 15892  019BC2  C063  F024         	movff	___awdiv@quotient+1,?___awdiv+1
 15893  019BC6  0012               	return	
 15894  019BC8                     __end_of___awdiv:
 15895                           	opt stack 0
 15896                           tblptru	equ	0xFF8
 15897                           tblptrh	equ	0xFF7
 15898                           tblptrl	equ	0xFF6
 15899                           tablat	equ	0xFF5
 15900                           prodh	equ	0xFF4
 15901                           prodl	equ	0xFF3
 15902                           intcon	equ	0xFF2
 15903                           postinc0	equ	0xFEE
 15904                           wreg	equ	0xFE8
 15905                           postdec1	equ	0xFE5
 15906                           fsr1h	equ	0xFE2
 15907                           fsr1l	equ	0xFE1
 15908                           indf2	equ	0xFDF
 15909                           postinc2	equ	0xFDE
 15910                           postdec2	equ	0xFDD
 15911                           fsr2h	equ	0xFDA
 15912                           fsr2l	equ	0xFD9
 15913                           status	equ	0xFD8
 15914                           
 15915 ;; *************** function __tdiv_to_l_ *****************
 15916 ;; Defined at:
 15917 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
 15918 ;; Parameters:    Size  Location     Type
 15919 ;;  f1              3   28[COMRAM] float 
 15920 ;;  f2              3   31[COMRAM] float 
 15921 ;; Auto vars:     Size  Location     Type
 15922 ;;  quot            4    0[BANK0 ] unsigned long 
 15923 ;;  exp1            1    5[BANK0 ] unsigned char 
 15924 ;;  cntr            1    4[BANK0 ] unsigned char 
 15925 ;; Return value:  Size  Location     Type
 15926 ;;                  4   28[COMRAM] unsigned long 
 15927 ;; Registers used:
 15928 ;;		wreg, status,2, status,0
 15929 ;; Tracked objects:
 15930 ;;		On entry : 0/0
 15931 ;;		On exit  : 0/0
 15932 ;;		Unchanged: 0/0
 15933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15934 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15935 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15936 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15937 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15938 ;;Total ram usage:       15 bytes
 15939 ;; Hardware stack levels used:    1
 15940 ;; Hardware stack levels required when called:    3
 15941 ;; This function calls:
 15942 ;;		Nothing
 15943 ;; This function is called by:
 15944 ;;		_printf
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           	psect	text28
 15949  017C64                     __ptext28:
 15950                           	opt stack 0
 15951  017C64                     __tdiv_to_l_:
 15952                           	opt stack 24
 15953                           
 15954                           ; BSR set to: 0
 15955                           ;incstack = 0
 15956  017C64  C01F  F023         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 15957  017C68  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 15958  017C6A  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 15959  017C6C  341E               	rlcf	__tdiv_to_l_@f1+1,w,c
 15960  017C6E  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
 15961  017C70  E301               	bnc	u12691
 15962  017C72  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 15963  017C74                     u12691:
 15964  017C74  5023               	movf	??__tdiv_to_l_,w,c
 15965  017C76  0100               	movlb	0	; () banked
 15966  017C78  6F65               	movwf	__tdiv_to_l_@exp1& (0+255),b
 15967  017C7A  0100               	movlb	0	; () banked
 15968  017C7C  5165               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 15969  017C7E  A4D8               	btfss	status,2,c
 15970  017C80  D009               	goto	l19675
 15971                           
 15972                           ; BSR set to: 0
 15973  017C82  0E00               	movlw	0
 15974  017C84  6E1D               	movwf	?__tdiv_to_l_,c
 15975  017C86  0E00               	movlw	0
 15976  017C88  6E1E               	movwf	?__tdiv_to_l_+1,c
 15977  017C8A  0E00               	movlw	0
 15978  017C8C  6E1F               	movwf	?__tdiv_to_l_+2,c
 15979  017C8E  0E00               	movlw	0
 15980  017C90  6E20               	movwf	?__tdiv_to_l_+3,c
 15981                           
 15982                           ; BSR set to: 0
 15983  017C92  0012               	return	
 15984  017C94                     l19675:
 15985                           
 15986                           ; BSR set to: 0
 15987  017C94  C022  F023         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 15988  017C98  6A24               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 15989  017C9A  6A25               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 15990  017C9C  3421               	rlcf	__tdiv_to_l_@f2+1,w,c
 15991  017C9E  3623               	rlcf	??__tdiv_to_l_& (0+255),f,c
 15992  017CA0  E301               	bnc	u12711
 15993  017CA2  8024               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 15994  017CA4                     u12711:
 15995  017CA4  5023               	movf	??__tdiv_to_l_,w,c
 15996  017CA6  0100               	movlb	0	; () banked
 15997  017CA8  6F64               	movwf	__tdiv_to_l_@cntr& (0+255),b
 15998  017CAA  0100               	movlb	0	; () banked
 15999  017CAC  5164               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 16000  017CAE  A4D8               	btfss	status,2,c
 16001  017CB0  D009               	goto	l19681
 16002                           
 16003                           ; BSR set to: 0
 16004  017CB2  0E00               	movlw	0
 16005  017CB4  6E1D               	movwf	?__tdiv_to_l_,c
 16006  017CB6  0E00               	movlw	0
 16007  017CB8  6E1E               	movwf	?__tdiv_to_l_+1,c
 16008  017CBA  0E00               	movlw	0
 16009  017CBC  6E1F               	movwf	?__tdiv_to_l_+2,c
 16010  017CBE  0E00               	movlw	0
 16011  017CC0  6E20               	movwf	?__tdiv_to_l_+3,c
 16012                           
 16013                           ; BSR set to: 0
 16014  017CC2  0012               	return	
 16015  017CC4                     l19681:
 16016                           
 16017                           ; BSR set to: 0
 16018  017CC4  8E1E               	bsf	__tdiv_to_l_@f1+1,7,c
 16019                           
 16020                           ; BSR set to: 0
 16021  017CC6  0EFF               	movlw	255
 16022  017CC8  161D               	andwf	__tdiv_to_l_@f1,f,c
 16023  017CCA  0EFF               	movlw	255
 16024  017CCC  161E               	andwf	__tdiv_to_l_@f1+1,f,c
 16025  017CCE  0E00               	movlw	0
 16026  017CD0  161F               	andwf	__tdiv_to_l_@f1+2,f,c
 16027  017CD2  8E21               	bsf	__tdiv_to_l_@f2+1,7,c
 16028                           
 16029                           ; BSR set to: 0
 16030  017CD4  0EFF               	movlw	255
 16031  017CD6  1620               	andwf	__tdiv_to_l_@f2,f,c
 16032  017CD8  0EFF               	movlw	255
 16033  017CDA  1621               	andwf	__tdiv_to_l_@f2+1,f,c
 16034  017CDC  0E00               	movlw	0
 16035  017CDE  1622               	andwf	__tdiv_to_l_@f2+2,f,c
 16036                           
 16037                           ; BSR set to: 0
 16038  017CE0  0E00               	movlw	0
 16039  017CE2  0100               	movlb	0	; () banked
 16040  017CE4  6F60               	movwf	__tdiv_to_l_@quot& (0+255),b
 16041  017CE6  0E00               	movlw	0
 16042  017CE8  6F61               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 16043  017CEA  0E00               	movlw	0
 16044  017CEC  6F62               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 16045  017CEE  0E00               	movlw	0
 16046  017CF0  6F63               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 16047                           
 16048                           ; BSR set to: 0
 16049  017CF2  0E7F               	movlw	127
 16050  017CF4  0100               	movlb	0	; () banked
 16051  017CF6  5F65               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 16052                           
 16053                           ; BSR set to: 0
 16054  017CF8  0100               	movlb	0	; () banked
 16055  017CFA  5164               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 16056  017CFC  0F98               	addlw	152
 16057  017CFE  0100               	movlb	0	; () banked
 16058  017D00  5F65               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 16059                           
 16060                           ; BSR set to: 0
 16061  017D02  0E18               	movlw	24
 16062  017D04  0100               	movlb	0	; () banked
 16063  017D06  6F64               	movwf	__tdiv_to_l_@cntr& (0+255),b
 16064  017D08                     l10756:
 16065                           
 16066                           ; BSR set to: 0
 16067  017D08  0100               	movlb	0	; () banked
 16068  017D0A  90D8               	bcf	status,0,c
 16069  017D0C  3760               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 16070  017D0E  3761               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16071  017D10  3762               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16072  017D12  3763               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16073                           
 16074                           ; BSR set to: 0
 16075  017D14  5020               	movf	__tdiv_to_l_@f2,w,c
 16076  017D16  5C1D               	subwf	__tdiv_to_l_@f1,w,c
 16077  017D18  5021               	movf	__tdiv_to_l_@f2+1,w,c
 16078  017D1A  581E               	subwfb	__tdiv_to_l_@f1+1,w,c
 16079  017D1C  5022               	movf	__tdiv_to_l_@f2+2,w,c
 16080  017D1E  581F               	subwfb	__tdiv_to_l_@f1+2,w,c
 16081  017D20  A0D8               	btfss	status,0,c
 16082  017D22  D008               	goto	l10757
 16083                           
 16084                           ; BSR set to: 0
 16085  017D24  5020               	movf	__tdiv_to_l_@f2,w,c
 16086  017D26  5E1D               	subwf	__tdiv_to_l_@f1,f,c
 16087  017D28  5021               	movf	__tdiv_to_l_@f2+1,w,c
 16088  017D2A  5A1E               	subwfb	__tdiv_to_l_@f1+1,f,c
 16089  017D2C  5022               	movf	__tdiv_to_l_@f2+2,w,c
 16090  017D2E  5A1F               	subwfb	__tdiv_to_l_@f1+2,f,c
 16091                           
 16092                           ; BSR set to: 0
 16093  017D30  0100               	movlb	0	; () banked
 16094  017D32  8160               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 16095  017D34                     l10757:
 16096                           
 16097                           ; BSR set to: 0
 16098  017D34  90D8               	bcf	status,0,c
 16099  017D36  361D               	rlcf	__tdiv_to_l_@f1,f,c
 16100  017D38  361E               	rlcf	__tdiv_to_l_@f1+1,f,c
 16101  017D3A  361F               	rlcf	__tdiv_to_l_@f1+2,f,c
 16102                           
 16103                           ; BSR set to: 0
 16104  017D3C  0100               	movlb	0	; () banked
 16105  017D3E  2F64               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 16106  017D40  D7E3               	goto	l10756
 16107                           
 16108                           ; BSR set to: 0
 16109                           
 16110                           ; BSR set to: 0
 16111  017D42  0100               	movlb	0	; () banked
 16112  017D44  AF65               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 16113  017D46  D019               	goto	l19715
 16114                           
 16115                           ; BSR set to: 0
 16116  017D48  0100               	movlb	0	; () banked
 16117  017D4A  5165               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 16118  017D4C  0A80               	xorlw	128
 16119  017D4E  0F97               	addlw	151
 16120  017D50  B0D8               	btfsc	status,0,c
 16121  017D52  D009               	goto	l19711
 16122                           
 16123                           ; BSR set to: 0
 16124  017D54  0E00               	movlw	0
 16125  017D56  6E1D               	movwf	?__tdiv_to_l_,c
 16126  017D58  0E00               	movlw	0
 16127  017D5A  6E1E               	movwf	?__tdiv_to_l_+1,c
 16128  017D5C  0E00               	movlw	0
 16129  017D5E  6E1F               	movwf	?__tdiv_to_l_+2,c
 16130  017D60  0E00               	movlw	0
 16131  017D62  6E20               	movwf	?__tdiv_to_l_+3,c
 16132                           
 16133                           ; BSR set to: 0
 16134  017D64  0012               	return	
 16135  017D66                     l19711:
 16136                           
 16137                           ; BSR set to: 0
 16138  017D66  0100               	movlb	0	; () banked
 16139  017D68  90D8               	bcf	status,0,c
 16140  017D6A  3363               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16141  017D6C  3362               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16142  017D6E  3361               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16143  017D70  3360               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 16144                           
 16145                           ; BSR set to: 0
 16146  017D72  0100               	movlb	0	; () banked
 16147  017D74  3F65               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 16148  017D76  D7F7               	goto	l19711
 16149                           
 16150                           ; BSR set to: 0
 16151  017D78  D01A               	goto	l10763
 16152  017D7A                     l19715:
 16153                           
 16154                           ; BSR set to: 0
 16155  017D7A  0E17               	movlw	23
 16156  017D7C  0100               	movlb	0	; () banked
 16157  017D7E  6565               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 16158  017D80  D011               	goto	l19723
 16159                           
 16160                           ; BSR set to: 0
 16161  017D82  0E00               	movlw	0
 16162  017D84  6E1D               	movwf	?__tdiv_to_l_,c
 16163  017D86  0E00               	movlw	0
 16164  017D88  6E1E               	movwf	?__tdiv_to_l_+1,c
 16165  017D8A  0E00               	movlw	0
 16166  017D8C  6E1F               	movwf	?__tdiv_to_l_+2,c
 16167  017D8E  0E00               	movlw	0
 16168  017D90  6E20               	movwf	?__tdiv_to_l_+3,c
 16169                           
 16170                           ; BSR set to: 0
 16171  017D92  0012               	return	
 16172  017D94                     l19721:
 16173                           
 16174                           ; BSR set to: 0
 16175  017D94  0100               	movlb	0	; () banked
 16176  017D96  90D8               	bcf	status,0,c
 16177  017D98  3760               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 16178  017D9A  3761               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 16179  017D9C  3762               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 16180  017D9E  3763               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 16181  017DA0  0100               	movlb	0	; () banked
 16182  017DA2  0765               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 16183  017DA4                     l19723:
 16184                           
 16185                           ; BSR set to: 0
 16186  017DA4  0100               	movlb	0	; () banked
 16187  017DA6  5165               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 16188  017DA8  0100               	movlb	0	; () banked
 16189  017DAA  A4D8               	btfss	status,2,c
 16190  017DAC  D7F3               	goto	l19721
 16191  017DAE                     l10763:
 16192                           
 16193                           ; BSR set to: 0
 16194  017DAE  C060  F01D         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 16195  017DB2  C061  F01E         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 16196  017DB6  C062  F01F         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 16197  017DBA  C063  F020         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 16198                           
 16199                           ; BSR set to: 0
 16200  017DBE  0012               	return		;funcret
 16201  017DC0                     __end_of__tdiv_to_l_:
 16202                           	opt stack 0
 16203                           tblptru	equ	0xFF8
 16204                           tblptrh	equ	0xFF7
 16205                           tblptrl	equ	0xFF6
 16206                           tablat	equ	0xFF5
 16207                           prodh	equ	0xFF4
 16208                           prodl	equ	0xFF3
 16209                           intcon	equ	0xFF2
 16210                           postinc0	equ	0xFEE
 16211                           wreg	equ	0xFE8
 16212                           postdec1	equ	0xFE5
 16213                           fsr1h	equ	0xFE2
 16214                           fsr1l	equ	0xFE1
 16215                           indf2	equ	0xFDF
 16216                           postinc2	equ	0xFDE
 16217                           postdec2	equ	0xFDD
 16218                           fsr2h	equ	0xFDA
 16219                           fsr2l	equ	0xFD9
 16220                           status	equ	0xFD8
 16221                           
 16222 ;; *************** function __div_to_l_ *****************
 16223 ;; Defined at:
 16224 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
 16225 ;; Parameters:    Size  Location     Type
 16226 ;;  f1              3   28[COMRAM] unsigned long 
 16227 ;;  f2              3   31[COMRAM] unsigned long 
 16228 ;; Auto vars:     Size  Location     Type
 16229 ;;  quot            4    0[BANK0 ] unsigned long 
 16230 ;;  exp1            1    5[BANK0 ] unsigned char 
 16231 ;;  cntr            1    4[BANK0 ] unsigned char 
 16232 ;; Return value:  Size  Location     Type
 16233 ;;                  4   28[COMRAM] unsigned long 
 16234 ;; Registers used:
 16235 ;;		wreg, status,2, status,0
 16236 ;; Tracked objects:
 16237 ;;		On entry : 0/0
 16238 ;;		On exit  : 0/0
 16239 ;;		Unchanged: 0/0
 16240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16241 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16242 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16244 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16245 ;;Total ram usage:       12 bytes
 16246 ;; Hardware stack levels used:    1
 16247 ;; Hardware stack levels required when called:    3
 16248 ;; This function calls:
 16249 ;;		Nothing
 16250 ;; This function is called by:
 16251 ;;		_printf
 16252 ;; This function uses a non-reentrant model
 16253 ;;
 16254                           
 16255                           	psect	text29
 16256  017DC0                     __ptext29:
 16257                           	opt stack 0
 16258  017DC0                     __div_to_l_:
 16259                           	opt stack 24
 16260                           
 16261                           ; BSR set to: 0
 16262                           ;incstack = 0
 16263  017DC0  341F               	rlcf	__div_to_l_@f1+2,w,c
 16264  017DC2  3420               	rlcf	__div_to_l_@f1+3,w,c
 16265  017DC4  0100               	movlb	0	; () banked
 16266  017DC6  6F65               	movwf	__div_to_l_@exp1& (0+255),b
 16267  017DC8  0100               	movlb	0	; () banked
 16268  017DCA  5165               	movf	__div_to_l_@exp1& (0+255),w,b
 16269  017DCC  A4D8               	btfss	status,2,c
 16270  017DCE  D009               	goto	l19731
 16271                           
 16272                           ; BSR set to: 0
 16273  017DD0  0E00               	movlw	0
 16274  017DD2  6E1D               	movwf	?__div_to_l_,c
 16275  017DD4  0E00               	movlw	0
 16276  017DD6  6E1E               	movwf	?__div_to_l_+1,c
 16277  017DD8  0E00               	movlw	0
 16278  017DDA  6E1F               	movwf	?__div_to_l_+2,c
 16279  017DDC  0E00               	movlw	0
 16280  017DDE  6E20               	movwf	?__div_to_l_+3,c
 16281                           
 16282                           ; BSR set to: 0
 16283  017DE0  0012               	return	
 16284  017DE2                     l19731:
 16285                           
 16286                           ; BSR set to: 0
 16287  017DE2  3422               	rlcf	__div_to_l_@f2+2,w,c
 16288  017DE4  3423               	rlcf	__div_to_l_@f2+3,w,c
 16289  017DE6  0100               	movlb	0	; () banked
 16290  017DE8  6F64               	movwf	__div_to_l_@cntr& (0+255),b
 16291  017DEA  0100               	movlb	0	; () banked
 16292  017DEC  5164               	movf	__div_to_l_@cntr& (0+255),w,b
 16293  017DEE  A4D8               	btfss	status,2,c
 16294  017DF0  D009               	goto	l19737
 16295                           
 16296                           ; BSR set to: 0
 16297  017DF2  0E00               	movlw	0
 16298  017DF4  6E1D               	movwf	?__div_to_l_,c
 16299  017DF6  0E00               	movlw	0
 16300  017DF8  6E1E               	movwf	?__div_to_l_+1,c
 16301  017DFA  0E00               	movlw	0
 16302  017DFC  6E1F               	movwf	?__div_to_l_+2,c
 16303  017DFE  0E00               	movlw	0
 16304  017E00  6E20               	movwf	?__div_to_l_+3,c
 16305                           
 16306                           ; BSR set to: 0
 16307  017E02  0012               	return	
 16308  017E04                     l19737:
 16309                           
 16310                           ; BSR set to: 0
 16311  017E04  8E1F               	bsf	__div_to_l_@f1+2,7,c
 16312                           
 16313                           ; BSR set to: 0
 16314  017E06  0EFF               	movlw	255
 16315  017E08  161D               	andwf	__div_to_l_@f1,f,c
 16316  017E0A  0EFF               	movlw	255
 16317  017E0C  161E               	andwf	__div_to_l_@f1+1,f,c
 16318  017E0E  0EFF               	movlw	255
 16319  017E10  161F               	andwf	__div_to_l_@f1+2,f,c
 16320  017E12  0E00               	movlw	0
 16321  017E14  1620               	andwf	__div_to_l_@f1+3,f,c
 16322                           
 16323                           ; BSR set to: 0
 16324  017E16  8E22               	bsf	__div_to_l_@f2+2,7,c
 16325  017E18  0EFF               	movlw	255
 16326  017E1A  1620               	andwf	__div_to_l_@f2,f,c
 16327  017E1C  0EFF               	movlw	255
 16328  017E1E  1621               	andwf	__div_to_l_@f2+1,f,c
 16329  017E20  0EFF               	movlw	255
 16330  017E22  1622               	andwf	__div_to_l_@f2+2,f,c
 16331  017E24  0E00               	movlw	0
 16332  017E26  1623               	andwf	__div_to_l_@f2+3,f,c
 16333                           
 16334                           ; BSR set to: 0
 16335  017E28  0E00               	movlw	0
 16336  017E2A  0100               	movlb	0	; () banked
 16337  017E2C  6F60               	movwf	__div_to_l_@quot& (0+255),b
 16338  017E2E  0E00               	movlw	0
 16339  017E30  6F61               	movwf	(__div_to_l_@quot+1)& (0+255),b
 16340  017E32  0E00               	movlw	0
 16341  017E34  6F62               	movwf	(__div_to_l_@quot+2)& (0+255),b
 16342  017E36  0E00               	movlw	0
 16343  017E38  6F63               	movwf	(__div_to_l_@quot+3)& (0+255),b
 16344                           
 16345                           ; BSR set to: 0
 16346  017E3A  0E7F               	movlw	127
 16347  017E3C  0100               	movlb	0	; () banked
 16348  017E3E  5F65               	subwf	__div_to_l_@exp1& (0+255),f,b
 16349                           
 16350                           ; BSR set to: 0
 16351  017E40  0100               	movlb	0	; () banked
 16352  017E42  5164               	movf	__div_to_l_@cntr& (0+255),w,b
 16353  017E44  0FA0               	addlw	160
 16354  017E46  0100               	movlb	0	; () banked
 16355  017E48  5F65               	subwf	__div_to_l_@exp1& (0+255),f,b
 16356                           
 16357                           ; BSR set to: 0
 16358  017E4A  0E20               	movlw	32
 16359  017E4C  0100               	movlb	0	; () banked
 16360  017E4E  6F64               	movwf	__div_to_l_@cntr& (0+255),b
 16361  017E50                     l19751:
 16362                           
 16363                           ; BSR set to: 0
 16364  017E50  0100               	movlb	0	; () banked
 16365  017E52  90D8               	bcf	status,0,c
 16366  017E54  3760               	rlcf	__div_to_l_@quot& (0+255),f,b
 16367  017E56  3761               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 16368  017E58  3762               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 16369  017E5A  3763               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 16370                           
 16371                           ; BSR set to: 0
 16372  017E5C  5020               	movf	__div_to_l_@f2,w,c
 16373  017E5E  5C1D               	subwf	__div_to_l_@f1,w,c
 16374  017E60  5021               	movf	__div_to_l_@f2+1,w,c
 16375  017E62  581E               	subwfb	__div_to_l_@f1+1,w,c
 16376  017E64  5022               	movf	__div_to_l_@f2+2,w,c
 16377  017E66  581F               	subwfb	__div_to_l_@f1+2,w,c
 16378  017E68  5023               	movf	__div_to_l_@f2+3,w,c
 16379  017E6A  5820               	subwfb	__div_to_l_@f1+3,w,c
 16380  017E6C  A0D8               	btfss	status,0,c
 16381  017E6E  D00A               	goto	l19759
 16382                           
 16383                           ; BSR set to: 0
 16384  017E70  5020               	movf	__div_to_l_@f2,w,c
 16385  017E72  5E1D               	subwf	__div_to_l_@f1,f,c
 16386  017E74  5021               	movf	__div_to_l_@f2+1,w,c
 16387  017E76  5A1E               	subwfb	__div_to_l_@f1+1,f,c
 16388  017E78  5022               	movf	__div_to_l_@f2+2,w,c
 16389  017E7A  5A1F               	subwfb	__div_to_l_@f1+2,f,c
 16390  017E7C  5023               	movf	__div_to_l_@f2+3,w,c
 16391  017E7E  5A20               	subwfb	__div_to_l_@f1+3,f,c
 16392                           
 16393                           ; BSR set to: 0
 16394  017E80  0100               	movlb	0	; () banked
 16395  017E82  8160               	bsf	__div_to_l_@quot& (0+255),0,b
 16396  017E84                     l19759:
 16397                           
 16398                           ; BSR set to: 0
 16399  017E84  90D8               	bcf	status,0,c
 16400  017E86  361D               	rlcf	__div_to_l_@f1,f,c
 16401  017E88  361E               	rlcf	__div_to_l_@f1+1,f,c
 16402  017E8A  361F               	rlcf	__div_to_l_@f1+2,f,c
 16403  017E8C  3620               	rlcf	__div_to_l_@f1+3,f,c
 16404                           
 16405                           ; BSR set to: 0
 16406  017E8E  0100               	movlb	0	; () banked
 16407  017E90  2F64               	decfsz	__div_to_l_@cntr& (0+255),f,b
 16408  017E92  D7DE               	goto	l19751
 16409                           
 16410                           ; BSR set to: 0
 16411                           
 16412                           ; BSR set to: 0
 16413  017E94  0100               	movlb	0	; () banked
 16414  017E96  AF65               	btfss	__div_to_l_@exp1& (0+255),7,b
 16415  017E98  D019               	goto	l19775
 16416                           
 16417                           ; BSR set to: 0
 16418  017E9A  0100               	movlb	0	; () banked
 16419  017E9C  5165               	movf	__div_to_l_@exp1& (0+255),w,b
 16420  017E9E  0A80               	xorlw	128
 16421  017EA0  0F9F               	addlw	159
 16422  017EA2  B0D8               	btfsc	status,0,c
 16423  017EA4  D009               	goto	l19771
 16424                           
 16425                           ; BSR set to: 0
 16426  017EA6  0E00               	movlw	0
 16427  017EA8  6E1D               	movwf	?__div_to_l_,c
 16428  017EAA  0E00               	movlw	0
 16429  017EAC  6E1E               	movwf	?__div_to_l_+1,c
 16430  017EAE  0E00               	movlw	0
 16431  017EB0  6E1F               	movwf	?__div_to_l_+2,c
 16432  017EB2  0E00               	movlw	0
 16433  017EB4  6E20               	movwf	?__div_to_l_+3,c
 16434                           
 16435                           ; BSR set to: 0
 16436  017EB6  0012               	return	
 16437  017EB8                     l19771:
 16438                           
 16439                           ; BSR set to: 0
 16440  017EB8  0100               	movlb	0	; () banked
 16441  017EBA  90D8               	bcf	status,0,c
 16442  017EBC  3363               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 16443  017EBE  3362               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 16444  017EC0  3361               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 16445  017EC2  3360               	rrcf	__div_to_l_@quot& (0+255),f,b
 16446                           
 16447                           ; BSR set to: 0
 16448  017EC4  0100               	movlb	0	; () banked
 16449  017EC6  3F65               	incfsz	__div_to_l_@exp1& (0+255),f,b
 16450  017EC8  D7F7               	goto	l19771
 16451                           
 16452                           ; BSR set to: 0
 16453  017ECA  D01A               	goto	l10659
 16454  017ECC                     l19775:
 16455                           
 16456                           ; BSR set to: 0
 16457  017ECC  0E1F               	movlw	31
 16458  017ECE  0100               	movlb	0	; () banked
 16459  017ED0  6565               	cpfsgt	__div_to_l_@exp1& (0+255),b
 16460  017ED2  D011               	goto	l19783
 16461                           
 16462                           ; BSR set to: 0
 16463  017ED4  0E00               	movlw	0
 16464  017ED6  6E1D               	movwf	?__div_to_l_,c
 16465  017ED8  0E00               	movlw	0
 16466  017EDA  6E1E               	movwf	?__div_to_l_+1,c
 16467  017EDC  0E00               	movlw	0
 16468  017EDE  6E1F               	movwf	?__div_to_l_+2,c
 16469  017EE0  0E00               	movlw	0
 16470  017EE2  6E20               	movwf	?__div_to_l_+3,c
 16471                           
 16472                           ; BSR set to: 0
 16473  017EE4  0012               	return	
 16474  017EE6                     l19781:
 16475                           
 16476                           ; BSR set to: 0
 16477  017EE6  0100               	movlb	0	; () banked
 16478  017EE8  90D8               	bcf	status,0,c
 16479  017EEA  3760               	rlcf	__div_to_l_@quot& (0+255),f,b
 16480  017EEC  3761               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 16481  017EEE  3762               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 16482  017EF0  3763               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 16483  017EF2  0100               	movlb	0	; () banked
 16484  017EF4  0765               	decf	__div_to_l_@exp1& (0+255),f,b
 16485  017EF6                     l19783:
 16486                           
 16487                           ; BSR set to: 0
 16488  017EF6  0100               	movlb	0	; () banked
 16489  017EF8  5165               	movf	__div_to_l_@exp1& (0+255),w,b
 16490  017EFA  0100               	movlb	0	; () banked
 16491  017EFC  A4D8               	btfss	status,2,c
 16492  017EFE  D7F3               	goto	l19781
 16493  017F00                     l10659:
 16494                           
 16495                           ; BSR set to: 0
 16496  017F00  C060  F01D         	movff	__div_to_l_@quot,?__div_to_l_
 16497  017F04  C061  F01E         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 16498  017F08  C062  F01F         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 16499  017F0C  C063  F020         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 16500                           
 16501                           ; BSR set to: 0
 16502  017F10  0012               	return		;funcret
 16503  017F12                     __end_of__div_to_l_:
 16504                           	opt stack 0
 16505                           tblptru	equ	0xFF8
 16506                           tblptrh	equ	0xFF7
 16507                           tblptrl	equ	0xFF6
 16508                           tablat	equ	0xFF5
 16509                           prodh	equ	0xFF4
 16510                           prodl	equ	0xFF3
 16511                           intcon	equ	0xFF2
 16512                           postinc0	equ	0xFEE
 16513                           wreg	equ	0xFE8
 16514                           postdec1	equ	0xFE5
 16515                           fsr1h	equ	0xFE2
 16516                           fsr1l	equ	0xFE1
 16517                           indf2	equ	0xFDF
 16518                           postinc2	equ	0xFDE
 16519                           postdec2	equ	0xFDD
 16520                           fsr2h	equ	0xFDA
 16521                           fsr2l	equ	0xFD9
 16522                           status	equ	0xFD8
 16523                           
 16524 ;; *************** function ___lltoft *****************
 16525 ;; Defined at:
 16526 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
 16527 ;; Parameters:    Size  Location     Type
 16528 ;;  c               4    0[BANK0 ] unsigned long 
 16529 ;; Auto vars:     Size  Location     Type
 16530 ;;  exp             1   36[COMRAM] unsigned char 
 16531 ;; Return value:  Size  Location     Type
 16532 ;;                  3    0[BANK0 ] float 
 16533 ;; Registers used:
 16534 ;;		wreg, status,2, status,0, cstack
 16535 ;; Tracked objects:
 16536 ;;		On entry : 0/0
 16537 ;;		On exit  : 0/0
 16538 ;;		Unchanged: 0/0
 16539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16540 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16542 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16543 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16544 ;;Total ram usage:        9 bytes
 16545 ;; Hardware stack levels used:    1
 16546 ;; Hardware stack levels required when called:    4
 16547 ;; This function calls:
 16548 ;;		___ftpack
 16549 ;; This function is called by:
 16550 ;;		_printf
 16551 ;; This function uses a non-reentrant model
 16552 ;;
 16553                           
 16554                           	psect	text30
 16555  019FEC                     __ptext30:
 16556                           	opt stack 0
 16557  019FEC                     ___lltoft:
 16558                           	opt stack 23
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;incstack = 0
 16562  019FEC  0E8E               	movlw	142
 16563  019FEE  6E25               	movwf	___lltoft@exp,c
 16564  019FF0  D007               	goto	l19919
 16565  019FF2                     l19917:
 16566  019FF2  0100               	movlb	0	; () banked
 16567  019FF4  90D8               	bcf	status,0,c
 16568  019FF6  3363               	rrcf	(___lltoft@c+3)& (0+255),f,b
 16569  019FF8  3362               	rrcf	(___lltoft@c+2)& (0+255),f,b
 16570  019FFA  3361               	rrcf	(___lltoft@c+1)& (0+255),f,b
 16571  019FFC  3360               	rrcf	___lltoft@c& (0+255),f,b
 16572  019FFE  2A25               	incf	___lltoft@exp,f,c
 16573  01A000                     l19919:
 16574  01A000  0E00               	movlw	0
 16575  01A002  0100               	movlb	0	; () banked
 16576  01A004  1560               	andwf	___lltoft@c& (0+255),w,b
 16577  01A006  0100               	movlb	0	; () banked
 16578  01A008  6F64               	movwf	??___lltoft& (0+255),b
 16579  01A00A  0E00               	movlw	0
 16580  01A00C  0100               	movlb	0	; () banked
 16581  01A00E  1561               	andwf	(___lltoft@c+1)& (0+255),w,b
 16582  01A010  0100               	movlb	0	; () banked
 16583  01A012  6F65               	movwf	(??___lltoft+1)& (0+255),b
 16584  01A014  0E00               	movlw	0
 16585  01A016  0100               	movlb	0	; () banked
 16586  01A018  1562               	andwf	(___lltoft@c+2)& (0+255),w,b
 16587  01A01A  0100               	movlb	0	; () banked
 16588  01A01C  6F66               	movwf	(??___lltoft+2)& (0+255),b
 16589  01A01E  0EFF               	movlw	255
 16590  01A020  0100               	movlb	0	; () banked
 16591  01A022  1563               	andwf	(___lltoft@c+3)& (0+255),w,b
 16592  01A024  0100               	movlb	0	; () banked
 16593  01A026  6F67               	movwf	(??___lltoft+3)& (0+255),b
 16594  01A028  0100               	movlb	0	; () banked
 16595  01A02A  5164               	movf	??___lltoft& (0+255),w,b
 16596  01A02C  0100               	movlb	0	; () banked
 16597  01A02E  1165               	iorwf	(??___lltoft+1)& (0+255),w,b
 16598  01A030  0100               	movlb	0	; () banked
 16599  01A032  1166               	iorwf	(??___lltoft+2)& (0+255),w,b
 16600  01A034  0100               	movlb	0	; () banked
 16601  01A036  1167               	iorwf	(??___lltoft+3)& (0+255),w,b
 16602  01A038  A4D8               	btfss	status,2,c
 16603  01A03A  D7DB               	goto	l19917
 16604                           
 16605                           ; BSR set to: 0
 16606                           
 16607                           ; BSR set to: 0
 16608  01A03C  C060  F01D         	movff	___lltoft@c,___ftpack@arg
 16609  01A040  C061  F01E         	movff	___lltoft@c+1,___ftpack@arg+1
 16610  01A044  C062  F01F         	movff	___lltoft@c+2,___ftpack@arg+2
 16611  01A048  C025  F020         	movff	___lltoft@exp,___ftpack@exp
 16612  01A04C  0E00               	movlw	0
 16613  01A04E  6E21               	movwf	___ftpack@sign,c
 16614  01A050  ECA0  F0CB         	call	___ftpack	;wreg free
 16615  01A054  C01D  F060         	movff	?___ftpack,?___lltoft
 16616  01A058  C01E  F061         	movff	?___ftpack+1,?___lltoft+1
 16617  01A05C  C01F  F062         	movff	?___ftpack+2,?___lltoft+2
 16618  01A060  0012               	return	
 16619  01A062                     __end_of___lltoft:
 16620                           	opt stack 0
 16621                           tblptru	equ	0xFF8
 16622                           tblptrh	equ	0xFF7
 16623                           tblptrl	equ	0xFF6
 16624                           tablat	equ	0xFF5
 16625                           prodh	equ	0xFF4
 16626                           prodl	equ	0xFF3
 16627                           intcon	equ	0xFF2
 16628                           postinc0	equ	0xFEE
 16629                           wreg	equ	0xFE8
 16630                           postdec1	equ	0xFE5
 16631                           fsr1h	equ	0xFE2
 16632                           fsr1l	equ	0xFE1
 16633                           indf2	equ	0xFDF
 16634                           postinc2	equ	0xFDE
 16635                           postdec2	equ	0xFDD
 16636                           fsr2h	equ	0xFDA
 16637                           fsr2l	equ	0xFD9
 16638                           status	equ	0xFD8
 16639                           
 16640 ;; *************** function ___llmod *****************
 16641 ;; Defined at:
 16642 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 16643 ;; Parameters:    Size  Location     Type
 16644 ;;  dividend        4    5[BANK0 ] unsigned long 
 16645 ;;  divisor         4    9[BANK0 ] unsigned long 
 16646 ;; Auto vars:     Size  Location     Type
 16647 ;;  counter         1   36[COMRAM] unsigned char 
 16648 ;; Return value:  Size  Location     Type
 16649 ;;                  4    5[BANK0 ] unsigned long 
 16650 ;; Registers used:
 16651 ;;		wreg, status,2, status,0
 16652 ;; Tracked objects:
 16653 ;;		On entry : 0/0
 16654 ;;		On exit  : 0/0
 16655 ;;		Unchanged: 0/0
 16656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16657 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16658 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16660 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16661 ;;Total ram usage:        9 bytes
 16662 ;; Hardware stack levels used:    1
 16663 ;; Hardware stack levels required when called:    3
 16664 ;; This function calls:
 16665 ;;		Nothing
 16666 ;; This function is called by:
 16667 ;;		_printf
 16668 ;; This function uses a non-reentrant model
 16669 ;;
 16670                           
 16671                           	psect	text31
 16672  019BC8                     __ptext31:
 16673                           	opt stack 0
 16674  019BC8                     ___llmod:
 16675                           	opt stack 24
 16676                           
 16677                           ;incstack = 0
 16678  019BC8  0100               	movlb	0	; () banked
 16679  019BCA  5169               	movf	___llmod@divisor& (0+255),w,b
 16680  019BCC  0100               	movlb	0	; () banked
 16681  019BCE  116A               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 16682  019BD0  0100               	movlb	0	; () banked
 16683  019BD2  116B               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 16684  019BD4  0100               	movlb	0	; () banked
 16685  019BD6  116C               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 16686  019BD8  B4D8               	btfsc	status,2,c
 16687  019BDA  D037               	goto	l10848
 16688                           
 16689                           ; BSR set to: 0
 16690  019BDC  0E01               	movlw	1
 16691  019BDE  6E25               	movwf	___llmod@counter,c
 16692  019BE0  D007               	goto	l19905
 16693  019BE2                     l19903:
 16694                           
 16695                           ; BSR set to: 0
 16696  019BE2  0100               	movlb	0	; () banked
 16697  019BE4  90D8               	bcf	status,0,c
 16698  019BE6  3769               	rlcf	___llmod@divisor& (0+255),f,b
 16699  019BE8  376A               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 16700  019BEA  376B               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 16701  019BEC  376C               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 16702  019BEE  2A25               	incf	___llmod@counter,f,c
 16703  019BF0                     l19905:
 16704                           
 16705                           ; BSR set to: 0
 16706  019BF0  0100               	movlb	0	; () banked
 16707  019BF2  AF6C               	btfss	(___llmod@divisor+3)& (0+255),7,b
 16708  019BF4  D7F6               	goto	l19903
 16709  019BF6                     l19907:
 16710                           
 16711                           ; BSR set to: 0
 16712  019BF6  0100               	movlb	0	; () banked
 16713  019BF8  5169               	movf	___llmod@divisor& (0+255),w,b
 16714  019BFA  0100               	movlb	0	; () banked
 16715  019BFC  5D65               	subwf	___llmod@dividend& (0+255),w,b
 16716  019BFE  0100               	movlb	0	; () banked
 16717  019C00  516A               	movf	(___llmod@divisor+1)& (0+255),w,b
 16718  019C02  0100               	movlb	0	; () banked
 16719  019C04  5966               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 16720  019C06  0100               	movlb	0	; () banked
 16721  019C08  516B               	movf	(___llmod@divisor+2)& (0+255),w,b
 16722  019C0A  0100               	movlb	0	; () banked
 16723  019C0C  5967               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 16724  019C0E  0100               	movlb	0	; () banked
 16725  019C10  516C               	movf	(___llmod@divisor+3)& (0+255),w,b
 16726  019C12  0100               	movlb	0	; () banked
 16727  019C14  5968               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 16728  019C16  A0D8               	btfss	status,0,c
 16729  019C18  D010               	goto	l19911
 16730                           
 16731                           ; BSR set to: 0
 16732  019C1A  0100               	movlb	0	; () banked
 16733  019C1C  5169               	movf	___llmod@divisor& (0+255),w,b
 16734  019C1E  0100               	movlb	0	; () banked
 16735  019C20  5F65               	subwf	___llmod@dividend& (0+255),f,b
 16736  019C22  0100               	movlb	0	; () banked
 16737  019C24  516A               	movf	(___llmod@divisor+1)& (0+255),w,b
 16738  019C26  0100               	movlb	0	; () banked
 16739  019C28  5B66               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 16740  019C2A  0100               	movlb	0	; () banked
 16741  019C2C  516B               	movf	(___llmod@divisor+2)& (0+255),w,b
 16742  019C2E  0100               	movlb	0	; () banked
 16743  019C30  5B67               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 16744  019C32  0100               	movlb	0	; () banked
 16745  019C34  516C               	movf	(___llmod@divisor+3)& (0+255),w,b
 16746  019C36  0100               	movlb	0	; () banked
 16747  019C38  5B68               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 16748  019C3A                     l19911:
 16749                           
 16750                           ; BSR set to: 0
 16751  019C3A  0100               	movlb	0	; () banked
 16752  019C3C  90D8               	bcf	status,0,c
 16753  019C3E  336C               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 16754  019C40  336B               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 16755  019C42  336A               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 16756  019C44  3369               	rrcf	___llmod@divisor& (0+255),f,b
 16757                           
 16758                           ; BSR set to: 0
 16759  019C46  2E25               	decfsz	___llmod@counter,f,c
 16760  019C48  D7D6               	goto	l19907
 16761  019C4A                     l10848:
 16762                           
 16763                           ; BSR set to: 0
 16764  019C4A  C065  F065         	movff	___llmod@dividend,?___llmod
 16765  019C4E  C066  F066         	movff	___llmod@dividend+1,?___llmod+1
 16766  019C52  C067  F067         	movff	___llmod@dividend+2,?___llmod+2
 16767  019C56  C068  F068         	movff	___llmod@dividend+3,?___llmod+3
 16768                           
 16769                           ; BSR set to: 0
 16770  019C5A  0012               	return		;funcret
 16771  019C5C                     __end_of___llmod:
 16772                           	opt stack 0
 16773                           tblptru	equ	0xFF8
 16774                           tblptrh	equ	0xFF7
 16775                           tblptrl	equ	0xFF6
 16776                           tablat	equ	0xFF5
 16777                           prodh	equ	0xFF4
 16778                           prodl	equ	0xFF3
 16779                           intcon	equ	0xFF2
 16780                           postinc0	equ	0xFEE
 16781                           wreg	equ	0xFE8
 16782                           postdec1	equ	0xFE5
 16783                           fsr1h	equ	0xFE2
 16784                           fsr1l	equ	0xFE1
 16785                           indf2	equ	0xFDF
 16786                           postinc2	equ	0xFDE
 16787                           postdec2	equ	0xFDD
 16788                           fsr2h	equ	0xFDA
 16789                           fsr2l	equ	0xFD9
 16790                           status	equ	0xFD8
 16791                           
 16792 ;; *************** function ___lldiv *****************
 16793 ;; Defined at:
 16794 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 16795 ;; Parameters:    Size  Location     Type
 16796 ;;  dividend        4   28[COMRAM] unsigned long 
 16797 ;;  divisor         4   32[COMRAM] unsigned long 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;  quotient        4    0[BANK0 ] unsigned long 
 16800 ;;  counter         1    4[BANK0 ] unsigned char 
 16801 ;; Return value:  Size  Location     Type
 16802 ;;                  4   28[COMRAM] unsigned long 
 16803 ;; Registers used:
 16804 ;;		wreg, status,2, status,0
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16810 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16811 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16813 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;Total ram usage:       13 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    3
 16817 ;; This function calls:
 16818 ;;		Nothing
 16819 ;; This function is called by:
 16820 ;;		_printf
 16821 ;; This function uses a non-reentrant model
 16822 ;;
 16823                           
 16824                           	psect	text32
 16825  019CEC                     __ptext32:
 16826                           	opt stack 0
 16827  019CEC                     ___lldiv:
 16828                           	opt stack 24
 16829                           
 16830                           ; BSR set to: 0
 16831                           ;incstack = 0
 16832  019CEC  0E00               	movlw	0
 16833  019CEE  0100               	movlb	0	; () banked
 16834  019CF0  6F60               	movwf	___lldiv@quotient& (0+255),b
 16835  019CF2  0E00               	movlw	0
 16836  019CF4  6F61               	movwf	(___lldiv@quotient+1)& (0+255),b
 16837  019CF6  0E00               	movlw	0
 16838  019CF8  6F62               	movwf	(___lldiv@quotient+2)& (0+255),b
 16839  019CFA  0E00               	movlw	0
 16840  019CFC  6F63               	movwf	(___lldiv@quotient+3)& (0+255),b
 16841                           
 16842                           ; BSR set to: 0
 16843  019CFE  5021               	movf	___lldiv@divisor,w,c
 16844  019D00  1022               	iorwf	___lldiv@divisor+1,w,c
 16845  019D02  1023               	iorwf	___lldiv@divisor+2,w,c
 16846  019D04  1024               	iorwf	___lldiv@divisor+3,w,c
 16847  019D06  B4D8               	btfsc	status,2,c
 16848  019D08  D02F               	goto	l10838
 16849                           
 16850                           ; BSR set to: 0
 16851  019D0A  0E01               	movlw	1
 16852  019D0C  0100               	movlb	0	; () banked
 16853  019D0E  6F64               	movwf	___lldiv@counter& (0+255),b
 16854  019D10  D007               	goto	l19885
 16855  019D12                     l19883:
 16856                           
 16857                           ; BSR set to: 0
 16858  019D12  90D8               	bcf	status,0,c
 16859  019D14  3621               	rlcf	___lldiv@divisor,f,c
 16860  019D16  3622               	rlcf	___lldiv@divisor+1,f,c
 16861  019D18  3623               	rlcf	___lldiv@divisor+2,f,c
 16862  019D1A  3624               	rlcf	___lldiv@divisor+3,f,c
 16863  019D1C  0100               	movlb	0	; () banked
 16864  019D1E  2B64               	incf	___lldiv@counter& (0+255),f,b
 16865  019D20                     l19885:
 16866                           
 16867                           ; BSR set to: 0
 16868  019D20  AE24               	btfss	___lldiv@divisor+3,7,c
 16869  019D22  D7F7               	goto	l19883
 16870  019D24                     l19887:
 16871                           
 16872                           ; BSR set to: 0
 16873  019D24  0100               	movlb	0	; () banked
 16874  019D26  90D8               	bcf	status,0,c
 16875  019D28  3760               	rlcf	___lldiv@quotient& (0+255),f,b
 16876  019D2A  3761               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16877  019D2C  3762               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16878  019D2E  3763               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16879                           
 16880                           ; BSR set to: 0
 16881  019D30  5021               	movf	___lldiv@divisor,w,c
 16882  019D32  5C1D               	subwf	___lldiv@dividend,w,c
 16883  019D34  5022               	movf	___lldiv@divisor+1,w,c
 16884  019D36  581E               	subwfb	___lldiv@dividend+1,w,c
 16885  019D38  5023               	movf	___lldiv@divisor+2,w,c
 16886  019D3A  581F               	subwfb	___lldiv@dividend+2,w,c
 16887  019D3C  5024               	movf	___lldiv@divisor+3,w,c
 16888  019D3E  5820               	subwfb	___lldiv@dividend+3,w,c
 16889  019D40  A0D8               	btfss	status,0,c
 16890  019D42  D00A               	goto	l19895
 16891                           
 16892                           ; BSR set to: 0
 16893  019D44  5021               	movf	___lldiv@divisor,w,c
 16894  019D46  5E1D               	subwf	___lldiv@dividend,f,c
 16895  019D48  5022               	movf	___lldiv@divisor+1,w,c
 16896  019D4A  5A1E               	subwfb	___lldiv@dividend+1,f,c
 16897  019D4C  5023               	movf	___lldiv@divisor+2,w,c
 16898  019D4E  5A1F               	subwfb	___lldiv@dividend+2,f,c
 16899  019D50  5024               	movf	___lldiv@divisor+3,w,c
 16900  019D52  5A20               	subwfb	___lldiv@dividend+3,f,c
 16901                           
 16902                           ; BSR set to: 0
 16903  019D54  0100               	movlb	0	; () banked
 16904  019D56  8160               	bsf	___lldiv@quotient& (0+255),0,b
 16905  019D58                     l19895:
 16906                           
 16907                           ; BSR set to: 0
 16908  019D58  90D8               	bcf	status,0,c
 16909  019D5A  3224               	rrcf	___lldiv@divisor+3,f,c
 16910  019D5C  3223               	rrcf	___lldiv@divisor+2,f,c
 16911  019D5E  3222               	rrcf	___lldiv@divisor+1,f,c
 16912  019D60  3221               	rrcf	___lldiv@divisor,f,c
 16913                           
 16914                           ; BSR set to: 0
 16915  019D62  0100               	movlb	0	; () banked
 16916  019D64  2F64               	decfsz	___lldiv@counter& (0+255),f,b
 16917  019D66  D7DE               	goto	l19887
 16918  019D68                     l10838:
 16919                           
 16920                           ; BSR set to: 0
 16921  019D68  C060  F01D         	movff	___lldiv@quotient,?___lldiv
 16922  019D6C  C061  F01E         	movff	___lldiv@quotient+1,?___lldiv+1
 16923  019D70  C062  F01F         	movff	___lldiv@quotient+2,?___lldiv+2
 16924  019D74  C063  F020         	movff	___lldiv@quotient+3,?___lldiv+3
 16925                           
 16926                           ; BSR set to: 0
 16927  019D78  0012               	return		;funcret
 16928  019D7A                     __end_of___lldiv:
 16929                           	opt stack 0
 16930                           tblptru	equ	0xFF8
 16931                           tblptrh	equ	0xFF7
 16932                           tblptrl	equ	0xFF6
 16933                           tablat	equ	0xFF5
 16934                           prodh	equ	0xFF4
 16935                           prodl	equ	0xFF3
 16936                           intcon	equ	0xFF2
 16937                           postinc0	equ	0xFEE
 16938                           wreg	equ	0xFE8
 16939                           postdec1	equ	0xFE5
 16940                           fsr1h	equ	0xFE2
 16941                           fsr1l	equ	0xFE1
 16942                           indf2	equ	0xFDF
 16943                           postinc2	equ	0xFDE
 16944                           postdec2	equ	0xFDD
 16945                           fsr2h	equ	0xFDA
 16946                           fsr2l	equ	0xFD9
 16947                           status	equ	0xFD8
 16948                           
 16949 ;; *************** function _RTC_GetDateTime *****************
 16950 ;; Defined at:
 16951 ;;		line 53 in file "RTC.c"
 16952 ;; Parameters:    Size  Location     Type
 16953 ;;  rtc             2   30[COMRAM] PTR struct .
 16954 ;;		 -> rtc(7), 
 16955 ;; Auto vars:     Size  Location     Type
 16956 ;;		None
 16957 ;; Return value:  Size  Location     Type
 16958 ;;                  1    wreg      void 
 16959 ;; Registers used:
 16960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16961 ;; Tracked objects:
 16962 ;;		On entry : 0/0
 16963 ;;		On exit  : 0/0
 16964 ;;		Unchanged: 0/0
 16965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16966 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16969 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16970 ;;Total ram usage:        2 bytes
 16971 ;; Hardware stack levels used:    1
 16972 ;; Hardware stack levels required when called:    5
 16973 ;; This function calls:
 16974 ;;		_I2C_Read
 16975 ;;		_I2C_Start
 16976 ;;		_I2C_Stop
 16977 ;;		_I2C_Write
 16978 ;; This function is called by:
 16979 ;;		_UART_Data
 16980 ;; This function uses a non-reentrant model
 16981 ;;
 16982                           
 16983                           	psect	text33
 16984  01989C                     __ptext33:
 16985                           	opt stack 0
 16986  01989C                     _RTC_GetDateTime:
 16987                           	opt stack 23
 16988                           
 16989                           ;RTC.c: 55: I2C_Start();
 16990                           
 16991                           ; BSR set to: 0
 16992                           ;incstack = 0
 16993  01989C  EC74  F0D5         	call	_I2C_Start	;wreg free
 16994                           
 16995                           ;RTC.c: 57: I2C_Write(0xD0u);
 16996  0198A0  0ED0               	movlw	208
 16997  0198A2  EC00  F0D5         	call	_I2C_Write
 16998                           
 16999                           ;RTC.c: 58: I2C_Write(0x00u);
 17000  0198A6  0E00               	movlw	0
 17001  0198A8  EC00  F0D5         	call	_I2C_Write
 17002                           
 17003                           ;RTC.c: 60: I2C_Stop();
 17004  0198AC  EC70  F0D5         	call	_I2C_Stop	;wreg free
 17005                           
 17006                           ;RTC.c: 62: I2C_Start();
 17007  0198B0  EC74  F0D5         	call	_I2C_Start	;wreg free
 17008                           
 17009                           ;RTC.c: 63: I2C_Write(0xD1u);
 17010  0198B4  0ED1               	movlw	209
 17011  0198B6  EC00  F0D5         	call	_I2C_Write
 17012                           
 17013                           ;RTC.c: 65: rtc->sec = I2C_Read(1);
 17014  0198BA  0E01               	movlw	1
 17015  0198BC  EC38  F0D4         	call	_I2C_Read
 17016  0198C0  C01F  FFD9         	movff	RTC_GetDateTime@rtc,fsr2l
 17017  0198C4  C020  FFDA         	movff	RTC_GetDateTime@rtc+1,fsr2h
 17018  0198C8  6EDF               	movwf	indf2,c
 17019                           
 17020                           ;RTC.c: 66: rtc->min = I2C_Read(1);
 17021  0198CA  EE20 F001          	lfsr	2,1
 17022  0198CE  501F               	movf	RTC_GetDateTime@rtc,w,c
 17023  0198D0  26D9               	addwf	fsr2l,f,c
 17024  0198D2  5020               	movf	RTC_GetDateTime@rtc+1,w,c
 17025  0198D4  22DA               	addwfc	fsr2h,f,c
 17026  0198D6  0E01               	movlw	1
 17027  0198D8  EC38  F0D4         	call	_I2C_Read
 17028  0198DC  6EDF               	movwf	indf2,c
 17029                           
 17030                           ;RTC.c: 67: rtc->hour= I2C_Read(1);
 17031  0198DE  EE20 F002          	lfsr	2,2
 17032  0198E2  501F               	movf	RTC_GetDateTime@rtc,w,c
 17033  0198E4  26D9               	addwf	fsr2l,f,c
 17034  0198E6  5020               	movf	RTC_GetDateTime@rtc+1,w,c
 17035  0198E8  22DA               	addwfc	fsr2h,f,c
 17036  0198EA  0E01               	movlw	1
 17037  0198EC  EC38  F0D4         	call	_I2C_Read
 17038  0198F0  6EDF               	movwf	indf2,c
 17039                           
 17040                           ;RTC.c: 68: rtc->weekDay = I2C_Read(1);
 17041  0198F2  EE20 F003          	lfsr	2,3
 17042  0198F6  501F               	movf	RTC_GetDateTime@rtc,w,c
 17043  0198F8  26D9               	addwf	fsr2l,f,c
 17044  0198FA  5020               	movf	RTC_GetDateTime@rtc+1,w,c
 17045  0198FC  22DA               	addwfc	fsr2h,f,c
 17046  0198FE  0E01               	movlw	1
 17047  019900  EC38  F0D4         	call	_I2C_Read
 17048  019904  6EDF               	movwf	indf2,c
 17049                           
 17050                           ;RTC.c: 69: rtc->date= I2C_Read(1);
 17051  019906  EE20 F004          	lfsr	2,4
 17052  01990A  501F               	movf	RTC_GetDateTime@rtc,w,c
 17053  01990C  26D9               	addwf	fsr2l,f,c
 17054  01990E  5020               	movf	RTC_GetDateTime@rtc+1,w,c
 17055  019910  22DA               	addwfc	fsr2h,f,c
 17056  019912  0E01               	movlw	1
 17057  019914  EC38  F0D4         	call	_I2C_Read
 17058  019918  6EDF               	movwf	indf2,c
 17059                           
 17060                           ;RTC.c: 70: rtc->month=I2C_Read(1);
 17061  01991A  EE20 F005          	lfsr	2,5
 17062  01991E  501F               	movf	RTC_GetDateTime@rtc,w,c
 17063  019920  26D9               	addwf	fsr2l,f,c
 17064  019922  5020               	movf	RTC_GetDateTime@rtc+1,w,c
 17065  019924  22DA               	addwfc	fsr2h,f,c
 17066  019926  0E01               	movlw	1
 17067  019928  EC38  F0D4         	call	_I2C_Read
 17068  01992C  6EDF               	movwf	indf2,c
 17069                           
 17070                           ;RTC.c: 71: rtc->year =I2C_Read(0);
 17071  01992E  EE20 F006          	lfsr	2,6
 17072  019932  501F               	movf	RTC_GetDateTime@rtc,w,c
 17073  019934  26D9               	addwf	fsr2l,f,c
 17074  019936  5020               	movf	RTC_GetDateTime@rtc+1,w,c
 17075  019938  22DA               	addwfc	fsr2h,f,c
 17076  01993A  0E00               	movlw	0
 17077  01993C  EC38  F0D4         	call	_I2C_Read
 17078  019940  6EDF               	movwf	indf2,c
 17079                           
 17080                           ;RTC.c: 73: I2C_Stop();
 17081  019942  EC70  F0D5         	call	_I2C_Stop	;wreg free
 17082  019946  0012               	return		;funcret
 17083  019948                     __end_of_RTC_GetDateTime:
 17084                           	opt stack 0
 17085                           tblptru	equ	0xFF8
 17086                           tblptrh	equ	0xFF7
 17087                           tblptrl	equ	0xFF6
 17088                           tablat	equ	0xFF5
 17089                           prodh	equ	0xFF4
 17090                           prodl	equ	0xFF3
 17091                           intcon	equ	0xFF2
 17092                           postinc0	equ	0xFEE
 17093                           wreg	equ	0xFE8
 17094                           postdec1	equ	0xFE5
 17095                           fsr1h	equ	0xFE2
 17096                           fsr1l	equ	0xFE1
 17097                           indf2	equ	0xFDF
 17098                           postinc2	equ	0xFDE
 17099                           postdec2	equ	0xFDD
 17100                           fsr2h	equ	0xFDA
 17101                           fsr2l	equ	0xFD9
 17102                           status	equ	0xFD8
 17103                           
 17104 ;; *************** function _I2C_Read *****************
 17105 ;; Defined at:
 17106 ;;		line 89 in file "RTC.c"
 17107 ;; Parameters:    Size  Location     Type
 17108 ;;  v_ackOption_    1    wreg     unsigned char 
 17109 ;; Auto vars:     Size  Location     Type
 17110 ;;  v_ackOption_    1   28[COMRAM] unsigned char 
 17111 ;;  v_i2cData_u8    1   29[COMRAM] unsigned char 
 17112 ;; Return value:  Size  Location     Type
 17113 ;;                  1    wreg      unsigned char 
 17114 ;; Registers used:
 17115 ;;		wreg, status,2, status,0, cstack
 17116 ;; Tracked objects:
 17117 ;;		On entry : 0/0
 17118 ;;		On exit  : 0/0
 17119 ;;		Unchanged: 0/0
 17120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17122 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17124 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17125 ;;Total ram usage:        2 bytes
 17126 ;; Hardware stack levels used:    1
 17127 ;; Hardware stack levels required when called:    4
 17128 ;; This function calls:
 17129 ;;		_i2c_Ack
 17130 ;;		_i2c_NoAck
 17131 ;;		_i2c_WaitForIdle
 17132 ;; This function is called by:
 17133 ;;		_RTC_GetDateTime
 17134 ;; This function uses a non-reentrant model
 17135 ;;
 17136                           
 17137                           	psect	text34
 17138  01A870                     __ptext34:
 17139                           	opt stack 0
 17140  01A870                     _I2C_Read:
 17141                           	opt stack 23
 17142                           
 17143                           ;incstack = 0
 17144                           ;I2C_Read@v_ackOption_u8 stored from wreg
 17145  01A870  6E1D               	movwf	I2C_Read@v_ackOption_u8,c
 17146                           
 17147                           ;RTC.c: 91: uint8_t v_i2cData_u8=0x00;
 17148  01A872  0E00               	movlw	0
 17149  01A874  6E1E               	movwf	I2C_Read@v_i2cData_u8,c
 17150                           
 17151                           ;RTC.c: 93: SSP1CON2bits.RCEN = 1;
 17152  01A876  86C5               	bsf	4037,3,c	;volatile
 17153  01A878                     l1011:
 17154  01A878  A0C7               	btfss	4039,0,c	;volatile
 17155  01A87A  D7FE               	goto	l1011
 17156                           
 17157                           ;RTC.c: 95: v_i2cData_u8 = SSP1BUF;
 17158  01A87C  CFC9 F01E          	movff	4041,I2C_Read@v_i2cData_u8	;volatile
 17159                           
 17160                           ;RTC.c: 96: i2c_WaitForIdle();
 17161  01A880  ECF7  F0D4         	call	_i2c_WaitForIdle	;wreg free
 17162                           
 17163                           ;RTC.c: 98: if(v_ackOption_u8==1)
 17164  01A884  041D               	decf	I2C_Read@v_ackOption_u8,w,c
 17165  01A886  A4D8               	btfss	status,2,c
 17166  01A888  D003               	goto	l16033
 17167                           
 17168                           ;RTC.c: 99: {
 17169                           ;RTC.c: 100: i2c_Ack();
 17170  01A88A  EC4D  F0D5         	call	_i2c_Ack	;wreg free
 17171                           
 17172                           ;RTC.c: 101: }
 17173  01A88E  D002               	goto	l16035
 17174  01A890                     l16033:
 17175                           
 17176                           ;RTC.c: 102: else
 17177                           ;RTC.c: 103: {
 17178                           ;RTC.c: 104: i2c_NoAck();
 17179  01A890  EC48  F0D5         	call	_i2c_NoAck	;wreg free
 17180  01A894                     l16035:
 17181                           
 17182                           ;RTC.c: 105: }
 17183                           ;RTC.c: 107: return v_i2cData_u8;
 17184  01A894  501E               	movf	I2C_Read@v_i2cData_u8,w,c
 17185  01A896  0012               	return	
 17186  01A898                     __end_of_I2C_Read:
 17187                           	opt stack 0
 17188                           tblptru	equ	0xFF8
 17189                           tblptrh	equ	0xFF7
 17190                           tblptrl	equ	0xFF6
 17191                           tablat	equ	0xFF5
 17192                           prodh	equ	0xFF4
 17193                           prodl	equ	0xFF3
 17194                           intcon	equ	0xFF2
 17195                           postinc0	equ	0xFEE
 17196                           wreg	equ	0xFE8
 17197                           postdec1	equ	0xFE5
 17198                           fsr1h	equ	0xFE2
 17199                           fsr1l	equ	0xFE1
 17200                           indf2	equ	0xFDF
 17201                           postinc2	equ	0xFDE
 17202                           postdec2	equ	0xFDD
 17203                           fsr2h	equ	0xFDA
 17204                           fsr2l	equ	0xFD9
 17205                           status	equ	0xFD8
 17206                           
 17207 ;; *************** function _i2c_NoAck *****************
 17208 ;; Defined at:
 17209 ;;		line 122 in file "RTC.c"
 17210 ;; Parameters:    Size  Location     Type
 17211 ;;		None
 17212 ;; Auto vars:     Size  Location     Type
 17213 ;;		None
 17214 ;; Return value:  Size  Location     Type
 17215 ;;                  1    wreg      void 
 17216 ;; Registers used:
 17217 ;;		None
 17218 ;; Tracked objects:
 17219 ;;		On entry : 0/0
 17220 ;;		On exit  : 0/0
 17221 ;;		Unchanged: 0/0
 17222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17227 ;;Total ram usage:        0 bytes
 17228 ;; Hardware stack levels used:    1
 17229 ;; Hardware stack levels required when called:    3
 17230 ;; This function calls:
 17231 ;;		Nothing
 17232 ;; This function is called by:
 17233 ;;		_I2C_Read
 17234 ;; This function uses a non-reentrant model
 17235 ;;
 17236                           
 17237                           	psect	text35
 17238  01AA90                     __ptext35:
 17239                           	opt stack 0
 17240  01AA90                     _i2c_NoAck:
 17241                           	opt stack 23
 17242                           
 17243                           ;RTC.c: 124: SSP1CON2bits.ACKDT = 1;
 17244                           
 17245                           ;incstack = 0
 17246  01AA90  8AC5               	bsf	4037,5,c	;volatile
 17247                           
 17248                           ;RTC.c: 125: SSP1CON2bits.ACKEN = 1;
 17249  01AA92  88C5               	bsf	4037,4,c	;volatile
 17250  01AA94                     l1031:
 17251  01AA94  A8C5               	btfss	4037,4,c	;volatile
 17252  01AA96  0012               	return	
 17253  01AA98  D7FD               	goto	l1031
 17254  01AA9A                     __end_of_i2c_NoAck:
 17255                           	opt stack 0
 17256                           tblptru	equ	0xFF8
 17257                           tblptrh	equ	0xFF7
 17258                           tblptrl	equ	0xFF6
 17259                           tablat	equ	0xFF5
 17260                           prodh	equ	0xFF4
 17261                           prodl	equ	0xFF3
 17262                           intcon	equ	0xFF2
 17263                           postinc0	equ	0xFEE
 17264                           wreg	equ	0xFE8
 17265                           postdec1	equ	0xFE5
 17266                           fsr1h	equ	0xFE2
 17267                           fsr1l	equ	0xFE1
 17268                           indf2	equ	0xFDF
 17269                           postinc2	equ	0xFDE
 17270                           postdec2	equ	0xFDD
 17271                           fsr2h	equ	0xFDA
 17272                           fsr2l	equ	0xFD9
 17273                           status	equ	0xFD8
 17274                           
 17275 ;; *************** function _i2c_Ack *****************
 17276 ;; Defined at:
 17277 ;;		line 128 in file "RTC.c"
 17278 ;; Parameters:    Size  Location     Type
 17279 ;;		None
 17280 ;; Auto vars:     Size  Location     Type
 17281 ;;		None
 17282 ;; Return value:  Size  Location     Type
 17283 ;;                  1    wreg      void 
 17284 ;; Registers used:
 17285 ;;		None
 17286 ;; Tracked objects:
 17287 ;;		On entry : 0/0
 17288 ;;		On exit  : 0/0
 17289 ;;		Unchanged: 0/0
 17290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17295 ;;Total ram usage:        0 bytes
 17296 ;; Hardware stack levels used:    1
 17297 ;; Hardware stack levels required when called:    3
 17298 ;; This function calls:
 17299 ;;		Nothing
 17300 ;; This function is called by:
 17301 ;;		_I2C_Read
 17302 ;; This function uses a non-reentrant model
 17303 ;;
 17304                           
 17305                           	psect	text36
 17306  01AA9A                     __ptext36:
 17307                           	opt stack 0
 17308  01AA9A                     _i2c_Ack:
 17309                           	opt stack 23
 17310                           
 17311                           ;RTC.c: 130: SSP1CON2bits.ACKDT = 0;
 17312                           
 17313                           ;incstack = 0
 17314  01AA9A  9AC5               	bcf	4037,5,c	;volatile
 17315                           
 17316                           ;RTC.c: 131: SSP1CON2bits.ACKEN = 1;
 17317  01AA9C  88C5               	bsf	4037,4,c	;volatile
 17318  01AA9E                     l1037:
 17319  01AA9E  A8C5               	btfss	4037,4,c	;volatile
 17320  01AAA0  0012               	return	
 17321  01AAA2  D7FD               	goto	l1037
 17322  01AAA4                     __end_of_i2c_Ack:
 17323                           	opt stack 0
 17324                           tblptru	equ	0xFF8
 17325                           tblptrh	equ	0xFF7
 17326                           tblptrl	equ	0xFF6
 17327                           tablat	equ	0xFF5
 17328                           prodh	equ	0xFF4
 17329                           prodl	equ	0xFF3
 17330                           intcon	equ	0xFF2
 17331                           postinc0	equ	0xFEE
 17332                           wreg	equ	0xFE8
 17333                           postdec1	equ	0xFE5
 17334                           fsr1h	equ	0xFE2
 17335                           fsr1l	equ	0xFE1
 17336                           indf2	equ	0xFDF
 17337                           postinc2	equ	0xFDE
 17338                           postdec2	equ	0xFDD
 17339                           fsr2h	equ	0xFDA
 17340                           fsr2l	equ	0xFD9
 17341                           status	equ	0xFD8
 17342                           
 17343 ;; *************** function _BCDtoI *****************
 17344 ;; Defined at:
 17345 ;;		line 13 in file "RTC.c"
 17346 ;; Parameters:    Size  Location     Type
 17347 ;;  BCD             2   10[BANK0 ] unsigned int 
 17348 ;; Auto vars:     Size  Location     Type
 17349 ;;  result          2   15[BANK0 ] unsigned int 
 17350 ;; Return value:  Size  Location     Type
 17351 ;;                  2   10[BANK0 ] unsigned int 
 17352 ;; Registers used:
 17353 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 17354 ;; Tracked objects:
 17355 ;;		On entry : 0/0
 17356 ;;		On exit  : 0/0
 17357 ;;		Unchanged: 0/0
 17358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17359 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17361 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17362 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17363 ;;Total ram usage:        7 bytes
 17364 ;; Hardware stack levels used:    1
 17365 ;; Hardware stack levels required when called:    4
 17366 ;; This function calls:
 17367 ;;		___wmul
 17368 ;; This function is called by:
 17369 ;;		_UART_Data
 17370 ;; This function uses a non-reentrant model
 17371 ;;
 17372                           
 17373                           	psect	text37
 17374  018DA2                     __ptext37:
 17375                           	opt stack 0
 17376  018DA2                     _BCDtoI:
 17377                           	opt stack 24
 17378                           
 17379                           ;RTC.c: 15: unsigned int result;
 17380                           ;RTC.c: 16: result=(BCD>>12)*1000;
 17381                           
 17382                           ;incstack = 0
 17383  018DA2  0100               	movlb	0	; () banked
 17384  018DA4  396B               	swapf	(BCDtoI@BCD+1)& (0+255),w,b
 17385  018DA6  0B0F               	andlw	15
 17386  018DA8  0100               	movlb	0	; () banked
 17387  018DAA  6F64               	movwf	___wmul@multiplier& (0+255),b
 17388  018DAC  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17389  018DAE  0E03               	movlw	3
 17390  018DB0  0100               	movlb	0	; () banked
 17391  018DB2  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17392  018DB4  0EE8               	movlw	232
 17393  018DB6  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17394  018DB8  EC4B  F0D3         	call	___wmul	;wreg free
 17395  018DBC  C064  F06F         	movff	?___wmul,BCDtoI@result
 17396  018DC0  C065  F070         	movff	?___wmul+1,BCDtoI@result+1
 17397                           
 17398                           ;RTC.c: 17: result+=((BCD>>8)&0x0f)*100;
 17399  018DC4  C06A  F06C         	movff	BCDtoI@BCD,??_BCDtoI
 17400  018DC8  C06B  F06D         	movff	BCDtoI@BCD+1,??_BCDtoI+1
 17401  018DCC  C06D  F06C         	movff	??_BCDtoI+1,??_BCDtoI
 17402  018DD0  0100               	movlb	0	; () banked
 17403  018DD2  6B6D               	clrf	(??_BCDtoI+1)& (0+255),b
 17404  018DD4  0E0F               	movlw	15
 17405  018DD6  0100               	movlb	0	; () banked
 17406  018DD8  156C               	andwf	??_BCDtoI& (0+255),w,b
 17407  018DDA  0100               	movlb	0	; () banked
 17408  018DDC  6F64               	movwf	___wmul@multiplier& (0+255),b
 17409  018DDE  0100               	movlb	0	; () banked
 17410  018DE0  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17411  018DE2  0E00               	movlw	0
 17412  018DE4  0100               	movlb	0	; () banked
 17413  018DE6  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17414  018DE8  0E64               	movlw	100
 17415  018DEA  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17416  018DEC  EC4B  F0D3         	call	___wmul	;wreg free
 17417  018DF0  0100               	movlb	0	; () banked
 17418  018DF2  5164               	movf	?___wmul& (0+255),w,b
 17419  018DF4  0100               	movlb	0	; () banked
 17420  018DF6  276F               	addwf	BCDtoI@result& (0+255),f,b
 17421  018DF8  0100               	movlb	0	; () banked
 17422  018DFA  5165               	movf	(?___wmul+1)& (0+255),w,b
 17423  018DFC  0100               	movlb	0	; () banked
 17424  018DFE  2370               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 17425                           
 17426                           ;RTC.c: 18: result+=((BCD>>4)&0x0f)*10;
 17427  018E00  C06A  F06C         	movff	BCDtoI@BCD,??_BCDtoI
 17428  018E04  C06B  F06D         	movff	BCDtoI@BCD+1,??_BCDtoI+1
 17429  018E08  0E04               	movlw	4
 17430  018E0A  0100               	movlb	0	; () banked
 17431  018E0C  6F6E               	movwf	(??_BCDtoI+2)& (0+255),b
 17432  018E0E                     u13795:
 17433  018E0E  0100               	movlb	0	; () banked
 17434  018E10  90D8               	bcf	status,0,c
 17435  018E12  336D               	rrcf	(??_BCDtoI+1)& (0+255),f,b
 17436  018E14  336C               	rrcf	??_BCDtoI& (0+255),f,b
 17437  018E16  0100               	movlb	0	; () banked
 17438  018E18  2F6E               	decfsz	(??_BCDtoI+2)& (0+255),f,b
 17439  018E1A  D7F9               	goto	u13795
 17440  018E1C  0E0F               	movlw	15
 17441  018E1E  0100               	movlb	0	; () banked
 17442  018E20  156C               	andwf	??_BCDtoI& (0+255),w,b
 17443  018E22  0100               	movlb	0	; () banked
 17444  018E24  6F64               	movwf	___wmul@multiplier& (0+255),b
 17445  018E26  0100               	movlb	0	; () banked
 17446  018E28  6B65               	clrf	(___wmul@multiplier+1)& (0+255),b
 17447  018E2A  0E00               	movlw	0
 17448  018E2C  0100               	movlb	0	; () banked
 17449  018E2E  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17450  018E30  0E0A               	movlw	10
 17451  018E32  6F66               	movwf	___wmul@multiplicand& (0+255),b
 17452  018E34  EC4B  F0D3         	call	___wmul	;wreg free
 17453  018E38  0100               	movlb	0	; () banked
 17454  018E3A  5164               	movf	?___wmul& (0+255),w,b
 17455  018E3C  0100               	movlb	0	; () banked
 17456  018E3E  276F               	addwf	BCDtoI@result& (0+255),f,b
 17457  018E40  0100               	movlb	0	; () banked
 17458  018E42  5165               	movf	(?___wmul+1)& (0+255),w,b
 17459  018E44  0100               	movlb	0	; () banked
 17460  018E46  2370               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 17461                           
 17462                           ; BSR set to: 0
 17463                           ;RTC.c: 19: result+=((BCD)&0x0f);
 17464  018E48  0E0F               	movlw	15
 17465  018E4A  0100               	movlb	0	; () banked
 17466  018E4C  156A               	andwf	BCDtoI@BCD& (0+255),w,b
 17467  018E4E  0100               	movlb	0	; () banked
 17468  018E50  6F6C               	movwf	??_BCDtoI& (0+255),b
 17469  018E52  0E00               	movlw	0
 17470  018E54  0100               	movlb	0	; () banked
 17471  018E56  156B               	andwf	(BCDtoI@BCD+1)& (0+255),w,b
 17472  018E58  0100               	movlb	0	; () banked
 17473  018E5A  6F6D               	movwf	(??_BCDtoI+1)& (0+255),b
 17474  018E5C  0100               	movlb	0	; () banked
 17475  018E5E  516C               	movf	??_BCDtoI& (0+255),w,b
 17476  018E60  0100               	movlb	0	; () banked
 17477  018E62  276F               	addwf	BCDtoI@result& (0+255),f,b
 17478  018E64  0100               	movlb	0	; () banked
 17479  018E66  516D               	movf	(??_BCDtoI+1)& (0+255),w,b
 17480  018E68  0100               	movlb	0	; () banked
 17481  018E6A  2370               	addwfc	(BCDtoI@result+1)& (0+255),f,b
 17482                           
 17483                           ; BSR set to: 0
 17484                           ;RTC.c: 20: return result;
 17485  018E6C  C06F  F06A         	movff	BCDtoI@result,?_BCDtoI
 17486  018E70  C070  F06B         	movff	BCDtoI@result+1,?_BCDtoI+1
 17487  018E74  0012               	return	
 17488  018E76                     __end_of_BCDtoI:
 17489                           	opt stack 0
 17490                           tblptru	equ	0xFF8
 17491                           tblptrh	equ	0xFF7
 17492                           tblptrl	equ	0xFF6
 17493                           tablat	equ	0xFF5
 17494                           prodh	equ	0xFF4
 17495                           prodl	equ	0xFF3
 17496                           intcon	equ	0xFF2
 17497                           postinc0	equ	0xFEE
 17498                           wreg	equ	0xFE8
 17499                           postdec1	equ	0xFE5
 17500                           fsr1h	equ	0xFE2
 17501                           fsr1l	equ	0xFE1
 17502                           indf2	equ	0xFDF
 17503                           postinc2	equ	0xFDE
 17504                           postdec2	equ	0xFDD
 17505                           fsr2h	equ	0xFDA
 17506                           fsr2l	equ	0xFD9
 17507                           status	equ	0xFD8
 17508                           
 17509 ;; *************** function _Turbine_Start_up_1_Second *****************
 17510 ;; Defined at:
 17511 ;;		line 87 in file "OneSecond_Function.c"
 17512 ;; Parameters:    Size  Location     Type
 17513 ;;		None
 17514 ;; Auto vars:     Size  Location     Type
 17515 ;;		None
 17516 ;; Return value:  Size  Location     Type
 17517 ;;                  1    wreg      void 
 17518 ;; Registers used:
 17519 ;;		wreg, status,2, status,0, cstack
 17520 ;; Tracked objects:
 17521 ;;		On entry : 0/0
 17522 ;;		On exit  : 0/0
 17523 ;;		Unchanged: 0/0
 17524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17529 ;;Total ram usage:        0 bytes
 17530 ;; Hardware stack levels used:    1
 17531 ;; Hardware stack levels required when called:    4
 17532 ;; This function calls:
 17533 ;;		_Error_Scan_start_up
 17534 ;;		_VFD_Data_Kill
 17535 ;; This function is called by:
 17536 ;;		_Timer0_OneSecond_Function
 17537 ;; This function uses a non-reentrant model
 17538 ;;
 17539                           
 17540                           	psect	text38
 17541  01AAA4                     __ptext38:
 17542                           	opt stack 0
 17543  01AAA4                     _Turbine_Start_up_1_Second:
 17544                           	opt stack 25
 17545                           
 17546                           ;OneSecond_Function.c: 89: Error_Scan_start_up();
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;incstack = 0
 17550  01AAA4  EC16  F0C4         	call	_Error_Scan_start_up	;wreg free
 17551                           
 17552                           ;OneSecond_Function.c: 90: VFD_Data_Kill();
 17553  01AAA8  EC98  F0D3         	call	_VFD_Data_Kill	;wreg free
 17554  01AAAC  0012               	return		;funcret
 17555  01AAAE                     __end_of_Turbine_Start_up_1_Second:
 17556                           	opt stack 0
 17557                           tblptru	equ	0xFF8
 17558                           tblptrh	equ	0xFF7
 17559                           tblptrl	equ	0xFF6
 17560                           tablat	equ	0xFF5
 17561                           prodh	equ	0xFF4
 17562                           prodl	equ	0xFF3
 17563                           intcon	equ	0xFF2
 17564                           postinc0	equ	0xFEE
 17565                           wreg	equ	0xFE8
 17566                           postdec1	equ	0xFE5
 17567                           fsr1h	equ	0xFE2
 17568                           fsr1l	equ	0xFE1
 17569                           indf2	equ	0xFDF
 17570                           postinc2	equ	0xFDE
 17571                           postdec2	equ	0xFDD
 17572                           fsr2h	equ	0xFDA
 17573                           fsr2l	equ	0xFD9
 17574                           status	equ	0xFD8
 17575                           
 17576 ;; *************** function _Error_Scan_start_up *****************
 17577 ;; Defined at:
 17578 ;;		line 26 in file "ERROR_HANDLING.c"
 17579 ;; Parameters:    Size  Location     Type
 17580 ;;		None
 17581 ;; Auto vars:     Size  Location     Type
 17582 ;;		None
 17583 ;; Return value:  Size  Location     Type
 17584 ;;                  1    wreg      void 
 17585 ;; Registers used:
 17586 ;;		wreg, status,2, status,0
 17587 ;; Tracked objects:
 17588 ;;		On entry : 0/0
 17589 ;;		On exit  : 0/0
 17590 ;;		Unchanged: 0/0
 17591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17596 ;;Total ram usage:        0 bytes
 17597 ;; Hardware stack levels used:    1
 17598 ;; Hardware stack levels required when called:    3
 17599 ;; This function calls:
 17600 ;;		Nothing
 17601 ;; This function is called by:
 17602 ;;		_Turbine_Start_up_1_Second
 17603 ;; This function uses a non-reentrant model
 17604 ;;
 17605                           
 17606                           	psect	text39
 17607  01882C                     __ptext39:
 17608                           	opt stack 0
 17609  01882C                     _Error_Scan_start_up:
 17610                           	opt stack 25
 17611                           
 17612                           ;ERROR_HANDLING.c: 28: if(EEPROM_Error_Flag == 1 || Feedback_Error == 1 || Grid_Over_cur
      +                          rent == 1 || VFD_communication_Error_Flag == 1 || Start_Stop_Flag == 1 || Grid_Und_volta
      +                          ge==1 || Wind_Cut_In_Flag ==0 || Grid_Phase_Sequence_Error == 1 || Grid_Frequency_Error 
      +                          == 1 || W
 17613                           
 17614                           ;incstack = 0
 17615  01882C  0436               	decf	_EEPROM_Error_Flag,w,c
 17616  01882E  B4D8               	btfsc	status,2,c
 17617  018830  D027               	goto	l16811
 17618  018832  0101               	movlb	1	; () banked
 17619  018834  0572               	decf	_Feedback_Error& (0+255),w,b
 17620  018836  B4D8               	btfsc	status,2,c
 17621  018838  D023               	goto	l16811
 17622                           
 17623                           ; BSR set to: 1
 17624  01883A  0100               	movlb	0	; () banked
 17625  01883C  05D6               	decf	_Grid_Over_current& (0+255),w,b
 17626  01883E  B4D8               	btfsc	status,2,c
 17627  018840  D01F               	goto	l16811
 17628                           
 17629                           ; BSR set to: 0
 17630  018842  0100               	movlb	0	; () banked
 17631  018844  05D9               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 17632  018846  B4D8               	btfsc	status,2,c
 17633  018848  D01B               	goto	l16811
 17634                           
 17635                           ; BSR set to: 0
 17636  01884A  043D               	decf	_Start_Stop_Flag,w,c
 17637  01884C  B4D8               	btfsc	status,2,c
 17638  01884E  D018               	goto	l16811
 17639                           
 17640                           ; BSR set to: 0
 17641  018850  0101               	movlb	1	; () banked
 17642  018852  059F               	decf	_Grid_Und_voltage& (0+255),w,b
 17643  018854  B4D8               	btfsc	status,2,c
 17644  018856  D014               	goto	l16811
 17645                           
 17646                           ; BSR set to: 1
 17647  018858  0101               	movlb	1	; () banked
 17648  01885A  51DB               	movf	_Wind_Cut_In_Flag& (0+255),w,b
 17649  01885C  B4D8               	btfsc	status,2,c
 17650  01885E  D010               	goto	l16811
 17651                           
 17652                           ; BSR set to: 1
 17653  018860  0101               	movlb	1	; () banked
 17654  018862  059D               	decf	_Grid_Phase_Sequence_Error& (0+255),w,b
 17655  018864  B4D8               	btfsc	status,2,c
 17656  018866  D00C               	goto	l16811
 17657                           
 17658                           ; BSR set to: 1
 17659  018868  0101               	movlb	1	; () banked
 17660  01886A  059A               	decf	_Grid_Frequency_Error& (0+255),w,b
 17661  01886C  B4D8               	btfsc	status,2,c
 17662  01886E  D008               	goto	l16811
 17663                           
 17664                           ; BSR set to: 1
 17665  018870  0101               	movlb	1	; () banked
 17666  018872  05DD               	decf	_Wind_Cut_Out_Flag& (0+255),w,b
 17667  018874  B4D8               	btfsc	status,2,c
 17668  018876  D004               	goto	l16811
 17669                           
 17670                           ; BSR set to: 1
 17671  018878  0101               	movlb	1	; () banked
 17672  01887A  059C               	decf	_Grid_Ovr_voltage& (0+255),w,b
 17673  01887C  A4D8               	btfss	status,2,c
 17674  01887E  D009               	goto	l6134
 17675  018880                     l16811:
 17676                           
 17677                           ;ERROR_HANDLING.c: 29: {
 17678                           ;ERROR_HANDLING.c: 30: Start_up_Error = 1;
 17679  018880  0E01               	movlw	1
 17680  018882  0101               	movlb	1	; () banked
 17681  018884  6FFF               	movwf	_Start_up_Error& (0+255),b
 17682                           
 17683                           ;ERROR_HANDLING.c: 31: Initial_Delay_Second = 0;
 17684  018886  0E00               	movlw	0
 17685  018888  0101               	movlb	1	; () banked
 17686  01888A  6F46               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 17687  01888C  0E00               	movlw	0
 17688  01888E  6F45               	movwf	_Initial_Delay_Second& (0+255),b
 17689                           
 17690                           ; BSR set to: 1
 17691                           ;ERROR_HANDLING.c: 32: RA5 = 1;
 17692  018890  8A80               	bsf	3968,5,c	;volatile
 17693  018892                     l6134:
 17694                           
 17695                           ; BSR set to: 1
 17696                           ;ERROR_HANDLING.c: 33: }
 17697                           ;ERROR_HANDLING.c: 34: if(EEPROM_Error_Flag == 0 && Feedback_Error == 0 && Gen_EP_Err_Fl
      +                          ag == 0 && Pitch_EP_Err_Flag == 0 && Grid_Over_current == 0 && VFD_communication_Error_F
      +                          lag == 0 && Start_Stop_Flag == 0 && Grid_Und_voltage == 0 && Wind_Cut_In_Flag == 1 && Gr
      +                          id_Phase_
 17698  018892  5036               	movf	_EEPROM_Error_Flag,w,c
 17699  018894  A4D8               	btfss	status,2,c
 17700  018896  0012               	return	
 17701                           
 17702                           ; BSR set to: 1
 17703  018898  0101               	movlb	1	; () banked
 17704  01889A  5172               	movf	_Feedback_Error& (0+255),w,b
 17705  01889C  0101               	movlb	1	; () banked
 17706  01889E  A4D8               	btfss	status,2,c
 17707  0188A0  0012               	return	
 17708                           
 17709                           ; BSR set to: 1
 17710  0188A2  0101               	movlb	1	; () banked
 17711  0188A4  5195               	movf	_Gen_EP_Err_Flag& (0+255),w,b
 17712  0188A6  A4D8               	btfss	status,2,c
 17713  0188A8  0012               	return	
 17714                           
 17715                           ; BSR set to: 1
 17716  0188AA  0101               	movlb	1	; () banked
 17717  0188AC  51B0               	movf	_Pitch_EP_Err_Flag& (0+255),w,b
 17718  0188AE  A4D8               	btfss	status,2,c
 17719  0188B0  0012               	return	
 17720                           
 17721                           ; BSR set to: 1
 17722  0188B2  0100               	movlb	0	; () banked
 17723  0188B4  51D6               	movf	_Grid_Over_current& (0+255),w,b
 17724  0188B6  A4D8               	btfss	status,2,c
 17725  0188B8  0012               	return	
 17726                           
 17727                           ; BSR set to: 0
 17728  0188BA  0100               	movlb	0	; () banked
 17729  0188BC  51D9               	movf	_VFD_communication_Error_Flag& (0+255),w,b
 17730  0188BE  A4D8               	btfss	status,2,c
 17731  0188C0  0012               	return	
 17732                           
 17733                           ; BSR set to: 0
 17734  0188C2  503D               	movf	_Start_Stop_Flag,w,c
 17735  0188C4  A4D8               	btfss	status,2,c
 17736  0188C6  0012               	return	
 17737                           
 17738                           ; BSR set to: 0
 17739  0188C8  0101               	movlb	1	; () banked
 17740  0188CA  519F               	movf	_Grid_Und_voltage& (0+255),w,b
 17741  0188CC  A4D8               	btfss	status,2,c
 17742  0188CE  0012               	return	
 17743                           
 17744                           ; BSR set to: 1
 17745  0188D0  0101               	movlb	1	; () banked
 17746  0188D2  05DB               	decf	_Wind_Cut_In_Flag& (0+255),w,b
 17747  0188D4  A4D8               	btfss	status,2,c
 17748  0188D6  0012               	return	
 17749                           
 17750                           ; BSR set to: 1
 17751  0188D8  0101               	movlb	1	; () banked
 17752  0188DA  519D               	movf	_Grid_Phase_Sequence_Error& (0+255),w,b
 17753  0188DC  A4D8               	btfss	status,2,c
 17754  0188DE  0012               	return	
 17755                           
 17756                           ; BSR set to: 1
 17757  0188E0  0101               	movlb	1	; () banked
 17758  0188E2  519A               	movf	_Grid_Frequency_Error& (0+255),w,b
 17759  0188E4  A4D8               	btfss	status,2,c
 17760  0188E6  0012               	return	
 17761                           
 17762                           ; BSR set to: 1
 17763  0188E8  0101               	movlb	1	; () banked
 17764  0188EA  51DD               	movf	_Wind_Cut_Out_Flag& (0+255),w,b
 17765  0188EC  A4D8               	btfss	status,2,c
 17766  0188EE  0012               	return	
 17767                           
 17768                           ; BSR set to: 1
 17769  0188F0  0101               	movlb	1	; () banked
 17770  0188F2  519C               	movf	_Grid_Ovr_voltage& (0+255),w,b
 17771  0188F4  A4D8               	btfss	status,2,c
 17772  0188F6  0012               	return	
 17773                           
 17774                           ; BSR set to: 1
 17775                           ;ERROR_HANDLING.c: 35: {
 17776                           ;ERROR_HANDLING.c: 36: Initial_Delay_Second++;
 17777  0188F8  0101               	movlb	1	; () banked
 17778  0188FA  4B45               	infsnz	_Initial_Delay_Second& (0+255),f,b
 17779  0188FC  2B46               	incf	(_Initial_Delay_Second+1)& (0+255),f,b
 17780                           
 17781                           ; BSR set to: 1
 17782                           ;ERROR_HANDLING.c: 37: RA5 = 0;
 17783  0188FE  9A80               	bcf	3968,5,c	;volatile
 17784                           
 17785                           ; BSR set to: 1
 17786                           ;ERROR_HANDLING.c: 38: Errors = NO_ERROR;
 17787  018900  0E00               	movlw	0
 17788  018902  6E3A               	movwf	_Errors,c
 17789                           
 17790                           ; BSR set to: 1
 17791                           ;ERROR_HANDLING.c: 39: if(Initial_Delay_Second == (120))
 17792  018904  0E78               	movlw	120
 17793  018906  0101               	movlb	1	; () banked
 17794  018908  1945               	xorwf	_Initial_Delay_Second& (0+255),w,b
 17795  01890A  0101               	movlb	1	; () banked
 17796  01890C  1146               	iorwf	(_Initial_Delay_Second+1)& (0+255),w,b
 17797  01890E  A4D8               	btfss	status,2,c
 17798  018910  0012               	return	
 17799                           
 17800                           ; BSR set to: 1
 17801                           ;ERROR_HANDLING.c: 40: {
 17802                           ;ERROR_HANDLING.c: 41: Initial_Delay_Second = 0;
 17803  018912  0E00               	movlw	0
 17804  018914  0101               	movlb	1	; () banked
 17805  018916  6F46               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 17806  018918  0E00               	movlw	0
 17807  01891A  6F45               	movwf	_Initial_Delay_Second& (0+255),b
 17808                           
 17809                           ;ERROR_HANDLING.c: 42: Start_up_Error = 0;
 17810  01891C  0E00               	movlw	0
 17811  01891E  0101               	movlb	1	; () banked
 17812  018920  6FFF               	movwf	_Start_up_Error& (0+255),b
 17813                           
 17814                           ; BSR set to: 1
 17815  018922  0012               	return	
 17816  018924                     __end_of_Error_Scan_start_up:
 17817                           	opt stack 0
 17818                           tblptru	equ	0xFF8
 17819                           tblptrh	equ	0xFF7
 17820                           tblptrl	equ	0xFF6
 17821                           tablat	equ	0xFF5
 17822                           prodh	equ	0xFF4
 17823                           prodl	equ	0xFF3
 17824                           intcon	equ	0xFF2
 17825                           postinc0	equ	0xFEE
 17826                           wreg	equ	0xFE8
 17827                           postdec1	equ	0xFE5
 17828                           fsr1h	equ	0xFE2
 17829                           fsr1l	equ	0xFE1
 17830                           indf2	equ	0xFDF
 17831                           postinc2	equ	0xFDE
 17832                           postdec2	equ	0xFDD
 17833                           fsr2h	equ	0xFDA
 17834                           fsr2l	equ	0xFD9
 17835                           status	equ	0xFD8
 17836                           
 17837 ;; *************** function _Turbine_Ramp_up_1_Second *****************
 17838 ;; Defined at:
 17839 ;;		line 92 in file "OneSecond_Function.c"
 17840 ;; Parameters:    Size  Location     Type
 17841 ;;		None
 17842 ;; Auto vars:     Size  Location     Type
 17843 ;;		None
 17844 ;; Return value:  Size  Location     Type
 17845 ;;                  1    wreg      void 
 17846 ;; Registers used:
 17847 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 17848 ;; Tracked objects:
 17849 ;;		On entry : 0/0
 17850 ;;		On exit  : 0/0
 17851 ;;		Unchanged: 0/0
 17852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17857 ;;Total ram usage:        0 bytes
 17858 ;; Hardware stack levels used:    1
 17859 ;; Hardware stack levels required when called:    7
 17860 ;; This function calls:
 17861 ;;		_Error_Scan_Ramp_up
 17862 ;;		_Five_Sec_Delay
 17863 ;;		_One_Sec_Delay
 17864 ;;		_Two_Sec_Delay
 17865 ;; This function is called by:
 17866 ;;		_Timer0_OneSecond_Function
 17867 ;; This function uses a non-reentrant model
 17868 ;;
 17869                           
 17870                           	psect	text40
 17871  01A9DC                     __ptext40:
 17872                           	opt stack 0
 17873  01A9DC                     _Turbine_Ramp_up_1_Second:
 17874                           	opt stack 22
 17875                           
 17876                           ;OneSecond_Function.c: 94: Error_Scan_Ramp_up();
 17877                           
 17878                           ;incstack = 0
 17879  01A9DC  EC2E  F0C9         	call	_Error_Scan_Ramp_up	;wreg free
 17880                           
 17881                           ;OneSecond_Function.c: 95: One_Sec_Delay();
 17882  01A9E0  EC23  F0D4         	call	_One_Sec_Delay	;wreg free
 17883                           
 17884                           ;OneSecond_Function.c: 96: Two_Sec_Delay();
 17885  01A9E4  EC0E  F0D4         	call	_Two_Sec_Delay	;wreg free
 17886                           
 17887                           ;OneSecond_Function.c: 97: Five_Sec_Delay();
 17888  01A9E8  ECF8  F0D3         	call	_Five_Sec_Delay	;wreg free
 17889  01A9EC  0012               	return		;funcret
 17890  01A9EE                     __end_of_Turbine_Ramp_up_1_Second:
 17891                           	opt stack 0
 17892                           tblptru	equ	0xFF8
 17893                           tblptrh	equ	0xFF7
 17894                           tblptrl	equ	0xFF6
 17895                           tablat	equ	0xFF5
 17896                           prodh	equ	0xFF4
 17897                           prodl	equ	0xFF3
 17898                           intcon	equ	0xFF2
 17899                           postinc0	equ	0xFEE
 17900                           wreg	equ	0xFE8
 17901                           postdec1	equ	0xFE5
 17902                           fsr1h	equ	0xFE2
 17903                           fsr1l	equ	0xFE1
 17904                           indf2	equ	0xFDF
 17905                           postinc2	equ	0xFDE
 17906                           postdec2	equ	0xFDD
 17907                           fsr2h	equ	0xFDA
 17908                           fsr2l	equ	0xFD9
 17909                           status	equ	0xFD8
 17910                           
 17911 ;; *************** function _Two_Sec_Delay *****************
 17912 ;; Defined at:
 17913 ;;		line 113 in file "OneSecond_Function.c"
 17914 ;; Parameters:    Size  Location     Type
 17915 ;;		None
 17916 ;; Auto vars:     Size  Location     Type
 17917 ;;		None
 17918 ;; Return value:  Size  Location     Type
 17919 ;;                  1    wreg      void 
 17920 ;; Registers used:
 17921 ;;		wreg, status,2, status,0
 17922 ;; Tracked objects:
 17923 ;;		On entry : 0/0
 17924 ;;		On exit  : 0/0
 17925 ;;		Unchanged: 0/0
 17926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17931 ;;Total ram usage:        0 bytes
 17932 ;; Hardware stack levels used:    1
 17933 ;; Hardware stack levels required when called:    3
 17934 ;; This function calls:
 17935 ;;		Nothing
 17936 ;; This function is called by:
 17937 ;;		_Timer0_OneSecond_Function
 17938 ;;		_Turbine_Ramp_up_1_Second
 17939 ;; This function uses a non-reentrant model
 17940 ;;
 17941                           
 17942                           	psect	text41
 17943  01A81C                     __ptext41:
 17944                           	opt stack 0
 17945  01A81C                     _Two_Sec_Delay:
 17946                           	opt stack 26
 17947                           
 17948                           ;OneSecond_Function.c: 115: if(Two_Sec_Delay_vab)
 17949                           
 17950                           ;incstack = 0
 17951  01A81C  0101               	movlb	1	; () banked
 17952  01A81E  51CD               	movf	_Two_Sec_Delay_vab& (0+255),w,b
 17953  01A820  B4D8               	btfsc	status,2,c
 17954  01A822  0012               	return	
 17955                           
 17956                           ; BSR set to: 1
 17957                           ;OneSecond_Function.c: 116: {
 17958                           ;OneSecond_Function.c: 117: Two_Delay_counter++;
 17959  01A824  0101               	movlb	1	; () banked
 17960  01A826  2BCC               	incf	_Two_Delay_counter& (0+255),f,b
 17961                           
 17962                           ; BSR set to: 1
 17963                           ;OneSecond_Function.c: 118: if(Two_Delay_counter == 2)
 17964  01A828  0E02               	movlw	2
 17965  01A82A  0101               	movlb	1	; () banked
 17966  01A82C  19CC               	xorwf	_Two_Delay_counter& (0+255),w,b
 17967  01A82E  A4D8               	btfss	status,2,c
 17968  01A830  0012               	return	
 17969                           
 17970                           ; BSR set to: 1
 17971                           ;OneSecond_Function.c: 119: {
 17972                           ;OneSecond_Function.c: 120: Two_Delay_counter = 0;
 17973  01A832  0E00               	movlw	0
 17974  01A834  0101               	movlb	1	; () banked
 17975  01A836  6FCC               	movwf	_Two_Delay_counter& (0+255),b
 17976                           
 17977                           ;OneSecond_Function.c: 121: Two_Sec_Delay_vab = 0;
 17978  01A838  0E00               	movlw	0
 17979  01A83A  0101               	movlb	1	; () banked
 17980  01A83C  6FCD               	movwf	_Two_Sec_Delay_vab& (0+255),b
 17981                           
 17982                           ;OneSecond_Function.c: 122: Two_sec_Delay_Flag = 1;
 17983  01A83E  0E01               	movlw	1
 17984  01A840  0101               	movlb	1	; () banked
 17985  01A842  6FCE               	movwf	_Two_sec_Delay_Flag& (0+255),b
 17986                           
 17987                           ; BSR set to: 1
 17988  01A844  0012               	return	
 17989  01A846                     __end_of_Two_Sec_Delay:
 17990                           	opt stack 0
 17991                           tblptru	equ	0xFF8
 17992                           tblptrh	equ	0xFF7
 17993                           tblptrl	equ	0xFF6
 17994                           tablat	equ	0xFF5
 17995                           prodh	equ	0xFF4
 17996                           prodl	equ	0xFF3
 17997                           intcon	equ	0xFF2
 17998                           postinc0	equ	0xFEE
 17999                           wreg	equ	0xFE8
 18000                           postdec1	equ	0xFE5
 18001                           fsr1h	equ	0xFE2
 18002                           fsr1l	equ	0xFE1
 18003                           indf2	equ	0xFDF
 18004                           postinc2	equ	0xFDE
 18005                           postdec2	equ	0xFDD
 18006                           fsr2h	equ	0xFDA
 18007                           fsr2l	equ	0xFD9
 18008                           status	equ	0xFD8
 18009                           
 18010 ;; *************** function _One_Sec_Delay *****************
 18011 ;; Defined at:
 18012 ;;		line 99 in file "OneSecond_Function.c"
 18013 ;; Parameters:    Size  Location     Type
 18014 ;;		None
 18015 ;; Auto vars:     Size  Location     Type
 18016 ;;		None
 18017 ;; Return value:  Size  Location     Type
 18018 ;;                  1    wreg      void 
 18019 ;; Registers used:
 18020 ;;		wreg, status,2, status,0
 18021 ;; Tracked objects:
 18022 ;;		On entry : 0/0
 18023 ;;		On exit  : 0/0
 18024 ;;		Unchanged: 0/0
 18025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18030 ;;Total ram usage:        0 bytes
 18031 ;; Hardware stack levels used:    1
 18032 ;; Hardware stack levels required when called:    3
 18033 ;; This function calls:
 18034 ;;		Nothing
 18035 ;; This function is called by:
 18036 ;;		_Turbine_Ramp_up_1_Second
 18037 ;; This function uses a non-reentrant model
 18038 ;;
 18039                           
 18040                           	psect	text42
 18041  01A846                     __ptext42:
 18042                           	opt stack 0
 18043  01A846                     _One_Sec_Delay:
 18044                           	opt stack 25
 18045                           
 18046                           ;OneSecond_Function.c: 101: if(One_Sec_Delay_vab)
 18047                           
 18048                           ; BSR set to: 1
 18049                           ;incstack = 0
 18050  01A846  0101               	movlb	1	; () banked
 18051  01A848  51AB               	movf	_One_Sec_Delay_vab& (0+255),w,b
 18052  01A84A  0101               	movlb	1	; () banked
 18053  01A84C  B4D8               	btfsc	status,2,c
 18054  01A84E  0012               	return	
 18055                           
 18056                           ; BSR set to: 1
 18057                           ;OneSecond_Function.c: 102: {
 18058                           ;OneSecond_Function.c: 103: Delay_counter++;
 18059  01A850  0101               	movlb	1	; () banked
 18060  01A852  2B6C               	incf	_Delay_counter& (0+255),f,b
 18061                           
 18062                           ; BSR set to: 1
 18063                           ;OneSecond_Function.c: 104: if(Delay_counter == 1)
 18064  01A854  0101               	movlb	1	; () banked
 18065  01A856  056C               	decf	_Delay_counter& (0+255),w,b
 18066  01A858  A4D8               	btfss	status,2,c
 18067  01A85A  0012               	return	
 18068                           
 18069                           ; BSR set to: 1
 18070                           ;OneSecond_Function.c: 105: {
 18071                           ;OneSecond_Function.c: 106: Delay_counter = 0;
 18072  01A85C  0E00               	movlw	0
 18073  01A85E  0101               	movlb	1	; () banked
 18074  01A860  6F6C               	movwf	_Delay_counter& (0+255),b
 18075                           
 18076                           ;OneSecond_Function.c: 107: One_Sec_Delay_vab = 0;
 18077  01A862  0E00               	movlw	0
 18078  01A864  0101               	movlb	1	; () banked
 18079  01A866  6FAB               	movwf	_One_Sec_Delay_vab& (0+255),b
 18080                           
 18081                           ;OneSecond_Function.c: 108: One_sec_Delay_Flag = 1;
 18082  01A868  0E01               	movlw	1
 18083  01A86A  0101               	movlb	1	; () banked
 18084  01A86C  6FAE               	movwf	_One_sec_Delay_Flag& (0+255),b
 18085                           
 18086                           ; BSR set to: 1
 18087  01A86E  0012               	return	
 18088  01A870                     __end_of_One_Sec_Delay:
 18089                           	opt stack 0
 18090                           tblptru	equ	0xFF8
 18091                           tblptrh	equ	0xFF7
 18092                           tblptrl	equ	0xFF6
 18093                           tablat	equ	0xFF5
 18094                           prodh	equ	0xFF4
 18095                           prodl	equ	0xFF3
 18096                           intcon	equ	0xFF2
 18097                           postinc0	equ	0xFEE
 18098                           wreg	equ	0xFE8
 18099                           postdec1	equ	0xFE5
 18100                           fsr1h	equ	0xFE2
 18101                           fsr1l	equ	0xFE1
 18102                           indf2	equ	0xFDF
 18103                           postinc2	equ	0xFDE
 18104                           postdec2	equ	0xFDD
 18105                           fsr2h	equ	0xFDA
 18106                           fsr2l	equ	0xFD9
 18107                           status	equ	0xFD8
 18108                           
 18109 ;; *************** function _Five_Sec_Delay *****************
 18110 ;; Defined at:
 18111 ;;		line 126 in file "OneSecond_Function.c"
 18112 ;; Parameters:    Size  Location     Type
 18113 ;;		None
 18114 ;; Auto vars:     Size  Location     Type
 18115 ;;		None
 18116 ;; Return value:  Size  Location     Type
 18117 ;;                  1    wreg      void 
 18118 ;; Registers used:
 18119 ;;		wreg, status,2, status,0
 18120 ;; Tracked objects:
 18121 ;;		On entry : 0/0
 18122 ;;		On exit  : 0/0
 18123 ;;		Unchanged: 0/0
 18124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18129 ;;Total ram usage:        0 bytes
 18130 ;; Hardware stack levels used:    1
 18131 ;; Hardware stack levels required when called:    3
 18132 ;; This function calls:
 18133 ;;		Nothing
 18134 ;; This function is called by:
 18135 ;;		_Turbine_Ramp_up_1_Second
 18136 ;; This function uses a non-reentrant model
 18137 ;;
 18138                           
 18139                           	psect	text43
 18140  01A7F0                     __ptext43:
 18141                           	opt stack 0
 18142  01A7F0                     _Five_Sec_Delay:
 18143                           	opt stack 25
 18144                           
 18145                           ;OneSecond_Function.c: 128: if(Five_Sec_Delay_vab)
 18146                           
 18147                           ; BSR set to: 1
 18148                           ;incstack = 0
 18149  01A7F0  0101               	movlb	1	; () banked
 18150  01A7F2  5174               	movf	_Five_Sec_Delay_vab& (0+255),w,b
 18151  01A7F4  0101               	movlb	1	; () banked
 18152  01A7F6  B4D8               	btfsc	status,2,c
 18153  01A7F8  0012               	return	
 18154                           
 18155                           ; BSR set to: 1
 18156                           ;OneSecond_Function.c: 129: {
 18157                           ;OneSecond_Function.c: 130: Five_Delay_counter++;
 18158  01A7FA  0101               	movlb	1	; () banked
 18159  01A7FC  2B73               	incf	_Five_Delay_counter& (0+255),f,b
 18160                           
 18161                           ; BSR set to: 1
 18162                           ;OneSecond_Function.c: 131: if(Five_Delay_counter == 5)
 18163  01A7FE  0E05               	movlw	5
 18164  01A800  0101               	movlb	1	; () banked
 18165  01A802  1973               	xorwf	_Five_Delay_counter& (0+255),w,b
 18166  01A804  A4D8               	btfss	status,2,c
 18167  01A806  0012               	return	
 18168                           
 18169                           ; BSR set to: 1
 18170                           ;OneSecond_Function.c: 132: {
 18171                           ;OneSecond_Function.c: 133: Five_Delay_counter = 0;
 18172  01A808  0E00               	movlw	0
 18173  01A80A  0101               	movlb	1	; () banked
 18174  01A80C  6F73               	movwf	_Five_Delay_counter& (0+255),b
 18175                           
 18176                           ;OneSecond_Function.c: 134: Five_Delay_counter = 0;
 18177  01A80E  0E00               	movlw	0
 18178  01A810  0101               	movlb	1	; () banked
 18179  01A812  6F73               	movwf	_Five_Delay_counter& (0+255),b
 18180                           
 18181                           ;OneSecond_Function.c: 135: Five_sec_Delay_Flag = 1;
 18182  01A814  0E01               	movlw	1
 18183  01A816  0102               	movlb	2	; () banked
 18184  01A818  6FD6               	movwf	_Five_sec_Delay_Flag& (0+255),b
 18185                           
 18186                           ; BSR set to: 2
 18187  01A81A  0012               	return	
 18188  01A81C                     __end_of_Five_Sec_Delay:
 18189                           	opt stack 0
 18190                           tblptru	equ	0xFF8
 18191                           tblptrh	equ	0xFF7
 18192                           tblptrl	equ	0xFF6
 18193                           tablat	equ	0xFF5
 18194                           prodh	equ	0xFF4
 18195                           prodl	equ	0xFF3
 18196                           intcon	equ	0xFF2
 18197                           postinc0	equ	0xFEE
 18198                           wreg	equ	0xFE8
 18199                           postdec1	equ	0xFE5
 18200                           fsr1h	equ	0xFE2
 18201                           fsr1l	equ	0xFE1
 18202                           indf2	equ	0xFDF
 18203                           postinc2	equ	0xFDE
 18204                           postdec2	equ	0xFDD
 18205                           fsr2h	equ	0xFDA
 18206                           fsr2l	equ	0xFD9
 18207                           status	equ	0xFD8
 18208                           
 18209 ;; *************** function _Error_Scan_Ramp_up *****************
 18210 ;; Defined at:
 18211 ;;		line 46 in file "ERROR_HANDLING.c"
 18212 ;; Parameters:    Size  Location     Type
 18213 ;;		None
 18214 ;; Auto vars:     Size  Location     Type
 18215 ;;		None
 18216 ;; Return value:  Size  Location     Type
 18217 ;;                  2  2509[None  ] int 
 18218 ;; Registers used:
 18219 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18220 ;; Tracked objects:
 18221 ;;		On entry : 0/0
 18222 ;;		On exit  : 0/0
 18223 ;;		Unchanged: 0/0
 18224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18229 ;;Total ram usage:        0 bytes
 18230 ;; Hardware stack levels used:    1
 18231 ;; Hardware stack levels required when called:    6
 18232 ;; This function calls:
 18233 ;;		_EEPROM_Error_Stop
 18234 ;; This function is called by:
 18235 ;;		_Turbine_Ramp_up_1_Second
 18236 ;; This function uses a non-reentrant model
 18237 ;;
 18238                           
 18239                           	psect	text44
 18240  01925C                     __ptext44:
 18241                           	opt stack 0
 18242  01925C                     _Error_Scan_Ramp_up:
 18243                           	opt stack 22
 18244                           
 18245                           ;ERROR_HANDLING.c: 48: if(EEPROM_Error_Flag == 1 || VFD_communication_Error_Flag == 1 ||
      +                           Start_Stop_Flag == 1 || Pitch_FB_Error_Flag == 1 || VFD_DC_EXTREM_LOW_Error == 1 || VFD
      +                          _SHORT_CIRCUIT_fLAG == 1 || Turbine_Over_Speed_Flag == 1 || VFD__Run_Time_Error == 1 || 
      +                          VFD_DC_Bu
 18246                           
 18247                           ;incstack = 0
 18248  01925C  0436               	decf	_EEPROM_Error_Flag,w,c
 18249  01925E  B4D8               	btfsc	status,2,c
 18250  019260  D039               	goto	l16879
 18251  019262  0100               	movlb	0	; () banked
 18252  019264  05D9               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 18253  019266  B4D8               	btfsc	status,2,c
 18254  019268  D035               	goto	l16879
 18255                           
 18256                           ; BSR set to: 0
 18257  01926A  043D               	decf	_Start_Stop_Flag,w,c
 18258  01926C  B4D8               	btfsc	status,2,c
 18259  01926E  D032               	goto	l16879
 18260                           
 18261                           ; BSR set to: 0
 18262  019270  0100               	movlb	0	; () banked
 18263  019272  05D7               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 18264  019274  B4D8               	btfsc	status,2,c
 18265  019276  D02E               	goto	l16879
 18266                           
 18267                           ; BSR set to: 0
 18268  019278  0101               	movlb	1	; () banked
 18269  01927A  05D2               	decf	_VFD_DC_EXTREM_LOW_Error& (0+255),w,b
 18270  01927C  B4D8               	btfsc	status,2,c
 18271  01927E  D02A               	goto	l16879
 18272                           
 18273                           ; BSR set to: 1
 18274  019280  0102               	movlb	2	; () banked
 18275  019282  05C4               	decf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),w,b
 18276  019284  0102               	movlb	2	; () banked
 18277  019286  11C5               	iorwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),w,b
 18278  019288  B4D8               	btfsc	status,2,c
 18279  01928A  D024               	goto	l16879
 18280                           
 18281                           ; BSR set to: 2
 18282  01928C  0101               	movlb	1	; () banked
 18283  01928E  05C9               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 18284  019290  B4D8               	btfsc	status,2,c
 18285  019292  D020               	goto	l16879
 18286                           
 18287                           ; BSR set to: 1
 18288  019294  0101               	movlb	1	; () banked
 18289  019296  05D8               	decf	_VFD__Run_Time_Error& (0+255),w,b
 18290  019298  B4D8               	btfsc	status,2,c
 18291  01929A  D01C               	goto	l16879
 18292                           
 18293                           ; BSR set to: 1
 18294  01929C  0101               	movlb	1	; () banked
 18295  01929E  05D1               	decf	_VFD_DC_Bus_Low_Error& (0+255),w,b
 18296  0192A0  B4D8               	btfsc	status,2,c
 18297  0192A2  D018               	goto	l16879
 18298                           
 18299                           ; BSR set to: 1
 18300  0192A4  0101               	movlb	1	; () banked
 18301  0192A6  05D0               	decf	_VFD_DC_Bus_High_Error& (0+255),w,b
 18302  0192A8  B4D8               	btfsc	status,2,c
 18303  0192AA  D014               	goto	l16879
 18304                           
 18305                           ; BSR set to: 1
 18306  0192AC  0101               	movlb	1	; () banked
 18307  0192AE  05D3               	decf	_VFD_Error_Flag& (0+255),w,b
 18308  0192B0  B4D8               	btfsc	status,2,c
 18309  0192B2  D010               	goto	l16879
 18310                           
 18311                           ; BSR set to: 1
 18312  0192B4  0101               	movlb	1	; () banked
 18313  0192B6  05CF               	decf	_VFD_DC_Bus_Current_Error& (0+255),w,b
 18314  0192B8  B4D8               	btfsc	status,2,c
 18315  0192BA  D00C               	goto	l16879
 18316                           
 18317                           ; BSR set to: 1
 18318  0192BC  0101               	movlb	1	; () banked
 18319  0192BE  05A9               	decf	_Motor_Slip_Error_Flag& (0+255),w,b
 18320  0192C0  B4D8               	btfsc	status,2,c
 18321  0192C2  D008               	goto	l16879
 18322                           
 18323                           ; BSR set to: 1
 18324  0192C4  0101               	movlb	1	; () banked
 18325  0192C6  05B5               	decf	_Rotor_Slip_Error_Flag& (0+255),w,b
 18326  0192C8  B4D8               	btfsc	status,2,c
 18327  0192CA  D004               	goto	l16879
 18328                           
 18329                           ; BSR set to: 1
 18330  0192CC  0100               	movlb	0	; () banked
 18331  0192CE  05D6               	decf	_Grid_Over_current& (0+255),w,b
 18332  0192D0  A4D8               	btfss	status,2,c
 18333  0192D2  0012               	return	
 18334  0192D4                     l16879:
 18335                           
 18336                           ;ERROR_HANDLING.c: 49: {
 18337                           ;ERROR_HANDLING.c: 50: VFD_RAMP = VFD_Stop;
 18338  0192D4  0E04               	movlw	4
 18339  0192D6  0101               	movlb	1	; () banked
 18340  0192D8  6FD7               	movwf	_VFD_RAMP& (0+255),b
 18341                           
 18342                           ; BSR set to: 1
 18343                           ;ERROR_HANDLING.c: 52: if(VFD__Run_Time_Error == 1 || VFD_DC_EXTREM_LOW_Error == 1 || Mo
      +                          tor_Slip_Error_Flag == 1 || Rotor_Slip_Error_Flag == 1 || Pitch_FB_Error_Flag == 1 || VF
      +                          D_SHORT_CIRCUIT_fLAG == 1)
 18344  0192DA  0101               	movlb	1	; () banked
 18345  0192DC  05D8               	decf	_VFD__Run_Time_Error& (0+255),w,b
 18346  0192DE  B4D8               	btfsc	status,2,c
 18347  0192E0  D016               	goto	l16893
 18348                           
 18349                           ; BSR set to: 1
 18350  0192E2  0101               	movlb	1	; () banked
 18351  0192E4  05D2               	decf	_VFD_DC_EXTREM_LOW_Error& (0+255),w,b
 18352  0192E6  B4D8               	btfsc	status,2,c
 18353  0192E8  D012               	goto	l16893
 18354                           
 18355                           ; BSR set to: 1
 18356  0192EA  0101               	movlb	1	; () banked
 18357  0192EC  05A9               	decf	_Motor_Slip_Error_Flag& (0+255),w,b
 18358  0192EE  B4D8               	btfsc	status,2,c
 18359  0192F0  D00E               	goto	l16893
 18360                           
 18361                           ; BSR set to: 1
 18362  0192F2  0101               	movlb	1	; () banked
 18363  0192F4  05B5               	decf	_Rotor_Slip_Error_Flag& (0+255),w,b
 18364  0192F6  B4D8               	btfsc	status,2,c
 18365  0192F8  D00A               	goto	l16893
 18366                           
 18367                           ; BSR set to: 1
 18368  0192FA  0100               	movlb	0	; () banked
 18369  0192FC  05D7               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 18370  0192FE  B4D8               	btfsc	status,2,c
 18371  019300  D006               	goto	l16893
 18372                           
 18373                           ; BSR set to: 0
 18374  019302  0102               	movlb	2	; () banked
 18375  019304  05C4               	decf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),w,b
 18376  019306  0102               	movlb	2	; () banked
 18377  019308  11C5               	iorwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),w,b
 18378  01930A  A4D8               	btfss	status,2,c
 18379  01930C  0012               	return	
 18380  01930E                     l16893:
 18381                           
 18382                           ;ERROR_HANDLING.c: 53: {
 18383                           ;ERROR_HANDLING.c: 54: EEPROM_Error_Stop();
 18384  01930E  EC9B  F0AA         	call	_EEPROM_Error_Stop	;wreg free
 18385  019312  0012               	return	
 18386  019314                     __end_of_Error_Scan_Ramp_up:
 18387                           	opt stack 0
 18388                           tblptru	equ	0xFF8
 18389                           tblptrh	equ	0xFF7
 18390                           tblptrl	equ	0xFF6
 18391                           tablat	equ	0xFF5
 18392                           prodh	equ	0xFF4
 18393                           prodl	equ	0xFF3
 18394                           intcon	equ	0xFF2
 18395                           postinc0	equ	0xFEE
 18396                           wreg	equ	0xFE8
 18397                           postdec1	equ	0xFE5
 18398                           fsr1h	equ	0xFE2
 18399                           fsr1l	equ	0xFE1
 18400                           indf2	equ	0xFDF
 18401                           postinc2	equ	0xFDE
 18402                           postdec2	equ	0xFDD
 18403                           fsr2h	equ	0xFDA
 18404                           fsr2l	equ	0xFD9
 18405                           status	equ	0xFD8
 18406                           
 18407 ;; *************** function _Last_Five_Error *****************
 18408 ;; Defined at:
 18409 ;;		line 140 in file "ERROR_HANDLING.c"
 18410 ;; Parameters:    Size  Location     Type
 18411 ;;		None
 18412 ;; Auto vars:     Size  Location     Type
 18413 ;;		None
 18414 ;; Return value:  Size  Location     Type
 18415 ;;                  1    wreg      void 
 18416 ;; Registers used:
 18417 ;;		wreg, status,2, status,0
 18418 ;; Tracked objects:
 18419 ;;		On entry : 0/0
 18420 ;;		On exit  : 0/0
 18421 ;;		Unchanged: 0/0
 18422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18427 ;;Total ram usage:        0 bytes
 18428 ;; Hardware stack levels used:    1
 18429 ;; Hardware stack levels required when called:    3
 18430 ;; This function calls:
 18431 ;;		Nothing
 18432 ;; This function is called by:
 18433 ;;		_Timer0_OneSecond_Function
 18434 ;; This function uses a non-reentrant model
 18435 ;;
 18436                           
 18437                           	psect	text45
 18438  01A92C                     __ptext45:
 18439                           	opt stack 0
 18440  01A92C                     _Last_Five_Error:
 18441                           	opt stack 26
 18442                           
 18443                           ;ERROR_HANDLING.c: 143: if(Errors != Errors1)
 18444                           
 18445                           ;incstack = 0
 18446  01A92C  0101               	movlb	1	; () banked
 18447  01A92E  516D               	movf	_Errors1& (0+255),w,b
 18448  01A930  183A               	xorwf	_Errors,w,c
 18449  01A932  B4D8               	btfsc	status,2,c
 18450  01A934  0012               	return	
 18451                           
 18452                           ; BSR set to: 1
 18453                           ;ERROR_HANDLING.c: 144: {
 18454                           ;ERROR_HANDLING.c: 145: Errors5 = Errors4;
 18455  01A936  C170  F171         	movff	_Errors4,_Errors5
 18456                           
 18457                           ;ERROR_HANDLING.c: 146: Errors4 = Errors3;
 18458  01A93A  C16F  F170         	movff	_Errors3,_Errors4
 18459                           
 18460                           ;ERROR_HANDLING.c: 147: Errors3 = Errors2;
 18461  01A93E  C16E  F16F         	movff	_Errors2,_Errors3
 18462                           
 18463                           ;ERROR_HANDLING.c: 148: Errors2 = Errors1;
 18464  01A942  C16D  F16E         	movff	_Errors1,_Errors2
 18465                           
 18466                           ;ERROR_HANDLING.c: 149: Errors1 = Errors;
 18467  01A946  C03A  F16D         	movff	_Errors,_Errors1
 18468  01A94A  0012               	return	
 18469  01A94C                     __end_of_Last_Five_Error:
 18470                           	opt stack 0
 18471                           tblptru	equ	0xFF8
 18472                           tblptrh	equ	0xFF7
 18473                           tblptrl	equ	0xFF6
 18474                           tablat	equ	0xFF5
 18475                           prodh	equ	0xFF4
 18476                           prodl	equ	0xFF3
 18477                           intcon	equ	0xFF2
 18478                           postinc0	equ	0xFEE
 18479                           wreg	equ	0xFE8
 18480                           postdec1	equ	0xFE5
 18481                           fsr1h	equ	0xFE2
 18482                           fsr1l	equ	0xFE1
 18483                           indf2	equ	0xFDF
 18484                           postinc2	equ	0xFDE
 18485                           postdec2	equ	0xFDD
 18486                           fsr2h	equ	0xFDA
 18487                           fsr2l	equ	0xFD9
 18488                           status	equ	0xFD8
 18489                           
 18490 ;; *************** function _Error_Scan_Running *****************
 18491 ;; Defined at:
 18492 ;;		line 59 in file "ERROR_HANDLING.c"
 18493 ;; Parameters:    Size  Location     Type
 18494 ;;		None
 18495 ;; Auto vars:     Size  Location     Type
 18496 ;;		None
 18497 ;; Return value:  Size  Location     Type
 18498 ;;                  2  2491[None  ] int 
 18499 ;; Registers used:
 18500 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 18501 ;; Tracked objects:
 18502 ;;		On entry : 0/0
 18503 ;;		On exit  : 0/0
 18504 ;;		Unchanged: 0/0
 18505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18510 ;;Total ram usage:        0 bytes
 18511 ;; Hardware stack levels used:    1
 18512 ;; Hardware stack levels required when called:    6
 18513 ;; This function calls:
 18514 ;;		_EEPROM_Error_Stop
 18515 ;;		_Stopping_state_function
 18516 ;; This function is called by:
 18517 ;;		_Timer0_OneSecond_Function
 18518 ;; This function uses a non-reentrant model
 18519 ;;
 18520                           
 18521                           	psect	text46
 18522  01947C                     __ptext46:
 18523                           	opt stack 0
 18524  01947C                     _Error_Scan_Running:
 18525                           	opt stack 23
 18526                           
 18527                           ;ERROR_HANDLING.c: 61: if(EEPROM_Error_Flag == 1 || VFD_communication_Error_Flag == 1 ||
      +                           Start_Stop_Flag == 1 || Generator_One_Feedback_Error == 1 || Pitch_FB_Error_Flag == 1 |
      +                          | Tur_OverLoaded_Error == 1 || KW_Minimum_Error == 1 || KW_Maximum_Error == 1 || Turbine
      +                          _Under_Sp
 18528                           
 18529                           ; BSR set to: 1
 18530                           ;incstack = 0
 18531  01947C  0436               	decf	_EEPROM_Error_Flag,w,c
 18532  01947E  B4D8               	btfsc	status,2,c
 18533  019480  D043               	goto	l21365
 18534  019482  0100               	movlb	0	; () banked
 18535  019484  05D9               	decf	_VFD_communication_Error_Flag& (0+255),w,b
 18536  019486  B4D8               	btfsc	status,2,c
 18537  019488  D03F               	goto	l21365
 18538                           
 18539                           ; BSR set to: 0
 18540  01948A  043D               	decf	_Start_Stop_Flag,w,c
 18541  01948C  B4D8               	btfsc	status,2,c
 18542  01948E  D03C               	goto	l21365
 18543                           
 18544                           ; BSR set to: 0
 18545  019490  0101               	movlb	1	; () banked
 18546  019492  0597               	decf	_Generator_One_Feedback_Error& (0+255),w,b
 18547  019494  B4D8               	btfsc	status,2,c
 18548  019496  D038               	goto	l21365
 18549                           
 18550                           ; BSR set to: 1
 18551  019498  0100               	movlb	0	; () banked
 18552  01949A  05D7               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 18553  01949C  B4D8               	btfsc	status,2,c
 18554  01949E  D034               	goto	l21365
 18555                           
 18556                           ; BSR set to: 0
 18557  0194A0  0101               	movlb	1	; () banked
 18558  0194A2  05C8               	decf	_Tur_OverLoaded_Error& (0+255),w,b
 18559  0194A4  B4D8               	btfsc	status,2,c
 18560  0194A6  D030               	goto	l21365
 18561                           
 18562                           ; BSR set to: 1
 18563  0194A8  0101               	movlb	1	; () banked
 18564  0194AA  05A4               	decf	_KW_Minimum_Error& (0+255),w,b
 18565  0194AC  B4D8               	btfsc	status,2,c
 18566  0194AE  D02C               	goto	l21365
 18567                           
 18568                           ; BSR set to: 1
 18569  0194B0  0101               	movlb	1	; () banked
 18570  0194B2  05A3               	decf	_KW_Maximum_Error& (0+255),w,b
 18571  0194B4  B4D8               	btfsc	status,2,c
 18572  0194B6  D028               	goto	l21365
 18573                           
 18574                           ; BSR set to: 1
 18575  0194B8  0101               	movlb	1	; () banked
 18576  0194BA  05CB               	decf	_Turbine_Under_Speed_Flag& (0+255),w,b
 18577  0194BC  B4D8               	btfsc	status,2,c
 18578  0194BE  D024               	goto	l21365
 18579                           
 18580                           ; BSR set to: 1
 18581  0194C0  0101               	movlb	1	; () banked
 18582  0194C2  05C9               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 18583  0194C4  B4D8               	btfsc	status,2,c
 18584  0194C6  D020               	goto	l21365
 18585                           
 18586                           ; BSR set to: 1
 18587  0194C8  0100               	movlb	0	; () banked
 18588  0194CA  05D6               	decf	_Grid_Over_current& (0+255),w,b
 18589  0194CC  B4D8               	btfsc	status,2,c
 18590  0194CE  D01C               	goto	l21365
 18591                           
 18592                           ; BSR set to: 0
 18593  0194D0  0101               	movlb	1	; () banked
 18594  0194D2  0598               	decf	_Generator_Over_Speed& (0+255),w,b
 18595  0194D4  B4D8               	btfsc	status,2,c
 18596  0194D6  D018               	goto	l21365
 18597                           
 18598                           ; BSR set to: 1
 18599  0194D8  0101               	movlb	1	; () banked
 18600  0194DA  05C9               	decf	_Turbine_Over_Speed_Flag& (0+255),w,b
 18601  0194DC  B4D8               	btfsc	status,2,c
 18602  0194DE  D014               	goto	l21365
 18603                           
 18604                           ; BSR set to: 1
 18605  0194E0  0101               	movlb	1	; () banked
 18606  0194E2  059F               	decf	_Grid_Und_voltage& (0+255),w,b
 18607  0194E4  B4D8               	btfsc	status,2,c
 18608  0194E6  D010               	goto	l21365
 18609                           
 18610                           ; BSR set to: 1
 18611  0194E8  0101               	movlb	1	; () banked
 18612  0194EA  05DD               	decf	_Wind_Cut_Out_Flag& (0+255),w,b
 18613  0194EC  A4D8               	btfss	status,2,c
 18614  0194EE  D004               	goto	l21361
 18615                           
 18616                           ; BSR set to: 1
 18617  0194F0  0101               	movlb	1	; () banked
 18618  0194F2  519D               	movf	_Grid_Phase_Sequence_Error& (0+255),w,b
 18619  0194F4  B4D8               	btfsc	status,2,c
 18620  0194F6  D008               	goto	l21365
 18621  0194F8                     l21361:
 18622                           
 18623                           ; BSR set to: 1
 18624  0194F8  0101               	movlb	1	; () banked
 18625  0194FA  059A               	decf	_Grid_Frequency_Error& (0+255),w,b
 18626  0194FC  B4D8               	btfsc	status,2,c
 18627  0194FE  D004               	goto	l21365
 18628                           
 18629                           ; BSR set to: 1
 18630  019500  0101               	movlb	1	; () banked
 18631  019502  059C               	decf	_Grid_Ovr_voltage& (0+255),w,b
 18632  019504  A4D8               	btfss	status,2,c
 18633  019506  0012               	return	
 18634  019508                     l21365:
 18635                           
 18636                           ;ERROR_HANDLING.c: 62: {
 18637                           ;ERROR_HANDLING.c: 63: Turbine_state = STOPPING_STATE;
 18638  019508  0E03               	movlw	3
 18639  01950A  0100               	movlb	0	; () banked
 18640  01950C  6FD8               	movwf	_Turbine_state& (0+255),b
 18641                           
 18642                           ; BSR set to: 0
 18643                           ;ERROR_HANDLING.c: 65: if(Generator_One_Feedback_Error == 1 || Pitch_FB_Error_Flag == 1 
      +                          || Tur_OverLoaded_Error == 1)
 18644  01950E  0101               	movlb	1	; () banked
 18645  019510  0597               	decf	_Generator_One_Feedback_Error& (0+255),w,b
 18646  019512  B4D8               	btfsc	status,2,c
 18647  019514  D007               	goto	l21373
 18648                           
 18649                           ; BSR set to: 1
 18650  019516  0100               	movlb	0	; () banked
 18651  019518  05D7               	decf	_Pitch_FB_Error_Flag& (0+255),w,b
 18652  01951A  B4D8               	btfsc	status,2,c
 18653  01951C  D003               	goto	l21373
 18654                           
 18655                           ; BSR set to: 0
 18656  01951E  0101               	movlb	1	; () banked
 18657  019520  05C8               	decf	_Tur_OverLoaded_Error& (0+255),w,b
 18658  019522  B4D8               	btfsc	status,2,c
 18659  019524                     l21373:
 18660                           
 18661                           ;ERROR_HANDLING.c: 66: {
 18662                           ;ERROR_HANDLING.c: 67: EEPROM_Error_Stop();
 18663  019524  EC9B  F0AA         	call	_EEPROM_Error_Stop	;wreg free
 18664                           
 18665                           ;ERROR_HANDLING.c: 68: }
 18666                           ;ERROR_HANDLING.c: 70: Stopping_state_function();
 18667  019528  ECA4  F0CC         	call	_Stopping_state_function	;wreg free
 18668  01952C  0012               	return	
 18669  01952E                     __end_of_Error_Scan_Running:
 18670                           	opt stack 0
 18671                           tblptru	equ	0xFF8
 18672                           tblptrh	equ	0xFF7
 18673                           tblptrl	equ	0xFF6
 18674                           tablat	equ	0xFF5
 18675                           prodh	equ	0xFF4
 18676                           prodl	equ	0xFF3
 18677                           intcon	equ	0xFF2
 18678                           postinc0	equ	0xFEE
 18679                           wreg	equ	0xFE8
 18680                           postdec1	equ	0xFE5
 18681                           fsr1h	equ	0xFE2
 18682                           fsr1l	equ	0xFE1
 18683                           indf2	equ	0xFDF
 18684                           postinc2	equ	0xFDE
 18685                           postdec2	equ	0xFDD
 18686                           fsr2h	equ	0xFDA
 18687                           fsr2l	equ	0xFD9
 18688                           status	equ	0xFD8
 18689                           
 18690 ;; *************** function _Stopping_state_function *****************
 18691 ;; Defined at:
 18692 ;;		line 40 in file "state.c"
 18693 ;; Parameters:    Size  Location     Type
 18694 ;;		None
 18695 ;; Auto vars:     Size  Location     Type
 18696 ;;		None
 18697 ;; Return value:  Size  Location     Type
 18698 ;;                  1    wreg      void 
 18699 ;; Registers used:
 18700 ;;		wreg, status,2, status,0, cstack
 18701 ;; Tracked objects:
 18702 ;;		On entry : 0/0
 18703 ;;		On exit  : 0/0
 18704 ;;		Unchanged: 0/0
 18705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18710 ;;Total ram usage:        0 bytes
 18711 ;; Hardware stack levels used:    1
 18712 ;; Hardware stack levels required when called:    5
 18713 ;; This function calls:
 18714 ;;		_Error_Flag_Kill
 18715 ;;		_Start_Stop
 18716 ;;		_Turbine_Pitching
 18717 ;;		_VFD_Data_Kill
 18718 ;;		___ftge
 18719 ;; This function is called by:
 18720 ;;		_Timer0_OneSecond_Function
 18721 ;;		_Error_Scan_Running
 18722 ;; This function uses a non-reentrant model
 18723 ;;
 18724                           
 18725                           	psect	text47
 18726  019948                     __ptext47:
 18727                           	opt stack 0
 18728  019948                     _Stopping_state_function:
 18729                           	opt stack 24
 18730                           
 18731                           ;state.c: 42: Desired_Frequency = 0;
 18732                           
 18733                           ;incstack = 0
 18734  019948  0E00               	movlw	0
 18735  01994A  0100               	movlb	0	; () banked
 18736  01994C  6FD5               	movwf	_Desired_Frequency& (0+255),b
 18737                           
 18738                           ;state.c: 43: Start_up_Error = 2;
 18739  01994E  0E02               	movlw	2
 18740  019950  0101               	movlb	1	; () banked
 18741  019952  6FFF               	movwf	_Start_up_Error& (0+255),b
 18742                           
 18743                           ;state.c: 44: Initial_Delay_Second = 0;
 18744  019954  0E00               	movlw	0
 18745  019956  0101               	movlb	1	; () banked
 18746  019958  6F46               	movwf	(_Initial_Delay_Second+1)& (0+255),b
 18747  01995A  0E00               	movlw	0
 18748  01995C  6F45               	movwf	_Initial_Delay_Second& (0+255),b
 18749                           
 18750                           ;state.c: 45: VFD_RAMP = VFD_IN;
 18751  01995E  0E00               	movlw	0
 18752  019960  0101               	movlb	1	; () banked
 18753  019962  6FD7               	movwf	_VFD_RAMP& (0+255),b
 18754                           
 18755                           ; BSR set to: 1
 18756                           ;state.c: 46: RA5 = 1;
 18757  019964  8A80               	bsf	3968,5,c	;volatile
 18758                           
 18759                           ; BSR set to: 1
 18760                           ;state.c: 47: if(Turbine_RPM == 0 && Generator_RPM_FLT <= 60)
 18761  019966  502D               	movf	_Turbine_RPM,w,c
 18762  019968  102E               	iorwf	_Turbine_RPM+1,w,c
 18763  01996A  102F               	iorwf	_Turbine_RPM+2,w,c
 18764  01996C  A4D8               	btfss	status,2,c
 18765  01996E  D038               	goto	l20589
 18766                           
 18767                           ; BSR set to: 1
 18768  019970  0E00               	movlw	0
 18769  019972  0100               	movlb	0	; () banked
 18770  019974  6F8F               	movwf	___ftge@ff1& (0+255),b
 18771  019976  0E70               	movlw	112
 18772  019978  0100               	movlb	0	; () banked
 18773  01997A  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 18774  01997C  0E42               	movlw	66
 18775  01997E  0100               	movlb	0	; () banked
 18776  019980  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 18777  019982  C0CF  F092         	movff	_Generator_RPM_FLT,___ftge@ff2
 18778  019986  C0D0  F093         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 18779  01998A  C0D1  F094         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 18780  01998E  EC09  F0C8         	call	___ftge	;wreg free
 18781  019992  0100               	movlb	0	; () banked
 18782  019994  A0D8               	btfss	status,0,c
 18783  019996  D024               	goto	l20589
 18784                           
 18785                           ; BSR set to: 0
 18786                           ;state.c: 48: {
 18787                           ;state.c: 49: Stopping_Counter++;
 18788  019998  0101               	movlb	1	; () banked
 18789  01999A  2BBA               	incf	_Stopping_Counter& (0+255),f,b
 18790                           
 18791                           ; BSR set to: 1
 18792                           ;state.c: 50: if(Stopping_Counter >= 8)
 18793  01999C  0E07               	movlw	7
 18794  01999E  0101               	movlb	1	; () banked
 18795  0199A0  65BA               	cpfsgt	_Stopping_Counter& (0+255),b
 18796  0199A2  D01E               	goto	l20589
 18797                           
 18798                           ; BSR set to: 1
 18799                           ;state.c: 51: {
 18800                           ;state.c: 52: Stopping_Counter = 0;
 18801  0199A4  0E00               	movlw	0
 18802  0199A6  0101               	movlb	1	; () banked
 18803  0199A8  6FBA               	movwf	_Stopping_Counter& (0+255),b
 18804                           
 18805                           ;state.c: 53: Turbine_state = STARTUP_STATE;
 18806  0199AA  0E00               	movlw	0
 18807  0199AC  0100               	movlb	0	; () banked
 18808  0199AE  6FD8               	movwf	_Turbine_state& (0+255),b
 18809                           
 18810                           ;state.c: 54: Turbine_Restore_Error = 0;
 18811  0199B0  0E00               	movlw	0
 18812  0199B2  0101               	movlb	1	; () banked
 18813  0199B4  6FCA               	movwf	_Turbine_Restore_Error& (0+255),b
 18814                           
 18815                           ;state.c: 55: Errors = 0; Errors1 = 0; Errors2 = 0; Errors3 = 0; Errors4 = 0; Errors = 0
      +                          ;
 18816  0199B6  0E00               	movlw	0
 18817  0199B8  6E3A               	movwf	_Errors,c
 18818  0199BA  0E00               	movlw	0
 18819  0199BC  0101               	movlb	1	; () banked
 18820  0199BE  6F6D               	movwf	_Errors1& (0+255),b
 18821  0199C0  0E00               	movlw	0
 18822  0199C2  0101               	movlb	1	; () banked
 18823  0199C4  6F6E               	movwf	_Errors2& (0+255),b
 18824  0199C6  0E00               	movlw	0
 18825  0199C8  0101               	movlb	1	; () banked
 18826  0199CA  6F6F               	movwf	_Errors3& (0+255),b
 18827  0199CC  0E00               	movlw	0
 18828  0199CE  0101               	movlb	1	; () banked
 18829  0199D0  6F70               	movwf	_Errors4& (0+255),b
 18830  0199D2  0E00               	movlw	0
 18831  0199D4  6E3A               	movwf	_Errors,c
 18832                           
 18833                           ; BSR set to: 1
 18834                           ;state.c: 56: RA5 = 0;
 18835  0199D6  9A80               	bcf	3968,5,c	;volatile
 18836                           
 18837                           ; BSR set to: 1
 18838                           ;state.c: 57: Error_Flag_Kill();
 18839  0199D8  ECA3  F0C7         	call	_Error_Flag_Kill	;wreg free
 18840                           
 18841                           ;state.c: 58: VFD_Data_Kill();
 18842  0199DC  EC98  F0D3         	call	_VFD_Data_Kill	;wreg free
 18843  0199E0                     l20589:
 18844                           
 18845                           ;state.c: 59: }
 18846                           ;state.c: 61: }
 18847                           ;state.c: 62: Start_Stop();
 18848  0199E0  EC8A  F0C9         	call	_Start_Stop	;wreg free
 18849                           
 18850                           ;state.c: 63: Turbine_Pitching();
 18851  0199E4  EC86  F0D5         	call	_Turbine_Pitching	;wreg free
 18852                           
 18853                           ;state.c: 64: (RD2 = 0);
 18854  0199E8  9483               	bcf	3971,2,c	;volatile
 18855                           
 18856                           ;state.c: 65: VFD_Error_No = 0;
 18857  0199EA  0E00               	movlw	0
 18858  0199EC  6E3E               	movwf	_VFD_Error_No,c
 18859  0199EE  0012               	return		;funcret
 18860  0199F0                     __end_of_Stopping_state_function:
 18861                           	opt stack 0
 18862                           tblptru	equ	0xFF8
 18863                           tblptrh	equ	0xFF7
 18864                           tblptrl	equ	0xFF6
 18865                           tablat	equ	0xFF5
 18866                           prodh	equ	0xFF4
 18867                           prodl	equ	0xFF3
 18868                           intcon	equ	0xFF2
 18869                           postinc0	equ	0xFEE
 18870                           wreg	equ	0xFE8
 18871                           postdec1	equ	0xFE5
 18872                           fsr1h	equ	0xFE2
 18873                           fsr1l	equ	0xFE1
 18874                           indf2	equ	0xFDF
 18875                           postinc2	equ	0xFDE
 18876                           postdec2	equ	0xFDD
 18877                           fsr2h	equ	0xFDA
 18878                           fsr2l	equ	0xFD9
 18879                           status	equ	0xFD8
 18880                           
 18881 ;; *************** function _Error_Flag_Kill *****************
 18882 ;; Defined at:
 18883 ;;		line 140 in file "RAMP_UP.c"
 18884 ;; Parameters:    Size  Location     Type
 18885 ;;		None
 18886 ;; Auto vars:     Size  Location     Type
 18887 ;;		None
 18888 ;; Return value:  Size  Location     Type
 18889 ;;                  1    wreg      void 
 18890 ;; Registers used:
 18891 ;;		wreg, status,2
 18892 ;; Tracked objects:
 18893 ;;		On entry : 0/0
 18894 ;;		On exit  : 0/0
 18895 ;;		Unchanged: 0/0
 18896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18901 ;;Total ram usage:        0 bytes
 18902 ;; Hardware stack levels used:    1
 18903 ;; Hardware stack levels required when called:    3
 18904 ;; This function calls:
 18905 ;;		Nothing
 18906 ;; This function is called by:
 18907 ;;		_Stopping_state_function
 18908 ;; This function uses a non-reentrant model
 18909 ;;
 18910                           
 18911                           	psect	text48
 18912  018F46                     __ptext48:
 18913                           	opt stack 0
 18914  018F46                     _Error_Flag_Kill:
 18915                           	opt stack 25
 18916                           
 18917                           ;RAMP_UP.c: 142: Two_Sec_Delay_vab = 0;
 18918                           
 18919                           ;incstack = 0
 18920  018F46  0E00               	movlw	0
 18921  018F48  0101               	movlb	1	; () banked
 18922  018F4A  6FCD               	movwf	_Two_Sec_Delay_vab& (0+255),b
 18923                           
 18924                           ;RAMP_UP.c: 143: Pitch_FB_Error_Flag = 0;
 18925  018F4C  0E00               	movlw	0
 18926  018F4E  0100               	movlb	0	; () banked
 18927  018F50  6FD7               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 18928                           
 18929                           ;RAMP_UP.c: 144: VFD_DC_EXTREM_LOW_Error = 0;
 18930  018F52  0E00               	movlw	0
 18931  018F54  0101               	movlb	1	; () banked
 18932  018F56  6FD2               	movwf	_VFD_DC_EXTREM_LOW_Error& (0+255),b
 18933                           
 18934                           ;RAMP_UP.c: 145: VFD_SHORT_CIRCUIT_fLAG = 0;
 18935  018F58  0E00               	movlw	0
 18936  018F5A  0102               	movlb	2	; () banked
 18937  018F5C  6FC5               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 18938  018F5E  0E00               	movlw	0
 18939  018F60  6FC4               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 18940                           
 18941                           ;RAMP_UP.c: 146: Turbine_Over_Speed_Flag = 0;
 18942  018F62  0E00               	movlw	0
 18943  018F64  0101               	movlb	1	; () banked
 18944  018F66  6FC9               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 18945                           
 18946                           ;RAMP_UP.c: 147: VFD__Run_Time_Error = 0 ;
 18947  018F68  0E00               	movlw	0
 18948  018F6A  0101               	movlb	1	; () banked
 18949  018F6C  6FD8               	movwf	_VFD__Run_Time_Error& (0+255),b
 18950                           
 18951                           ;RAMP_UP.c: 148: VFD_DC_Bus_Low_Error = 0;
 18952  018F6E  0E00               	movlw	0
 18953  018F70  0101               	movlb	1	; () banked
 18954  018F72  6FD1               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 18955                           
 18956                           ;RAMP_UP.c: 149: VFD_DC_Bus_High_Error = 0;
 18957  018F74  0E00               	movlw	0
 18958  018F76  0101               	movlb	1	; () banked
 18959  018F78  6FD0               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 18960                           
 18961                           ;RAMP_UP.c: 150: VFD_Error_Flag = 0;
 18962  018F7A  0E00               	movlw	0
 18963  018F7C  0101               	movlb	1	; () banked
 18964  018F7E  6FD3               	movwf	_VFD_Error_Flag& (0+255),b
 18965                           
 18966                           ;RAMP_UP.c: 151: VFD_DC_Bus_Current_Error = 0;
 18967  018F80  0E00               	movlw	0
 18968  018F82  0101               	movlb	1	; () banked
 18969  018F84  6FCF               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 18970                           
 18971                           ;RAMP_UP.c: 152: Grid_Over_current = 0;
 18972  018F86  0E00               	movlw	0
 18973  018F88  0100               	movlb	0	; () banked
 18974  018F8A  6FD6               	movwf	_Grid_Over_current& (0+255),b
 18975                           
 18976                           ;RAMP_UP.c: 153: Generator_One_Feedback_Error = 0;
 18977  018F8C  0E00               	movlw	0
 18978  018F8E  0101               	movlb	1	; () banked
 18979  018F90  6F97               	movwf	_Generator_One_Feedback_Error& (0+255),b
 18980                           
 18981                           ;RAMP_UP.c: 154: Tur_OverLoaded_Error = 0;
 18982  018F92  0E00               	movlw	0
 18983  018F94  0101               	movlb	1	; () banked
 18984  018F96  6FC8               	movwf	_Tur_OverLoaded_Error& (0+255),b
 18985                           
 18986                           ;RAMP_UP.c: 155: KW_Minimum_Error = 0;
 18987  018F98  0E00               	movlw	0
 18988  018F9A  0101               	movlb	1	; () banked
 18989  018F9C  6FA4               	movwf	_KW_Minimum_Error& (0+255),b
 18990                           
 18991                           ;RAMP_UP.c: 156: KW_Maximum_Error = 0;
 18992  018F9E  0E00               	movlw	0
 18993  018FA0  0101               	movlb	1	; () banked
 18994  018FA2  6FA3               	movwf	_KW_Maximum_Error& (0+255),b
 18995                           
 18996                           ;RAMP_UP.c: 157: Turbine_Under_Speed_Flag = 0;
 18997  018FA4  0E00               	movlw	0
 18998  018FA6  0101               	movlb	1	; () banked
 18999  018FA8  6FCB               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 19000                           
 19001                           ;RAMP_UP.c: 158: Generator_Over_Speed = 0;
 19002  018FAA  0E00               	movlw	0
 19003  018FAC  0101               	movlb	1	; () banked
 19004  018FAE  6F98               	movwf	_Generator_Over_Speed& (0+255),b
 19005                           
 19006                           ;RAMP_UP.c: 159: Grid_Und_voltage = 0;
 19007  018FB0  0E00               	movlw	0
 19008  018FB2  0101               	movlb	1	; () banked
 19009  018FB4  6F9F               	movwf	_Grid_Und_voltage& (0+255),b
 19010                           
 19011                           ;RAMP_UP.c: 160: Grid_Ovr_voltage = 0;
 19012  018FB6  0E00               	movlw	0
 19013  018FB8  0101               	movlb	1	; () banked
 19014  018FBA  6F9C               	movwf	_Grid_Ovr_voltage& (0+255),b
 19015                           
 19016                           ;RAMP_UP.c: 161: Wind_Cut_In_Flag = 0;
 19017  018FBC  0E00               	movlw	0
 19018  018FBE  0101               	movlb	1	; () banked
 19019  018FC0  6FDB               	movwf	_Wind_Cut_In_Flag& (0+255),b
 19020                           
 19021                           ;RAMP_UP.c: 162: Grid_Frequency_Error = 0;
 19022  018FC2  0E00               	movlw	0
 19023  018FC4  0101               	movlb	1	; () banked
 19024  018FC6  6F9A               	movwf	_Grid_Frequency_Error& (0+255),b
 19025                           
 19026                           ;RAMP_UP.c: 163: Wind_Cut_Out_Flag = 0;
 19027  018FC8  0E00               	movlw	0
 19028  018FCA  0101               	movlb	1	; () banked
 19029  018FCC  6FDD               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 19030                           
 19031                           ;RAMP_UP.c: 164: Motor_slip = 0;
 19032  018FCE  0E00               	movlw	0
 19033  018FD0  0101               	movlb	1	; () banked
 19034  018FD2  6F12               	movwf	_Motor_slip& (0+255),b
 19035  018FD4  0E00               	movlw	0
 19036  018FD6  0101               	movlb	1	; () banked
 19037  018FD8  6F13               	movwf	(_Motor_slip+1)& (0+255),b
 19038  018FDA  0E00               	movlw	0
 19039  018FDC  0101               	movlb	1	; () banked
 19040  018FDE  6F14               	movwf	(_Motor_slip+2)& (0+255),b
 19041                           
 19042                           ;RAMP_UP.c: 165: Rotor_slip = 0;
 19043  018FE0  0E00               	movlw	0
 19044  018FE2  0101               	movlb	1	; () banked
 19045  018FE4  6F24               	movwf	_Rotor_slip& (0+255),b
 19046  018FE6  0E00               	movlw	0
 19047  018FE8  0101               	movlb	1	; () banked
 19048  018FEA  6F25               	movwf	(_Rotor_slip+1)& (0+255),b
 19049  018FEC  0E00               	movlw	0
 19050  018FEE  0101               	movlb	1	; () banked
 19051  018FF0  6F26               	movwf	(_Rotor_slip+2)& (0+255),b
 19052                           
 19053                           ;RAMP_UP.c: 166: Data_1[1] = 0;
 19054  018FF2  0E00               	movlw	0
 19055  018FF4  0105               	movlb	5	; () banked
 19056  018FF6  6F03               	movwf	(_Data_1+3)& (0+255),b
 19057  018FF8  0E00               	movlw	0
 19058  018FFA  6F02               	movwf	(_Data_1+2)& (0+255),b
 19059                           
 19060                           ;RAMP_UP.c: 167: Data_1[7] = 0;
 19061  018FFC  0E00               	movlw	0
 19062  018FFE  0105               	movlb	5	; () banked
 19063  019000  6F0F               	movwf	(_Data_1+15)& (0+255),b
 19064  019002  0E00               	movlw	0
 19065  019004  6F0E               	movwf	(_Data_1+14)& (0+255),b
 19066                           
 19067                           ;RAMP_UP.c: 168: Data_1[9] = 0;
 19068  019006  0E00               	movlw	0
 19069  019008  0105               	movlb	5	; () banked
 19070  01900A  6F13               	movwf	(_Data_1+19)& (0+255),b
 19071  01900C  0E00               	movlw	0
 19072  01900E  6F12               	movwf	(_Data_1+18)& (0+255),b
 19073                           
 19074                           ; BSR set to: 5
 19075  019010  0012               	return		;funcret
 19076  019012                     __end_of_Error_Flag_Kill:
 19077                           	opt stack 0
 19078                           tblptru	equ	0xFF8
 19079                           tblptrh	equ	0xFF7
 19080                           tblptrl	equ	0xFF6
 19081                           tablat	equ	0xFF5
 19082                           prodh	equ	0xFF4
 19083                           prodl	equ	0xFF3
 19084                           intcon	equ	0xFF2
 19085                           postinc0	equ	0xFEE
 19086                           wreg	equ	0xFE8
 19087                           postdec1	equ	0xFE5
 19088                           fsr1h	equ	0xFE2
 19089                           fsr1l	equ	0xFE1
 19090                           indf2	equ	0xFDF
 19091                           postinc2	equ	0xFDE
 19092                           postdec2	equ	0xFDD
 19093                           fsr2h	equ	0xFDA
 19094                           fsr2l	equ	0xFD9
 19095                           status	equ	0xFD8
 19096                           
 19097 ;; *************** function _EEPROM_Error_Stop *****************
 19098 ;; Defined at:
 19099 ;;		line 92 in file "EEPROM.c"
 19100 ;; Parameters:    Size  Location     Type
 19101 ;;		None
 19102 ;; Auto vars:     Size  Location     Type
 19103 ;;		None
 19104 ;; Return value:  Size  Location     Type
 19105 ;;                  2   32[None  ] int 
 19106 ;; Registers used:
 19107 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19108 ;; Tracked objects:
 19109 ;;		On entry : 0/0
 19110 ;;		On exit  : 0/0
 19111 ;;		Unchanged: 0/0
 19112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19115 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19116 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19117 ;;Total ram usage:        2 bytes
 19118 ;; Hardware stack levels used:    1
 19119 ;; Hardware stack levels required when called:    5
 19120 ;; This function calls:
 19121 ;;		_Last_3_EEPROM_ERROR_Trigger
 19122 ;;		_int_eeprom_read
 19123 ;;		_int_eeprom_write
 19124 ;; This function is called by:
 19125 ;;		_main
 19126 ;;		_Error_Scan_Ramp_up
 19127 ;;		_Error_Scan_Running
 19128 ;; This function uses a non-reentrant model
 19129 ;;
 19130                           
 19131                           	psect	text49
 19132  015536                     __ptext49:
 19133                           	opt stack 0
 19134  015536                     _EEPROM_Error_Stop:
 19135                           	opt stack 22
 19136                           
 19137                           ;EEPROM.c: 94: if(One_Time_Flag == 0)
 19138                           
 19139                           ; BSR set to: 5
 19140                           ;incstack = 0
 19141  015536  0101               	movlb	1	; () banked
 19142  015538  51AD               	movf	_One_Time_Flag& (0+255),w,b
 19143  01553A  0101               	movlb	1	; () banked
 19144  01553C  A4D8               	btfss	status,2,c
 19145  01553E  D081               	goto	l15973
 19146                           
 19147                           ; BSR set to: 1
 19148                           ;EEPROM.c: 95: {
 19149                           ;EEPROM.c: 96: GiMinutes_3 = int_eeprom_read((0x13));
 19150  015540  0E00               	movlw	0
 19151  015542  6E1E               	movwf	int_eeprom_read@adr+1,c
 19152  015544  0E13               	movlw	19
 19153  015546  6E1D               	movwf	int_eeprom_read@adr,c
 19154  015548  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19155  01554C  C01D  F143         	movff	?_int_eeprom_read,_GiMinutes_3
 19156  015550  C01E  F144         	movff	?_int_eeprom_read+1,_GiMinutes_3+1
 19157                           
 19158                           ;EEPROM.c: 97: GiMinutes_2 = int_eeprom_read((0x12));
 19159  015554  0E00               	movlw	0
 19160  015556  6E1E               	movwf	int_eeprom_read@adr+1,c
 19161  015558  0E12               	movlw	18
 19162  01555A  6E1D               	movwf	int_eeprom_read@adr,c
 19163  01555C  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19164  015560  C01D  F033         	movff	?_int_eeprom_read,_GiMinutes_2
 19165  015564  C01E  F034         	movff	?_int_eeprom_read+1,_GiMinutes_2+1
 19166                           
 19167                           ;EEPROM.c: 98: GiMinutes_1 = int_eeprom_read((0x11));
 19168  015568  0E00               	movlw	0
 19169  01556A  6E1E               	movwf	int_eeprom_read@adr+1,c
 19170  01556C  0E11               	movlw	17
 19171  01556E  6E1D               	movwf	int_eeprom_read@adr,c
 19172  015570  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19173  015574  C01D  F141         	movff	?_int_eeprom_read,_GiMinutes_1
 19174  015578  C01E  F142         	movff	?_int_eeprom_read+1,_GiMinutes_1+1
 19175                           
 19176                           ;EEPROM.c: 100: GiHours_3 = int_eeprom_read((0x16));
 19177  01557C  0E00               	movlw	0
 19178  01557E  6E1E               	movwf	int_eeprom_read@adr+1,c
 19179  015580  0E16               	movlw	22
 19180  015582  6E1D               	movwf	int_eeprom_read@adr,c
 19181  015584  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19182  015588  C01D  F13F         	movff	?_int_eeprom_read,_GiHours_3
 19183  01558C  C01E  F140         	movff	?_int_eeprom_read+1,_GiHours_3+1
 19184                           
 19185                           ;EEPROM.c: 101: GiHours_2 = int_eeprom_read((0x15));
 19186  015590  0E00               	movlw	0
 19187  015592  6E1E               	movwf	int_eeprom_read@adr+1,c
 19188  015594  0E15               	movlw	21
 19189  015596  6E1D               	movwf	int_eeprom_read@adr,c
 19190  015598  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19191  01559C  C01D  F13D         	movff	?_int_eeprom_read,_GiHours_2
 19192  0155A0  C01E  F13E         	movff	?_int_eeprom_read+1,_GiHours_2+1
 19193                           
 19194                           ;EEPROM.c: 102: GiHours_1 = int_eeprom_read((0x14));
 19195  0155A4  0E00               	movlw	0
 19196  0155A6  6E1E               	movwf	int_eeprom_read@adr+1,c
 19197  0155A8  0E14               	movlw	20
 19198  0155AA  6E1D               	movwf	int_eeprom_read@adr,c
 19199  0155AC  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19200  0155B0  C01D  F13B         	movff	?_int_eeprom_read,_GiHours_1
 19201  0155B4  C01E  F13C         	movff	?_int_eeprom_read+1,_GiHours_1+1
 19202                           
 19203                           ;EEPROM.c: 104: EP_Errors3 = int_eeprom_read((0x19));
 19204  0155B8  0E00               	movlw	0
 19205  0155BA  6E1E               	movwf	int_eeprom_read@adr+1,c
 19206  0155BC  0E19               	movlw	25
 19207  0155BE  6E1D               	movwf	int_eeprom_read@adr,c
 19208  0155C0  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19209  0155C4  501D               	movf	?_int_eeprom_read,w,c
 19210  0155C6  6E39               	movwf	_EP_Errors3,c
 19211                           
 19212                           ;EEPROM.c: 105: EP_Errors2 = int_eeprom_read((0x18));
 19213  0155C8  0E00               	movlw	0
 19214  0155CA  6E1E               	movwf	int_eeprom_read@adr+1,c
 19215  0155CC  0E18               	movlw	24
 19216  0155CE  6E1D               	movwf	int_eeprom_read@adr,c
 19217  0155D0  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19218  0155D4  501D               	movf	?_int_eeprom_read,w,c
 19219  0155D6  6E38               	movwf	_EP_Errors2,c
 19220                           
 19221                           ;EEPROM.c: 106: EP_Errors1 = int_eeprom_read((0x17));
 19222  0155D8  0E00               	movlw	0
 19223  0155DA  6E1E               	movwf	int_eeprom_read@adr+1,c
 19224  0155DC  0E17               	movlw	23
 19225  0155DE  6E1D               	movwf	int_eeprom_read@adr,c
 19226  0155E0  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 19227  0155E4  501D               	movf	?_int_eeprom_read,w,c
 19228  0155E6  6E37               	movwf	_EP_Errors1,c
 19229                           
 19230                           ;EEPROM.c: 107: if(EP_Errors3 > 30 || EP_Errors2 > 30 || EP_Errors1 > 30)
 19231  0155E8  0E1F               	movlw	31
 19232  0155EA  6039               	cpfslt	_EP_Errors3,c
 19233  0155EC  D006               	goto	l15965
 19234  0155EE  0E1F               	movlw	31
 19235  0155F0  6038               	cpfslt	_EP_Errors2,c
 19236  0155F2  D003               	goto	l15965
 19237  0155F4  0E1E               	movlw	30
 19238  0155F6  6437               	cpfsgt	_EP_Errors1,c
 19239  0155F8  D024               	goto	l15973
 19240  0155FA                     l15965:
 19241                           
 19242                           ;EEPROM.c: 108: {
 19243                           ;EEPROM.c: 109: EP_Errors3 = 0; EP_Errors2 = 0; EP_Errors1 = 0;
 19244  0155FA  0E00               	movlw	0
 19245  0155FC  6E39               	movwf	_EP_Errors3,c
 19246  0155FE  0E00               	movlw	0
 19247  015600  6E38               	movwf	_EP_Errors2,c
 19248  015602  0E00               	movlw	0
 19249  015604  6E37               	movwf	_EP_Errors1,c
 19250                           
 19251                           ;EEPROM.c: 110: int_eeprom_write((0x19),0);
 19252  015606  0E00               	movlw	0
 19253  015608  6E1E               	movwf	int_eeprom_write@adr+1,c
 19254  01560A  0E19               	movlw	25
 19255  01560C  6E1D               	movwf	int_eeprom_write@adr,c
 19256  01560E  0E00               	movlw	0
 19257  015610  6E20               	movwf	int_eeprom_write@dat+1,c
 19258  015612  0E00               	movlw	0
 19259  015614  6E1F               	movwf	int_eeprom_write@dat,c
 19260  015616  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19261                           
 19262                           ;EEPROM.c: 111: int_eeprom_write((0x18),0);
 19263  01561A  0E00               	movlw	0
 19264  01561C  6E1E               	movwf	int_eeprom_write@adr+1,c
 19265  01561E  0E18               	movlw	24
 19266  015620  6E1D               	movwf	int_eeprom_write@adr,c
 19267  015622  0E00               	movlw	0
 19268  015624  6E20               	movwf	int_eeprom_write@dat+1,c
 19269  015626  0E00               	movlw	0
 19270  015628  6E1F               	movwf	int_eeprom_write@dat,c
 19271  01562A  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19272                           
 19273                           ;EEPROM.c: 112: int_eeprom_write((0x17),0);
 19274  01562E  0E00               	movlw	0
 19275  015630  6E1E               	movwf	int_eeprom_write@adr+1,c
 19276  015632  0E17               	movlw	23
 19277  015634  6E1D               	movwf	int_eeprom_write@adr,c
 19278  015636  0E00               	movlw	0
 19279  015638  6E20               	movwf	int_eeprom_write@dat+1,c
 19280  01563A  0E00               	movlw	0
 19281  01563C  6E1F               	movwf	int_eeprom_write@dat,c
 19282  01563E  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19283  015642                     l15973:
 19284                           
 19285                           ;EEPROM.c: 113: }
 19286                           ;EEPROM.c: 114: }
 19287                           ;EEPROM.c: 115: if(One_Time_Flag == 1)
 19288  015642  0101               	movlb	1	; () banked
 19289  015644  05AD               	decf	_One_Time_Flag& (0+255),w,b
 19290  015646  A4D8               	btfss	status,2,c
 19291  015648  D075               	goto	l15991
 19292                           
 19293                           ; BSR set to: 1
 19294                           ;EEPROM.c: 116: {
 19295                           ;EEPROM.c: 117: EP_Errors3 = EP_Errors2;
 19296  01564A  C038  F039         	movff	_EP_Errors2,_EP_Errors3
 19297                           
 19298                           ;EEPROM.c: 118: EP_Errors2 = EP_Errors1;
 19299  01564E  C037  F038         	movff	_EP_Errors1,_EP_Errors2
 19300                           
 19301                           ;EEPROM.c: 119: EP_Errors1 = Errors;
 19302  015652  C03A  F037         	movff	_Errors,_EP_Errors1
 19303                           
 19304                           ; BSR set to: 1
 19305                           ;EEPROM.c: 121: int_eeprom_write((0x19),EP_Errors3);
 19306  015656  0E00               	movlw	0
 19307  015658  6E1E               	movwf	int_eeprom_write@adr+1,c
 19308  01565A  0E19               	movlw	25
 19309  01565C  6E1D               	movwf	int_eeprom_write@adr,c
 19310  01565E  C039  F01F         	movff	_EP_Errors3,int_eeprom_write@dat
 19311  015662  6A20               	clrf	int_eeprom_write@dat+1,c
 19312  015664  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19313                           
 19314                           ;EEPROM.c: 122: int_eeprom_write((0x18),EP_Errors2);
 19315  015668  0E00               	movlw	0
 19316  01566A  6E1E               	movwf	int_eeprom_write@adr+1,c
 19317  01566C  0E18               	movlw	24
 19318  01566E  6E1D               	movwf	int_eeprom_write@adr,c
 19319  015670  C038  F01F         	movff	_EP_Errors2,int_eeprom_write@dat
 19320  015674  6A20               	clrf	int_eeprom_write@dat+1,c
 19321  015676  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19322                           
 19323                           ;EEPROM.c: 123: int_eeprom_write((0x17),EP_Errors1);
 19324  01567A  0E00               	movlw	0
 19325  01567C  6E1E               	movwf	int_eeprom_write@adr+1,c
 19326  01567E  0E17               	movlw	23
 19327  015680  6E1D               	movwf	int_eeprom_write@adr,c
 19328  015682  C037  F01F         	movff	_EP_Errors1,int_eeprom_write@dat
 19329  015686  6A20               	clrf	int_eeprom_write@dat+1,c
 19330  015688  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19331                           
 19332                           ;EEPROM.c: 125: GiMinutes_3 = GiMinutes_2;
 19333  01568C  C033  F143         	movff	_GiMinutes_2,_GiMinutes_3
 19334  015690  C034  F144         	movff	_GiMinutes_2+1,_GiMinutes_3+1
 19335                           
 19336                           ;EEPROM.c: 126: GiMinutes_2 = GiMinutes_1;
 19337  015694  C141  F033         	movff	_GiMinutes_1,_GiMinutes_2
 19338  015698  C142  F034         	movff	_GiMinutes_1+1,_GiMinutes_2+1
 19339                           
 19340                           ;EEPROM.c: 127: GiMinutes_1 = GiMinutes;
 19341  01569C  C294  F141         	movff	_GiMinutes,_GiMinutes_1
 19342  0156A0  C295  F142         	movff	_GiMinutes+1,_GiMinutes_1+1
 19343                           
 19344                           ;EEPROM.c: 129: int_eeprom_write((0x13),GiMinutes_3);
 19345  0156A4  0E00               	movlw	0
 19346  0156A6  6E1E               	movwf	int_eeprom_write@adr+1,c
 19347  0156A8  0E13               	movlw	19
 19348  0156AA  6E1D               	movwf	int_eeprom_write@adr,c
 19349  0156AC  C143  F01F         	movff	_GiMinutes_3,int_eeprom_write@dat
 19350  0156B0  C144  F020         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 19351  0156B4  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19352                           
 19353                           ;EEPROM.c: 130: int_eeprom_write((0x12),GiMinutes_2);
 19354  0156B8  0E00               	movlw	0
 19355  0156BA  6E1E               	movwf	int_eeprom_write@adr+1,c
 19356  0156BC  0E12               	movlw	18
 19357  0156BE  6E1D               	movwf	int_eeprom_write@adr,c
 19358  0156C0  C033  F01F         	movff	_GiMinutes_2,int_eeprom_write@dat
 19359  0156C4  C034  F020         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 19360  0156C8  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19361                           
 19362                           ;EEPROM.c: 131: int_eeprom_write((0x11),GiMinutes_1);
 19363  0156CC  0E00               	movlw	0
 19364  0156CE  6E1E               	movwf	int_eeprom_write@adr+1,c
 19365  0156D0  0E11               	movlw	17
 19366  0156D2  6E1D               	movwf	int_eeprom_write@adr,c
 19367  0156D4  C141  F01F         	movff	_GiMinutes_1,int_eeprom_write@dat
 19368  0156D8  C142  F020         	movff	_GiMinutes_1+1,int_eeprom_write@dat+1
 19369  0156DC  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19370                           
 19371                           ;EEPROM.c: 133: GiHours_3 = GiHours_2;
 19372  0156E0  C13D  F13F         	movff	_GiHours_2,_GiHours_3
 19373  0156E4  C13E  F140         	movff	_GiHours_2+1,_GiHours_3+1
 19374                           
 19375                           ;EEPROM.c: 134: GiHours_2 = GiHours_1;
 19376  0156E8  C13B  F13D         	movff	_GiHours_1,_GiHours_2
 19377  0156EC  C13C  F13E         	movff	_GiHours_1+1,_GiHours_2+1
 19378                           
 19379                           ;EEPROM.c: 135: GiHours_1 = GiHours;
 19380  0156F0  C292  F13B         	movff	_GiHours,_GiHours_1
 19381  0156F4  C293  F13C         	movff	_GiHours+1,_GiHours_1+1
 19382                           
 19383                           ;EEPROM.c: 137: int_eeprom_write((0x16),GiHours_3);
 19384  0156F8  0E00               	movlw	0
 19385  0156FA  6E1E               	movwf	int_eeprom_write@adr+1,c
 19386  0156FC  0E16               	movlw	22
 19387  0156FE  6E1D               	movwf	int_eeprom_write@adr,c
 19388  015700  C13F  F01F         	movff	_GiHours_3,int_eeprom_write@dat
 19389  015704  C140  F020         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 19390  015708  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19391                           
 19392                           ;EEPROM.c: 138: int_eeprom_write((0x15),GiHours_2);
 19393  01570C  0E00               	movlw	0
 19394  01570E  6E1E               	movwf	int_eeprom_write@adr+1,c
 19395  015710  0E15               	movlw	21
 19396  015712  6E1D               	movwf	int_eeprom_write@adr,c
 19397  015714  C13D  F01F         	movff	_GiHours_2,int_eeprom_write@dat
 19398  015718  C13E  F020         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 19399  01571C  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19400                           
 19401                           ;EEPROM.c: 139: int_eeprom_write((0x14),GiHours_1);
 19402  015720  0E00               	movlw	0
 19403  015722  6E1E               	movwf	int_eeprom_write@adr+1,c
 19404  015724  0E14               	movlw	20
 19405  015726  6E1D               	movwf	int_eeprom_write@adr,c
 19406  015728  C13B  F01F         	movff	_GiHours_1,int_eeprom_write@dat
 19407  01572C  C13C  F020         	movff	_GiHours_1+1,int_eeprom_write@dat+1
 19408  015730  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19409  015734                     l15991:
 19410                           
 19411                           ;EEPROM.c: 140: }
 19412                           ;EEPROM.c: 142: if(EP_Errors3 != 0)
 19413  015734  5039               	movf	_EP_Errors3,w,c
 19414  015736  B4D8               	btfsc	status,2,c
 19415  015738  D02C               	goto	l15999
 19416                           
 19417                           ;EEPROM.c: 143: {
 19418                           ;EEPROM.c: 145: Hours_1 = GiHours_2 - GiHours_3;
 19419  01573A  C13F  F021         	movff	_GiHours_3,??_EEPROM_Error_Stop
 19420  01573E  C140  F022         	movff	_GiHours_3+1,??_EEPROM_Error_Stop+1
 19421  015742  1E21               	comf	??_EEPROM_Error_Stop,f,c
 19422  015744  1E22               	comf	??_EEPROM_Error_Stop+1,f,c
 19423  015746  4A21               	infsnz	??_EEPROM_Error_Stop,f,c
 19424  015748  2A22               	incf	??_EEPROM_Error_Stop+1,f,c
 19425  01574A  0101               	movlb	1	; () banked
 19426  01574C  513D               	movf	_GiHours_2& (0+255),w,b
 19427  01574E  2421               	addwf	??_EEPROM_Error_Stop,w,c
 19428  015750  0102               	movlb	2	; () banked
 19429  015752  6FF6               	movwf	_Hours_1& (0+255),b
 19430  015754  0101               	movlb	1	; () banked
 19431  015756  513E               	movf	(_GiHours_2+1)& (0+255),w,b
 19432  015758  2022               	addwfc	??_EEPROM_Error_Stop+1,w,c
 19433  01575A  0102               	movlb	2	; () banked
 19434  01575C  6FF7               	movwf	(_Hours_1+1)& (0+255),b
 19435                           
 19436                           ;EEPROM.c: 146: if(Hours_1 > 0)
 19437  01575E  0102               	movlb	2	; () banked
 19438  015760  BFF7               	btfsc	(_Hours_1+1)& (0+255),7,b
 19439  015762  D011               	goto	l15997
 19440  015764  0102               	movlb	2	; () banked
 19441  015766  51F7               	movf	(_Hours_1+1)& (0+255),w,b
 19442  015768  E104               	bnz	u7270
 19443  01576A  0102               	movlb	2	; () banked
 19444  01576C  05F6               	decf	_Hours_1& (0+255),w,b
 19445  01576E  A0D8               	btfss	status,0,c
 19446  015770  D00A               	goto	l15997
 19447  015772                     u7270:
 19448                           
 19449                           ; BSR set to: 2
 19450                           ;EEPROM.c: 147: {
 19451                           ;EEPROM.c: 148: Minutes = (60 * Hours_1) + (GiMinutes_2 - GiMinutes_3);
 19452  015772  0101               	movlb	1	; () banked
 19453  015774  5143               	movf	_GiMinutes_3& (0+255),w,b
 19454  015776  0800               	sublw	0
 19455  015778  6E21               	movwf	??_EEPROM_Error_Stop& (0+255),c
 19456  01577A  0102               	movlb	2	; () banked
 19457  01577C  51F6               	movf	_Hours_1& (0+255),w,b
 19458  01577E  0D3C               	mullw	60
 19459  015780  50F3               	movf	prodl,w,c
 19460  015782  2421               	addwf	??_EEPROM_Error_Stop,w,c
 19461  015784  D003               	goto	L9
 19462  015786                     l15997:
 19463                           
 19464                           ;EEPROM.c: 150: else
 19465                           ;EEPROM.c: 151: {
 19466                           ;EEPROM.c: 152: Minutes = GiMinutes_2 - GiMinutes_3;
 19467  015786  0101               	movlb	1	; () banked
 19468  015788  5143               	movf	_GiMinutes_3& (0+255),w,b
 19469  01578A  0800               	sublw	0
 19470  01578C                     L9:
 19471  01578C  2433               	addwf	_GiMinutes_2,w,c
 19472  01578E  0101               	movlb	1	; () banked
 19473  015790  6FA7               	movwf	_Minutes& (0+255),b
 19474  015792                     l15999:
 19475                           
 19476                           ;EEPROM.c: 153: }
 19477                           ;EEPROM.c: 154: }
 19478                           ;EEPROM.c: 156: if(EP_Errors2 != 0)
 19479  015792  5038               	movf	_EP_Errors2,w,c
 19480  015794  B4D8               	btfsc	status,2,c
 19481  015796  D02B               	goto	l10281
 19482                           
 19483                           ;EEPROM.c: 157: {
 19484                           ;EEPROM.c: 158: Hours_2 = GiHours_1 - GiHours_2;
 19485  015798  C13D  F021         	movff	_GiHours_2,??_EEPROM_Error_Stop
 19486  01579C  C13E  F022         	movff	_GiHours_2+1,??_EEPROM_Error_Stop+1
 19487  0157A0  1E21               	comf	??_EEPROM_Error_Stop,f,c
 19488  0157A2  1E22               	comf	??_EEPROM_Error_Stop+1,f,c
 19489  0157A4  4A21               	infsnz	??_EEPROM_Error_Stop,f,c
 19490  0157A6  2A22               	incf	??_EEPROM_Error_Stop+1,f,c
 19491  0157A8  0101               	movlb	1	; () banked
 19492  0157AA  513B               	movf	_GiHours_1& (0+255),w,b
 19493  0157AC  2421               	addwf	??_EEPROM_Error_Stop,w,c
 19494  0157AE  0102               	movlb	2	; () banked
 19495  0157B0  6FF8               	movwf	_Hours_2& (0+255),b
 19496  0157B2  0101               	movlb	1	; () banked
 19497  0157B4  513C               	movf	(_GiHours_1+1)& (0+255),w,b
 19498  0157B6  2022               	addwfc	??_EEPROM_Error_Stop+1,w,c
 19499  0157B8  0102               	movlb	2	; () banked
 19500  0157BA  6FF9               	movwf	(_Hours_2+1)& (0+255),b
 19501                           
 19502                           ;EEPROM.c: 159: if(Hours_2 > 0)
 19503  0157BC  0102               	movlb	2	; () banked
 19504  0157BE  BFF9               	btfsc	(_Hours_2+1)& (0+255),7,b
 19505  0157C0  D010               	goto	l16005
 19506  0157C2  0102               	movlb	2	; () banked
 19507  0157C4  51F9               	movf	(_Hours_2+1)& (0+255),w,b
 19508  0157C6  E104               	bnz	u7290
 19509  0157C8  0102               	movlb	2	; () banked
 19510  0157CA  05F8               	decf	_Hours_2& (0+255),w,b
 19511  0157CC  A0D8               	btfss	status,0,c
 19512  0157CE  D009               	goto	l16005
 19513  0157D0                     u7290:
 19514                           
 19515                           ; BSR set to: 2
 19516                           ;EEPROM.c: 160: {
 19517                           ;EEPROM.c: 161: Minutes_1 = (60 * Hours_2) + (GiMinutes_1 - GiMinutes_2);
 19518  0157D0  5033               	movf	_GiMinutes_2,w,c
 19519  0157D2  0800               	sublw	0
 19520  0157D4  6E21               	movwf	??_EEPROM_Error_Stop& (0+255),c
 19521  0157D6  0102               	movlb	2	; () banked
 19522  0157D8  51F8               	movf	_Hours_2& (0+255),w,b
 19523  0157DA  0D3C               	mullw	60
 19524  0157DC  50F3               	movf	prodl,w,c
 19525  0157DE  2421               	addwf	??_EEPROM_Error_Stop,w,c
 19526  0157E0  D002               	goto	L10
 19527  0157E2                     l16005:
 19528                           
 19529                           ;EEPROM.c: 163: else
 19530                           ;EEPROM.c: 164: {
 19531                           ;EEPROM.c: 165: Minutes_1 = GiMinutes_1 - GiMinutes_2;
 19532  0157E2  5033               	movf	_GiMinutes_2,w,c
 19533  0157E4  0800               	sublw	0
 19534  0157E6                     L10:
 19535  0157E6  0101               	movlb	1	; () banked
 19536  0157E8  2541               	addwf	_GiMinutes_1& (0+255),w,b
 19537  0157EA  0101               	movlb	1	; () banked
 19538  0157EC  6FA8               	movwf	_Minutes_1& (0+255),b
 19539  0157EE                     l10281:
 19540                           
 19541                           ;EEPROM.c: 166: }
 19542                           ;EEPROM.c: 167: }
 19543                           ;EEPROM.c: 168: Total_Min = Minutes_1 + Minutes;
 19544  0157EE  0101               	movlb	1	; () banked
 19545  0157F0  51A8               	movf	_Minutes_1& (0+255),w,b
 19546  0157F2  0101               	movlb	1	; () banked
 19547  0157F4  25A7               	addwf	_Minutes& (0+255),w,b
 19548  0157F6  0101               	movlb	1	; () banked
 19549  0157F8  6FC7               	movwf	_Total_Min& (0+255),b
 19550                           
 19551                           ; BSR set to: 1
 19552                           ;EEPROM.c: 170: if(Minutes_1 != 0 && Minutes != 0)
 19553  0157FA  0101               	movlb	1	; () banked
 19554  0157FC  51A8               	movf	_Minutes_1& (0+255),w,b
 19555  0157FE  B4D8               	btfsc	status,2,c
 19556  015800  D005               	goto	l16013
 19557                           
 19558                           ; BSR set to: 1
 19559  015802  0101               	movlb	1	; () banked
 19560  015804  51A7               	movf	_Minutes& (0+255),w,b
 19561  015806  A4D8               	btfss	status,2,c
 19562                           
 19563                           ; BSR set to: 1
 19564                           ;EEPROM.c: 171: {
 19565                           ;EEPROM.c: 172: Last_3_EEPROM_ERROR_Trigger();
 19566  015808  ECF9  F0C5         	call	_Last_3_EEPROM_ERROR_Trigger	;wreg free
 19567  01580C                     l16013:
 19568                           
 19569                           ;EEPROM.c: 173: }
 19570                           ;EEPROM.c: 177: One_Time_Flag = 1;
 19571  01580C  0E01               	movlw	1
 19572  01580E  0101               	movlb	1	; () banked
 19573  015810  6FAD               	movwf	_One_Time_Flag& (0+255),b
 19574                           
 19575                           ; BSR set to: 1
 19576  015812  0012               	return		;funcret
 19577  015814                     __end_of_EEPROM_Error_Stop:
 19578                           	opt stack 0
 19579                           tblptru	equ	0xFF8
 19580                           tblptrh	equ	0xFF7
 19581                           tblptrl	equ	0xFF6
 19582                           tablat	equ	0xFF5
 19583                           prodh	equ	0xFF4
 19584                           prodl	equ	0xFF3
 19585                           intcon	equ	0xFF2
 19586                           postinc0	equ	0xFEE
 19587                           wreg	equ	0xFE8
 19588                           postdec1	equ	0xFE5
 19589                           fsr1h	equ	0xFE2
 19590                           fsr1l	equ	0xFE1
 19591                           indf2	equ	0xFDF
 19592                           postinc2	equ	0xFDE
 19593                           postdec2	equ	0xFDD
 19594                           fsr2h	equ	0xFDA
 19595                           fsr2l	equ	0xFD9
 19596                           status	equ	0xFD8
 19597                           
 19598 ;; *************** function _Last_3_EEPROM_ERROR_Trigger *****************
 19599 ;; Defined at:
 19600 ;;		line 179 in file "EEPROM.c"
 19601 ;; Parameters:    Size  Location     Type
 19602 ;;		None
 19603 ;; Auto vars:     Size  Location     Type
 19604 ;;		None
 19605 ;; Return value:  Size  Location     Type
 19606 ;;                  1    wreg      void 
 19607 ;; Registers used:
 19608 ;;		wreg, status,2, status,0, cstack
 19609 ;; Tracked objects:
 19610 ;;		On entry : 0/0
 19611 ;;		On exit  : 0/0
 19612 ;;		Unchanged: 0/0
 19613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19618 ;;Total ram usage:        0 bytes
 19619 ;; Hardware stack levels used:    1
 19620 ;; Hardware stack levels required when called:    4
 19621 ;; This function calls:
 19622 ;;		_int_eeprom_write
 19623 ;; This function is called by:
 19624 ;;		_EEPROM_Error_Stop
 19625 ;; This function uses a non-reentrant model
 19626 ;;
 19627                           
 19628                           	psect	text50
 19629  018BF2                     __ptext50:
 19630                           	opt stack 0
 19631  018BF2                     _Last_3_EEPROM_ERROR_Trigger:
 19632                           	opt stack 22
 19633                           
 19634                           ;EEPROM.c: 181: if(Total_Min > (15))
 19635                           
 19636                           ; BSR set to: 1
 19637                           ;incstack = 0
 19638  018BF2  0E0F               	movlw	15
 19639  018BF4  0101               	movlb	1	; () banked
 19640  018BF6  65C7               	cpfsgt	_Total_Min& (0+255),b
 19641  018BF8  D05B               	goto	l15605
 19642                           
 19643                           ; BSR set to: 1
 19644                           ;EEPROM.c: 182: {
 19645                           ;EEPROM.c: 183: EP_Errors3 = 0; GiMinutes_3 = 0; GiHours_3 = 0;
 19646  018BFA  0E00               	movlw	0
 19647  018BFC  6E39               	movwf	_EP_Errors3,c
 19648  018BFE  0E00               	movlw	0
 19649  018C00  0101               	movlb	1	; () banked
 19650  018C02  6F44               	movwf	(_GiMinutes_3+1)& (0+255),b
 19651  018C04  0E00               	movlw	0
 19652  018C06  6F43               	movwf	_GiMinutes_3& (0+255),b
 19653  018C08  0E00               	movlw	0
 19654  018C0A  0101               	movlb	1	; () banked
 19655  018C0C  6F40               	movwf	(_GiHours_3+1)& (0+255),b
 19656  018C0E  0E00               	movlw	0
 19657  018C10  6F3F               	movwf	_GiHours_3& (0+255),b
 19658                           
 19659                           ; BSR set to: 1
 19660                           ;EEPROM.c: 184: int_eeprom_write((0x19),EP_Errors3);
 19661  018C12  0E00               	movlw	0
 19662  018C14  6E1E               	movwf	int_eeprom_write@adr+1,c
 19663  018C16  0E19               	movlw	25
 19664  018C18  6E1D               	movwf	int_eeprom_write@adr,c
 19665  018C1A  C039  F01F         	movff	_EP_Errors3,int_eeprom_write@dat
 19666  018C1E  6A20               	clrf	int_eeprom_write@dat+1,c
 19667  018C20  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19668                           
 19669                           ;EEPROM.c: 185: int_eeprom_write((0x13),GiMinutes_3);
 19670  018C24  0E00               	movlw	0
 19671  018C26  6E1E               	movwf	int_eeprom_write@adr+1,c
 19672  018C28  0E13               	movlw	19
 19673  018C2A  6E1D               	movwf	int_eeprom_write@adr,c
 19674  018C2C  C143  F01F         	movff	_GiMinutes_3,int_eeprom_write@dat
 19675  018C30  C144  F020         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 19676  018C34  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19677                           
 19678                           ;EEPROM.c: 186: int_eeprom_write((0x16),GiHours_3);
 19679  018C38  0E00               	movlw	0
 19680  018C3A  6E1E               	movwf	int_eeprom_write@adr+1,c
 19681  018C3C  0E16               	movlw	22
 19682  018C3E  6E1D               	movwf	int_eeprom_write@adr,c
 19683  018C40  C13F  F01F         	movff	_GiHours_3,int_eeprom_write@dat
 19684  018C44  C140  F020         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 19685  018C48  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19686                           
 19687                           ;EEPROM.c: 188: EP_Errors2 = 0; GiMinutes_2 = 0; GiHours_2 = 0;
 19688  018C4C  0E00               	movlw	0
 19689  018C4E  6E38               	movwf	_EP_Errors2,c
 19690  018C50  0E00               	movlw	0
 19691  018C52  6E34               	movwf	_GiMinutes_2+1,c
 19692  018C54  0E00               	movlw	0
 19693  018C56  6E33               	movwf	_GiMinutes_2,c
 19694  018C58  0E00               	movlw	0
 19695  018C5A  0101               	movlb	1	; () banked
 19696  018C5C  6F3E               	movwf	(_GiHours_2+1)& (0+255),b
 19697  018C5E  0E00               	movlw	0
 19698  018C60  6F3D               	movwf	_GiHours_2& (0+255),b
 19699                           
 19700                           ;EEPROM.c: 189: int_eeprom_write((0x18),EP_Errors2);
 19701  018C62  0E00               	movlw	0
 19702  018C64  6E1E               	movwf	int_eeprom_write@adr+1,c
 19703  018C66  0E18               	movlw	24
 19704  018C68  6E1D               	movwf	int_eeprom_write@adr,c
 19705  018C6A  C038  F01F         	movff	_EP_Errors2,int_eeprom_write@dat
 19706  018C6E  6A20               	clrf	int_eeprom_write@dat+1,c
 19707  018C70  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19708                           
 19709                           ;EEPROM.c: 190: int_eeprom_write((0x12),GiMinutes_2);
 19710  018C74  0E00               	movlw	0
 19711  018C76  6E1E               	movwf	int_eeprom_write@adr+1,c
 19712  018C78  0E12               	movlw	18
 19713  018C7A  6E1D               	movwf	int_eeprom_write@adr,c
 19714  018C7C  C033  F01F         	movff	_GiMinutes_2,int_eeprom_write@dat
 19715  018C80  C034  F020         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 19716  018C84  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19717                           
 19718                           ;EEPROM.c: 191: int_eeprom_write((0x15),GiHours_2);
 19719  018C88  0E00               	movlw	0
 19720  018C8A  6E1E               	movwf	int_eeprom_write@adr+1,c
 19721  018C8C  0E15               	movlw	21
 19722  018C8E  6E1D               	movwf	int_eeprom_write@adr,c
 19723  018C90  C13D  F01F         	movff	_GiHours_2,int_eeprom_write@dat
 19724  018C94  C13E  F020         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 19725  018C98  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19726                           
 19727                           ;EEPROM.c: 193: Total_Min = 0; Minutes_1 = 0; Minutes = 0;
 19728  018C9C  0E00               	movlw	0
 19729  018C9E  0101               	movlb	1	; () banked
 19730  018CA0  6FC7               	movwf	_Total_Min& (0+255),b
 19731                           
 19732                           ; BSR set to: 1
 19733  018CA2  0E00               	movlw	0
 19734  018CA4  0101               	movlb	1	; () banked
 19735  018CA6  6FA8               	movwf	_Minutes_1& (0+255),b
 19736                           
 19737                           ; BSR set to: 1
 19738  018CA8  0E00               	movlw	0
 19739  018CAA  0101               	movlb	1	; () banked
 19740  018CAC  6FA7               	movwf	_Minutes& (0+255),b
 19741                           
 19742                           ;EEPROM.c: 194: }
 19743  018CAE  0012               	return	
 19744  018CB0                     l15605:
 19745                           
 19746                           ; BSR set to: 1
 19747                           ;EEPROM.c: 195: else
 19748                           ;EEPROM.c: 196: {
 19749                           ;EEPROM.c: 197: EEPROM_Error_Flag = 1;
 19750  018CB0  0E01               	movlw	1
 19751  018CB2  6E36               	movwf	_EEPROM_Error_Flag,c
 19752                           
 19753                           ; BSR set to: 1
 19754                           ;EEPROM.c: 198: Errors = EP_Errors1;
 19755  018CB4  C037  F03A         	movff	_EP_Errors1,_Errors
 19756                           
 19757                           ; BSR set to: 1
 19758                           ;EEPROM.c: 199: int_eeprom_write((0x20),EEPROM_Error_Flag);
 19759  018CB8  0E00               	movlw	0
 19760  018CBA  6E1E               	movwf	int_eeprom_write@adr+1,c
 19761  018CBC  0E20               	movlw	32
 19762  018CBE  6E1D               	movwf	int_eeprom_write@adr,c
 19763  018CC0  C036  F01F         	movff	_EEPROM_Error_Flag,int_eeprom_write@dat
 19764  018CC4  6A20               	clrf	int_eeprom_write@dat+1,c
 19765  018CC6  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 19766  018CCA  0012               	return	
 19767  018CCC                     __end_of_Last_3_EEPROM_ERROR_Trigger:
 19768                           	opt stack 0
 19769                           tblptru	equ	0xFF8
 19770                           tblptrh	equ	0xFF7
 19771                           tblptrl	equ	0xFF6
 19772                           tablat	equ	0xFF5
 19773                           prodh	equ	0xFF4
 19774                           prodl	equ	0xFF3
 19775                           intcon	equ	0xFF2
 19776                           postinc0	equ	0xFEE
 19777                           wreg	equ	0xFE8
 19778                           postdec1	equ	0xFE5
 19779                           fsr1h	equ	0xFE2
 19780                           fsr1l	equ	0xFE1
 19781                           indf2	equ	0xFDF
 19782                           postinc2	equ	0xFDE
 19783                           postdec2	equ	0xFDD
 19784                           fsr2h	equ	0xFDA
 19785                           fsr2l	equ	0xFD9
 19786                           status	equ	0xFD8
 19787                           
 19788 ;; *************** function _Error_Checking_One_Second *****************
 19789 ;; Defined at:
 19790 ;;		line 78 in file "ERROR_HANDLING.c"
 19791 ;; Parameters:    Size  Location     Type
 19792 ;;		None
 19793 ;; Auto vars:     Size  Location     Type
 19794 ;;		None
 19795 ;; Return value:  Size  Location     Type
 19796 ;;                  1    wreg      void 
 19797 ;; Registers used:
 19798 ;;		wreg, status,2, status,0, cstack
 19799 ;; Tracked objects:
 19800 ;;		On entry : 0/0
 19801 ;;		On exit  : 0/0
 19802 ;;		Unchanged: 0/0
 19803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19808 ;;Total ram usage:        0 bytes
 19809 ;; Hardware stack levels used:    1
 19810 ;; Hardware stack levels required when called:    6
 19811 ;; This function calls:
 19812 ;;		_Communication_Error
 19813 ;;		_DC_Bus_Voltage
 19814 ;;		_Generator_One_Feedback
 19815 ;;		_Generator_RPM
 19816 ;;		_Grid_Frequency
 19817 ;;		_Grid_Maximum_Power
 19818 ;;		_Grid_Minimum_Power
 19819 ;;		_Grid_OV
 19820 ;;		_Grid_Over_Current
 19821 ;;		_Grid_Phase_Sequence
 19822 ;;		_Grid_UV
 19823 ;;		_Motor_Slip_Cal
 19824 ;;		_Pitch_Feedback
 19825 ;;		_Pitch_PS_ON_Function
 19826 ;;		_Ramp_Up_Slip
 19827 ;;		_Ramp_Up_Slip_Error_Trigger
 19828 ;;		_Rotor_Slip_Cal
 19829 ;;		_Start_Stop
 19830 ;;		_Turbine_OverLoaded_Error
 19831 ;;		_Turbine_Over_Speed
 19832 ;;		_Turbine_Restore_Check
 19833 ;;		_Turbine_Under_speed
 19834 ;;		_VFD_PS_ON_Function
 19835 ;;		_VFD_Run_Time_Error
 19836 ;;		_Wind_Speed_Error_Trigger
 19837 ;; This function is called by:
 19838 ;;		_Timer0_OneSecond_Function
 19839 ;; This function uses a non-reentrant model
 19840 ;;
 19841                           
 19842                           	psect	text51
 19843  018E76                     __ptext51:
 19844                           	opt stack 0
 19845  018E76                     _Error_Checking_One_Second:
 19846                           	opt stack 23
 19847                           
 19848                           ;ERROR_HANDLING.c: 80: if(Turbine_state == STARTUP_STATE)
 19849                           
 19850                           ;incstack = 0
 19851  018E76  0100               	movlb	0	; () banked
 19852  018E78  51D8               	movf	_Turbine_state& (0+255),w,b
 19853  018E7A  A4D8               	btfss	status,2,c
 19854  018E7C  D018               	goto	l21313
 19855                           
 19856                           ; BSR set to: 0
 19857                           ;ERROR_HANDLING.c: 81: {
 19858                           ;ERROR_HANDLING.c: 82: Wind_Speed_Error_Trigger();
 19859  018E7E  ECAE  F0BA         	call	_Wind_Speed_Error_Trigger	;wreg free
 19860                           
 19861                           ;ERROR_HANDLING.c: 83: VFD_PS_ON_Function();
 19862  018E82  EC31  F0D0         	call	_VFD_PS_ON_Function	;wreg free
 19863                           
 19864                           ;ERROR_HANDLING.c: 84: Pitch_PS_ON_Function();
 19865  018E86  EC28  F0D2         	call	_Pitch_PS_ON_Function	;wreg free
 19866                           
 19867                           ;ERROR_HANDLING.c: 85: Grid_UV();
 19868  018E8A  EC68  F0BB         	call	_Grid_UV	;wreg free
 19869                           
 19870                           ;ERROR_HANDLING.c: 86: Grid_OV();
 19871  018E8E  EC1C  F0BC         	call	_Grid_OV	;wreg free
 19872                           
 19873                           ;ERROR_HANDLING.c: 87: Grid_Frequency();
 19874  018E92  ECBD  F0CE         	call	_Grid_Frequency	;wreg free
 19875                           
 19876                           ;ERROR_HANDLING.c: 88: DC_Bus_Voltage();
 19877  018E96  EC88  F0C5         	call	_DC_Bus_Voltage	;wreg free
 19878                           
 19879                           ;ERROR_HANDLING.c: 89: Grid_Phase_Sequence();
 19880  018E9A  ECA6  F0D4         	call	_Grid_Phase_Sequence	;wreg free
 19881                           
 19882                           ;ERROR_HANDLING.c: 90: Turbine_Restore_Check();
 19883  018E9E  EC97  F0CA         	call	_Turbine_Restore_Check	;wreg free
 19884                           
 19885                           ;ERROR_HANDLING.c: 91: Start_Stop();
 19886  018EA2  EC8A  F0C9         	call	_Start_Stop	;wreg free
 19887                           
 19888                           ;ERROR_HANDLING.c: 92: Communication_Error();
 19889  018EA6  ECDC  F0D0         	call	_Communication_Error	;wreg free
 19890                           
 19891                           ;ERROR_HANDLING.c: 93: Grid_Over_Current();
 19892  018EAA  EC2F  F0C0         	call	_Grid_Over_Current	;wreg free
 19893  018EAE                     l21313:
 19894                           
 19895                           ;ERROR_HANDLING.c: 94: }
 19896                           ;ERROR_HANDLING.c: 95: if(Turbine_state == RUNNING_STATE)
 19897  018EAE  0E02               	movlw	2
 19898  018EB0  0100               	movlb	0	; () banked
 19899  018EB2  19D8               	xorwf	_Turbine_state& (0+255),w,b
 19900  018EB4  A4D8               	btfss	status,2,c
 19901  018EB6  D028               	goto	l21321
 19902                           
 19903                           ; BSR set to: 0
 19904                           ;ERROR_HANDLING.c: 96: {
 19905                           ;ERROR_HANDLING.c: 97: VFD_PS_ON_Function();
 19906  018EB8  EC31  F0D0         	call	_VFD_PS_ON_Function	;wreg free
 19907                           
 19908                           ;ERROR_HANDLING.c: 98: Wind_Speed_Error_Trigger();
 19909  018EBC  ECAE  F0BA         	call	_Wind_Speed_Error_Trigger	;wreg free
 19910                           
 19911                           ;ERROR_HANDLING.c: 99: Turbine_Under_speed();
 19912  018EC0  EC70  F0D1         	call	_Turbine_Under_speed	;wreg free
 19913                           
 19914                           ;ERROR_HANDLING.c: 100: Generator_RPM();
 19915  018EC4  EC7F  F0D2         	call	_Generator_RPM	;wreg free
 19916                           
 19917                           ;ERROR_HANDLING.c: 101: Rotor_Slip_Cal();
 19918  018EC8  ECF0  F0CA         	call	_Rotor_Slip_Cal	;wreg free
 19919                           
 19920                           ;ERROR_HANDLING.c: 102: Motor_Slip_Cal();
 19921  018ECC  EC10  F0C2         	call	_Motor_Slip_Cal	;wreg free
 19922                           
 19923                           ;ERROR_HANDLING.c: 103: Pitch_Feedback();
 19924  018ED0  EC0E  F0D1         	call	_Pitch_Feedback	;wreg free
 19925                           
 19926                           ;ERROR_HANDLING.c: 104: Generator_One_Feedback();
 19927  018ED4  EC3F  F0D1         	call	_Generator_One_Feedback	;wreg free
 19928                           
 19929                           ;ERROR_HANDLING.c: 105: Start_Stop();
 19930  018ED8  EC8A  F0C9         	call	_Start_Stop	;wreg free
 19931                           
 19932                           ;ERROR_HANDLING.c: 106: Communication_Error();
 19933  018EDC  ECDC  F0D0         	call	_Communication_Error	;wreg free
 19934                           
 19935                           ;ERROR_HANDLING.c: 107: Turbine_Over_Speed();
 19936  018EE0  EC55  F0D2         	call	_Turbine_Over_Speed	;wreg free
 19937                           
 19938                           ;ERROR_HANDLING.c: 110: if(Five_Second_flag)
 19939  018EE4  0101               	movlb	1	; () banked
 19940  018EE6  5175               	movf	_Five_Second_flag& (0+255),w,b
 19941  018EE8  B4D8               	btfsc	status,2,c
 19942  018EEA  D00E               	goto	l21321
 19943                           
 19944                           ; BSR set to: 1
 19945                           ;ERROR_HANDLING.c: 111: {
 19946                           ;ERROR_HANDLING.c: 112: Turbine_OverLoaded_Error();
 19947  018EEC  EC9E  F0D1         	call	_Turbine_OverLoaded_Error	;wreg free
 19948                           
 19949                           ;ERROR_HANDLING.c: 113: Grid_Over_Current();
 19950  018EF0  EC2F  F0C0         	call	_Grid_Over_Current	;wreg free
 19951                           
 19952                           ;ERROR_HANDLING.c: 114: Grid_UV();
 19953  018EF4  EC68  F0BB         	call	_Grid_UV	;wreg free
 19954                           
 19955                           ;ERROR_HANDLING.c: 115: Grid_OV();
 19956  018EF8  EC1C  F0BC         	call	_Grid_OV	;wreg free
 19957                           
 19958                           ;ERROR_HANDLING.c: 116: Grid_Frequency();
 19959  018EFC  ECBD  F0CE         	call	_Grid_Frequency	;wreg free
 19960                           
 19961                           ;ERROR_HANDLING.c: 117: Grid_Minimum_Power();
 19962  018F00  ECCC  F0D1         	call	_Grid_Minimum_Power	;wreg free
 19963                           
 19964                           ;ERROR_HANDLING.c: 118: Grid_Maximum_Power();
 19965  018F04  ECFA  F0D1         	call	_Grid_Maximum_Power	;wreg free
 19966  018F08                     l21321:
 19967                           
 19968                           ;ERROR_HANDLING.c: 119: }
 19969                           ;ERROR_HANDLING.c: 121: }
 19970                           ;ERROR_HANDLING.c: 122: if(Turbine_state == RAMPUP_STATE)
 19971  018F08  0100               	movlb	0	; () banked
 19972  018F0A  05D8               	decf	_Turbine_state& (0+255),w,b
 19973  018F0C  A4D8               	btfss	status,2,c
 19974  018F0E  0012               	return	
 19975                           
 19976                           ; BSR set to: 0
 19977                           ;ERROR_HANDLING.c: 123: {
 19978                           ;ERROR_HANDLING.c: 124: DC_Bus_Voltage();
 19979  018F10  EC88  F0C5         	call	_DC_Bus_Voltage	;wreg free
 19980                           
 19981                           ;ERROR_HANDLING.c: 125: Rotor_Slip_Cal();
 19982  018F14  ECF0  F0CA         	call	_Rotor_Slip_Cal	;wreg free
 19983                           
 19984                           ;ERROR_HANDLING.c: 126: Motor_Slip_Cal();
 19985  018F18  EC10  F0C2         	call	_Motor_Slip_Cal	;wreg free
 19986                           
 19987                           ;ERROR_HANDLING.c: 127: Ramp_Up_Slip();
 19988  018F1C  EC49  F0CB         	call	_Ramp_Up_Slip	;wreg free
 19989                           
 19990                           ;ERROR_HANDLING.c: 128: Pitch_Feedback();
 19991  018F20  EC0E  F0D1         	call	_Pitch_Feedback	;wreg free
 19992                           
 19993                           ;ERROR_HANDLING.c: 129: if(Ten_Sec_RampUp_Flag)
 19994  018F24  0101               	movlb	1	; () banked
 19995  018F26  51C2               	movf	_Ten_Sec_RampUp_Flag& (0+255),w,b
 19996  018F28  B4D8               	btfsc	status,2,c
 19997  018F2A  D008               	goto	l6169
 19998                           
 19999                           ; BSR set to: 1
 20000                           ;ERROR_HANDLING.c: 130: {
 20001                           ;ERROR_HANDLING.c: 131: Ramp_Up_Slip_Error_Trigger();
 20002  018F2C  EC75  F0C1         	call	_Ramp_Up_Slip_Error_Trigger	;wreg free
 20003                           
 20004                           ;ERROR_HANDLING.c: 132: VFD_Run_Time_Error();
 20005  018F30  ECCF  F0D2         	call	_VFD_Run_Time_Error	;wreg free
 20006                           
 20007                           ;ERROR_HANDLING.c: 133: Turbine_Over_Speed();
 20008  018F34  EC55  F0D2         	call	_Turbine_Over_Speed	;wreg free
 20009                           
 20010                           ;ERROR_HANDLING.c: 134: Grid_Over_Current();
 20011  018F38  EC2F  F0C0         	call	_Grid_Over_Current	;wreg free
 20012  018F3C                     l6169:
 20013                           
 20014                           ;ERROR_HANDLING.c: 135: }
 20015                           ;ERROR_HANDLING.c: 136: Start_Stop();
 20016  018F3C  EC8A  F0C9         	call	_Start_Stop	;wreg free
 20017                           
 20018                           ;ERROR_HANDLING.c: 137: Communication_Error();
 20019  018F40  ECDC  F0D0         	call	_Communication_Error	;wreg free
 20020  018F44  0012               	return	
 20021  018F46                     __end_of_Error_Checking_One_Second:
 20022                           	opt stack 0
 20023                           tblptru	equ	0xFF8
 20024                           tblptrh	equ	0xFF7
 20025                           tblptrl	equ	0xFF6
 20026                           tablat	equ	0xFF5
 20027                           prodh	equ	0xFF4
 20028                           prodl	equ	0xFF3
 20029                           intcon	equ	0xFF2
 20030                           postinc0	equ	0xFEE
 20031                           wreg	equ	0xFE8
 20032                           postdec1	equ	0xFE5
 20033                           fsr1h	equ	0xFE2
 20034                           fsr1l	equ	0xFE1
 20035                           indf2	equ	0xFDF
 20036                           postinc2	equ	0xFDE
 20037                           postdec2	equ	0xFDD
 20038                           fsr2h	equ	0xFDA
 20039                           fsr2l	equ	0xFD9
 20040                           status	equ	0xFD8
 20041                           
 20042 ;; *************** function _Wind_Speed_Error_Trigger *****************
 20043 ;; Defined at:
 20044 ;;		line 166 in file "ERROR_HANDLING.c"
 20045 ;; Parameters:    Size  Location     Type
 20046 ;;		None
 20047 ;; Auto vars:     Size  Location     Type
 20048 ;;		None
 20049 ;; Return value:  Size  Location     Type
 20050 ;;                  1    wreg      void 
 20051 ;; Registers used:
 20052 ;;		wreg, status,2, status,0, cstack
 20053 ;; Tracked objects:
 20054 ;;		On entry : 0/0
 20055 ;;		On exit  : 0/0
 20056 ;;		Unchanged: 0/0
 20057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20062 ;;Total ram usage:        0 bytes
 20063 ;; Hardware stack levels used:    1
 20064 ;; Hardware stack levels required when called:    4
 20065 ;; This function calls:
 20066 ;;		___ftge
 20067 ;; This function is called by:
 20068 ;;		_Error_Checking_One_Second
 20069 ;; This function uses a non-reentrant model
 20070 ;;
 20071                           
 20072                           	psect	text52
 20073  01755C                     __ptext52:
 20074                           	opt stack 0
 20075  01755C                     _Wind_Speed_Error_Trigger:
 20076                           	opt stack 24
 20077                           
 20078                           ;ERROR_HANDLING.c: 168: if(Turbine_state == STARTUP_STATE)
 20079                           
 20080                           ;incstack = 0
 20081  01755C  0100               	movlb	0	; () banked
 20082  01755E  51D8               	movf	_Turbine_state& (0+255),w,b
 20083  017560  A4D8               	btfss	status,2,c
 20084  017562  D031               	goto	l6184
 20085                           
 20086                           ; BSR set to: 0
 20087                           ;ERROR_HANDLING.c: 169: {
 20088                           ;ERROR_HANDLING.c: 170: if(Wind_Speed_Avg >= (4.5))
 20089  017564  C0D2  F08F         	movff	_Wind_Speed_Avg,___ftge@ff1
 20090  017568  C0D3  F090         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20091  01756C  C0D4  F091         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20092  017570  0E00               	movlw	0
 20093  017572  0100               	movlb	0	; () banked
 20094  017574  6F92               	movwf	___ftge@ff2& (0+255),b
 20095  017576  0E90               	movlw	144
 20096  017578  0100               	movlb	0	; () banked
 20097  01757A  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 20098  01757C  0E40               	movlw	64
 20099  01757E  0100               	movlb	0	; () banked
 20100  017580  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 20101  017582  EC09  F0C8         	call	___ftge	;wreg free
 20102  017586  0100               	movlb	0	; () banked
 20103  017588  A0D8               	btfss	status,0,c
 20104  01758A  D004               	goto	l20603
 20105                           
 20106                           ; BSR set to: 0
 20107                           ;ERROR_HANDLING.c: 171: {
 20108                           ;ERROR_HANDLING.c: 172: Wind_Cut_In_Flag = 1;
 20109  01758C  0E01               	movlw	1
 20110  01758E  0101               	movlb	1	; () banked
 20111  017590  6FDB               	movwf	_Wind_Cut_In_Flag& (0+255),b
 20112                           
 20113                           ;ERROR_HANDLING.c: 173: }
 20114  017592  D019               	goto	l6184
 20115  017594                     l20603:
 20116                           
 20117                           ;ERROR_HANDLING.c: 174: else if(Wind_Speed_Avg < (4.5))
 20118  017594  C0D2  F08F         	movff	_Wind_Speed_Avg,___ftge@ff1
 20119  017598  C0D3  F090         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20120  01759C  C0D4  F091         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20121  0175A0  0E00               	movlw	0
 20122  0175A2  0100               	movlb	0	; () banked
 20123  0175A4  6F92               	movwf	___ftge@ff2& (0+255),b
 20124  0175A6  0E90               	movlw	144
 20125  0175A8  0100               	movlb	0	; () banked
 20126  0175AA  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 20127  0175AC  0E40               	movlw	64
 20128  0175AE  0100               	movlb	0	; () banked
 20129  0175B0  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 20130  0175B2  EC09  F0C8         	call	___ftge	;wreg free
 20131  0175B6  0100               	movlb	0	; () banked
 20132  0175B8  B0D8               	btfsc	status,0,c
 20133  0175BA  D005               	goto	l6184
 20134                           
 20135                           ; BSR set to: 0
 20136                           ;ERROR_HANDLING.c: 175: {
 20137                           ;ERROR_HANDLING.c: 176: Wind_Cut_In_Flag = 0;
 20138  0175BC  0E00               	movlw	0
 20139  0175BE  0101               	movlb	1	; () banked
 20140  0175C0  6FDB               	movwf	_Wind_Cut_In_Flag& (0+255),b
 20141                           
 20142                           ;ERROR_HANDLING.c: 177: Errors = WS_MIN_MAX;
 20143  0175C2  0E01               	movlw	1
 20144  0175C4  6E3A               	movwf	_Errors,c
 20145  0175C6                     l6184:
 20146                           
 20147                           ;ERROR_HANDLING.c: 178: }
 20148                           ;ERROR_HANDLING.c: 179: }
 20149                           ;ERROR_HANDLING.c: 181: if(Turbine_state == STARTUP_STATE)
 20150  0175C6  0100               	movlb	0	; () banked
 20151  0175C8  51D8               	movf	_Turbine_state& (0+255),w,b
 20152  0175CA  A4D8               	btfss	status,2,c
 20153  0175CC  D03E               	goto	l20619
 20154                           
 20155                           ; BSR set to: 0
 20156                           ;ERROR_HANDLING.c: 182: {
 20157                           ;ERROR_HANDLING.c: 183: if(Wind_Speed_Avg >= (15))
 20158  0175CE  C0D2  F08F         	movff	_Wind_Speed_Avg,___ftge@ff1
 20159  0175D2  C0D3  F090         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20160  0175D6  C0D4  F091         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20161  0175DA  0E00               	movlw	0
 20162  0175DC  0100               	movlb	0	; () banked
 20163  0175DE  6F92               	movwf	___ftge@ff2& (0+255),b
 20164  0175E0  0E70               	movlw	112
 20165  0175E2  0100               	movlb	0	; () banked
 20166  0175E4  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 20167  0175E6  0E41               	movlw	65
 20168  0175E8  0100               	movlb	0	; () banked
 20169  0175EA  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 20170  0175EC  EC09  F0C8         	call	___ftge	;wreg free
 20171  0175F0  0100               	movlb	0	; () banked
 20172  0175F2  A0D8               	btfss	status,0,c
 20173  0175F4  D010               	goto	l20615
 20174                           
 20175                           ; BSR set to: 0
 20176                           ;ERROR_HANDLING.c: 184: {
 20177                           ;ERROR_HANDLING.c: 185: Wind_Cut_Out_Counter++;
 20178  0175F6  0101               	movlb	1	; () banked
 20179  0175F8  2BDC               	incf	_Wind_Cut_Out_Counter& (0+255),f,b
 20180                           
 20181                           ; BSR set to: 1
 20182                           ;ERROR_HANDLING.c: 186: if(Wind_Cut_Out_Counter >= 1)
 20183  0175FA  0101               	movlb	1	; () banked
 20184  0175FC  51DC               	movf	_Wind_Cut_Out_Counter& (0+255),w,b
 20185  0175FE  0101               	movlb	1	; () banked
 20186  017600  B4D8               	btfsc	status,2,c
 20187  017602  D023               	goto	l20619
 20188                           
 20189                           ; BSR set to: 1
 20190                           ;ERROR_HANDLING.c: 187: {
 20191                           ;ERROR_HANDLING.c: 188: Wind_Cut_Out_Flag = 1;
 20192  017604  0E01               	movlw	1
 20193  017606  0101               	movlb	1	; () banked
 20194  017608  6FDD               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20195                           
 20196                           ;ERROR_HANDLING.c: 189: Wind_Cut_Out_Counter = 0;
 20197  01760A  0E00               	movlw	0
 20198  01760C  0101               	movlb	1	; () banked
 20199  01760E  6FDC               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20200                           
 20201                           ;ERROR_HANDLING.c: 190: Errors = WS_MIN_MAX;
 20202  017610  0E01               	movlw	1
 20203  017612  6E3A               	movwf	_Errors,c
 20204                           
 20205                           ; BSR set to: 1
 20206                           ;ERROR_HANDLING.c: 191: }
 20207                           ;ERROR_HANDLING.c: 192: }
 20208  017614  D01A               	goto	l20619
 20209  017616                     l20615:
 20210                           
 20211                           ;ERROR_HANDLING.c: 193: else if(Wind_Speed_Avg < (15))
 20212  017616  C0D2  F08F         	movff	_Wind_Speed_Avg,___ftge@ff1
 20213  01761A  C0D3  F090         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20214  01761E  C0D4  F091         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20215  017622  0E00               	movlw	0
 20216  017624  0100               	movlb	0	; () banked
 20217  017626  6F92               	movwf	___ftge@ff2& (0+255),b
 20218  017628  0E70               	movlw	112
 20219  01762A  0100               	movlb	0	; () banked
 20220  01762C  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 20221  01762E  0E41               	movlw	65
 20222  017630  0100               	movlb	0	; () banked
 20223  017632  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 20224  017634  EC09  F0C8         	call	___ftge	;wreg free
 20225  017638  0100               	movlb	0	; () banked
 20226  01763A  B0D8               	btfsc	status,0,c
 20227  01763C  D006               	goto	l20619
 20228                           
 20229                           ; BSR set to: 0
 20230                           ;ERROR_HANDLING.c: 194: {
 20231                           ;ERROR_HANDLING.c: 195: Wind_Cut_Out_Flag = 0;
 20232  01763E  0E00               	movlw	0
 20233  017640  0101               	movlb	1	; () banked
 20234  017642  6FDD               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20235                           
 20236                           ;ERROR_HANDLING.c: 196: Wind_Cut_Out_Counter = 0;
 20237  017644  0E00               	movlw	0
 20238  017646  0101               	movlb	1	; () banked
 20239  017648  6FDC               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20240  01764A                     l20619:
 20241                           
 20242                           ;ERROR_HANDLING.c: 197: }
 20243                           ;ERROR_HANDLING.c: 198: }
 20244                           ;ERROR_HANDLING.c: 199: if(Turbine_state == RUNNING_STATE)
 20245  01764A  0E02               	movlw	2
 20246  01764C  0100               	movlb	0	; () banked
 20247  01764E  19D8               	xorwf	_Turbine_state& (0+255),w,b
 20248  017650  A4D8               	btfss	status,2,c
 20249  017652  0012               	return	
 20250                           
 20251                           ; BSR set to: 0
 20252                           ;ERROR_HANDLING.c: 200: {
 20253                           ;ERROR_HANDLING.c: 201: if(Wind_Speed_Avg >= (15))
 20254  017654  C0D2  F08F         	movff	_Wind_Speed_Avg,___ftge@ff1
 20255  017658  C0D3  F090         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20256  01765C  C0D4  F091         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20257  017660  0E00               	movlw	0
 20258  017662  0100               	movlb	0	; () banked
 20259  017664  6F92               	movwf	___ftge@ff2& (0+255),b
 20260  017666  0E70               	movlw	112
 20261  017668  0100               	movlb	0	; () banked
 20262  01766A  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 20263  01766C  0E41               	movlw	65
 20264  01766E  0100               	movlb	0	; () banked
 20265  017670  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 20266  017672  EC09  F0C8         	call	___ftge	;wreg free
 20267  017676  0100               	movlb	0	; () banked
 20268  017678  A0D8               	btfss	status,0,c
 20269  01767A  D00F               	goto	l20629
 20270                           
 20271                           ; BSR set to: 0
 20272                           ;ERROR_HANDLING.c: 202: {
 20273                           ;ERROR_HANDLING.c: 203: Wind_Cut_Out_Counter++;
 20274  01767C  0101               	movlb	1	; () banked
 20275  01767E  2BDC               	incf	_Wind_Cut_Out_Counter& (0+255),f,b
 20276                           
 20277                           ; BSR set to: 1
 20278                           ;ERROR_HANDLING.c: 204: if(Wind_Cut_Out_Counter >= 10)
 20279  017680  0E09               	movlw	9
 20280  017682  0101               	movlb	1	; () banked
 20281  017684  65DC               	cpfsgt	_Wind_Cut_Out_Counter& (0+255),b
 20282  017686  0012               	return	
 20283                           
 20284                           ; BSR set to: 1
 20285                           ;ERROR_HANDLING.c: 205: {
 20286                           ;ERROR_HANDLING.c: 206: Wind_Cut_Out_Flag = 1;
 20287  017688  0E01               	movlw	1
 20288  01768A  0101               	movlb	1	; () banked
 20289  01768C  6FDD               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20290                           
 20291                           ;ERROR_HANDLING.c: 207: Wind_Cut_Out_Counter = 0;
 20292  01768E  0E00               	movlw	0
 20293  017690  0101               	movlb	1	; () banked
 20294  017692  6FDC               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20295                           
 20296                           ;ERROR_HANDLING.c: 208: Errors = WS_MIN_MAX;
 20297  017694  0E01               	movlw	1
 20298  017696  6E3A               	movwf	_Errors,c
 20299                           
 20300                           ; BSR set to: 1
 20301                           ;ERROR_HANDLING.c: 209: }
 20302                           ;ERROR_HANDLING.c: 210: }
 20303  017698  0012               	return	
 20304  01769A                     l20629:
 20305                           
 20306                           ;ERROR_HANDLING.c: 211: else if(Wind_Speed_Avg < (15))
 20307  01769A  C0D2  F08F         	movff	_Wind_Speed_Avg,___ftge@ff1
 20308  01769E  C0D3  F090         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 20309  0176A2  C0D4  F091         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 20310  0176A6  0E00               	movlw	0
 20311  0176A8  0100               	movlb	0	; () banked
 20312  0176AA  6F92               	movwf	___ftge@ff2& (0+255),b
 20313  0176AC  0E70               	movlw	112
 20314  0176AE  0100               	movlb	0	; () banked
 20315  0176B0  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 20316  0176B2  0E41               	movlw	65
 20317  0176B4  0100               	movlb	0	; () banked
 20318  0176B6  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 20319  0176B8  EC09  F0C8         	call	___ftge	;wreg free
 20320  0176BC  0100               	movlb	0	; () banked
 20321  0176BE  B0D8               	btfsc	status,0,c
 20322  0176C0  0012               	return	
 20323                           
 20324                           ; BSR set to: 0
 20325                           ;ERROR_HANDLING.c: 212: {
 20326                           ;ERROR_HANDLING.c: 213: Wind_Cut_Out_Flag = 0;
 20327  0176C2  0E00               	movlw	0
 20328  0176C4  0101               	movlb	1	; () banked
 20329  0176C6  6FDD               	movwf	_Wind_Cut_Out_Flag& (0+255),b
 20330                           
 20331                           ;ERROR_HANDLING.c: 214: Wind_Cut_Out_Counter = 0;
 20332  0176C8  0E00               	movlw	0
 20333  0176CA  0101               	movlb	1	; () banked
 20334  0176CC  6FDC               	movwf	_Wind_Cut_Out_Counter& (0+255),b
 20335                           
 20336                           ; BSR set to: 1
 20337                           
 20338                           ; BSR set to: 1
 20339  0176CE  0012               	return	
 20340  0176D0                     __end_of_Wind_Speed_Error_Trigger:
 20341                           	opt stack 0
 20342                           tblptru	equ	0xFF8
 20343                           tblptrh	equ	0xFF7
 20344                           tblptrl	equ	0xFF6
 20345                           tablat	equ	0xFF5
 20346                           prodh	equ	0xFF4
 20347                           prodl	equ	0xFF3
 20348                           intcon	equ	0xFF2
 20349                           postinc0	equ	0xFEE
 20350                           wreg	equ	0xFE8
 20351                           postdec1	equ	0xFE5
 20352                           fsr1h	equ	0xFE2
 20353                           fsr1l	equ	0xFE1
 20354                           indf2	equ	0xFDF
 20355                           postinc2	equ	0xFDE
 20356                           postdec2	equ	0xFDD
 20357                           fsr2h	equ	0xFDA
 20358                           fsr2l	equ	0xFD9
 20359                           status	equ	0xFD8
 20360                           
 20361 ;; *************** function _VFD_Run_Time_Error *****************
 20362 ;; Defined at:
 20363 ;;		line 613 in file "ERROR_HANDLING.c"
 20364 ;; Parameters:    Size  Location     Type
 20365 ;;		None
 20366 ;; Auto vars:     Size  Location     Type
 20367 ;;		None
 20368 ;; Return value:  Size  Location     Type
 20369 ;;                  1    wreg      void 
 20370 ;; Registers used:
 20371 ;;		wreg, status,2, status,0
 20372 ;; Tracked objects:
 20373 ;;		On entry : 0/0
 20374 ;;		On exit  : 0/0
 20375 ;;		Unchanged: 0/0
 20376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20381 ;;Total ram usage:        0 bytes
 20382 ;; Hardware stack levels used:    1
 20383 ;; Hardware stack levels required when called:    3
 20384 ;; This function calls:
 20385 ;;		Nothing
 20386 ;; This function is called by:
 20387 ;;		_Error_Checking_One_Second
 20388 ;; This function uses a non-reentrant model
 20389 ;;
 20390                           
 20391                           	psect	text53
 20392  01A59E                     __ptext53:
 20393                           	opt stack 0
 20394  01A59E                     _VFD_Run_Time_Error:
 20395                           	opt stack 25
 20396                           
 20397                           ;ERROR_HANDLING.c: 615: VFD_Run_Time_Counter++;
 20398                           
 20399                           ;incstack = 0
 20400  01A59E  0101               	movlb	1	; () banked
 20401  01A5A0  4B5B               	infsnz	_VFD_Run_Time_Counter& (0+255),f,b
 20402  01A5A2  2B5C               	incf	(_VFD_Run_Time_Counter+1)& (0+255),f,b
 20403                           
 20404                           ; BSR set to: 1
 20405                           ;ERROR_HANDLING.c: 616: if(VFD_Run_Time_Counter >= (300))
 20406  01A5A4  0E2C               	movlw	44
 20407  01A5A6  0101               	movlb	1	; () banked
 20408  01A5A8  5D5B               	subwf	_VFD_Run_Time_Counter& (0+255),w,b
 20409  01A5AA  0E01               	movlw	1
 20410  01A5AC  0101               	movlb	1	; () banked
 20411  01A5AE  595C               	subwfb	(_VFD_Run_Time_Counter+1)& (0+255),w,b
 20412  01A5B0  A0D8               	btfss	status,0,c
 20413  01A5B2  D00B               	goto	l17341
 20414                           
 20415                           ; BSR set to: 1
 20416                           ;ERROR_HANDLING.c: 617: {
 20417                           ;ERROR_HANDLING.c: 618: VFD_Run_Time_Counter = 0;
 20418  01A5B4  0E00               	movlw	0
 20419  01A5B6  0101               	movlb	1	; () banked
 20420  01A5B8  6F5C               	movwf	(_VFD_Run_Time_Counter+1)& (0+255),b
 20421  01A5BA  0E00               	movlw	0
 20422  01A5BC  6F5B               	movwf	_VFD_Run_Time_Counter& (0+255),b
 20423                           
 20424                           ;ERROR_HANDLING.c: 619: VFD__Run_Time_Error = 1;
 20425  01A5BE  0E01               	movlw	1
 20426  01A5C0  0101               	movlb	1	; () banked
 20427  01A5C2  6FD8               	movwf	_VFD__Run_Time_Error& (0+255),b
 20428                           
 20429                           ;ERROR_HANDLING.c: 620: Errors = VFD_RUN_TIME;
 20430  01A5C4  0E04               	movlw	4
 20431  01A5C6  6E3A               	movwf	_Errors,c
 20432                           
 20433                           ;ERROR_HANDLING.c: 621: }
 20434  01A5C8  0012               	return	
 20435  01A5CA                     l17341:
 20436                           
 20437                           ; BSR set to: 1
 20438                           ;ERROR_HANDLING.c: 622: else if(VFD_Run_Time_Counter < (300))
 20439  01A5CA  0E2C               	movlw	44
 20440  01A5CC  0101               	movlb	1	; () banked
 20441  01A5CE  5D5B               	subwf	_VFD_Run_Time_Counter& (0+255),w,b
 20442  01A5D0  0E01               	movlw	1
 20443  01A5D2  0101               	movlb	1	; () banked
 20444  01A5D4  595C               	subwfb	(_VFD_Run_Time_Counter+1)& (0+255),w,b
 20445  01A5D6  B0D8               	btfsc	status,0,c
 20446  01A5D8  0012               	return	
 20447                           
 20448                           ; BSR set to: 1
 20449                           ;ERROR_HANDLING.c: 623: {
 20450                           ;ERROR_HANDLING.c: 624: VFD__Run_Time_Error = 0;
 20451  01A5DA  0E00               	movlw	0
 20452  01A5DC  0101               	movlb	1	; () banked
 20453  01A5DE  6FD8               	movwf	_VFD__Run_Time_Error& (0+255),b
 20454                           
 20455                           ; BSR set to: 1
 20456  01A5E0  0012               	return	
 20457  01A5E2                     __end_of_VFD_Run_Time_Error:
 20458                           	opt stack 0
 20459                           tblptru	equ	0xFF8
 20460                           tblptrh	equ	0xFF7
 20461                           tblptrl	equ	0xFF6
 20462                           tablat	equ	0xFF5
 20463                           prodh	equ	0xFF4
 20464                           prodl	equ	0xFF3
 20465                           intcon	equ	0xFF2
 20466                           postinc0	equ	0xFEE
 20467                           wreg	equ	0xFE8
 20468                           postdec1	equ	0xFE5
 20469                           fsr1h	equ	0xFE2
 20470                           fsr1l	equ	0xFE1
 20471                           indf2	equ	0xFDF
 20472                           postinc2	equ	0xFDE
 20473                           postdec2	equ	0xFDD
 20474                           fsr2h	equ	0xFDA
 20475                           fsr2l	equ	0xFD9
 20476                           status	equ	0xFD8
 20477                           
 20478 ;; *************** function _VFD_PS_ON_Function *****************
 20479 ;; Defined at:
 20480 ;;		line 114 in file "RAMP_UP.c"
 20481 ;; Parameters:    Size  Location     Type
 20482 ;;		None
 20483 ;; Auto vars:     Size  Location     Type
 20484 ;;		None
 20485 ;; Return value:  Size  Location     Type
 20486 ;;                  1    wreg      void 
 20487 ;; Registers used:
 20488 ;;		wreg, status,2, status,0
 20489 ;; Tracked objects:
 20490 ;;		On entry : 0/0
 20491 ;;		On exit  : 0/0
 20492 ;;		Unchanged: 0/0
 20493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20498 ;;Total ram usage:        0 bytes
 20499 ;; Hardware stack levels used:    1
 20500 ;; Hardware stack levels required when called:    3
 20501 ;; This function calls:
 20502 ;;		Nothing
 20503 ;; This function is called by:
 20504 ;;		_Error_Checking_One_Second
 20505 ;; This function uses a non-reentrant model
 20506 ;;
 20507                           
 20508                           	psect	text54
 20509  01A062                     __ptext54:
 20510                           	opt stack 0
 20511  01A062                     _VFD_PS_ON_Function:
 20512                           	opt stack 25
 20513                           
 20514                           ;RAMP_UP.c: 116: if( (Initial_Delay_Second >= ((120) - 20)) && (Turbine_state == STARTUP
      +                          _STATE) )
 20515                           
 20516                           ; BSR set to: 1
 20517                           ;incstack = 0
 20518  01A062  0101               	movlb	1	; () banked
 20519  01A064  5146               	movf	(_Initial_Delay_Second+1)& (0+255),w,b
 20520  01A066  E105               	bnz	u8900
 20521  01A068  0E64               	movlw	100
 20522  01A06A  0101               	movlb	1	; () banked
 20523  01A06C  5D45               	subwf	_Initial_Delay_Second& (0+255),w,b
 20524  01A06E  A0D8               	btfss	status,0,c
 20525  01A070  D007               	goto	l16955
 20526  01A072                     u8900:
 20527                           
 20528                           ; BSR set to: 1
 20529  01A072  0100               	movlb	0	; () banked
 20530  01A074  51D8               	movf	_Turbine_state& (0+255),w,b
 20531  01A076  A4D8               	btfss	status,2,c
 20532  01A078  D003               	goto	l16955
 20533                           
 20534                           ; BSR set to: 0
 20535                           ;RAMP_UP.c: 117: {
 20536                           ;RAMP_UP.c: 118: (RB4 = 1); VFD_ON_Flag = 1;
 20537  01A07A  8881               	bsf	3969,4,c	;volatile
 20538                           
 20539                           ; BSR set to: 0
 20540  01A07C  0E01               	movlw	1
 20541  01A07E  D016               	goto	L11
 20542  01A080                     l16955:
 20543                           
 20544                           ;RAMP_UP.c: 120: else if( (Initial_Delay_Second < ((120) - 20)) && (Turbine_state == STA
      +                          RTUP_STATE) && (VFD_Bus_Voltage < 50) )
 20545  01A080  0101               	movlb	1	; () banked
 20546  01A082  5146               	movf	(_Initial_Delay_Second+1)& (0+255),w,b
 20547  01A084  E115               	bnz	l16965
 20548  01A086  0E64               	movlw	100
 20549  01A088  0101               	movlb	1	; () banked
 20550  01A08A  5D45               	subwf	_Initial_Delay_Second& (0+255),w,b
 20551  01A08C  B0D8               	btfsc	status,0,c
 20552  01A08E  D010               	goto	l16965
 20553                           
 20554                           ; BSR set to: 1
 20555  01A090  0100               	movlb	0	; () banked
 20556  01A092  51D8               	movf	_Turbine_state& (0+255),w,b
 20557  01A094  A4D8               	btfss	status,2,c
 20558  01A096  D00C               	goto	l16965
 20559                           
 20560                           ; BSR set to: 0
 20561  01A098  0101               	movlb	1	; () banked
 20562  01A09A  515A               	movf	(_VFD_Bus_Voltage+1)& (0+255),w,b
 20563  01A09C  E109               	bnz	l16965
 20564  01A09E  0E32               	movlw	50
 20565  01A0A0  0101               	movlb	1	; () banked
 20566  01A0A2  5D59               	subwf	_VFD_Bus_Voltage& (0+255),w,b
 20567  01A0A4  B0D8               	btfsc	status,0,c
 20568  01A0A6  D004               	goto	l16965
 20569                           
 20570                           ; BSR set to: 1
 20571                           ;RAMP_UP.c: 121: {
 20572                           ;RAMP_UP.c: 122: (RB4 = 0); VFD_ON_Flag = 0;
 20573  01A0A8  9881               	bcf	3969,4,c	;volatile
 20574                           
 20575                           ; BSR set to: 1
 20576  01A0AA  0E00               	movlw	0
 20577  01A0AC                     L11:
 20578  01A0AC  0101               	movlb	1	; () banked
 20579  01A0AE  6FD5               	movwf	_VFD_ON_Flag& (0+255),b
 20580  01A0B0                     l16965:
 20581                           
 20582                           ;RAMP_UP.c: 123: }
 20583                           ;RAMP_UP.c: 125: if( (VFD_Bus_Voltage < 50) && (Turbine_state == RUNNING_STATE) )
 20584  01A0B0  0101               	movlb	1	; () banked
 20585  01A0B2  515A               	movf	(_VFD_Bus_Voltage+1)& (0+255),w,b
 20586  01A0B4  E10F               	bnz	l7065
 20587  01A0B6  0E32               	movlw	50
 20588  01A0B8  0101               	movlb	1	; () banked
 20589  01A0BA  5D59               	subwf	_VFD_Bus_Voltage& (0+255),w,b
 20590  01A0BC  B0D8               	btfsc	status,0,c
 20591  01A0BE  0012               	return	
 20592                           
 20593                           ; BSR set to: 1
 20594  01A0C0  0E02               	movlw	2
 20595  01A0C2  0100               	movlb	0	; () banked
 20596  01A0C4  19D8               	xorwf	_Turbine_state& (0+255),w,b
 20597  01A0C6  A4D8               	btfss	status,2,c
 20598  01A0C8  0012               	return	
 20599                           
 20600                           ; BSR set to: 0
 20601                           ;RAMP_UP.c: 126: {
 20602                           ;RAMP_UP.c: 127: (RB4 = 0); VFD_ON_Flag = 0;
 20603  01A0CA  9881               	bcf	3969,4,c	;volatile
 20604                           
 20605                           ; BSR set to: 0
 20606  01A0CC  0E00               	movlw	0
 20607  01A0CE  0101               	movlb	1	; () banked
 20608  01A0D0  6FD5               	movwf	_VFD_ON_Flag& (0+255),b
 20609  01A0D2  0012               	return	
 20610  01A0D4                     l7065:
 20611  01A0D4  0012               	return		;funcret
 20612  01A0D6                     __end_of_VFD_PS_ON_Function:
 20613                           	opt stack 0
 20614                           tblptru	equ	0xFF8
 20615                           tblptrh	equ	0xFF7
 20616                           tblptrl	equ	0xFF6
 20617                           tablat	equ	0xFF5
 20618                           prodh	equ	0xFF4
 20619                           prodl	equ	0xFF3
 20620                           intcon	equ	0xFF2
 20621                           postinc0	equ	0xFEE
 20622                           wreg	equ	0xFE8
 20623                           postdec1	equ	0xFE5
 20624                           fsr1h	equ	0xFE2
 20625                           fsr1l	equ	0xFE1
 20626                           indf2	equ	0xFDF
 20627                           postinc2	equ	0xFDE
 20628                           postdec2	equ	0xFDD
 20629                           fsr2h	equ	0xFDA
 20630                           fsr2l	equ	0xFD9
 20631                           status	equ	0xFD8
 20632                           
 20633 ;; *************** function _Turbine_Under_speed *****************
 20634 ;; Defined at:
 20635 ;;		line 337 in file "ERROR_HANDLING.c"
 20636 ;; Parameters:    Size  Location     Type
 20637 ;;		None
 20638 ;; Auto vars:     Size  Location     Type
 20639 ;;		None
 20640 ;; Return value:  Size  Location     Type
 20641 ;;                  1    wreg      void 
 20642 ;; Registers used:
 20643 ;;		wreg, status,2, status,0, cstack
 20644 ;; Tracked objects:
 20645 ;;		On entry : 0/0
 20646 ;;		On exit  : 0/0
 20647 ;;		Unchanged: 0/0
 20648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20653 ;;Total ram usage:        0 bytes
 20654 ;; Hardware stack levels used:    1
 20655 ;; Hardware stack levels required when called:    4
 20656 ;; This function calls:
 20657 ;;		___ftge
 20658 ;; This function is called by:
 20659 ;;		_Error_Checking_One_Second
 20660 ;; This function uses a non-reentrant model
 20661 ;;
 20662                           
 20663                           	psect	text55
 20664  01A2E0                     __ptext55:
 20665                           	opt stack 0
 20666  01A2E0                     _Turbine_Under_speed:
 20667                           	opt stack 24
 20668                           
 20669                           ;ERROR_HANDLING.c: 339: if(Turbine_RPM < (47))
 20670                           
 20671                           ;incstack = 0
 20672  01A2E0  C02D  F08F         	movff	_Turbine_RPM,___ftge@ff1
 20673  01A2E4  C02E  F090         	movff	_Turbine_RPM+1,___ftge@ff1+1
 20674  01A2E8  C02F  F091         	movff	_Turbine_RPM+2,___ftge@ff1+2
 20675  01A2EC  0E00               	movlw	0
 20676  01A2EE  0100               	movlb	0	; () banked
 20677  01A2F0  6F92               	movwf	___ftge@ff2& (0+255),b
 20678  01A2F2  0E3C               	movlw	60
 20679  01A2F4  0100               	movlb	0	; () banked
 20680  01A2F6  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 20681  01A2F8  0E42               	movlw	66
 20682  01A2FA  0100               	movlb	0	; () banked
 20683  01A2FC  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 20684  01A2FE  EC09  F0C8         	call	___ftge	;wreg free
 20685  01A302  0100               	movlb	0	; () banked
 20686  01A304  B0D8               	btfsc	status,0,c
 20687  01A306  D013               	goto	l20783
 20688                           
 20689                           ; BSR set to: 0
 20690                           ;ERROR_HANDLING.c: 340: {
 20691                           ;ERROR_HANDLING.c: 341: TRPM_Under_Speed_Counter++;
 20692  01A308  0101               	movlb	1	; () banked
 20693  01A30A  2BBD               	incf	_TRPM_Under_Speed_Counter& (0+255),f,b
 20694                           
 20695                           ; BSR set to: 1
 20696                           ;ERROR_HANDLING.c: 342: if(TRPM_Under_Speed_Counter >= 10)
 20697  01A30C  0E09               	movlw	9
 20698  01A30E  0101               	movlb	1	; () banked
 20699  01A310  65BD               	cpfsgt	_TRPM_Under_Speed_Counter& (0+255),b
 20700  01A312  D009               	goto	l20781
 20701                           
 20702                           ; BSR set to: 1
 20703                           ;ERROR_HANDLING.c: 343: {
 20704                           ;ERROR_HANDLING.c: 344: TRPM_Under_Speed_Counter = 0;
 20705  01A314  0E00               	movlw	0
 20706  01A316  0101               	movlb	1	; () banked
 20707  01A318  6FBD               	movwf	_TRPM_Under_Speed_Counter& (0+255),b
 20708                           
 20709                           ;ERROR_HANDLING.c: 345: Turbine_Under_Speed_Flag = 1;
 20710  01A31A  0E01               	movlw	1
 20711  01A31C  0101               	movlb	1	; () banked
 20712  01A31E  6FCB               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 20713                           
 20714                           ;ERROR_HANDLING.c: 346: Errors = TURBINE_US_OS;
 20715  01A320  0E0A               	movlw	10
 20716  01A322  6E3A               	movwf	_Errors,c
 20717                           
 20718                           ;ERROR_HANDLING.c: 347: }
 20719  01A324  0012               	return	
 20720  01A326                     l20781:
 20721                           
 20722                           ; BSR set to: 1
 20723                           ;ERROR_HANDLING.c: 348: else
 20724                           ;ERROR_HANDLING.c: 349: {
 20725                           ;ERROR_HANDLING.c: 350: Turbine_Under_Speed_Flag = 0;
 20726  01A326  0E00               	movlw	0
 20727  01A328  0101               	movlb	1	; () banked
 20728  01A32A  6FCB               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 20729                           
 20730                           ; BSR set to: 1
 20731                           ;ERROR_HANDLING.c: 351: }
 20732                           ;ERROR_HANDLING.c: 352: }
 20733  01A32C  0012               	return	
 20734  01A32E                     l20783:
 20735                           
 20736                           ;ERROR_HANDLING.c: 353: else
 20737                           ;ERROR_HANDLING.c: 354: {
 20738                           ;ERROR_HANDLING.c: 355: TRPM_Under_Speed_Counter = 0;
 20739  01A32E  0E00               	movlw	0
 20740  01A330  0101               	movlb	1	; () banked
 20741  01A332  6FBD               	movwf	_TRPM_Under_Speed_Counter& (0+255),b
 20742                           
 20743                           ;ERROR_HANDLING.c: 356: Turbine_Under_Speed_Flag = 0;
 20744  01A334  0E00               	movlw	0
 20745  01A336  0101               	movlb	1	; () banked
 20746  01A338  6FCB               	movwf	_Turbine_Under_Speed_Flag& (0+255),b
 20747  01A33A  0012               	return	
 20748  01A33C                     __end_of_Turbine_Under_speed:
 20749                           	opt stack 0
 20750                           tblptru	equ	0xFF8
 20751                           tblptrh	equ	0xFF7
 20752                           tblptrl	equ	0xFF6
 20753                           tablat	equ	0xFF5
 20754                           prodh	equ	0xFF4
 20755                           prodl	equ	0xFF3
 20756                           intcon	equ	0xFF2
 20757                           postinc0	equ	0xFEE
 20758                           wreg	equ	0xFE8
 20759                           postdec1	equ	0xFE5
 20760                           fsr1h	equ	0xFE2
 20761                           fsr1l	equ	0xFE1
 20762                           indf2	equ	0xFDF
 20763                           postinc2	equ	0xFDE
 20764                           postdec2	equ	0xFDD
 20765                           fsr2h	equ	0xFDA
 20766                           fsr2l	equ	0xFD9
 20767                           status	equ	0xFD8
 20768                           
 20769 ;; *************** function _Turbine_Restore_Check *****************
 20770 ;; Defined at:
 20771 ;;		line 153 in file "ERROR_HANDLING.c"
 20772 ;; Parameters:    Size  Location     Type
 20773 ;;		None
 20774 ;; Auto vars:     Size  Location     Type
 20775 ;;		None
 20776 ;; Return value:  Size  Location     Type
 20777 ;;                  1    wreg      void 
 20778 ;; Registers used:
 20779 ;;		wreg, status,2, status,0, cstack
 20780 ;; Tracked objects:
 20781 ;;		On entry : 0/0
 20782 ;;		On exit  : 0/0
 20783 ;;		Unchanged: 0/0
 20784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20789 ;;Total ram usage:        0 bytes
 20790 ;; Hardware stack levels used:    1
 20791 ;; Hardware stack levels required when called:    4
 20792 ;; This function calls:
 20793 ;;		___ftge
 20794 ;; This function is called by:
 20795 ;;		_Error_Checking_One_Second
 20796 ;; This function uses a non-reentrant model
 20797 ;;
 20798                           
 20799                           	psect	text56
 20800  01952E                     __ptext56:
 20801                           	opt stack 0
 20802  01952E                     _Turbine_Restore_Check:
 20803                           	opt stack 24
 20804                           
 20805                           ;ERROR_HANDLING.c: 155: if(Turbine_RPM > 5 || Generator_RPM_FLT > 100)
 20806                           
 20807                           ; BSR set to: 1
 20808                           ;incstack = 0
 20809  01952E  0E00               	movlw	0
 20810  019530  0100               	movlb	0	; () banked
 20811  019532  6F8F               	movwf	___ftge@ff1& (0+255),b
 20812  019534  0EA0               	movlw	160
 20813  019536  0100               	movlb	0	; () banked
 20814  019538  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 20815  01953A  0E40               	movlw	64
 20816  01953C  0100               	movlb	0	; () banked
 20817  01953E  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 20818  019540  C02D  F092         	movff	_Turbine_RPM,___ftge@ff2
 20819  019544  C02E  F093         	movff	_Turbine_RPM+1,___ftge@ff2+1
 20820  019548  C02F  F094         	movff	_Turbine_RPM+2,___ftge@ff2+2
 20821  01954C  EC09  F0C8         	call	___ftge	;wreg free
 20822  019550  0100               	movlb	0	; () banked
 20823  019552  A0D8               	btfss	status,0,c
 20824  019554  D014               	goto	l20737
 20825                           
 20826                           ; BSR set to: 0
 20827  019556  0E00               	movlw	0
 20828  019558  0100               	movlb	0	; () banked
 20829  01955A  6F8F               	movwf	___ftge@ff1& (0+255),b
 20830  01955C  0EC8               	movlw	200
 20831  01955E  0100               	movlb	0	; () banked
 20832  019560  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 20833  019562  0E42               	movlw	66
 20834  019564  0100               	movlb	0	; () banked
 20835  019566  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 20836  019568  C0CF  F092         	movff	_Generator_RPM_FLT,___ftge@ff2
 20837  01956C  C0D0  F093         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 20838  019570  C0D1  F094         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 20839  019574  EC09  F0C8         	call	___ftge	;wreg free
 20840  019578  0100               	movlb	0	; () banked
 20841  01957A  B0D8               	btfsc	status,0,c
 20842  01957C  D005               	goto	l20739
 20843  01957E                     l20737:
 20844                           
 20845                           ; BSR set to: 0
 20846                           ;ERROR_HANDLING.c: 156: {
 20847                           ;ERROR_HANDLING.c: 157: Turbine_Restore_Error = 1;
 20848  01957E  0E01               	movlw	1
 20849  019580  0101               	movlb	1	; () banked
 20850  019582  6FCA               	movwf	_Turbine_Restore_Error& (0+255),b
 20851                           
 20852                           ;ERROR_HANDLING.c: 158: Errors = TURBINE_NR;
 20853  019584  0E17               	movlw	23
 20854  019586  6E3A               	movwf	_Errors,c
 20855  019588                     l20739:
 20856                           
 20857                           ;ERROR_HANDLING.c: 159: }
 20858                           ;ERROR_HANDLING.c: 160: if(Turbine_RPM <= 5 && Generator_RPM_FLT <= 100)
 20859  019588  0E00               	movlw	0
 20860  01958A  0100               	movlb	0	; () banked
 20861  01958C  6F8F               	movwf	___ftge@ff1& (0+255),b
 20862  01958E  0EA0               	movlw	160
 20863  019590  0100               	movlb	0	; () banked
 20864  019592  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 20865  019594  0E40               	movlw	64
 20866  019596  0100               	movlb	0	; () banked
 20867  019598  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 20868  01959A  C02D  F092         	movff	_Turbine_RPM,___ftge@ff2
 20869  01959E  C02E  F093         	movff	_Turbine_RPM+1,___ftge@ff2+1
 20870  0195A2  C02F  F094         	movff	_Turbine_RPM+2,___ftge@ff2+2
 20871  0195A6  EC09  F0C8         	call	___ftge	;wreg free
 20872  0195AA  0100               	movlb	0	; () banked
 20873  0195AC  A0D8               	btfss	status,0,c
 20874  0195AE  0012               	return	
 20875                           
 20876                           ; BSR set to: 0
 20877  0195B0  0E00               	movlw	0
 20878  0195B2  0100               	movlb	0	; () banked
 20879  0195B4  6F8F               	movwf	___ftge@ff1& (0+255),b
 20880  0195B6  0EC8               	movlw	200
 20881  0195B8  0100               	movlb	0	; () banked
 20882  0195BA  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 20883  0195BC  0E42               	movlw	66
 20884  0195BE  0100               	movlb	0	; () banked
 20885  0195C0  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 20886  0195C2  C0CF  F092         	movff	_Generator_RPM_FLT,___ftge@ff2
 20887  0195C6  C0D0  F093         	movff	_Generator_RPM_FLT+1,___ftge@ff2+1
 20888  0195CA  C0D1  F094         	movff	_Generator_RPM_FLT+2,___ftge@ff2+2
 20889  0195CE  EC09  F0C8         	call	___ftge	;wreg free
 20890  0195D2  0100               	movlb	0	; () banked
 20891  0195D4  A0D8               	btfss	status,0,c
 20892  0195D6  0012               	return	
 20893                           
 20894                           ; BSR set to: 0
 20895                           ;ERROR_HANDLING.c: 161: {
 20896                           ;ERROR_HANDLING.c: 162: Turbine_Restore_Error = 0;
 20897  0195D8  0E00               	movlw	0
 20898  0195DA  0101               	movlb	1	; () banked
 20899  0195DC  6FCA               	movwf	_Turbine_Restore_Error& (0+255),b
 20900  0195DE  0012               	return	
 20901  0195E0                     __end_of_Turbine_Restore_Check:
 20902                           	opt stack 0
 20903                           tblptru	equ	0xFF8
 20904                           tblptrh	equ	0xFF7
 20905                           tblptrl	equ	0xFF6
 20906                           tablat	equ	0xFF5
 20907                           prodh	equ	0xFF4
 20908                           prodl	equ	0xFF3
 20909                           intcon	equ	0xFF2
 20910                           postinc0	equ	0xFEE
 20911                           wreg	equ	0xFE8
 20912                           postdec1	equ	0xFE5
 20913                           fsr1h	equ	0xFE2
 20914                           fsr1l	equ	0xFE1
 20915                           indf2	equ	0xFDF
 20916                           postinc2	equ	0xFDE
 20917                           postdec2	equ	0xFDD
 20918                           fsr2h	equ	0xFDA
 20919                           fsr2l	equ	0xFD9
 20920                           status	equ	0xFD8
 20921                           
 20922 ;; *************** function _Turbine_Over_Speed *****************
 20923 ;; Defined at:
 20924 ;;		line 318 in file "ERROR_HANDLING.c"
 20925 ;; Parameters:    Size  Location     Type
 20926 ;;		None
 20927 ;; Auto vars:     Size  Location     Type
 20928 ;;		None
 20929 ;; Return value:  Size  Location     Type
 20930 ;;                  1    wreg      void 
 20931 ;; Registers used:
 20932 ;;		wreg, status,2, status,0, cstack
 20933 ;; Tracked objects:
 20934 ;;		On entry : 0/0
 20935 ;;		On exit  : 0/0
 20936 ;;		Unchanged: 0/0
 20937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20942 ;;Total ram usage:        0 bytes
 20943 ;; Hardware stack levels used:    1
 20944 ;; Hardware stack levels required when called:    4
 20945 ;; This function calls:
 20946 ;;		___ftge
 20947 ;; This function is called by:
 20948 ;;		_Error_Checking_One_Second
 20949 ;; This function uses a non-reentrant model
 20950 ;;
 20951                           
 20952                           	psect	text57
 20953  01A4AA                     __ptext57:
 20954                           	opt stack 0
 20955  01A4AA                     _Turbine_Over_Speed:
 20956                           	opt stack 24
 20957                           
 20958                           ;ERROR_HANDLING.c: 320: if(Turbine_RPM >= (63))
 20959                           
 20960                           ;incstack = 0
 20961  01A4AA  C02D  F08F         	movff	_Turbine_RPM,___ftge@ff1
 20962  01A4AE  C02E  F090         	movff	_Turbine_RPM+1,___ftge@ff1+1
 20963  01A4B2  C02F  F091         	movff	_Turbine_RPM+2,___ftge@ff1+2
 20964  01A4B6  0E00               	movlw	0
 20965  01A4B8  0100               	movlb	0	; () banked
 20966  01A4BA  6F92               	movwf	___ftge@ff2& (0+255),b
 20967  01A4BC  0E7C               	movlw	124
 20968  01A4BE  0100               	movlb	0	; () banked
 20969  01A4C0  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 20970  01A4C2  0E42               	movlw	66
 20971  01A4C4  0100               	movlb	0	; () banked
 20972  01A4C6  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 20973  01A4C8  EC09  F0C8         	call	___ftge	;wreg free
 20974  01A4CC  0100               	movlb	0	; () banked
 20975  01A4CE  A0D8               	btfss	status,0,c
 20976  01A4D0  D00F               	goto	l20819
 20977                           
 20978                           ; BSR set to: 0
 20979                           ;ERROR_HANDLING.c: 321: {
 20980                           ;ERROR_HANDLING.c: 322: TRPM_OverSpeed_Counter++;
 20981  01A4D2  0101               	movlb	1	; () banked
 20982  01A4D4  2BBC               	incf	_TRPM_OverSpeed_Counter& (0+255),f,b
 20983                           
 20984                           ; BSR set to: 1
 20985                           ;ERROR_HANDLING.c: 323: if(TRPM_OverSpeed_Counter >= 2)
 20986  01A4D6  0E01               	movlw	1
 20987  01A4D8  0101               	movlb	1	; () banked
 20988  01A4DA  65BC               	cpfsgt	_TRPM_OverSpeed_Counter& (0+255),b
 20989  01A4DC  0012               	return	
 20990                           
 20991                           ; BSR set to: 1
 20992                           ;ERROR_HANDLING.c: 324: {
 20993                           ;ERROR_HANDLING.c: 325: TRPM_OverSpeed_Counter = 0;
 20994  01A4DE  0E00               	movlw	0
 20995  01A4E0  0101               	movlb	1	; () banked
 20996  01A4E2  6FBC               	movwf	_TRPM_OverSpeed_Counter& (0+255),b
 20997                           
 20998                           ;ERROR_HANDLING.c: 326: Turbine_Over_Speed_Flag = 1;
 20999  01A4E4  0E01               	movlw	1
 21000  01A4E6  0101               	movlb	1	; () banked
 21001  01A4E8  6FC9               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 21002                           
 21003                           ;ERROR_HANDLING.c: 327: Errors = TURBINE_US_OS;
 21004  01A4EA  0E0A               	movlw	10
 21005  01A4EC  6E3A               	movwf	_Errors,c
 21006                           
 21007                           ; BSR set to: 1
 21008                           ;ERROR_HANDLING.c: 328: }
 21009                           ;ERROR_HANDLING.c: 330: }
 21010  01A4EE  0012               	return	
 21011  01A4F0                     l20819:
 21012                           
 21013                           ;ERROR_HANDLING.c: 331: else
 21014                           ;ERROR_HANDLING.c: 332: {
 21015                           ;ERROR_HANDLING.c: 333: Turbine_Over_Speed_Flag = 0;
 21016  01A4F0  0E00               	movlw	0
 21017  01A4F2  0101               	movlb	1	; () banked
 21018  01A4F4  6FC9               	movwf	_Turbine_Over_Speed_Flag& (0+255),b
 21019                           
 21020                           ;ERROR_HANDLING.c: 334: TRPM_OverSpeed_Counter = 0;
 21021  01A4F6  0E00               	movlw	0
 21022  01A4F8  0101               	movlb	1	; () banked
 21023  01A4FA  6FBC               	movwf	_TRPM_OverSpeed_Counter& (0+255),b
 21024  01A4FC  0012               	return	
 21025  01A4FE                     __end_of_Turbine_Over_Speed:
 21026                           	opt stack 0
 21027                           tblptru	equ	0xFF8
 21028                           tblptrh	equ	0xFF7
 21029                           tblptrl	equ	0xFF6
 21030                           tablat	equ	0xFF5
 21031                           prodh	equ	0xFF4
 21032                           prodl	equ	0xFF3
 21033                           intcon	equ	0xFF2
 21034                           postinc0	equ	0xFEE
 21035                           wreg	equ	0xFE8
 21036                           postdec1	equ	0xFE5
 21037                           fsr1h	equ	0xFE2
 21038                           fsr1l	equ	0xFE1
 21039                           indf2	equ	0xFDF
 21040                           postinc2	equ	0xFDE
 21041                           postdec2	equ	0xFDD
 21042                           fsr2h	equ	0xFDA
 21043                           fsr2l	equ	0xFD9
 21044                           status	equ	0xFD8
 21045                           
 21046 ;; *************** function _Turbine_OverLoaded_Error *****************
 21047 ;; Defined at:
 21048 ;;		line 481 in file "ERROR_HANDLING.c"
 21049 ;; Parameters:    Size  Location     Type
 21050 ;;		None
 21051 ;; Auto vars:     Size  Location     Type
 21052 ;;		None
 21053 ;; Return value:  Size  Location     Type
 21054 ;;                  1    wreg      void 
 21055 ;; Registers used:
 21056 ;;		wreg, status,2, status,0, cstack
 21057 ;; Tracked objects:
 21058 ;;		On entry : 0/0
 21059 ;;		On exit  : 0/0
 21060 ;;		Unchanged: 0/0
 21061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21066 ;;Total ram usage:        0 bytes
 21067 ;; Hardware stack levels used:    1
 21068 ;; Hardware stack levels required when called:    4
 21069 ;; This function calls:
 21070 ;;		___ftge
 21071 ;; This function is called by:
 21072 ;;		_Error_Checking_One_Second
 21073 ;; This function uses a non-reentrant model
 21074 ;;
 21075                           
 21076                           	psect	text58
 21077  01A33C                     __ptext58:
 21078                           	opt stack 0
 21079  01A33C                     _Turbine_OverLoaded_Error:
 21080                           	opt stack 24
 21081                           
 21082                           ;ERROR_HANDLING.c: 483: if(KW <= (-5.0))
 21083                           
 21084                           ; BSR set to: 1
 21085                           ;incstack = 0
 21086  01A33C  0E00               	movlw	0
 21087  01A33E  0100               	movlb	0	; () banked
 21088  01A340  6F8F               	movwf	___ftge@ff1& (0+255),b
 21089  01A342  0EA0               	movlw	160
 21090  01A344  0100               	movlb	0	; () banked
 21091  01A346  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 21092  01A348  0EC0               	movlw	192
 21093  01A34A  0100               	movlb	0	; () banked
 21094  01A34C  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 21095  01A34E  C040  F092         	movff	_KW,___ftge@ff2
 21096  01A352  C041  F093         	movff	_KW+1,___ftge@ff2+1
 21097  01A356  C042  F094         	movff	_KW+2,___ftge@ff2+2
 21098  01A35A  EC09  F0C8         	call	___ftge	;wreg free
 21099  01A35E  0100               	movlb	0	; () banked
 21100  01A360  A0D8               	btfss	status,0,c
 21101  01A362  D013               	goto	l20831
 21102                           
 21103                           ; BSR set to: 0
 21104                           ;ERROR_HANDLING.c: 484: {
 21105                           ;ERROR_HANDLING.c: 485: T_Overload_counter++;
 21106  01A364  0101               	movlb	1	; () banked
 21107  01A366  2BBE               	incf	_T_Overload_counter& (0+255),f,b
 21108                           
 21109                           ; BSR set to: 1
 21110                           ;ERROR_HANDLING.c: 486: if(T_Overload_counter >=3 )
 21111  01A368  0E02               	movlw	2
 21112  01A36A  0101               	movlb	1	; () banked
 21113  01A36C  65BE               	cpfsgt	_T_Overload_counter& (0+255),b
 21114  01A36E  D009               	goto	l20829
 21115                           
 21116                           ; BSR set to: 1
 21117                           ;ERROR_HANDLING.c: 487: {
 21118                           ;ERROR_HANDLING.c: 488: T_Overload_counter = 0;
 21119  01A370  0E00               	movlw	0
 21120  01A372  0101               	movlb	1	; () banked
 21121  01A374  6FBE               	movwf	_T_Overload_counter& (0+255),b
 21122                           
 21123                           ;ERROR_HANDLING.c: 489: Tur_OverLoaded_Error = 1;
 21124  01A376  0E01               	movlw	1
 21125  01A378  0101               	movlb	1	; () banked
 21126  01A37A  6FC8               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21127                           
 21128                           ;ERROR_HANDLING.c: 490: Errors = TURBINE_OL;
 21129  01A37C  0E12               	movlw	18
 21130  01A37E  6E3A               	movwf	_Errors,c
 21131                           
 21132                           ;ERROR_HANDLING.c: 491: }
 21133  01A380  0012               	return	
 21134  01A382                     l20829:
 21135                           
 21136                           ; BSR set to: 1
 21137                           ;ERROR_HANDLING.c: 492: else
 21138                           ;ERROR_HANDLING.c: 493: {
 21139                           ;ERROR_HANDLING.c: 494: Tur_OverLoaded_Error = 0;
 21140  01A382  0E00               	movlw	0
 21141  01A384  0101               	movlb	1	; () banked
 21142  01A386  6FC8               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21143                           
 21144                           ; BSR set to: 1
 21145                           ;ERROR_HANDLING.c: 495: }
 21146                           ;ERROR_HANDLING.c: 496: }
 21147  01A388  0012               	return	
 21148  01A38A                     l20831:
 21149                           
 21150                           ;ERROR_HANDLING.c: 497: else
 21151                           ;ERROR_HANDLING.c: 498: {
 21152                           ;ERROR_HANDLING.c: 499: Tur_OverLoaded_Error = 0;
 21153  01A38A  0E00               	movlw	0
 21154  01A38C  0101               	movlb	1	; () banked
 21155  01A38E  6FC8               	movwf	_Tur_OverLoaded_Error& (0+255),b
 21156                           
 21157                           ;ERROR_HANDLING.c: 500: T_Overload_counter = 0;
 21158  01A390  0E00               	movlw	0
 21159  01A392  0101               	movlb	1	; () banked
 21160  01A394  6FBE               	movwf	_T_Overload_counter& (0+255),b
 21161  01A396  0012               	return	
 21162  01A398                     __end_of_Turbine_OverLoaded_Error:
 21163                           	opt stack 0
 21164                           tblptru	equ	0xFF8
 21165                           tblptrh	equ	0xFF7
 21166                           tblptrl	equ	0xFF6
 21167                           tablat	equ	0xFF5
 21168                           prodh	equ	0xFF4
 21169                           prodl	equ	0xFF3
 21170                           intcon	equ	0xFF2
 21171                           postinc0	equ	0xFEE
 21172                           wreg	equ	0xFE8
 21173                           postdec1	equ	0xFE5
 21174                           fsr1h	equ	0xFE2
 21175                           fsr1l	equ	0xFE1
 21176                           indf2	equ	0xFDF
 21177                           postinc2	equ	0xFDE
 21178                           postdec2	equ	0xFDD
 21179                           fsr2h	equ	0xFDA
 21180                           fsr2l	equ	0xFD9
 21181                           status	equ	0xFD8
 21182                           
 21183 ;; *************** function _Start_Stop *****************
 21184 ;; Defined at:
 21185 ;;		line 679 in file "ERROR_HANDLING.c"
 21186 ;; Parameters:    Size  Location     Type
 21187 ;;		None
 21188 ;; Auto vars:     Size  Location     Type
 21189 ;;		None
 21190 ;; Return value:  Size  Location     Type
 21191 ;;                  1    wreg      void 
 21192 ;; Registers used:
 21193 ;;		wreg, status,2, status,0, cstack
 21194 ;; Tracked objects:
 21195 ;;		On entry : 0/0
 21196 ;;		On exit  : 0/0
 21197 ;;		Unchanged: 0/0
 21198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21203 ;;Total ram usage:        0 bytes
 21204 ;; Hardware stack levels used:    1
 21205 ;; Hardware stack levels required when called:    4
 21206 ;; This function calls:
 21207 ;;		_int_eeprom_write
 21208 ;; This function is called by:
 21209 ;;		_Stopping_state_function
 21210 ;;		_Error_Checking_One_Second
 21211 ;; This function uses a non-reentrant model
 21212 ;;
 21213                           
 21214                           	psect	text59
 21215  019314                     __ptext59:
 21216                           	opt stack 0
 21217  019314                     _Start_Stop:
 21218                           	opt stack 24
 21219                           
 21220                           ;ERROR_HANDLING.c: 681: if(RE1 == 1)
 21221                           
 21222                           ; BSR set to: 1
 21223                           ;incstack = 0
 21224  019314  A284               	btfss	3972,1,c	;volatile
 21225  019316  D00C               	goto	l16371
 21226                           
 21227                           ;ERROR_HANDLING.c: 682: {
 21228                           ;ERROR_HANDLING.c: 683: Key_Counter++;
 21229  019318  0101               	movlb	1	; () banked
 21230  01931A  2BA5               	incf	_Key_Counter& (0+255),f,b
 21231                           
 21232                           ; BSR set to: 1
 21233                           ;ERROR_HANDLING.c: 684: if(Key_Counter >= 3)
 21234  01931C  0E02               	movlw	2
 21235  01931E  0101               	movlb	1	; () banked
 21236  019320  65A5               	cpfsgt	_Key_Counter& (0+255),b
 21237  019322  D006               	goto	l16371
 21238                           
 21239                           ; BSR set to: 1
 21240                           ;ERROR_HANDLING.c: 685: {
 21241                           ;ERROR_HANDLING.c: 686: Key_Flag = 1;
 21242  019324  0E01               	movlw	1
 21243  019326  0101               	movlb	1	; () banked
 21244  019328  6FA6               	movwf	_Key_Flag& (0+255),b
 21245                           
 21246                           ;ERROR_HANDLING.c: 687: Key_Counter = 0;
 21247  01932A  0E00               	movlw	0
 21248  01932C  0101               	movlb	1	; () banked
 21249  01932E  6FA5               	movwf	_Key_Counter& (0+255),b
 21250  019330                     l16371:
 21251                           
 21252                           ;ERROR_HANDLING.c: 688: }
 21253                           ;ERROR_HANDLING.c: 689: }
 21254                           ;ERROR_HANDLING.c: 690: if(RE1 == 0 && Start_Stop_Flag == 0 && Key_Flag == 1)
 21255  019330  B284               	btfsc	3972,1,c	;volatile
 21256  019332  D01D               	goto	l6359
 21257  019334  503D               	movf	_Start_Stop_Flag,w,c
 21258  019336  A4D8               	btfss	status,2,c
 21259  019338  D01A               	goto	l6359
 21260  01933A  0101               	movlb	1	; () banked
 21261  01933C  05A6               	decf	_Key_Flag& (0+255),w,b
 21262  01933E  A4D8               	btfss	status,2,c
 21263  019340  D016               	goto	l6359
 21264                           
 21265                           ; BSR set to: 1
 21266                           ;ERROR_HANDLING.c: 691: {
 21267                           ;ERROR_HANDLING.c: 692: S_S_Counter++;
 21268  019342  0101               	movlb	1	; () banked
 21269  019344  2BB6               	incf	_S_S_Counter& (0+255),f,b
 21270                           
 21271                           ; BSR set to: 1
 21272                           ;ERROR_HANDLING.c: 693: if(S_S_Counter >= 2)
 21273  019346  0E01               	movlw	1
 21274  019348  0101               	movlb	1	; () banked
 21275  01934A  65B6               	cpfsgt	_S_S_Counter& (0+255),b
 21276  01934C  D031               	goto	l16401
 21277                           
 21278                           ; BSR set to: 1
 21279                           ;ERROR_HANDLING.c: 694: {
 21280                           ;ERROR_HANDLING.c: 695: S_S_Counter = 0;
 21281  01934E  0E00               	movlw	0
 21282  019350  0101               	movlb	1	; () banked
 21283  019352  6FB6               	movwf	_S_S_Counter& (0+255),b
 21284                           
 21285                           ;ERROR_HANDLING.c: 696: Start_Stop_Flag = 1;
 21286  019354  0E01               	movlw	1
 21287  019356  6E3D               	movwf	_Start_Stop_Flag,c
 21288                           
 21289                           ; BSR set to: 1
 21290                           ;ERROR_HANDLING.c: 697: int_eeprom_write((0x21),1);
 21291  019358  0E00               	movlw	0
 21292  01935A  6E1E               	movwf	int_eeprom_write@adr+1,c
 21293  01935C  0E21               	movlw	33
 21294  01935E  6E1D               	movwf	int_eeprom_write@adr,c
 21295  019360  0E00               	movlw	0
 21296  019362  6E20               	movwf	int_eeprom_write@dat+1,c
 21297  019364  0E01               	movlw	1
 21298  019366  6E1F               	movwf	int_eeprom_write@dat,c
 21299  019368  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 21300  01936C  D01E               	goto	l16399
 21301  01936E                     l6359:
 21302                           
 21303                           ;ERROR_HANDLING.c: 702: else if(RE1 == 0 && Start_Stop_Flag == 1 && Key_Flag == 1)
 21304  01936E  B284               	btfsc	3972,1,c	;volatile
 21305  019370  D01F               	goto	l16401
 21306  019372  043D               	decf	_Start_Stop_Flag,w,c
 21307  019374  A4D8               	btfss	status,2,c
 21308  019376  D01C               	goto	l16401
 21309  019378  0101               	movlb	1	; () banked
 21310  01937A  05A6               	decf	_Key_Flag& (0+255),w,b
 21311  01937C  A4D8               	btfss	status,2,c
 21312  01937E  D018               	goto	l16401
 21313                           
 21314                           ; BSR set to: 1
 21315                           ;ERROR_HANDLING.c: 703: {
 21316                           ;ERROR_HANDLING.c: 704: S_S_Counter++;
 21317  019380  0101               	movlb	1	; () banked
 21318  019382  2BB6               	incf	_S_S_Counter& (0+255),f,b
 21319                           
 21320                           ; BSR set to: 1
 21321                           ;ERROR_HANDLING.c: 705: if(S_S_Counter >= 2)
 21322  019384  0E01               	movlw	1
 21323  019386  0101               	movlb	1	; () banked
 21324  019388  65B6               	cpfsgt	_S_S_Counter& (0+255),b
 21325  01938A  D012               	goto	l16401
 21326                           
 21327                           ; BSR set to: 1
 21328                           ;ERROR_HANDLING.c: 706: {
 21329                           ;ERROR_HANDLING.c: 707: S_S_Counter = 0;
 21330  01938C  0E00               	movlw	0
 21331  01938E  0101               	movlb	1	; () banked
 21332  019390  6FB6               	movwf	_S_S_Counter& (0+255),b
 21333                           
 21334                           ;ERROR_HANDLING.c: 708: Start_Stop_Flag = 0;
 21335  019392  0E00               	movlw	0
 21336  019394  6E3D               	movwf	_Start_Stop_Flag,c
 21337                           
 21338                           ; BSR set to: 1
 21339                           ;ERROR_HANDLING.c: 709: int_eeprom_write((0x21),0);
 21340  019396  0E00               	movlw	0
 21341  019398  6E1E               	movwf	int_eeprom_write@adr+1,c
 21342  01939A  0E21               	movlw	33
 21343  01939C  6E1D               	movwf	int_eeprom_write@adr,c
 21344  01939E  0E00               	movlw	0
 21345  0193A0  6E20               	movwf	int_eeprom_write@dat+1,c
 21346  0193A2  0E00               	movlw	0
 21347  0193A4  6E1F               	movwf	int_eeprom_write@dat,c
 21348  0193A6  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 21349  0193AA                     l16399:
 21350                           
 21351                           ;ERROR_HANDLING.c: 710: Key_Flag = 0;
 21352  0193AA  0E00               	movlw	0
 21353  0193AC  0101               	movlb	1	; () banked
 21354  0193AE  6FA6               	movwf	_Key_Flag& (0+255),b
 21355  0193B0                     l16401:
 21356                           
 21357                           ;ERROR_HANDLING.c: 711: }
 21358                           ;ERROR_HANDLING.c: 713: }
 21359                           ;ERROR_HANDLING.c: 716: if(Start_Stop_Flag == 1)
 21360  0193B0  043D               	decf	_Start_Stop_Flag,w,c
 21361  0193B2  A4D8               	btfss	status,2,c
 21362  0193B4  D008               	goto	l6364
 21363                           
 21364                           ;ERROR_HANDLING.c: 717: {
 21365                           ;ERROR_HANDLING.c: 718: RE7 = ~RE7;
 21366  0193B6  BE84               	btfsc	3972,7,c	;volatile
 21367  0193B8  D002               	goto	u8110
 21368  0193BA  8E84               	bsf	3972,7,c	;volatile
 21369  0193BC  D001               	goto	l16405
 21370  0193BE                     u8110:
 21371  0193BE  9E84               	bcf	3972,7,c	;volatile
 21372  0193C0                     l16405:
 21373                           
 21374                           ;ERROR_HANDLING.c: 719: Errors = MANUAL_STOP;
 21375  0193C0  0E13               	movlw	19
 21376  0193C2  6E3A               	movwf	_Errors,c
 21377                           
 21378                           ;ERROR_HANDLING.c: 720: }
 21379  0193C4  0012               	return	
 21380  0193C6                     l6364:
 21381                           
 21382                           ;ERROR_HANDLING.c: 721: else
 21383                           ;ERROR_HANDLING.c: 722: {
 21384                           ;ERROR_HANDLING.c: 723: RE7 = 1;
 21385  0193C6  8E84               	bsf	3972,7,c	;volatile
 21386  0193C8  0012               	return	
 21387  0193CA                     __end_of_Start_Stop:
 21388                           	opt stack 0
 21389                           tblptru	equ	0xFF8
 21390                           tblptrh	equ	0xFF7
 21391                           tblptrl	equ	0xFF6
 21392                           tablat	equ	0xFF5
 21393                           prodh	equ	0xFF4
 21394                           prodl	equ	0xFF3
 21395                           intcon	equ	0xFF2
 21396                           postinc0	equ	0xFEE
 21397                           wreg	equ	0xFE8
 21398                           postdec1	equ	0xFE5
 21399                           fsr1h	equ	0xFE2
 21400                           fsr1l	equ	0xFE1
 21401                           indf2	equ	0xFDF
 21402                           postinc2	equ	0xFDE
 21403                           postdec2	equ	0xFDD
 21404                           fsr2h	equ	0xFDA
 21405                           fsr2l	equ	0xFD9
 21406                           status	equ	0xFD8
 21407                           
 21408 ;; *************** function _Rotor_Slip_Cal *****************
 21409 ;; Defined at:
 21410 ;;		line 17 in file "SLIP_CALCULATIONS.c"
 21411 ;; Parameters:    Size  Location     Type
 21412 ;;		None
 21413 ;; Auto vars:     Size  Location     Type
 21414 ;;		None
 21415 ;; Return value:  Size  Location     Type
 21416 ;;                  1    wreg      void 
 21417 ;; Registers used:
 21418 ;;		wreg, status,2, status,0, cstack
 21419 ;; Tracked objects:
 21420 ;;		On entry : 0/0
 21421 ;;		On exit  : 0/0
 21422 ;;		Unchanged: 0/0
 21423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21428 ;;Total ram usage:        0 bytes
 21429 ;; Hardware stack levels used:    1
 21430 ;; Hardware stack levels required when called:    5
 21431 ;; This function calls:
 21432 ;;		___ftadd
 21433 ;;		___ftdiv
 21434 ;;		___ftmul
 21435 ;;		___ftneg
 21436 ;; This function is called by:
 21437 ;;		_Error_Checking_One_Second
 21438 ;; This function uses a non-reentrant model
 21439 ;;
 21440                           
 21441                           	psect	text60
 21442  0195E0                     __ptext60:
 21443                           	opt stack 0
 21444  0195E0                     _Rotor_Slip_Cal:
 21445                           	opt stack 23
 21446                           
 21447                           ;SLIP_CALCULATIONS.c: 19: Temp = (Generator_RPM_FLT / (17.54));
 21448                           
 21449                           ;incstack = 0
 21450  0195E0  C0CF  F09B         	movff	_Generator_RPM_FLT,___ftdiv@f1
 21451  0195E4  C0D0  F09C         	movff	_Generator_RPM_FLT+1,___ftdiv@f1+1
 21452  0195E8  C0D1  F09D         	movff	_Generator_RPM_FLT+2,___ftdiv@f1+2
 21453  0195EC  0E52               	movlw	82
 21454  0195EE  0100               	movlb	0	; () banked
 21455  0195F0  6F9E               	movwf	___ftdiv@f2& (0+255),b
 21456  0195F2  0E8C               	movlw	140
 21457  0195F4  0100               	movlb	0	; () banked
 21458  0195F6  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 21459  0195F8  0E41               	movlw	65
 21460  0195FA  0100               	movlb	0	; () banked
 21461  0195FC  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 21462  0195FE  EC89  F0BF         	call	___ftdiv	;wreg free
 21463  019602  C09B  F224         	movff	?___ftdiv,_Temp
 21464  019606  C09C  F225         	movff	?___ftdiv+1,_Temp+1
 21465  01960A  C09D  F226         	movff	?___ftdiv+2,_Temp+2
 21466                           
 21467                           ;SLIP_CALCULATIONS.c: 20: Rotor_slip_1 = (Turbine_RPM - Temp) / Temp;
 21468  01960E  C02D  F086         	movff	_Turbine_RPM,___ftadd@f2
 21469  019612  C02E  F087         	movff	_Turbine_RPM+1,___ftadd@f2+1
 21470  019616  C02F  F088         	movff	_Turbine_RPM+2,___ftadd@f2+2
 21471  01961A  C224  F079         	movff	_Temp,___ftneg@f1
 21472  01961E  C225  F07A         	movff	_Temp+1,___ftneg@f1+1
 21473  019622  C226  F07B         	movff	_Temp+2,___ftneg@f1+2
 21474  019626  ECE0  F0D3         	call	___ftneg	;wreg free
 21475  01962A  C079  F083         	movff	?___ftneg,___ftadd@f1
 21476  01962E  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 21477  019632  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 21478  019636  ECE4  F0AF         	call	___ftadd	;wreg free
 21479  01963A  C083  F09B         	movff	?___ftadd,___ftdiv@f1
 21480  01963E  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
 21481  019642  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
 21482  019646  C224  F09E         	movff	_Temp,___ftdiv@f2
 21483  01964A  C225  F09F         	movff	_Temp+1,___ftdiv@f2+1
 21484  01964E  C226  F0A0         	movff	_Temp+2,___ftdiv@f2+2
 21485  019652  EC89  F0BF         	call	___ftdiv	;wreg free
 21486  019656  C09B  F5A3         	movff	?___ftdiv,_Rotor_slip_1
 21487  01965A  C09C  F5A4         	movff	?___ftdiv+1,_Rotor_slip_1+1
 21488  01965E  C09D  F5A5         	movff	?___ftdiv+2,_Rotor_slip_1+2
 21489                           
 21490                           ;SLIP_CALCULATIONS.c: 21: Rotor_slip = Rotor_slip_1 * 100;
 21491  019662  C5A3  F06A         	movff	_Rotor_slip_1,___ftmul@f1
 21492  019666  C5A4  F06B         	movff	_Rotor_slip_1+1,___ftmul@f1+1
 21493  01966A  C5A5  F06C         	movff	_Rotor_slip_1+2,___ftmul@f1+2
 21494  01966E  0E00               	movlw	0
 21495  019670  0100               	movlb	0	; () banked
 21496  019672  6F6D               	movwf	___ftmul@f2& (0+255),b
 21497  019674  0EC8               	movlw	200
 21498  019676  0100               	movlb	0	; () banked
 21499  019678  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 21500  01967A  0E42               	movlw	66
 21501  01967C  0100               	movlb	0	; () banked
 21502  01967E  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 21503  019680  EC83  F0BD         	call	___ftmul	;wreg free
 21504  019684  C06A  F124         	movff	?___ftmul,_Rotor_slip
 21505  019688  C06B  F125         	movff	?___ftmul+1,_Rotor_slip+1
 21506  01968C  C06C  F126         	movff	?___ftmul+2,_Rotor_slip+2
 21507  019690  0012               	return		;funcret
 21508  019692                     __end_of_Rotor_Slip_Cal:
 21509                           	opt stack 0
 21510                           tblptru	equ	0xFF8
 21511                           tblptrh	equ	0xFF7
 21512                           tblptrl	equ	0xFF6
 21513                           tablat	equ	0xFF5
 21514                           prodh	equ	0xFF4
 21515                           prodl	equ	0xFF3
 21516                           intcon	equ	0xFF2
 21517                           postinc0	equ	0xFEE
 21518                           wreg	equ	0xFE8
 21519                           postdec1	equ	0xFE5
 21520                           fsr1h	equ	0xFE2
 21521                           fsr1l	equ	0xFE1
 21522                           indf2	equ	0xFDF
 21523                           postinc2	equ	0xFDE
 21524                           postdec2	equ	0xFDD
 21525                           fsr2h	equ	0xFDA
 21526                           fsr2l	equ	0xFD9
 21527                           status	equ	0xFD8
 21528                           
 21529 ;; *************** function _Ramp_Up_Slip_Error_Trigger *****************
 21530 ;; Defined at:
 21531 ;;		line 52 in file "SLIP_CALCULATIONS.c"
 21532 ;; Parameters:    Size  Location     Type
 21533 ;;		None
 21534 ;; Auto vars:     Size  Location     Type
 21535 ;;		None
 21536 ;; Return value:  Size  Location     Type
 21537 ;;                  2  5181[None  ] int 
 21538 ;; Registers used:
 21539 ;;		wreg, status,2, status,0, cstack
 21540 ;; Tracked objects:
 21541 ;;		On entry : 0/0
 21542 ;;		On exit  : 0/0
 21543 ;;		Unchanged: 0/0
 21544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21549 ;;Total ram usage:        0 bytes
 21550 ;; Hardware stack levels used:    1
 21551 ;; Hardware stack levels required when called:    4
 21552 ;; This function calls:
 21553 ;;		___ftge
 21554 ;; This function is called by:
 21555 ;;		_Error_Checking_One_Second
 21556 ;; This function uses a non-reentrant model
 21557 ;;
 21558                           
 21559                           	psect	text61
 21560  0182EA                     __ptext61:
 21561                           	opt stack 0
 21562  0182EA                     _Ramp_Up_Slip_Error_Trigger:
 21563                           	opt stack 24
 21564                           
 21565                           ;SLIP_CALCULATIONS.c: 54: if(Rotor_slip < (-9.0))
 21566                           
 21567                           ;incstack = 0
 21568  0182EA  C124  F08F         	movff	_Rotor_slip,___ftge@ff1
 21569  0182EE  C125  F090         	movff	_Rotor_slip+1,___ftge@ff1+1
 21570  0182F2  C126  F091         	movff	_Rotor_slip+2,___ftge@ff1+2
 21571  0182F6  0E00               	movlw	0
 21572  0182F8  0100               	movlb	0	; () banked
 21573  0182FA  6F92               	movwf	___ftge@ff2& (0+255),b
 21574  0182FC  0E10               	movlw	16
 21575  0182FE  0100               	movlb	0	; () banked
 21576  018300  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 21577  018302  0EC1               	movlw	193
 21578  018304  0100               	movlb	0	; () banked
 21579  018306  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 21580  018308  EC09  F0C8         	call	___ftge	;wreg free
 21581  01830C  0100               	movlb	0	; () banked
 21582  01830E  B0D8               	btfsc	status,0,c
 21583  018310  D002               	goto	l20873
 21584                           
 21585                           ; BSR set to: 0
 21586                           ;SLIP_CALCULATIONS.c: 55: {
 21587                           ;SLIP_CALCULATIONS.c: 56: Slip_Error_Counter++;
 21588  018312  0101               	movlb	1	; () banked
 21589  018314  2BB7               	incf	_Slip_Error_Counter& (0+255),f,b
 21590  018316                     l20873:
 21591                           
 21592                           ;SLIP_CALCULATIONS.c: 57: }
 21593                           ;SLIP_CALCULATIONS.c: 58: if(Rotor_slip >= (-9.0))
 21594  018316  C124  F08F         	movff	_Rotor_slip,___ftge@ff1
 21595  01831A  C125  F090         	movff	_Rotor_slip+1,___ftge@ff1+1
 21596  01831E  C126  F091         	movff	_Rotor_slip+2,___ftge@ff1+2
 21597  018322  0E00               	movlw	0
 21598  018324  0100               	movlb	0	; () banked
 21599  018326  6F92               	movwf	___ftge@ff2& (0+255),b
 21600  018328  0E10               	movlw	16
 21601  01832A  0100               	movlb	0	; () banked
 21602  01832C  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 21603  01832E  0EC1               	movlw	193
 21604  018330  0100               	movlb	0	; () banked
 21605  018332  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 21606  018334  EC09  F0C8         	call	___ftge	;wreg free
 21607  018338  0100               	movlb	0	; () banked
 21608  01833A  A0D8               	btfss	status,0,c
 21609  01833C  D003               	goto	l20877
 21610                           
 21611                           ; BSR set to: 0
 21612                           ;SLIP_CALCULATIONS.c: 59: {
 21613                           ;SLIP_CALCULATIONS.c: 60: Slip_Error_Counter = 0;
 21614  01833E  0E00               	movlw	0
 21615  018340  0101               	movlb	1	; () banked
 21616  018342  6FB7               	movwf	_Slip_Error_Counter& (0+255),b
 21617  018344                     l20877:
 21618                           
 21619                           ;SLIP_CALCULATIONS.c: 61: }
 21620                           ;SLIP_CALCULATIONS.c: 62: if(Slip_Error_Counter >= (60))
 21621  018344  0E3B               	movlw	59
 21622  018346  0101               	movlb	1	; () banked
 21623  018348  65B7               	cpfsgt	_Slip_Error_Counter& (0+255),b
 21624  01834A  D01C               	goto	l20885
 21625                           
 21626                           ; BSR set to: 1
 21627                           ;SLIP_CALCULATIONS.c: 63: {
 21628                           ;SLIP_CALCULATIONS.c: 64: Slip_Error_Counter = 0;
 21629  01834C  0E00               	movlw	0
 21630  01834E  0101               	movlb	1	; () banked
 21631  018350  6FB7               	movwf	_Slip_Error_Counter& (0+255),b
 21632                           
 21633                           ;SLIP_CALCULATIONS.c: 65: Rotor_Slip_Error_Flag = 1;
 21634  018352  0E01               	movlw	1
 21635  018354  0101               	movlb	1	; () banked
 21636  018356  6FB5               	movwf	_Rotor_Slip_Error_Flag& (0+255),b
 21637                           
 21638                           ; BSR set to: 1
 21639                           ;SLIP_CALCULATIONS.c: 66: if(Rotor_slip < (-9.0))
 21640  018358  C124  F08F         	movff	_Rotor_slip,___ftge@ff1
 21641  01835C  C125  F090         	movff	_Rotor_slip+1,___ftge@ff1+1
 21642  018360  C126  F091         	movff	_Rotor_slip+2,___ftge@ff1+2
 21643  018364  0E00               	movlw	0
 21644  018366  0100               	movlb	0	; () banked
 21645  018368  6F92               	movwf	___ftge@ff2& (0+255),b
 21646  01836A  0E10               	movlw	16
 21647  01836C  0100               	movlb	0	; () banked
 21648  01836E  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 21649  018370  0EC1               	movlw	193
 21650  018372  0100               	movlb	0	; () banked
 21651  018374  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 21652  018376  EC09  F0C8         	call	___ftge	;wreg free
 21653  01837A  0100               	movlb	0	; () banked
 21654  01837C  B0D8               	btfsc	status,0,c
 21655  01837E  D002               	goto	l20885
 21656                           
 21657                           ; BSR set to: 0
 21658                           ;SLIP_CALCULATIONS.c: 67: {
 21659                           ;SLIP_CALCULATIONS.c: 68: Errors = ROTOR_SLIP;
 21660  018380  0E11               	movlw	17
 21661  018382  6E3A               	movwf	_Errors,c
 21662  018384                     l20885:
 21663                           
 21664                           ;SLIP_CALCULATIONS.c: 69: }
 21665                           ;SLIP_CALCULATIONS.c: 70: }
 21666                           ;SLIP_CALCULATIONS.c: 73: if(Motor_slip < (-8.0))
 21667  018384  C112  F08F         	movff	_Motor_slip,___ftge@ff1
 21668  018388  C113  F090         	movff	_Motor_slip+1,___ftge@ff1+1
 21669  01838C  C114  F091         	movff	_Motor_slip+2,___ftge@ff1+2
 21670  018390  0E00               	movlw	0
 21671  018392  0100               	movlb	0	; () banked
 21672  018394  6F92               	movwf	___ftge@ff2& (0+255),b
 21673  018396  0E00               	movlw	0
 21674  018398  0100               	movlb	0	; () banked
 21675  01839A  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 21676  01839C  0EC1               	movlw	193
 21677  01839E  0100               	movlb	0	; () banked
 21678  0183A0  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 21679  0183A2  EC09  F0C8         	call	___ftge	;wreg free
 21680  0183A6  0100               	movlb	0	; () banked
 21681  0183A8  B0D8               	btfsc	status,0,c
 21682  0183AA  D002               	goto	l20889
 21683                           
 21684                           ; BSR set to: 0
 21685                           ;SLIP_CALCULATIONS.c: 74: {
 21686                           ;SLIP_CALCULATIONS.c: 75: Slip_Error_Counter_1++;
 21687  0183AC  0101               	movlb	1	; () banked
 21688  0183AE  2BB8               	incf	_Slip_Error_Counter_1& (0+255),f,b
 21689  0183B0                     l20889:
 21690                           
 21691                           ;SLIP_CALCULATIONS.c: 76: }
 21692                           ;SLIP_CALCULATIONS.c: 77: if(Motor_slip >= (-8.0))
 21693  0183B0  C112  F08F         	movff	_Motor_slip,___ftge@ff1
 21694  0183B4  C113  F090         	movff	_Motor_slip+1,___ftge@ff1+1
 21695  0183B8  C114  F091         	movff	_Motor_slip+2,___ftge@ff1+2
 21696  0183BC  0E00               	movlw	0
 21697  0183BE  0100               	movlb	0	; () banked
 21698  0183C0  6F92               	movwf	___ftge@ff2& (0+255),b
 21699  0183C2  0E00               	movlw	0
 21700  0183C4  0100               	movlb	0	; () banked
 21701  0183C6  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 21702  0183C8  0EC1               	movlw	193
 21703  0183CA  0100               	movlb	0	; () banked
 21704  0183CC  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 21705  0183CE  EC09  F0C8         	call	___ftge	;wreg free
 21706  0183D2  0100               	movlb	0	; () banked
 21707  0183D4  A0D8               	btfss	status,0,c
 21708  0183D6  D003               	goto	l20893
 21709                           
 21710                           ; BSR set to: 0
 21711                           ;SLIP_CALCULATIONS.c: 78: {
 21712                           ;SLIP_CALCULATIONS.c: 79: Slip_Error_Counter_1 = 0;
 21713  0183D8  0E00               	movlw	0
 21714  0183DA  0101               	movlb	1	; () banked
 21715  0183DC  6FB8               	movwf	_Slip_Error_Counter_1& (0+255),b
 21716  0183DE                     l20893:
 21717                           
 21718                           ;SLIP_CALCULATIONS.c: 80: }
 21719                           ;SLIP_CALCULATIONS.c: 81: if(Slip_Error_Counter_1 >= (60))
 21720  0183DE  0E3B               	movlw	59
 21721  0183E0  0101               	movlb	1	; () banked
 21722  0183E2  65B8               	cpfsgt	_Slip_Error_Counter_1& (0+255),b
 21723  0183E4  0012               	return	
 21724                           
 21725                           ; BSR set to: 1
 21726                           ;SLIP_CALCULATIONS.c: 82: {
 21727                           ;SLIP_CALCULATIONS.c: 83: Slip_Error_Counter_1 = 0;
 21728  0183E6  0E00               	movlw	0
 21729  0183E8  0101               	movlb	1	; () banked
 21730  0183EA  6FB8               	movwf	_Slip_Error_Counter_1& (0+255),b
 21731                           
 21732                           ;SLIP_CALCULATIONS.c: 84: Motor_Slip_Error_Flag = 1;
 21733  0183EC  0E01               	movlw	1
 21734  0183EE  0101               	movlb	1	; () banked
 21735  0183F0  6FA9               	movwf	_Motor_Slip_Error_Flag& (0+255),b
 21736                           
 21737                           ; BSR set to: 1
 21738                           ;SLIP_CALCULATIONS.c: 85: if(Motor_slip < (-8.0))
 21739  0183F2  C112  F08F         	movff	_Motor_slip,___ftge@ff1
 21740  0183F6  C113  F090         	movff	_Motor_slip+1,___ftge@ff1+1
 21741  0183FA  C114  F091         	movff	_Motor_slip+2,___ftge@ff1+2
 21742  0183FE  0E00               	movlw	0
 21743  018400  0100               	movlb	0	; () banked
 21744  018402  6F92               	movwf	___ftge@ff2& (0+255),b
 21745  018404  0E00               	movlw	0
 21746  018406  0100               	movlb	0	; () banked
 21747  018408  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 21748  01840A  0EC1               	movlw	193
 21749  01840C  0100               	movlb	0	; () banked
 21750  01840E  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 21751  018410  EC09  F0C8         	call	___ftge	;wreg free
 21752  018414  0100               	movlb	0	; () banked
 21753  018416  B0D8               	btfsc	status,0,c
 21754  018418  0012               	return	
 21755                           
 21756                           ; BSR set to: 0
 21757                           ;SLIP_CALCULATIONS.c: 86: {
 21758                           ;SLIP_CALCULATIONS.c: 87: Errors = MOTOR_SLIP;
 21759  01841A  0E10               	movlw	16
 21760  01841C  6E3A               	movwf	_Errors,c
 21761                           
 21762                           ; BSR set to: 0
 21763  01841E  0012               	return	
 21764  018420                     __end_of_Ramp_Up_Slip_Error_Trigger:
 21765                           	opt stack 0
 21766                           tblptru	equ	0xFF8
 21767                           tblptrh	equ	0xFF7
 21768                           tblptrl	equ	0xFF6
 21769                           tablat	equ	0xFF5
 21770                           prodh	equ	0xFF4
 21771                           prodl	equ	0xFF3
 21772                           intcon	equ	0xFF2
 21773                           postinc0	equ	0xFEE
 21774                           wreg	equ	0xFE8
 21775                           postdec1	equ	0xFE5
 21776                           fsr1h	equ	0xFE2
 21777                           fsr1l	equ	0xFE1
 21778                           indf2	equ	0xFDF
 21779                           postinc2	equ	0xFDE
 21780                           postdec2	equ	0xFDD
 21781                           fsr2h	equ	0xFDA
 21782                           fsr2l	equ	0xFD9
 21783                           status	equ	0xFD8
 21784                           
 21785 ;; *************** function _Ramp_Up_Slip *****************
 21786 ;; Defined at:
 21787 ;;		line 40 in file "SLIP_CALCULATIONS.c"
 21788 ;; Parameters:    Size  Location     Type
 21789 ;;		None
 21790 ;; Auto vars:     Size  Location     Type
 21791 ;;		None
 21792 ;; Return value:  Size  Location     Type
 21793 ;;                  2  5179[None  ] int 
 21794 ;; Registers used:
 21795 ;;		wreg, status,2, status,0, cstack
 21796 ;; Tracked objects:
 21797 ;;		On entry : 0/0
 21798 ;;		On exit  : 0/0
 21799 ;;		Unchanged: 0/0
 21800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21805 ;;Total ram usage:        0 bytes
 21806 ;; Hardware stack levels used:    1
 21807 ;; Hardware stack levels required when called:    4
 21808 ;; This function calls:
 21809 ;;		___ftge
 21810 ;; This function is called by:
 21811 ;;		_Error_Checking_One_Second
 21812 ;; This function uses a non-reentrant model
 21813 ;;
 21814                           
 21815                           	psect	text62
 21816  019692                     __ptext62:
 21817                           	opt stack 0
 21818  019692                     _Ramp_Up_Slip:
 21819                           	opt stack 24
 21820                           
 21821                           ;SLIP_CALCULATIONS.c: 42: if(Rotor_slip > (-9.0) && Motor_slip > (-8.0))
 21822                           
 21823                           ;incstack = 0
 21824  019692  0E00               	movlw	0
 21825  019694  0100               	movlb	0	; () banked
 21826  019696  6F8F               	movwf	___ftge@ff1& (0+255),b
 21827  019698  0E10               	movlw	16
 21828  01969A  0100               	movlb	0	; () banked
 21829  01969C  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 21830  01969E  0EC1               	movlw	193
 21831  0196A0  0100               	movlb	0	; () banked
 21832  0196A2  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 21833  0196A4  C124  F092         	movff	_Rotor_slip,___ftge@ff2
 21834  0196A8  C125  F093         	movff	_Rotor_slip+1,___ftge@ff2+1
 21835  0196AC  C126  F094         	movff	_Rotor_slip+2,___ftge@ff2+2
 21836  0196B0  EC09  F0C8         	call	___ftge	;wreg free
 21837  0196B4  0100               	movlb	0	; () banked
 21838  0196B6  B0D8               	btfsc	status,0,c
 21839  0196B8  D017               	goto	l20863
 21840                           
 21841                           ; BSR set to: 0
 21842  0196BA  0E00               	movlw	0
 21843  0196BC  0100               	movlb	0	; () banked
 21844  0196BE  6F8F               	movwf	___ftge@ff1& (0+255),b
 21845  0196C0  0E00               	movlw	0
 21846  0196C2  0100               	movlb	0	; () banked
 21847  0196C4  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 21848  0196C6  0EC1               	movlw	193
 21849  0196C8  0100               	movlb	0	; () banked
 21850  0196CA  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 21851  0196CC  C112  F092         	movff	_Motor_slip,___ftge@ff2
 21852  0196D0  C113  F093         	movff	_Motor_slip+1,___ftge@ff2+1
 21853  0196D4  C114  F094         	movff	_Motor_slip+2,___ftge@ff2+2
 21854  0196D8  EC09  F0C8         	call	___ftge	;wreg free
 21855  0196DC  0100               	movlb	0	; () banked
 21856  0196DE  B0D8               	btfsc	status,0,c
 21857  0196E0  D003               	goto	l20863
 21858                           
 21859                           ; BSR set to: 0
 21860                           ;SLIP_CALCULATIONS.c: 43: {
 21861                           ;SLIP_CALCULATIONS.c: 44: Slip_Flag = 1;
 21862  0196E2  0E01               	movlw	1
 21863  0196E4  0101               	movlb	1	; () banked
 21864  0196E6  6FB9               	movwf	_Slip_Flag& (0+255),b
 21865  0196E8                     l20863:
 21866                           
 21867                           ;SLIP_CALCULATIONS.c: 45: }
 21868                           ;SLIP_CALCULATIONS.c: 46: if(Rotor_slip <= (-9.0) || Motor_slip <= (-8.0))
 21869  0196E8  0E00               	movlw	0
 21870  0196EA  0100               	movlb	0	; () banked
 21871  0196EC  6F8F               	movwf	___ftge@ff1& (0+255),b
 21872  0196EE  0E10               	movlw	16
 21873  0196F0  0100               	movlb	0	; () banked
 21874  0196F2  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 21875  0196F4  0EC1               	movlw	193
 21876  0196F6  0100               	movlb	0	; () banked
 21877  0196F8  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 21878  0196FA  C124  F092         	movff	_Rotor_slip,___ftge@ff2
 21879  0196FE  C125  F093         	movff	_Rotor_slip+1,___ftge@ff2+1
 21880  019702  C126  F094         	movff	_Rotor_slip+2,___ftge@ff2+2
 21881  019706  EC09  F0C8         	call	___ftge	;wreg free
 21882  01970A  0100               	movlb	0	; () banked
 21883  01970C  B0D8               	btfsc	status,0,c
 21884  01970E  D014               	goto	l20867
 21885                           
 21886                           ; BSR set to: 0
 21887  019710  0E00               	movlw	0
 21888  019712  0100               	movlb	0	; () banked
 21889  019714  6F8F               	movwf	___ftge@ff1& (0+255),b
 21890  019716  0E00               	movlw	0
 21891  019718  0100               	movlb	0	; () banked
 21892  01971A  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 21893  01971C  0EC1               	movlw	193
 21894  01971E  0100               	movlb	0	; () banked
 21895  019720  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 21896  019722  C112  F092         	movff	_Motor_slip,___ftge@ff2
 21897  019726  C113  F093         	movff	_Motor_slip+1,___ftge@ff2+1
 21898  01972A  C114  F094         	movff	_Motor_slip+2,___ftge@ff2+2
 21899  01972E  EC09  F0C8         	call	___ftge	;wreg free
 21900  019732  0100               	movlb	0	; () banked
 21901  019734  A0D8               	btfss	status,0,c
 21902  019736  0012               	return	
 21903  019738                     l20867:
 21904                           
 21905                           ; BSR set to: 0
 21906                           ;SLIP_CALCULATIONS.c: 47: {
 21907                           ;SLIP_CALCULATIONS.c: 48: Slip_Flag = 0;
 21908  019738  0E00               	movlw	0
 21909  01973A  0101               	movlb	1	; () banked
 21910  01973C  6FB9               	movwf	_Slip_Flag& (0+255),b
 21911  01973E  0012               	return	
 21912  019740                     __end_of_Ramp_Up_Slip:
 21913                           	opt stack 0
 21914                           tblptru	equ	0xFF8
 21915                           tblptrh	equ	0xFF7
 21916                           tblptrl	equ	0xFF6
 21917                           tablat	equ	0xFF5
 21918                           prodh	equ	0xFF4
 21919                           prodl	equ	0xFF3
 21920                           intcon	equ	0xFF2
 21921                           postinc0	equ	0xFEE
 21922                           wreg	equ	0xFE8
 21923                           postdec1	equ	0xFE5
 21924                           fsr1h	equ	0xFE2
 21925                           fsr1l	equ	0xFE1
 21926                           indf2	equ	0xFDF
 21927                           postinc2	equ	0xFDE
 21928                           postdec2	equ	0xFDD
 21929                           fsr2h	equ	0xFDA
 21930                           fsr2l	equ	0xFD9
 21931                           status	equ	0xFD8
 21932                           
 21933 ;; *************** function _Pitch_PS_ON_Function *****************
 21934 ;; Defined at:
 21935 ;;		line 45 in file "PITCHING.c"
 21936 ;; Parameters:    Size  Location     Type
 21937 ;;		None
 21938 ;; Auto vars:     Size  Location     Type
 21939 ;;		None
 21940 ;; Return value:  Size  Location     Type
 21941 ;;                  2  5139[None  ] int 
 21942 ;; Registers used:
 21943 ;;		wreg, status,2, status,0, cstack
 21944 ;; Tracked objects:
 21945 ;;		On entry : 0/0
 21946 ;;		On exit  : 0/0
 21947 ;;		Unchanged: 0/0
 21948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21953 ;;Total ram usage:        0 bytes
 21954 ;; Hardware stack levels used:    1
 21955 ;; Hardware stack levels required when called:    4
 21956 ;; This function calls:
 21957 ;;		___ftge
 21958 ;; This function is called by:
 21959 ;;		_Error_Checking_One_Second
 21960 ;; This function uses a non-reentrant model
 21961 ;;
 21962                           
 21963                           	psect	text63
 21964  01A450                     __ptext63:
 21965                           	opt stack 0
 21966  01A450                     _Pitch_PS_ON_Function:
 21967                           	opt stack 24
 21968                           
 21969                           ;PITCHING.c: 47: if(Wind_Speed_Avg >= (4))
 21970                           
 21971                           ;incstack = 0
 21972  01A450  C0D2  F08F         	movff	_Wind_Speed_Avg,___ftge@ff1
 21973  01A454  C0D3  F090         	movff	_Wind_Speed_Avg+1,___ftge@ff1+1
 21974  01A458  C0D4  F091         	movff	_Wind_Speed_Avg+2,___ftge@ff1+2
 21975  01A45C  0E00               	movlw	0
 21976  01A45E  0100               	movlb	0	; () banked
 21977  01A460  6F92               	movwf	___ftge@ff2& (0+255),b
 21978  01A462  0E80               	movlw	128
 21979  01A464  0100               	movlb	0	; () banked
 21980  01A466  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 21981  01A468  0E40               	movlw	64
 21982  01A46A  0100               	movlb	0	; () banked
 21983  01A46C  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 21984  01A46E  EC09  F0C8         	call	___ftge	;wreg free
 21985  01A472  0100               	movlb	0	; () banked
 21986  01A474  A0D8               	btfss	status,0,c
 21987  01A476  D007               	goto	l20639
 21988                           
 21989                           ; BSR set to: 0
 21990                           ;PITCHING.c: 48: {
 21991                           ;PITCHING.c: 49: (RB5 = 1);
 21992  01A478  8A81               	bsf	3969,5,c	;volatile
 21993                           
 21994                           ; BSR set to: 0
 21995                           ;PITCHING.c: 50: Pitch_Ps_Counter = 0;
 21996  01A47A  0E00               	movlw	0
 21997  01A47C  0103               	movlb	3	; () banked
 21998  01A47E  6FFF               	movwf	(_Pitch_Ps_Counter+1)& (0+255),b
 21999  01A480  0E00               	movlw	0
 22000  01A482  6FFE               	movwf	_Pitch_Ps_Counter& (0+255),b
 22001                           
 22002                           ;PITCHING.c: 51: }
 22003  01A484  0012               	return	
 22004  01A486                     l20639:
 22005                           
 22006                           ;PITCHING.c: 52: else
 22007                           ;PITCHING.c: 53: {
 22008                           ;PITCHING.c: 54: Pitch_Ps_Counter++;
 22009  01A486  0103               	movlb	3	; () banked
 22010  01A488  4BFE               	infsnz	_Pitch_Ps_Counter& (0+255),f,b
 22011  01A48A  2BFF               	incf	(_Pitch_Ps_Counter+1)& (0+255),f,b
 22012                           
 22013                           ; BSR set to: 3
 22014                           ;PITCHING.c: 55: if(Pitch_Ps_Counter > (80))
 22015  01A48C  0103               	movlb	3	; () banked
 22016  01A48E  51FF               	movf	(_Pitch_Ps_Counter+1)& (0+255),w,b
 22017  01A490  E105               	bnz	u13950
 22018  01A492  0E51               	movlw	81
 22019  01A494  0103               	movlb	3	; () banked
 22020  01A496  5DFE               	subwf	_Pitch_Ps_Counter& (0+255),w,b
 22021  01A498  A0D8               	btfss	status,0,c
 22022  01A49A  0012               	return	
 22023  01A49C                     u13950:
 22024                           
 22025                           ; BSR set to: 3
 22026                           ;PITCHING.c: 56: {
 22027                           ;PITCHING.c: 57: Pitch_Ps_Counter = 0;
 22028  01A49C  0E00               	movlw	0
 22029  01A49E  0103               	movlb	3	; () banked
 22030  01A4A0  6FFF               	movwf	(_Pitch_Ps_Counter+1)& (0+255),b
 22031  01A4A2  0E00               	movlw	0
 22032  01A4A4  6FFE               	movwf	_Pitch_Ps_Counter& (0+255),b
 22033                           
 22034                           ; BSR set to: 3
 22035                           ;PITCHING.c: 58: (RB5 = 0);
 22036  01A4A6  9A81               	bcf	3969,5,c	;volatile
 22037                           
 22038                           ; BSR set to: 3
 22039  01A4A8  0012               	return	
 22040  01A4AA                     __end_of_Pitch_PS_ON_Function:
 22041                           	opt stack 0
 22042                           tblptru	equ	0xFF8
 22043                           tblptrh	equ	0xFF7
 22044                           tblptrl	equ	0xFF6
 22045                           tablat	equ	0xFF5
 22046                           prodh	equ	0xFF4
 22047                           prodl	equ	0xFF3
 22048                           intcon	equ	0xFF2
 22049                           postinc0	equ	0xFEE
 22050                           wreg	equ	0xFE8
 22051                           postdec1	equ	0xFE5
 22052                           fsr1h	equ	0xFE2
 22053                           fsr1l	equ	0xFE1
 22054                           indf2	equ	0xFDF
 22055                           postinc2	equ	0xFDE
 22056                           postdec2	equ	0xFDD
 22057                           fsr2h	equ	0xFDA
 22058                           fsr2l	equ	0xFD9
 22059                           status	equ	0xFD8
 22060                           
 22061 ;; *************** function _Pitch_Feedback *****************
 22062 ;; Defined at:
 22063 ;;		line 627 in file "ERROR_HANDLING.c"
 22064 ;; Parameters:    Size  Location     Type
 22065 ;;		None
 22066 ;; Auto vars:     Size  Location     Type
 22067 ;;		None
 22068 ;; Return value:  Size  Location     Type
 22069 ;;                  1    wreg      void 
 22070 ;; Registers used:
 22071 ;;		wreg, status,2, status,0, cstack
 22072 ;; Tracked objects:
 22073 ;;		On entry : 0/0
 22074 ;;		On exit  : 0/0
 22075 ;;		Unchanged: 0/0
 22076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22081 ;;Total ram usage:        0 bytes
 22082 ;; Hardware stack levels used:    1
 22083 ;; Hardware stack levels required when called:    4
 22084 ;; This function calls:
 22085 ;;		_int_eeprom_write
 22086 ;; This function is called by:
 22087 ;;		_Error_Checking_One_Second
 22088 ;; This function uses a non-reentrant model
 22089 ;;
 22090                           
 22091                           	psect	text64
 22092  01A21C                     __ptext64:
 22093                           	opt stack 0
 22094  01A21C                     _Pitch_Feedback:
 22095                           	opt stack 24
 22096                           
 22097                           ;ERROR_HANDLING.c: 629: if(RB1 == 0 && RB0 == 1)
 22098                           
 22099                           ; BSR set to: 3
 22100                           ;incstack = 0
 22101  01A21C  A281               	btfss	3969,1,c	;volatile
 22102  01A21E  A081               	btfss	3969,0,c	;volatile
 22103  01A220  D019               	goto	l6338
 22104                           
 22105                           ;ERROR_HANDLING.c: 630: {
 22106                           ;ERROR_HANDLING.c: 631: Pitch_FB_Error_counter++;
 22107  01A222  0101               	movlb	1	; () banked
 22108  01A224  2BB1               	incf	_Pitch_FB_Error_counter& (0+255),f,b
 22109                           
 22110                           ; BSR set to: 1
 22111                           ;ERROR_HANDLING.c: 632: if(Pitch_FB_Error_counter >= 5)
 22112  01A226  0E04               	movlw	4
 22113  01A228  0101               	movlb	1	; () banked
 22114  01A22A  65B1               	cpfsgt	_Pitch_FB_Error_counter& (0+255),b
 22115  01A22C  0012               	return	
 22116                           
 22117                           ; BSR set to: 1
 22118                           ;ERROR_HANDLING.c: 633: {
 22119                           ;ERROR_HANDLING.c: 634: Pitch_FB_Error_counter = 0;
 22120  01A22E  0E00               	movlw	0
 22121  01A230  0101               	movlb	1	; () banked
 22122  01A232  6FB1               	movwf	_Pitch_FB_Error_counter& (0+255),b
 22123                           
 22124                           ;ERROR_HANDLING.c: 635: Pitch_FB_Error_Flag = 1;
 22125  01A234  0E01               	movlw	1
 22126  01A236  0100               	movlb	0	; () banked
 22127  01A238  6FD7               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 22128                           
 22129                           ;ERROR_HANDLING.c: 636: Errors = PITCH_FB;
 22130  01A23A  0E15               	movlw	21
 22131  01A23C  6E3A               	movwf	_Errors,c
 22132                           
 22133                           ; BSR set to: 0
 22134                           ;ERROR_HANDLING.c: 637: int_eeprom_write((0x02),1);
 22135  01A23E  0E00               	movlw	0
 22136  01A240  6E1E               	movwf	int_eeprom_write@adr+1,c
 22137  01A242  0E02               	movlw	2
 22138  01A244  6E1D               	movwf	int_eeprom_write@adr,c
 22139  01A246  0E00               	movlw	0
 22140  01A248  6E20               	movwf	int_eeprom_write@dat+1,c
 22141  01A24A  0E01               	movlw	1
 22142  01A24C  6E1F               	movwf	int_eeprom_write@dat,c
 22143  01A24E  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 22144                           
 22145                           ;ERROR_HANDLING.c: 638: }
 22146                           ;ERROR_HANDLING.c: 639: }
 22147  01A252  0012               	return	
 22148  01A254                     l6338:
 22149                           
 22150                           ;ERROR_HANDLING.c: 640: else if(RB1 == 1 && RB0 == 1)
 22151  01A254  A281               	btfss	3969,1,c	;volatile
 22152  01A256  0012               	return	
 22153  01A258  A081               	btfss	3969,0,c	;volatile
 22154  01A25A  0012               	return	
 22155                           
 22156                           ;ERROR_HANDLING.c: 641: {
 22157                           ;ERROR_HANDLING.c: 642: Pitch_FB_Error_counter = 0;
 22158  01A25C  0E00               	movlw	0
 22159  01A25E  0101               	movlb	1	; () banked
 22160  01A260  6FB1               	movwf	_Pitch_FB_Error_counter& (0+255),b
 22161                           
 22162                           ;ERROR_HANDLING.c: 643: Pitch_FB_Error_Flag = 0;
 22163  01A262  0E00               	movlw	0
 22164  01A264  0100               	movlb	0	; () banked
 22165  01A266  6FD7               	movwf	_Pitch_FB_Error_Flag& (0+255),b
 22166                           
 22167                           ; BSR set to: 0
 22168                           ;ERROR_HANDLING.c: 644: int_eeprom_write((0x02),0);
 22169  01A268  0E00               	movlw	0
 22170  01A26A  6E1E               	movwf	int_eeprom_write@adr+1,c
 22171  01A26C  0E02               	movlw	2
 22172  01A26E  6E1D               	movwf	int_eeprom_write@adr,c
 22173  01A270  0E00               	movlw	0
 22174  01A272  6E20               	movwf	int_eeprom_write@dat+1,c
 22175  01A274  0E00               	movlw	0
 22176  01A276  6E1F               	movwf	int_eeprom_write@dat,c
 22177  01A278  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 22178  01A27C  0012               	return	
 22179  01A27E                     __end_of_Pitch_Feedback:
 22180                           	opt stack 0
 22181                           tblptru	equ	0xFF8
 22182                           tblptrh	equ	0xFF7
 22183                           tblptrl	equ	0xFF6
 22184                           tablat	equ	0xFF5
 22185                           prodh	equ	0xFF4
 22186                           prodl	equ	0xFF3
 22187                           intcon	equ	0xFF2
 22188                           postinc0	equ	0xFEE
 22189                           wreg	equ	0xFE8
 22190                           postdec1	equ	0xFE5
 22191                           fsr1h	equ	0xFE2
 22192                           fsr1l	equ	0xFE1
 22193                           indf2	equ	0xFDF
 22194                           postinc2	equ	0xFDE
 22195                           postdec2	equ	0xFDD
 22196                           fsr2h	equ	0xFDA
 22197                           fsr2l	equ	0xFD9
 22198                           status	equ	0xFD8
 22199                           
 22200 ;; *************** function _Motor_Slip_Cal *****************
 22201 ;; Defined at:
 22202 ;;		line 24 in file "SLIP_CALCULATIONS.c"
 22203 ;; Parameters:    Size  Location     Type
 22204 ;;		None
 22205 ;; Auto vars:     Size  Location     Type
 22206 ;;		None
 22207 ;; Return value:  Size  Location     Type
 22208 ;;                  1    wreg      void 
 22209 ;; Registers used:
 22210 ;;		wreg, status,2, status,0, cstack
 22211 ;; Tracked objects:
 22212 ;;		On entry : 0/0
 22213 ;;		On exit  : 0/0
 22214 ;;		Unchanged: 0/0
 22215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22220 ;;Total ram usage:        0 bytes
 22221 ;; Hardware stack levels used:    1
 22222 ;; Hardware stack levels required when called:    5
 22223 ;; This function calls:
 22224 ;;		___ftadd
 22225 ;;		___ftdiv
 22226 ;;		___ftmul
 22227 ;;		___ftneg
 22228 ;;		___lbtoft
 22229 ;; This function is called by:
 22230 ;;		_Error_Checking_One_Second
 22231 ;; This function uses a non-reentrant model
 22232 ;;
 22233                           
 22234                           	psect	text65
 22235  018420                     __ptext65:
 22236                           	opt stack 0
 22237  018420                     _Motor_Slip_Cal:
 22238                           	opt stack 23
 22239                           
 22240                           ;SLIP_CALCULATIONS.c: 26: if(Turbine_state == RAMPUP_STATE)
 22241                           
 22242                           ;incstack = 0
 22243  018420  0100               	movlb	0	; () banked
 22244  018422  05D8               	decf	_Turbine_state& (0+255),w,b
 22245  018424  A4D8               	btfss	status,2,c
 22246  018426  D00A               	goto	l20801
 22247                           
 22248                           ; BSR set to: 0
 22249                           ;SLIP_CALCULATIONS.c: 27: {
 22250                           ;SLIP_CALCULATIONS.c: 28: Mot_Frequency = Desired_Frequency;
 22251  018428  0100               	movlb	0	; () banked
 22252  01842A  51D5               	movf	_Desired_Frequency& (0+255),w,b
 22253  01842C  EC72  F0D4         	call	___lbtoft
 22254  018430  C060  F5FA         	movff	?___lbtoft,_Mot_Frequency
 22255  018434  C061  F5FB         	movff	?___lbtoft+1,_Mot_Frequency+1
 22256  018438  C062  F5FC         	movff	?___lbtoft+2,_Mot_Frequency+2
 22257  01843C                     l20801:
 22258                           
 22259                           ;SLIP_CALCULATIONS.c: 29: }
 22260                           ;SLIP_CALCULATIONS.c: 30: if(Turbine_state == RUNNING_STATE)
 22261  01843C  0E02               	movlw	2
 22262  01843E  0100               	movlb	0	; () banked
 22263  018440  19D8               	xorwf	_Turbine_state& (0+255),w,b
 22264  018442  A4D8               	btfss	status,2,c
 22265  018444  D009               	goto	l20805
 22266                           
 22267                           ; BSR set to: 0
 22268                           ;SLIP_CALCULATIONS.c: 31: {
 22269                           ;SLIP_CALCULATIONS.c: 32: Mot_Frequency = 50;
 22270  018446  0E00               	movlw	0
 22271  018448  0105               	movlb	5	; () banked
 22272  01844A  6FFA               	movwf	_Mot_Frequency& (0+255),b
 22273  01844C  0E48               	movlw	72
 22274  01844E  0105               	movlb	5	; () banked
 22275  018450  6FFB               	movwf	(_Mot_Frequency+1)& (0+255),b
 22276  018452  0E42               	movlw	66
 22277  018454  0105               	movlb	5	; () banked
 22278  018456  6FFC               	movwf	(_Mot_Frequency+2)& (0+255),b
 22279  018458                     l20805:
 22280                           
 22281                           ;SLIP_CALCULATIONS.c: 33: }
 22282                           ;SLIP_CALCULATIONS.c: 34: Gen_Theory = 120 * Mot_Frequency / (6);
 22283  018458  0E00               	movlw	0
 22284  01845A  0100               	movlb	0	; () banked
 22285  01845C  6F6D               	movwf	___ftmul@f2& (0+255),b
 22286  01845E  0EF0               	movlw	240
 22287  018460  0100               	movlb	0	; () banked
 22288  018462  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 22289  018464  0E42               	movlw	66
 22290  018466  0100               	movlb	0	; () banked
 22291  018468  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 22292  01846A  C5FA  F06A         	movff	_Mot_Frequency,___ftmul@f1
 22293  01846E  C5FB  F06B         	movff	_Mot_Frequency+1,___ftmul@f1+1
 22294  018472  C5FC  F06C         	movff	_Mot_Frequency+2,___ftmul@f1+2
 22295  018476  EC83  F0BD         	call	___ftmul	;wreg free
 22296  01847A  C06A  F09B         	movff	?___ftmul,___ftdiv@f1
 22297  01847E  C06B  F09C         	movff	?___ftmul+1,___ftdiv@f1+1
 22298  018482  C06C  F09D         	movff	?___ftmul+2,___ftdiv@f1+2
 22299  018486  0E00               	movlw	0
 22300  018488  0100               	movlb	0	; () banked
 22301  01848A  6F9E               	movwf	___ftdiv@f2& (0+255),b
 22302  01848C  0EC0               	movlw	192
 22303  01848E  0100               	movlb	0	; () banked
 22304  018490  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 22305  018492  0E40               	movlw	64
 22306  018494  0100               	movlb	0	; () banked
 22307  018496  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 22308  018498  EC89  F0BF         	call	___ftdiv	;wreg free
 22309  01849C  C09B  F218         	movff	?___ftdiv,_Gen_Theory
 22310  0184A0  C09C  F219         	movff	?___ftdiv+1,_Gen_Theory+1
 22311  0184A4  C09D  F21A         	movff	?___ftdiv+2,_Gen_Theory+2
 22312                           
 22313                           ;SLIP_CALCULATIONS.c: 36: Motor_slip_1 = (Generator_RPM_FLT - Gen_Theory)/Gen_Theory;
 22314  0184A8  C0CF  F086         	movff	_Generator_RPM_FLT,___ftadd@f2
 22315  0184AC  C0D0  F087         	movff	_Generator_RPM_FLT+1,___ftadd@f2+1
 22316  0184B0  C0D1  F088         	movff	_Generator_RPM_FLT+2,___ftadd@f2+2
 22317  0184B4  C218  F079         	movff	_Gen_Theory,___ftneg@f1
 22318  0184B8  C219  F07A         	movff	_Gen_Theory+1,___ftneg@f1+1
 22319  0184BC  C21A  F07B         	movff	_Gen_Theory+2,___ftneg@f1+2
 22320  0184C0  ECE0  F0D3         	call	___ftneg	;wreg free
 22321  0184C4  C079  F083         	movff	?___ftneg,___ftadd@f1
 22322  0184C8  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 22323  0184CC  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 22324  0184D0  ECE4  F0AF         	call	___ftadd	;wreg free
 22325  0184D4  C083  F09B         	movff	?___ftadd,___ftdiv@f1
 22326  0184D8  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
 22327  0184DC  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
 22328  0184E0  C218  F09E         	movff	_Gen_Theory,___ftdiv@f2
 22329  0184E4  C219  F09F         	movff	_Gen_Theory+1,___ftdiv@f2+1
 22330  0184E8  C21A  F0A0         	movff	_Gen_Theory+2,___ftdiv@f2+2
 22331  0184EC  EC89  F0BF         	call	___ftdiv	;wreg free
 22332  0184F0  C09B  F59A         	movff	?___ftdiv,_Motor_slip_1
 22333  0184F4  C09C  F59B         	movff	?___ftdiv+1,_Motor_slip_1+1
 22334  0184F8  C09D  F59C         	movff	?___ftdiv+2,_Motor_slip_1+2
 22335                           
 22336                           ;SLIP_CALCULATIONS.c: 37: Motor_slip = Motor_slip_1 * 100;
 22337  0184FC  C59A  F06A         	movff	_Motor_slip_1,___ftmul@f1
 22338  018500  C59B  F06B         	movff	_Motor_slip_1+1,___ftmul@f1+1
 22339  018504  C59C  F06C         	movff	_Motor_slip_1+2,___ftmul@f1+2
 22340  018508  0E00               	movlw	0
 22341  01850A  0100               	movlb	0	; () banked
 22342  01850C  6F6D               	movwf	___ftmul@f2& (0+255),b
 22343  01850E  0EC8               	movlw	200
 22344  018510  0100               	movlb	0	; () banked
 22345  018512  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 22346  018514  0E42               	movlw	66
 22347  018516  0100               	movlb	0	; () banked
 22348  018518  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 22349  01851A  EC83  F0BD         	call	___ftmul	;wreg free
 22350  01851E  C06A  F112         	movff	?___ftmul,_Motor_slip
 22351  018522  C06B  F113         	movff	?___ftmul+1,_Motor_slip+1
 22352  018526  C06C  F114         	movff	?___ftmul+2,_Motor_slip+2
 22353  01852A  0012               	return		;funcret
 22354  01852C                     __end_of_Motor_Slip_Cal:
 22355                           	opt stack 0
 22356                           tblptru	equ	0xFF8
 22357                           tblptrh	equ	0xFF7
 22358                           tblptrl	equ	0xFF6
 22359                           tablat	equ	0xFF5
 22360                           prodh	equ	0xFF4
 22361                           prodl	equ	0xFF3
 22362                           intcon	equ	0xFF2
 22363                           postinc0	equ	0xFEE
 22364                           wreg	equ	0xFE8
 22365                           postdec1	equ	0xFE5
 22366                           fsr1h	equ	0xFE2
 22367                           fsr1l	equ	0xFE1
 22368                           indf2	equ	0xFDF
 22369                           postinc2	equ	0xFDE
 22370                           postdec2	equ	0xFDD
 22371                           fsr2h	equ	0xFDA
 22372                           fsr2l	equ	0xFD9
 22373                           status	equ	0xFD8
 22374                           
 22375 ;; *************** function ___lbtoft *****************
 22376 ;; Defined at:
 22377 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbtoft.c"
 22378 ;; Parameters:    Size  Location     Type
 22379 ;;  c               1    wreg     unsigned char 
 22380 ;; Auto vars:     Size  Location     Type
 22381 ;;  c               1   36[COMRAM] unsigned char 
 22382 ;; Return value:  Size  Location     Type
 22383 ;;                  3    0[BANK0 ] float 
 22384 ;; Registers used:
 22385 ;;		wreg, status,2, status,0, cstack
 22386 ;; Tracked objects:
 22387 ;;		On entry : 0/0
 22388 ;;		On exit  : 0/0
 22389 ;;		Unchanged: 0/0
 22390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22394 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22395 ;;Total ram usage:        4 bytes
 22396 ;; Hardware stack levels used:    1
 22397 ;; Hardware stack levels required when called:    4
 22398 ;; This function calls:
 22399 ;;		___ftpack
 22400 ;; This function is called by:
 22401 ;;		_Motor_Slip_Cal
 22402 ;; This function uses a non-reentrant model
 22403 ;;
 22404                           
 22405                           	psect	text66
 22406  01A8E4                     __ptext66:
 22407                           	opt stack 0
 22408  01A8E4                     ___lbtoft:
 22409                           	opt stack 23
 22410                           
 22411                           ;incstack = 0
 22412                           ;___lbtoft@c stored from wreg
 22413  01A8E4  6E25               	movwf	___lbtoft@c,c
 22414  01A8E6  5025               	movf	___lbtoft@c,w,c
 22415  01A8E8  6E1D               	movwf	___ftpack@arg,c
 22416  01A8EA  6A1E               	clrf	___ftpack@arg+1,c
 22417  01A8EC  6A1F               	clrf	___ftpack@arg+2,c
 22418  01A8EE  0E8E               	movlw	142
 22419  01A8F0  6E20               	movwf	___ftpack@exp,c
 22420  01A8F2  0E00               	movlw	0
 22421  01A8F4  6E21               	movwf	___ftpack@sign,c
 22422  01A8F6  ECA0  F0CB         	call	___ftpack	;wreg free
 22423  01A8FA  C01D  F060         	movff	?___ftpack,?___lbtoft
 22424  01A8FE  C01E  F061         	movff	?___ftpack+1,?___lbtoft+1
 22425  01A902  C01F  F062         	movff	?___ftpack+2,?___lbtoft+2
 22426  01A906  0012               	return	
 22427  01A908                     __end_of___lbtoft:
 22428                           	opt stack 0
 22429                           tblptru	equ	0xFF8
 22430                           tblptrh	equ	0xFF7
 22431                           tblptrl	equ	0xFF6
 22432                           tablat	equ	0xFF5
 22433                           prodh	equ	0xFF4
 22434                           prodl	equ	0xFF3
 22435                           intcon	equ	0xFF2
 22436                           postinc0	equ	0xFEE
 22437                           wreg	equ	0xFE8
 22438                           postdec1	equ	0xFE5
 22439                           fsr1h	equ	0xFE2
 22440                           fsr1l	equ	0xFE1
 22441                           indf2	equ	0xFDF
 22442                           postinc2	equ	0xFDE
 22443                           postdec2	equ	0xFDD
 22444                           fsr2h	equ	0xFDA
 22445                           fsr2l	equ	0xFD9
 22446                           status	equ	0xFD8
 22447                           
 22448 ;; *************** function _Grid_UV *****************
 22449 ;; Defined at:
 22450 ;;		line 221 in file "ERROR_HANDLING.c"
 22451 ;; Parameters:    Size  Location     Type
 22452 ;;		None
 22453 ;; Auto vars:     Size  Location     Type
 22454 ;;		None
 22455 ;; Return value:  Size  Location     Type
 22456 ;;                  1    wreg      void 
 22457 ;; Registers used:
 22458 ;;		wreg, status,2, status,0, cstack
 22459 ;; Tracked objects:
 22460 ;;		On entry : 0/0
 22461 ;;		On exit  : 0/0
 22462 ;;		Unchanged: 0/0
 22463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22468 ;;Total ram usage:        0 bytes
 22469 ;; Hardware stack levels used:    1
 22470 ;; Hardware stack levels required when called:    4
 22471 ;; This function calls:
 22472 ;;		___ftge
 22473 ;; This function is called by:
 22474 ;;		_Error_Checking_One_Second
 22475 ;; This function uses a non-reentrant model
 22476 ;;
 22477                           
 22478                           	psect	text67
 22479  0176D0                     __ptext67:
 22480                           	opt stack 0
 22481  0176D0                     _Grid_UV:
 22482                           	opt stack 24
 22483                           
 22484                           ;ERROR_HANDLING.c: 223: if(Turbine_state == STARTUP_STATE)
 22485                           
 22486                           ;incstack = 0
 22487  0176D0  0100               	movlb	0	; () banked
 22488  0176D2  51D8               	movf	_Turbine_state& (0+255),w,b
 22489  0176D4  A4D8               	btfss	status,2,c
 22490  0176D6  D055               	goto	l20665
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;ERROR_HANDLING.c: 224: {
 22494                           ;ERROR_HANDLING.c: 225: if(R_Volt <= (370) || Y_Volt <= (370) || B_Volt <= (370))
 22495  0176D8  0E00               	movlw	0
 22496  0176DA  0100               	movlb	0	; () banked
 22497  0176DC  6F8F               	movwf	___ftge@ff1& (0+255),b
 22498  0176DE  0EB9               	movlw	185
 22499  0176E0  0100               	movlb	0	; () banked
 22500  0176E2  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 22501  0176E4  0E43               	movlw	67
 22502  0176E6  0100               	movlb	0	; () banked
 22503  0176E8  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 22504  0176EA  C02A  F092         	movff	_R_Volt,___ftge@ff2
 22505  0176EE  C02B  F093         	movff	_R_Volt+1,___ftge@ff2+1
 22506  0176F2  C02C  F094         	movff	_R_Volt+2,___ftge@ff2+2
 22507  0176F6  EC09  F0C8         	call	___ftge	;wreg free
 22508  0176FA  0100               	movlb	0	; () banked
 22509  0176FC  B0D8               	btfsc	status,0,c
 22510  0176FE  D028               	goto	l20655
 22511                           
 22512                           ; BSR set to: 0
 22513  017700  0E00               	movlw	0
 22514  017702  0100               	movlb	0	; () banked
 22515  017704  6F8F               	movwf	___ftge@ff1& (0+255),b
 22516  017706  0EB9               	movlw	185
 22517  017708  0100               	movlb	0	; () banked
 22518  01770A  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 22519  01770C  0E43               	movlw	67
 22520  01770E  0100               	movlb	0	; () banked
 22521  017710  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 22522  017712  C030  F092         	movff	_Y_Volt,___ftge@ff2
 22523  017716  C031  F093         	movff	_Y_Volt+1,___ftge@ff2+1
 22524  01771A  C032  F094         	movff	_Y_Volt+2,___ftge@ff2+2
 22525  01771E  EC09  F0C8         	call	___ftge	;wreg free
 22526  017722  0100               	movlb	0	; () banked
 22527  017724  B0D8               	btfsc	status,0,c
 22528  017726  D014               	goto	l20655
 22529                           
 22530                           ; BSR set to: 0
 22531  017728  0E00               	movlw	0
 22532  01772A  0100               	movlb	0	; () banked
 22533  01772C  6F8F               	movwf	___ftge@ff1& (0+255),b
 22534  01772E  0EB9               	movlw	185
 22535  017730  0100               	movlb	0	; () banked
 22536  017732  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 22537  017734  0E43               	movlw	67
 22538  017736  0100               	movlb	0	; () banked
 22539  017738  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 22540  01773A  C027  F092         	movff	_B_Volt,___ftge@ff2
 22541  01773E  C028  F093         	movff	_B_Volt+1,___ftge@ff2+1
 22542  017742  C029  F094         	movff	_B_Volt+2,___ftge@ff2+2
 22543  017746  EC09  F0C8         	call	___ftge	;wreg free
 22544  01774A  0100               	movlb	0	; () banked
 22545  01774C  A0D8               	btfss	status,0,c
 22546  01774E  D013               	goto	l20663
 22547  017750                     l20655:
 22548                           
 22549                           ; BSR set to: 0
 22550                           ;ERROR_HANDLING.c: 226: {
 22551                           ;ERROR_HANDLING.c: 227: Grid_UV_Counter++;
 22552  017750  0101               	movlb	1	; () banked
 22553  017752  2B9E               	incf	_Grid_UV_Counter& (0+255),f,b
 22554                           
 22555                           ; BSR set to: 1
 22556                           ;ERROR_HANDLING.c: 228: if(Grid_UV_Counter >= 2)
 22557  017754  0E01               	movlw	1
 22558  017756  0101               	movlb	1	; () banked
 22559  017758  659E               	cpfsgt	_Grid_UV_Counter& (0+255),b
 22560  01775A  D009               	goto	l20661
 22561                           
 22562                           ; BSR set to: 1
 22563                           ;ERROR_HANDLING.c: 229: {
 22564                           ;ERROR_HANDLING.c: 230: Grid_UV_Counter = 0;
 22565  01775C  0E00               	movlw	0
 22566  01775E  0101               	movlb	1	; () banked
 22567  017760  6F9E               	movwf	_Grid_UV_Counter& (0+255),b
 22568                           
 22569                           ;ERROR_HANDLING.c: 231: Grid_Und_voltage = 1;
 22570  017762  0E01               	movlw	1
 22571  017764  0101               	movlb	1	; () banked
 22572  017766  6F9F               	movwf	_Grid_Und_voltage& (0+255),b
 22573                           
 22574                           ;ERROR_HANDLING.c: 232: Errors = VOLT_LOW;
 22575  017768  0E02               	movlw	2
 22576  01776A  6E3A               	movwf	_Errors,c
 22577                           
 22578                           ;ERROR_HANDLING.c: 233: }
 22579  01776C  D00A               	goto	l20665
 22580  01776E                     l20661:
 22581                           
 22582                           ; BSR set to: 1
 22583                           ;ERROR_HANDLING.c: 234: else
 22584                           ;ERROR_HANDLING.c: 235: {
 22585                           ;ERROR_HANDLING.c: 236: Grid_Und_voltage = 0;
 22586  01776E  0E00               	movlw	0
 22587  017770  0101               	movlb	1	; () banked
 22588  017772  6F9F               	movwf	_Grid_Und_voltage& (0+255),b
 22589                           
 22590                           ; BSR set to: 1
 22591                           ;ERROR_HANDLING.c: 237: }
 22592                           ;ERROR_HANDLING.c: 238: }
 22593  017774  D006               	goto	l20665
 22594  017776                     l20663:
 22595                           
 22596                           ;ERROR_HANDLING.c: 239: else
 22597                           ;ERROR_HANDLING.c: 240: {
 22598                           ;ERROR_HANDLING.c: 241: Grid_Und_voltage = 0;
 22599  017776  0E00               	movlw	0
 22600  017778  0101               	movlb	1	; () banked
 22601  01777A  6F9F               	movwf	_Grid_Und_voltage& (0+255),b
 22602                           
 22603                           ;ERROR_HANDLING.c: 242: Grid_UV_Counter = 0;
 22604  01777C  0E00               	movlw	0
 22605  01777E  0101               	movlb	1	; () banked
 22606  017780  6F9E               	movwf	_Grid_UV_Counter& (0+255),b
 22607  017782                     l20665:
 22608                           
 22609                           ;ERROR_HANDLING.c: 243: }
 22610                           ;ERROR_HANDLING.c: 244: }
 22611                           ;ERROR_HANDLING.c: 245: if(Turbine_state == RUNNING_STATE)
 22612  017782  0E02               	movlw	2
 22613  017784  0100               	movlb	0	; () banked
 22614  017786  19D8               	xorwf	_Turbine_state& (0+255),w,b
 22615  017788  A4D8               	btfss	status,2,c
 22616  01778A  0012               	return	
 22617                           
 22618                           ; BSR set to: 0
 22619                           ;ERROR_HANDLING.c: 246: {
 22620                           ;ERROR_HANDLING.c: 247: if(R_Volt <= (370) || Y_Volt <= (370) || B_Volt <= (370))
 22621  01778C  0E00               	movlw	0
 22622  01778E  0100               	movlb	0	; () banked
 22623  017790  6F8F               	movwf	___ftge@ff1& (0+255),b
 22624  017792  0EB9               	movlw	185
 22625  017794  0100               	movlb	0	; () banked
 22626  017796  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 22627  017798  0E43               	movlw	67
 22628  01779A  0100               	movlb	0	; () banked
 22629  01779C  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 22630  01779E  C02A  F092         	movff	_R_Volt,___ftge@ff2
 22631  0177A2  C02B  F093         	movff	_R_Volt+1,___ftge@ff2+1
 22632  0177A6  C02C  F094         	movff	_R_Volt+2,___ftge@ff2+2
 22633  0177AA  EC09  F0C8         	call	___ftge	;wreg free
 22634  0177AE  0100               	movlb	0	; () banked
 22635  0177B0  B0D8               	btfsc	status,0,c
 22636  0177B2  D028               	goto	l20673
 22637                           
 22638                           ; BSR set to: 0
 22639  0177B4  0E00               	movlw	0
 22640  0177B6  0100               	movlb	0	; () banked
 22641  0177B8  6F8F               	movwf	___ftge@ff1& (0+255),b
 22642  0177BA  0EB9               	movlw	185
 22643  0177BC  0100               	movlb	0	; () banked
 22644  0177BE  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 22645  0177C0  0E43               	movlw	67
 22646  0177C2  0100               	movlb	0	; () banked
 22647  0177C4  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 22648  0177C6  C030  F092         	movff	_Y_Volt,___ftge@ff2
 22649  0177CA  C031  F093         	movff	_Y_Volt+1,___ftge@ff2+1
 22650  0177CE  C032  F094         	movff	_Y_Volt+2,___ftge@ff2+2
 22651  0177D2  EC09  F0C8         	call	___ftge	;wreg free
 22652  0177D6  0100               	movlb	0	; () banked
 22653  0177D8  B0D8               	btfsc	status,0,c
 22654  0177DA  D014               	goto	l20673
 22655                           
 22656                           ; BSR set to: 0
 22657  0177DC  0E00               	movlw	0
 22658  0177DE  0100               	movlb	0	; () banked
 22659  0177E0  6F8F               	movwf	___ftge@ff1& (0+255),b
 22660  0177E2  0EB9               	movlw	185
 22661  0177E4  0100               	movlb	0	; () banked
 22662  0177E6  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 22663  0177E8  0E43               	movlw	67
 22664  0177EA  0100               	movlb	0	; () banked
 22665  0177EC  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 22666  0177EE  C027  F092         	movff	_B_Volt,___ftge@ff2
 22667  0177F2  C028  F093         	movff	_B_Volt+1,___ftge@ff2+1
 22668  0177F6  C029  F094         	movff	_B_Volt+2,___ftge@ff2+2
 22669  0177FA  EC09  F0C8         	call	___ftge	;wreg free
 22670  0177FE  0100               	movlb	0	; () banked
 22671  017800  A0D8               	btfss	status,0,c
 22672  017802  D013               	goto	l20681
 22673  017804                     l20673:
 22674                           
 22675                           ; BSR set to: 0
 22676                           ;ERROR_HANDLING.c: 248: {
 22677                           ;ERROR_HANDLING.c: 249: Grid_UV_Counter++;
 22678  017804  0101               	movlb	1	; () banked
 22679  017806  2B9E               	incf	_Grid_UV_Counter& (0+255),f,b
 22680                           
 22681                           ; BSR set to: 1
 22682                           ;ERROR_HANDLING.c: 250: if(Grid_UV_Counter >= 10)
 22683  017808  0E09               	movlw	9
 22684  01780A  0101               	movlb	1	; () banked
 22685  01780C  659E               	cpfsgt	_Grid_UV_Counter& (0+255),b
 22686  01780E  D009               	goto	l20679
 22687                           
 22688                           ; BSR set to: 1
 22689                           ;ERROR_HANDLING.c: 251: {
 22690                           ;ERROR_HANDLING.c: 252: Grid_UV_Counter = 0;
 22691  017810  0E00               	movlw	0
 22692  017812  0101               	movlb	1	; () banked
 22693  017814  6F9E               	movwf	_Grid_UV_Counter& (0+255),b
 22694                           
 22695                           ;ERROR_HANDLING.c: 253: Grid_Und_voltage = 1;
 22696  017816  0E01               	movlw	1
 22697  017818  0101               	movlb	1	; () banked
 22698  01781A  6F9F               	movwf	_Grid_Und_voltage& (0+255),b
 22699                           
 22700                           ;ERROR_HANDLING.c: 254: Errors = VOLT_LOW;
 22701  01781C  0E02               	movlw	2
 22702  01781E  6E3A               	movwf	_Errors,c
 22703                           
 22704                           ;ERROR_HANDLING.c: 255: }
 22705  017820  0012               	return	
 22706  017822                     l20679:
 22707                           
 22708                           ; BSR set to: 1
 22709                           ;ERROR_HANDLING.c: 256: else
 22710                           ;ERROR_HANDLING.c: 257: {
 22711                           ;ERROR_HANDLING.c: 258: Grid_Und_voltage = 0;
 22712  017822  0E00               	movlw	0
 22713  017824  0101               	movlb	1	; () banked
 22714  017826  6F9F               	movwf	_Grid_Und_voltage& (0+255),b
 22715                           
 22716                           ; BSR set to: 1
 22717                           ;ERROR_HANDLING.c: 259: }
 22718                           ;ERROR_HANDLING.c: 260: }
 22719  017828  0012               	return	
 22720  01782A                     l20681:
 22721                           
 22722                           ;ERROR_HANDLING.c: 261: else
 22723                           ;ERROR_HANDLING.c: 262: {
 22724                           ;ERROR_HANDLING.c: 263: Grid_Und_voltage = 0;
 22725  01782A  0E00               	movlw	0
 22726  01782C  0101               	movlb	1	; () banked
 22727  01782E  6F9F               	movwf	_Grid_Und_voltage& (0+255),b
 22728                           
 22729                           ;ERROR_HANDLING.c: 264: Grid_UV_Counter = 0;
 22730  017830  0E00               	movlw	0
 22731  017832  0101               	movlb	1	; () banked
 22732  017834  6F9E               	movwf	_Grid_UV_Counter& (0+255),b
 22733                           
 22734                           ; BSR set to: 1
 22735  017836  0012               	return	
 22736  017838                     __end_of_Grid_UV:
 22737                           	opt stack 0
 22738                           tblptru	equ	0xFF8
 22739                           tblptrh	equ	0xFF7
 22740                           tblptrl	equ	0xFF6
 22741                           tablat	equ	0xFF5
 22742                           prodh	equ	0xFF4
 22743                           prodl	equ	0xFF3
 22744                           intcon	equ	0xFF2
 22745                           postinc0	equ	0xFEE
 22746                           wreg	equ	0xFE8
 22747                           postdec1	equ	0xFE5
 22748                           fsr1h	equ	0xFE2
 22749                           fsr1l	equ	0xFE1
 22750                           indf2	equ	0xFDF
 22751                           postinc2	equ	0xFDE
 22752                           postdec2	equ	0xFDD
 22753                           fsr2h	equ	0xFDA
 22754                           fsr2l	equ	0xFD9
 22755                           status	equ	0xFD8
 22756                           
 22757 ;; *************** function _Grid_Phase_Sequence *****************
 22758 ;; Defined at:
 22759 ;;		line 503 in file "ERROR_HANDLING.c"
 22760 ;; Parameters:    Size  Location     Type
 22761 ;;		None
 22762 ;; Auto vars:     Size  Location     Type
 22763 ;;		None
 22764 ;; Return value:  Size  Location     Type
 22765 ;;                  1    wreg      void 
 22766 ;; Registers used:
 22767 ;;		wreg, status,2, status,0
 22768 ;; Tracked objects:
 22769 ;;		On entry : 0/0
 22770 ;;		On exit  : 0/0
 22771 ;;		Unchanged: 0/0
 22772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22777 ;;Total ram usage:        0 bytes
 22778 ;; Hardware stack levels used:    1
 22779 ;; Hardware stack levels required when called:    3
 22780 ;; This function calls:
 22781 ;;		Nothing
 22782 ;; This function is called by:
 22783 ;;		_Error_Checking_One_Second
 22784 ;; This function uses a non-reentrant model
 22785 ;;
 22786                           
 22787                           	psect	text68
 22788  01A94C                     __ptext68:
 22789                           	opt stack 0
 22790  01A94C                     _Grid_Phase_Sequence:
 22791                           	opt stack 25
 22792                           
 22793                           ;ERROR_HANDLING.c: 505: if(Phase_Sequence_Ok == 1)
 22794                           
 22795                           ;incstack = 0
 22796  01A94C  043C               	decf	_Phase_Sequence_Ok,w,c
 22797  01A94E  A4D8               	btfss	status,2,c
 22798  01A950  D004               	goto	l17111
 22799                           
 22800                           ;ERROR_HANDLING.c: 506: {
 22801                           ;ERROR_HANDLING.c: 507: Grid_Phase_Sequence_Error = 0;
 22802  01A952  0E00               	movlw	0
 22803  01A954  0101               	movlb	1	; () banked
 22804  01A956  6F9D               	movwf	_Grid_Phase_Sequence_Error& (0+255),b
 22805                           
 22806                           ;ERROR_HANDLING.c: 508: }
 22807  01A958  0012               	return	
 22808  01A95A                     l17111:
 22809                           
 22810                           ;ERROR_HANDLING.c: 509: else if(Phase_Sequence_Ok == 0)
 22811  01A95A  503C               	movf	_Phase_Sequence_Ok,w,c
 22812  01A95C  A4D8               	btfss	status,2,c
 22813  01A95E  0012               	return	
 22814                           
 22815                           ;ERROR_HANDLING.c: 510: {
 22816                           ;ERROR_HANDLING.c: 511: Grid_Phase_Sequence_Error = 1;
 22817  01A960  0E01               	movlw	1
 22818  01A962  0101               	movlb	1	; () banked
 22819  01A964  6F9D               	movwf	_Grid_Phase_Sequence_Error& (0+255),b
 22820                           
 22821                           ;ERROR_HANDLING.c: 512: Errors = PHASE_SEQ;
 22822  01A966  0E0D               	movlw	13
 22823  01A968  6E3A               	movwf	_Errors,c
 22824                           
 22825                           ; BSR set to: 1
 22826  01A96A  0012               	return	
 22827  01A96C                     __end_of_Grid_Phase_Sequence:
 22828                           	opt stack 0
 22829                           tblptru	equ	0xFF8
 22830                           tblptrh	equ	0xFF7
 22831                           tblptrl	equ	0xFF6
 22832                           tablat	equ	0xFF5
 22833                           prodh	equ	0xFF4
 22834                           prodl	equ	0xFF3
 22835                           intcon	equ	0xFF2
 22836                           postinc0	equ	0xFEE
 22837                           wreg	equ	0xFE8
 22838                           postdec1	equ	0xFE5
 22839                           fsr1h	equ	0xFE2
 22840                           fsr1l	equ	0xFE1
 22841                           indf2	equ	0xFDF
 22842                           postinc2	equ	0xFDE
 22843                           postdec2	equ	0xFDD
 22844                           fsr2h	equ	0xFDA
 22845                           fsr2l	equ	0xFD9
 22846                           status	equ	0xFD8
 22847                           
 22848 ;; *************** function _Grid_Over_Current *****************
 22849 ;; Defined at:
 22850 ;;		line 382 in file "ERROR_HANDLING.c"
 22851 ;; Parameters:    Size  Location     Type
 22852 ;;		None
 22853 ;; Auto vars:     Size  Location     Type
 22854 ;;		None
 22855 ;; Return value:  Size  Location     Type
 22856 ;;                  1    wreg      void 
 22857 ;; Registers used:
 22858 ;;		wreg, status,2, status,0, cstack
 22859 ;; Tracked objects:
 22860 ;;		On entry : 0/0
 22861 ;;		On exit  : 0/0
 22862 ;;		Unchanged: 0/0
 22863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22868 ;;Total ram usage:        0 bytes
 22869 ;; Hardware stack levels used:    1
 22870 ;; Hardware stack levels required when called:    4
 22871 ;; This function calls:
 22872 ;;		___ftge
 22873 ;; This function is called by:
 22874 ;;		_Error_Checking_One_Second
 22875 ;; This function uses a non-reentrant model
 22876 ;;
 22877                           
 22878                           	psect	text69
 22879  01805E                     __ptext69:
 22880                           	opt stack 0
 22881  01805E                     _Grid_Over_Current:
 22882                           	opt stack 24
 22883                           
 22884                           ;ERROR_HANDLING.c: 384: if( (Turbine_state == RAMPUP_STATE) || (Turbine_state == RUNNING
      +                          _STATE) )
 22885                           
 22886                           ;incstack = 0
 22887  01805E  0100               	movlb	0	; () banked
 22888  018060  05D8               	decf	_Turbine_state& (0+255),w,b
 22889  018062  B4D8               	btfsc	status,2,c
 22890  018064  D005               	goto	l20749
 22891                           
 22892                           ; BSR set to: 0
 22893  018066  0E02               	movlw	2
 22894  018068  0100               	movlb	0	; () banked
 22895  01806A  19D8               	xorwf	_Turbine_state& (0+255),w,b
 22896  01806C  A4D8               	btfss	status,2,c
 22897  01806E  D051               	goto	l6257
 22898  018070                     l20749:
 22899                           
 22900                           ; BSR set to: 0
 22901                           ;ERROR_HANDLING.c: 385: {
 22902                           ;ERROR_HANDLING.c: 386: if(R_Curr >= (12) || Y_Curr >= (12) || B_Curr >= (12))
 22903  018070  C118  F08F         	movff	_R_Curr,___ftge@ff1
 22904  018074  C119  F090         	movff	_R_Curr+1,___ftge@ff1+1
 22905  018078  C11A  F091         	movff	_R_Curr+2,___ftge@ff1+2
 22906  01807C  0E00               	movlw	0
 22907  01807E  0100               	movlb	0	; () banked
 22908  018080  6F92               	movwf	___ftge@ff2& (0+255),b
 22909  018082  0E40               	movlw	64
 22910  018084  0100               	movlb	0	; () banked
 22911  018086  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 22912  018088  0E41               	movlw	65
 22913  01808A  0100               	movlb	0	; () banked
 22914  01808C  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 22915  01808E  EC09  F0C8         	call	___ftge	;wreg free
 22916  018092  0100               	movlb	0	; () banked
 22917  018094  B0D8               	btfsc	status,0,c
 22918  018096  D028               	goto	l20755
 22919                           
 22920                           ; BSR set to: 0
 22921  018098  C12D  F08F         	movff	_Y_Curr,___ftge@ff1
 22922  01809C  C12E  F090         	movff	_Y_Curr+1,___ftge@ff1+1
 22923  0180A0  C12F  F091         	movff	_Y_Curr+2,___ftge@ff1+2
 22924  0180A4  0E00               	movlw	0
 22925  0180A6  0100               	movlb	0	; () banked
 22926  0180A8  6F92               	movwf	___ftge@ff2& (0+255),b
 22927  0180AA  0E40               	movlw	64
 22928  0180AC  0100               	movlb	0	; () banked
 22929  0180AE  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 22930  0180B0  0E41               	movlw	65
 22931  0180B2  0100               	movlb	0	; () banked
 22932  0180B4  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 22933  0180B6  EC09  F0C8         	call	___ftge	;wreg free
 22934  0180BA  0100               	movlb	0	; () banked
 22935  0180BC  B0D8               	btfsc	status,0,c
 22936  0180BE  D014               	goto	l20755
 22937                           
 22938                           ; BSR set to: 0
 22939  0180C0  C103  F08F         	movff	_B_Curr,___ftge@ff1
 22940  0180C4  C104  F090         	movff	_B_Curr+1,___ftge@ff1+1
 22941  0180C8  C105  F091         	movff	_B_Curr+2,___ftge@ff1+2
 22942  0180CC  0E00               	movlw	0
 22943  0180CE  0100               	movlb	0	; () banked
 22944  0180D0  6F92               	movwf	___ftge@ff2& (0+255),b
 22945  0180D2  0E40               	movlw	64
 22946  0180D4  0100               	movlb	0	; () banked
 22947  0180D6  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 22948  0180D8  0E41               	movlw	65
 22949  0180DA  0100               	movlb	0	; () banked
 22950  0180DC  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 22951  0180DE  EC09  F0C8         	call	___ftge	;wreg free
 22952  0180E2  0100               	movlb	0	; () banked
 22953  0180E4  A0D8               	btfss	status,0,c
 22954  0180E6  D00F               	goto	l20761
 22955  0180E8                     l20755:
 22956                           
 22957                           ; BSR set to: 0
 22958                           ;ERROR_HANDLING.c: 387: {
 22959                           ;ERROR_HANDLING.c: 388: OV_Counter++;
 22960  0180E8  0101               	movlb	1	; () banked
 22961  0180EA  2BAA               	incf	_OV_Counter& (0+255),f,b
 22962                           
 22963                           ; BSR set to: 1
 22964                           ;ERROR_HANDLING.c: 389: if(OV_Counter == 1)
 22965  0180EC  0101               	movlb	1	; () banked
 22966  0180EE  05AA               	decf	_OV_Counter& (0+255),w,b
 22967  0180F0  A4D8               	btfss	status,2,c
 22968  0180F2  D00F               	goto	l6257
 22969                           
 22970                           ; BSR set to: 1
 22971                           ;ERROR_HANDLING.c: 390: {
 22972                           ;ERROR_HANDLING.c: 391: OV_Counter = 0;
 22973  0180F4  0E00               	movlw	0
 22974  0180F6  0101               	movlb	1	; () banked
 22975  0180F8  6FAA               	movwf	_OV_Counter& (0+255),b
 22976                           
 22977                           ;ERROR_HANDLING.c: 392: Grid_Over_current = 1;
 22978  0180FA  0E01               	movlw	1
 22979  0180FC  0100               	movlb	0	; () banked
 22980  0180FE  6FD6               	movwf	_Grid_Over_current& (0+255),b
 22981                           
 22982                           ;ERROR_HANDLING.c: 393: Errors = CURRENT_H;
 22983  018100  0E09               	movlw	9
 22984  018102  6E3A               	movwf	_Errors,c
 22985                           
 22986                           ; BSR set to: 0
 22987                           ;ERROR_HANDLING.c: 394: }
 22988                           ;ERROR_HANDLING.c: 396: }
 22989  018104  D006               	goto	l6257
 22990  018106                     l20761:
 22991                           
 22992                           ; BSR set to: 0
 22993                           ;ERROR_HANDLING.c: 397: else
 22994                           ;ERROR_HANDLING.c: 398: {
 22995                           ;ERROR_HANDLING.c: 399: Grid_Over_current = 0;
 22996  018106  0E00               	movlw	0
 22997  018108  0100               	movlb	0	; () banked
 22998  01810A  6FD6               	movwf	_Grid_Over_current& (0+255),b
 22999                           
 23000                           ;ERROR_HANDLING.c: 400: OV_Counter = 0;
 23001  01810C  0E00               	movlw	0
 23002  01810E  0101               	movlb	1	; () banked
 23003  018110  6FAA               	movwf	_OV_Counter& (0+255),b
 23004  018112                     l6257:
 23005                           
 23006                           ;ERROR_HANDLING.c: 401: }
 23007                           ;ERROR_HANDLING.c: 402: }
 23008                           ;ERROR_HANDLING.c: 403: if(Turbine_state == STARTUP_STATE)
 23009  018112  0100               	movlb	0	; () banked
 23010  018114  51D8               	movf	_Turbine_state& (0+255),w,b
 23011  018116  A4D8               	btfss	status,2,c
 23012  018118  0012               	return	
 23013                           
 23014                           ; BSR set to: 0
 23015                           ;ERROR_HANDLING.c: 404: {
 23016                           ;ERROR_HANDLING.c: 405: if(R_Curr >= (0.7) || Y_Curr >= (0.7) || B_Curr >= (0.7))
 23017  01811A  C118  F08F         	movff	_R_Curr,___ftge@ff1
 23018  01811E  C119  F090         	movff	_R_Curr+1,___ftge@ff1+1
 23019  018122  C11A  F091         	movff	_R_Curr+2,___ftge@ff1+2
 23020  018126  0E33               	movlw	51
 23021  018128  0100               	movlb	0	; () banked
 23022  01812A  6F92               	movwf	___ftge@ff2& (0+255),b
 23023  01812C  0E33               	movlw	51
 23024  01812E  0100               	movlb	0	; () banked
 23025  018130  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23026  018132  0E3F               	movlw	63
 23027  018134  0100               	movlb	0	; () banked
 23028  018136  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23029  018138  EC09  F0C8         	call	___ftge	;wreg free
 23030  01813C  0100               	movlb	0	; () banked
 23031  01813E  B0D8               	btfsc	status,0,c
 23032  018140  D028               	goto	l20769
 23033                           
 23034                           ; BSR set to: 0
 23035  018142  C12D  F08F         	movff	_Y_Curr,___ftge@ff1
 23036  018146  C12E  F090         	movff	_Y_Curr+1,___ftge@ff1+1
 23037  01814A  C12F  F091         	movff	_Y_Curr+2,___ftge@ff1+2
 23038  01814E  0E33               	movlw	51
 23039  018150  0100               	movlb	0	; () banked
 23040  018152  6F92               	movwf	___ftge@ff2& (0+255),b
 23041  018154  0E33               	movlw	51
 23042  018156  0100               	movlb	0	; () banked
 23043  018158  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23044  01815A  0E3F               	movlw	63
 23045  01815C  0100               	movlb	0	; () banked
 23046  01815E  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23047  018160  EC09  F0C8         	call	___ftge	;wreg free
 23048  018164  0100               	movlb	0	; () banked
 23049  018166  B0D8               	btfsc	status,0,c
 23050  018168  D014               	goto	l20769
 23051                           
 23052                           ; BSR set to: 0
 23053  01816A  C103  F08F         	movff	_B_Curr,___ftge@ff1
 23054  01816E  C104  F090         	movff	_B_Curr+1,___ftge@ff1+1
 23055  018172  C105  F091         	movff	_B_Curr+2,___ftge@ff1+2
 23056  018176  0E33               	movlw	51
 23057  018178  0100               	movlb	0	; () banked
 23058  01817A  6F92               	movwf	___ftge@ff2& (0+255),b
 23059  01817C  0E33               	movlw	51
 23060  01817E  0100               	movlb	0	; () banked
 23061  018180  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23062  018182  0E3F               	movlw	63
 23063  018184  0100               	movlb	0	; () banked
 23064  018186  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23065  018188  EC09  F0C8         	call	___ftge	;wreg free
 23066  01818C  0100               	movlb	0	; () banked
 23067  01818E  A0D8               	btfss	status,0,c
 23068  018190  D006               	goto	l20771
 23069  018192                     l20769:
 23070                           
 23071                           ; BSR set to: 0
 23072                           ;ERROR_HANDLING.c: 406: {
 23073                           ;ERROR_HANDLING.c: 407: Grid_Over_current = 1;
 23074  018192  0E01               	movlw	1
 23075  018194  0100               	movlb	0	; () banked
 23076  018196  6FD6               	movwf	_Grid_Over_current& (0+255),b
 23077                           
 23078                           ;ERROR_HANDLING.c: 408: Errors = MEAURE_ERR;
 23079  018198  0E16               	movlw	22
 23080  01819A  6E3A               	movwf	_Errors,c
 23081                           
 23082                           ;ERROR_HANDLING.c: 409: }
 23083  01819C  0012               	return	
 23084  01819E                     l20771:
 23085                           
 23086                           ; BSR set to: 0
 23087                           ;ERROR_HANDLING.c: 410: else
 23088                           ;ERROR_HANDLING.c: 411: {
 23089                           ;ERROR_HANDLING.c: 412: Grid_Over_current = 0;
 23090  01819E  0E00               	movlw	0
 23091  0181A0  0100               	movlb	0	; () banked
 23092  0181A2  6FD6               	movwf	_Grid_Over_current& (0+255),b
 23093                           
 23094                           ; BSR set to: 0
 23095  0181A4  0012               	return	
 23096  0181A6                     __end_of_Grid_Over_Current:
 23097                           	opt stack 0
 23098                           tblptru	equ	0xFF8
 23099                           tblptrh	equ	0xFF7
 23100                           tblptrl	equ	0xFF6
 23101                           tablat	equ	0xFF5
 23102                           prodh	equ	0xFF4
 23103                           prodl	equ	0xFF3
 23104                           intcon	equ	0xFF2
 23105                           postinc0	equ	0xFEE
 23106                           wreg	equ	0xFE8
 23107                           postdec1	equ	0xFE5
 23108                           fsr1h	equ	0xFE2
 23109                           fsr1l	equ	0xFE1
 23110                           indf2	equ	0xFDF
 23111                           postinc2	equ	0xFDE
 23112                           postdec2	equ	0xFDD
 23113                           fsr2h	equ	0xFDA
 23114                           fsr2l	equ	0xFD9
 23115                           status	equ	0xFD8
 23116                           
 23117 ;; *************** function _Grid_OV *****************
 23118 ;; Defined at:
 23119 ;;		line 269 in file "ERROR_HANDLING.c"
 23120 ;; Parameters:    Size  Location     Type
 23121 ;;		None
 23122 ;; Auto vars:     Size  Location     Type
 23123 ;;		None
 23124 ;; Return value:  Size  Location     Type
 23125 ;;                  1    wreg      void 
 23126 ;; Registers used:
 23127 ;;		wreg, status,2, status,0, cstack
 23128 ;; Tracked objects:
 23129 ;;		On entry : 0/0
 23130 ;;		On exit  : 0/0
 23131 ;;		Unchanged: 0/0
 23132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23137 ;;Total ram usage:        0 bytes
 23138 ;; Hardware stack levels used:    1
 23139 ;; Hardware stack levels required when called:    4
 23140 ;; This function calls:
 23141 ;;		___ftge
 23142 ;; This function is called by:
 23143 ;;		_Error_Checking_One_Second
 23144 ;; This function uses a non-reentrant model
 23145 ;;
 23146                           
 23147                           	psect	text70
 23148  017838                     __ptext70:
 23149                           	opt stack 0
 23150  017838                     _Grid_OV:
 23151                           	opt stack 24
 23152                           
 23153                           ;ERROR_HANDLING.c: 271: if(Turbine_state == STARTUP_STATE)
 23154                           
 23155                           ; BSR set to: 0
 23156                           ;incstack = 0
 23157  017838  0100               	movlb	0	; () banked
 23158  01783A  51D8               	movf	_Turbine_state& (0+255),w,b
 23159  01783C  A4D8               	btfss	status,2,c
 23160  01783E  D055               	goto	l20701
 23161                           
 23162                           ; BSR set to: 0
 23163                           ;ERROR_HANDLING.c: 272: {
 23164                           ;ERROR_HANDLING.c: 273: if(R_Volt >= (450) || Y_Volt >= (450) || B_Volt >= (450))
 23165  017840  C02A  F08F         	movff	_R_Volt,___ftge@ff1
 23166  017844  C02B  F090         	movff	_R_Volt+1,___ftge@ff1+1
 23167  017848  C02C  F091         	movff	_R_Volt+2,___ftge@ff1+2
 23168  01784C  0E00               	movlw	0
 23169  01784E  0100               	movlb	0	; () banked
 23170  017850  6F92               	movwf	___ftge@ff2& (0+255),b
 23171  017852  0EE1               	movlw	225
 23172  017854  0100               	movlb	0	; () banked
 23173  017856  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23174  017858  0E43               	movlw	67
 23175  01785A  0100               	movlb	0	; () banked
 23176  01785C  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23177  01785E  EC09  F0C8         	call	___ftge	;wreg free
 23178  017862  0100               	movlb	0	; () banked
 23179  017864  B0D8               	btfsc	status,0,c
 23180  017866  D028               	goto	l20691
 23181                           
 23182                           ; BSR set to: 0
 23183  017868  C030  F08F         	movff	_Y_Volt,___ftge@ff1
 23184  01786C  C031  F090         	movff	_Y_Volt+1,___ftge@ff1+1
 23185  017870  C032  F091         	movff	_Y_Volt+2,___ftge@ff1+2
 23186  017874  0E00               	movlw	0
 23187  017876  0100               	movlb	0	; () banked
 23188  017878  6F92               	movwf	___ftge@ff2& (0+255),b
 23189  01787A  0EE1               	movlw	225
 23190  01787C  0100               	movlb	0	; () banked
 23191  01787E  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23192  017880  0E43               	movlw	67
 23193  017882  0100               	movlb	0	; () banked
 23194  017884  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23195  017886  EC09  F0C8         	call	___ftge	;wreg free
 23196  01788A  0100               	movlb	0	; () banked
 23197  01788C  B0D8               	btfsc	status,0,c
 23198  01788E  D014               	goto	l20691
 23199                           
 23200                           ; BSR set to: 0
 23201  017890  C027  F08F         	movff	_B_Volt,___ftge@ff1
 23202  017894  C028  F090         	movff	_B_Volt+1,___ftge@ff1+1
 23203  017898  C029  F091         	movff	_B_Volt+2,___ftge@ff1+2
 23204  01789C  0E00               	movlw	0
 23205  01789E  0100               	movlb	0	; () banked
 23206  0178A0  6F92               	movwf	___ftge@ff2& (0+255),b
 23207  0178A2  0EE1               	movlw	225
 23208  0178A4  0100               	movlb	0	; () banked
 23209  0178A6  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23210  0178A8  0E43               	movlw	67
 23211  0178AA  0100               	movlb	0	; () banked
 23212  0178AC  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23213  0178AE  EC09  F0C8         	call	___ftge	;wreg free
 23214  0178B2  0100               	movlb	0	; () banked
 23215  0178B4  A0D8               	btfss	status,0,c
 23216  0178B6  D013               	goto	l20699
 23217  0178B8                     l20691:
 23218                           
 23219                           ; BSR set to: 0
 23220                           ;ERROR_HANDLING.c: 274: {
 23221                           ;ERROR_HANDLING.c: 275: Grid_Ov_Counter++;
 23222  0178B8  0101               	movlb	1	; () banked
 23223  0178BA  2B9B               	incf	_Grid_Ov_Counter& (0+255),f,b
 23224                           
 23225                           ; BSR set to: 1
 23226                           ;ERROR_HANDLING.c: 276: if(Grid_Ov_Counter >= 2)
 23227  0178BC  0E01               	movlw	1
 23228  0178BE  0101               	movlb	1	; () banked
 23229  0178C0  659B               	cpfsgt	_Grid_Ov_Counter& (0+255),b
 23230  0178C2  D009               	goto	l20697
 23231                           
 23232                           ; BSR set to: 1
 23233                           ;ERROR_HANDLING.c: 277: {
 23234                           ;ERROR_HANDLING.c: 278: Grid_Ov_Counter = 0;
 23235  0178C4  0E00               	movlw	0
 23236  0178C6  0101               	movlb	1	; () banked
 23237  0178C8  6F9B               	movwf	_Grid_Ov_Counter& (0+255),b
 23238                           
 23239                           ;ERROR_HANDLING.c: 279: Grid_Ovr_voltage = 1;
 23240  0178CA  0E01               	movlw	1
 23241  0178CC  0101               	movlb	1	; () banked
 23242  0178CE  6F9C               	movwf	_Grid_Ovr_voltage& (0+255),b
 23243                           
 23244                           ;ERROR_HANDLING.c: 280: Errors = VOLT_HIGH;
 23245  0178D0  0E18               	movlw	24
 23246  0178D2  6E3A               	movwf	_Errors,c
 23247                           
 23248                           ;ERROR_HANDLING.c: 281: }
 23249  0178D4  D00A               	goto	l20701
 23250  0178D6                     l20697:
 23251                           
 23252                           ; BSR set to: 1
 23253                           ;ERROR_HANDLING.c: 282: else
 23254                           ;ERROR_HANDLING.c: 283: {
 23255                           ;ERROR_HANDLING.c: 284: Grid_Ovr_voltage = 0;
 23256  0178D6  0E00               	movlw	0
 23257  0178D8  0101               	movlb	1	; () banked
 23258  0178DA  6F9C               	movwf	_Grid_Ovr_voltage& (0+255),b
 23259                           
 23260                           ; BSR set to: 1
 23261                           ;ERROR_HANDLING.c: 285: }
 23262                           ;ERROR_HANDLING.c: 286: }
 23263  0178DC  D006               	goto	l20701
 23264  0178DE                     l20699:
 23265                           
 23266                           ;ERROR_HANDLING.c: 287: else
 23267                           ;ERROR_HANDLING.c: 288: {
 23268                           ;ERROR_HANDLING.c: 289: Grid_Ovr_voltage = 0;
 23269  0178DE  0E00               	movlw	0
 23270  0178E0  0101               	movlb	1	; () banked
 23271  0178E2  6F9C               	movwf	_Grid_Ovr_voltage& (0+255),b
 23272                           
 23273                           ;ERROR_HANDLING.c: 290: Grid_Ov_Counter = 0;
 23274  0178E4  0E00               	movlw	0
 23275  0178E6  0101               	movlb	1	; () banked
 23276  0178E8  6F9B               	movwf	_Grid_Ov_Counter& (0+255),b
 23277  0178EA                     l20701:
 23278                           
 23279                           ;ERROR_HANDLING.c: 291: }
 23280                           ;ERROR_HANDLING.c: 292: }
 23281                           ;ERROR_HANDLING.c: 293: if(Turbine_state == RUNNING_STATE)
 23282  0178EA  0E02               	movlw	2
 23283  0178EC  0100               	movlb	0	; () banked
 23284  0178EE  19D8               	xorwf	_Turbine_state& (0+255),w,b
 23285  0178F0  A4D8               	btfss	status,2,c
 23286  0178F2  0012               	return	
 23287                           
 23288                           ; BSR set to: 0
 23289                           ;ERROR_HANDLING.c: 294: {
 23290                           ;ERROR_HANDLING.c: 295: if(R_Volt >= (450) || Y_Volt >= (450) || B_Volt >= (450))
 23291  0178F4  C02A  F08F         	movff	_R_Volt,___ftge@ff1
 23292  0178F8  C02B  F090         	movff	_R_Volt+1,___ftge@ff1+1
 23293  0178FC  C02C  F091         	movff	_R_Volt+2,___ftge@ff1+2
 23294  017900  0E00               	movlw	0
 23295  017902  0100               	movlb	0	; () banked
 23296  017904  6F92               	movwf	___ftge@ff2& (0+255),b
 23297  017906  0EE1               	movlw	225
 23298  017908  0100               	movlb	0	; () banked
 23299  01790A  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23300  01790C  0E43               	movlw	67
 23301  01790E  0100               	movlb	0	; () banked
 23302  017910  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23303  017912  EC09  F0C8         	call	___ftge	;wreg free
 23304  017916  0100               	movlb	0	; () banked
 23305  017918  B0D8               	btfsc	status,0,c
 23306  01791A  D028               	goto	l20709
 23307                           
 23308                           ; BSR set to: 0
 23309  01791C  C030  F08F         	movff	_Y_Volt,___ftge@ff1
 23310  017920  C031  F090         	movff	_Y_Volt+1,___ftge@ff1+1
 23311  017924  C032  F091         	movff	_Y_Volt+2,___ftge@ff1+2
 23312  017928  0E00               	movlw	0
 23313  01792A  0100               	movlb	0	; () banked
 23314  01792C  6F92               	movwf	___ftge@ff2& (0+255),b
 23315  01792E  0EE1               	movlw	225
 23316  017930  0100               	movlb	0	; () banked
 23317  017932  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23318  017934  0E43               	movlw	67
 23319  017936  0100               	movlb	0	; () banked
 23320  017938  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23321  01793A  EC09  F0C8         	call	___ftge	;wreg free
 23322  01793E  0100               	movlb	0	; () banked
 23323  017940  B0D8               	btfsc	status,0,c
 23324  017942  D014               	goto	l20709
 23325                           
 23326                           ; BSR set to: 0
 23327  017944  C027  F08F         	movff	_B_Volt,___ftge@ff1
 23328  017948  C028  F090         	movff	_B_Volt+1,___ftge@ff1+1
 23329  01794C  C029  F091         	movff	_B_Volt+2,___ftge@ff1+2
 23330  017950  0E00               	movlw	0
 23331  017952  0100               	movlb	0	; () banked
 23332  017954  6F92               	movwf	___ftge@ff2& (0+255),b
 23333  017956  0EE1               	movlw	225
 23334  017958  0100               	movlb	0	; () banked
 23335  01795A  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23336  01795C  0E43               	movlw	67
 23337  01795E  0100               	movlb	0	; () banked
 23338  017960  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23339  017962  EC09  F0C8         	call	___ftge	;wreg free
 23340  017966  0100               	movlb	0	; () banked
 23341  017968  A0D8               	btfss	status,0,c
 23342  01796A  D013               	goto	l20717
 23343  01796C                     l20709:
 23344                           
 23345                           ; BSR set to: 0
 23346                           ;ERROR_HANDLING.c: 296: {
 23347                           ;ERROR_HANDLING.c: 297: Grid_Ov_Counter++;
 23348  01796C  0101               	movlb	1	; () banked
 23349  01796E  2B9B               	incf	_Grid_Ov_Counter& (0+255),f,b
 23350                           
 23351                           ; BSR set to: 1
 23352                           ;ERROR_HANDLING.c: 298: if(Grid_Ov_Counter >= 10)
 23353  017970  0E09               	movlw	9
 23354  017972  0101               	movlb	1	; () banked
 23355  017974  659B               	cpfsgt	_Grid_Ov_Counter& (0+255),b
 23356  017976  D009               	goto	l20715
 23357                           
 23358                           ; BSR set to: 1
 23359                           ;ERROR_HANDLING.c: 299: {
 23360                           ;ERROR_HANDLING.c: 300: Grid_Ov_Counter = 0;
 23361  017978  0E00               	movlw	0
 23362  01797A  0101               	movlb	1	; () banked
 23363  01797C  6F9B               	movwf	_Grid_Ov_Counter& (0+255),b
 23364                           
 23365                           ;ERROR_HANDLING.c: 301: Grid_Ovr_voltage = 1;
 23366  01797E  0E01               	movlw	1
 23367  017980  0101               	movlb	1	; () banked
 23368  017982  6F9C               	movwf	_Grid_Ovr_voltage& (0+255),b
 23369                           
 23370                           ;ERROR_HANDLING.c: 302: Errors = VOLT_HIGH;
 23371  017984  0E18               	movlw	24
 23372  017986  6E3A               	movwf	_Errors,c
 23373                           
 23374                           ;ERROR_HANDLING.c: 303: }
 23375  017988  0012               	return	
 23376  01798A                     l20715:
 23377                           
 23378                           ; BSR set to: 1
 23379                           ;ERROR_HANDLING.c: 304: else
 23380                           ;ERROR_HANDLING.c: 305: {
 23381                           ;ERROR_HANDLING.c: 306: Grid_Ovr_voltage = 0;
 23382  01798A  0E00               	movlw	0
 23383  01798C  0101               	movlb	1	; () banked
 23384  01798E  6F9C               	movwf	_Grid_Ovr_voltage& (0+255),b
 23385                           
 23386                           ; BSR set to: 1
 23387                           ;ERROR_HANDLING.c: 307: }
 23388                           ;ERROR_HANDLING.c: 308: }
 23389  017990  0012               	return	
 23390  017992                     l20717:
 23391                           
 23392                           ;ERROR_HANDLING.c: 309: else
 23393                           ;ERROR_HANDLING.c: 310: {
 23394                           ;ERROR_HANDLING.c: 311: Grid_Ovr_voltage = 0;
 23395  017992  0E00               	movlw	0
 23396  017994  0101               	movlb	1	; () banked
 23397  017996  6F9C               	movwf	_Grid_Ovr_voltage& (0+255),b
 23398                           
 23399                           ;ERROR_HANDLING.c: 312: Grid_Ov_Counter = 0;
 23400  017998  0E00               	movlw	0
 23401  01799A  0101               	movlb	1	; () banked
 23402  01799C  6F9B               	movwf	_Grid_Ov_Counter& (0+255),b
 23403                           
 23404                           ; BSR set to: 1
 23405  01799E  0012               	return	
 23406  0179A0                     __end_of_Grid_OV:
 23407                           	opt stack 0
 23408                           tblptru	equ	0xFF8
 23409                           tblptrh	equ	0xFF7
 23410                           tblptrl	equ	0xFF6
 23411                           tablat	equ	0xFF5
 23412                           prodh	equ	0xFF4
 23413                           prodl	equ	0xFF3
 23414                           intcon	equ	0xFF2
 23415                           postinc0	equ	0xFEE
 23416                           wreg	equ	0xFE8
 23417                           postdec1	equ	0xFE5
 23418                           fsr1h	equ	0xFE2
 23419                           fsr1l	equ	0xFE1
 23420                           indf2	equ	0xFDF
 23421                           postinc2	equ	0xFDE
 23422                           postdec2	equ	0xFDD
 23423                           fsr2h	equ	0xFDA
 23424                           fsr2l	equ	0xFD9
 23425                           status	equ	0xFD8
 23426                           
 23427 ;; *************** function _Grid_Minimum_Power *****************
 23428 ;; Defined at:
 23429 ;;		line 437 in file "ERROR_HANDLING.c"
 23430 ;; Parameters:    Size  Location     Type
 23431 ;;		None
 23432 ;; Auto vars:     Size  Location     Type
 23433 ;;		None
 23434 ;; Return value:  Size  Location     Type
 23435 ;;                  1    wreg      void 
 23436 ;; Registers used:
 23437 ;;		wreg, status,2, status,0, cstack
 23438 ;; Tracked objects:
 23439 ;;		On entry : 0/0
 23440 ;;		On exit  : 0/0
 23441 ;;		Unchanged: 0/0
 23442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23447 ;;Total ram usage:        0 bytes
 23448 ;; Hardware stack levels used:    1
 23449 ;; Hardware stack levels required when called:    4
 23450 ;; This function calls:
 23451 ;;		___ftge
 23452 ;; This function is called by:
 23453 ;;		_Error_Checking_One_Second
 23454 ;; This function uses a non-reentrant model
 23455 ;;
 23456                           
 23457                           	psect	text71
 23458  01A398                     __ptext71:
 23459                           	opt stack 0
 23460  01A398                     _Grid_Minimum_Power:
 23461                           	opt stack 24
 23462                           
 23463                           ;ERROR_HANDLING.c: 439: if(KW <= (-5.0))
 23464                           
 23465                           ;incstack = 0
 23466  01A398  0E00               	movlw	0
 23467  01A39A  0100               	movlb	0	; () banked
 23468  01A39C  6F8F               	movwf	___ftge@ff1& (0+255),b
 23469  01A39E  0EA0               	movlw	160
 23470  01A3A0  0100               	movlb	0	; () banked
 23471  01A3A2  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 23472  01A3A4  0EC0               	movlw	192
 23473  01A3A6  0100               	movlb	0	; () banked
 23474  01A3A8  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 23475  01A3AA  C040  F092         	movff	_KW,___ftge@ff2
 23476  01A3AE  C041  F093         	movff	_KW+1,___ftge@ff2+1
 23477  01A3B2  C042  F094         	movff	_KW+2,___ftge@ff2+2
 23478  01A3B6  EC09  F0C8         	call	___ftge	;wreg free
 23479  01A3BA  0100               	movlb	0	; () banked
 23480  01A3BC  A0D8               	btfss	status,0,c
 23481  01A3BE  D013               	goto	l20843
 23482                           
 23483                           ; BSR set to: 0
 23484                           ;ERROR_HANDLING.c: 440: {
 23485                           ;ERROR_HANDLING.c: 441: KW_Counter_Max++;
 23486  01A3C0  0101               	movlb	1	; () banked
 23487  01A3C2  2BA2               	incf	_KW_Counter_Max& (0+255),f,b
 23488                           
 23489                           ; BSR set to: 1
 23490                           ;ERROR_HANDLING.c: 442: if(KW_Counter_Max >= 60)
 23491  01A3C4  0E3B               	movlw	59
 23492  01A3C6  0101               	movlb	1	; () banked
 23493  01A3C8  65A2               	cpfsgt	_KW_Counter_Max& (0+255),b
 23494  01A3CA  D009               	goto	l20841
 23495                           
 23496                           ; BSR set to: 1
 23497                           ;ERROR_HANDLING.c: 443: {
 23498                           ;ERROR_HANDLING.c: 444: KW_Counter_Max = 0;
 23499  01A3CC  0E00               	movlw	0
 23500  01A3CE  0101               	movlb	1	; () banked
 23501  01A3D0  6FA2               	movwf	_KW_Counter_Max& (0+255),b
 23502                           
 23503                           ;ERROR_HANDLING.c: 445: KW_Minimum_Error = 1;
 23504  01A3D2  0E01               	movlw	1
 23505  01A3D4  0101               	movlb	1	; () banked
 23506  01A3D6  6FA4               	movwf	_KW_Minimum_Error& (0+255),b
 23507                           
 23508                           ;ERROR_HANDLING.c: 446: Errors = POWER_MIN;
 23509  01A3D8  0E0F               	movlw	15
 23510  01A3DA  6E3A               	movwf	_Errors,c
 23511                           
 23512                           ;ERROR_HANDLING.c: 447: }
 23513  01A3DC  0012               	return	
 23514  01A3DE                     l20841:
 23515                           
 23516                           ; BSR set to: 1
 23517                           ;ERROR_HANDLING.c: 448: else
 23518                           ;ERROR_HANDLING.c: 449: {
 23519                           ;ERROR_HANDLING.c: 450: KW_Minimum_Error = 0;
 23520  01A3DE  0E00               	movlw	0
 23521  01A3E0  0101               	movlb	1	; () banked
 23522  01A3E2  6FA4               	movwf	_KW_Minimum_Error& (0+255),b
 23523                           
 23524                           ; BSR set to: 1
 23525                           ;ERROR_HANDLING.c: 451: }
 23526                           ;ERROR_HANDLING.c: 452: }
 23527  01A3E4  0012               	return	
 23528  01A3E6                     l20843:
 23529                           
 23530                           ;ERROR_HANDLING.c: 453: else
 23531                           ;ERROR_HANDLING.c: 454: {
 23532                           ;ERROR_HANDLING.c: 455: KW_Minimum_Error =0;
 23533  01A3E6  0E00               	movlw	0
 23534  01A3E8  0101               	movlb	1	; () banked
 23535  01A3EA  6FA4               	movwf	_KW_Minimum_Error& (0+255),b
 23536                           
 23537                           ;ERROR_HANDLING.c: 456: KW_Counter_Max = 0;
 23538  01A3EC  0E00               	movlw	0
 23539  01A3EE  0101               	movlb	1	; () banked
 23540  01A3F0  6FA2               	movwf	_KW_Counter_Max& (0+255),b
 23541  01A3F2  0012               	return	
 23542  01A3F4                     __end_of_Grid_Minimum_Power:
 23543                           	opt stack 0
 23544                           tblptru	equ	0xFF8
 23545                           tblptrh	equ	0xFF7
 23546                           tblptrl	equ	0xFF6
 23547                           tablat	equ	0xFF5
 23548                           prodh	equ	0xFF4
 23549                           prodl	equ	0xFF3
 23550                           intcon	equ	0xFF2
 23551                           postinc0	equ	0xFEE
 23552                           wreg	equ	0xFE8
 23553                           postdec1	equ	0xFE5
 23554                           fsr1h	equ	0xFE2
 23555                           fsr1l	equ	0xFE1
 23556                           indf2	equ	0xFDF
 23557                           postinc2	equ	0xFDE
 23558                           postdec2	equ	0xFDD
 23559                           fsr2h	equ	0xFDA
 23560                           fsr2l	equ	0xFD9
 23561                           status	equ	0xFD8
 23562                           
 23563 ;; *************** function _Grid_Maximum_Power *****************
 23564 ;; Defined at:
 23565 ;;		line 459 in file "ERROR_HANDLING.c"
 23566 ;; Parameters:    Size  Location     Type
 23567 ;;		None
 23568 ;; Auto vars:     Size  Location     Type
 23569 ;;		None
 23570 ;; Return value:  Size  Location     Type
 23571 ;;                  1    wreg      void 
 23572 ;; Registers used:
 23573 ;;		wreg, status,2, status,0, cstack
 23574 ;; Tracked objects:
 23575 ;;		On entry : 0/0
 23576 ;;		On exit  : 0/0
 23577 ;;		Unchanged: 0/0
 23578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23583 ;;Total ram usage:        0 bytes
 23584 ;; Hardware stack levels used:    1
 23585 ;; Hardware stack levels required when called:    4
 23586 ;; This function calls:
 23587 ;;		___ftge
 23588 ;; This function is called by:
 23589 ;;		_Error_Checking_One_Second
 23590 ;; This function uses a non-reentrant model
 23591 ;;
 23592                           
 23593                           	psect	text72
 23594  01A3F4                     __ptext72:
 23595                           	opt stack 0
 23596  01A3F4                     _Grid_Maximum_Power:
 23597                           	opt stack 24
 23598                           
 23599                           ;ERROR_HANDLING.c: 461: if(KW >= (6.0))
 23600                           
 23601                           ; BSR set to: 1
 23602                           ;incstack = 0
 23603  01A3F4  C040  F08F         	movff	_KW,___ftge@ff1
 23604  01A3F8  C041  F090         	movff	_KW+1,___ftge@ff1+1
 23605  01A3FC  C042  F091         	movff	_KW+2,___ftge@ff1+2
 23606  01A400  0E00               	movlw	0
 23607  01A402  0100               	movlb	0	; () banked
 23608  01A404  6F92               	movwf	___ftge@ff2& (0+255),b
 23609  01A406  0EC0               	movlw	192
 23610  01A408  0100               	movlb	0	; () banked
 23611  01A40A  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23612  01A40C  0E40               	movlw	64
 23613  01A40E  0100               	movlb	0	; () banked
 23614  01A410  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23615  01A412  EC09  F0C8         	call	___ftge	;wreg free
 23616  01A416  0100               	movlb	0	; () banked
 23617  01A418  A0D8               	btfss	status,0,c
 23618  01A41A  D013               	goto	l20855
 23619                           
 23620                           ; BSR set to: 0
 23621                           ;ERROR_HANDLING.c: 462: {
 23622                           ;ERROR_HANDLING.c: 463: KW_Counter++;
 23623  01A41C  0101               	movlb	1	; () banked
 23624  01A41E  2BA1               	incf	_KW_Counter& (0+255),f,b
 23625                           
 23626                           ; BSR set to: 1
 23627                           ;ERROR_HANDLING.c: 464: if(KW_Counter >= 30)
 23628  01A420  0E1D               	movlw	29
 23629  01A422  0101               	movlb	1	; () banked
 23630  01A424  65A1               	cpfsgt	_KW_Counter& (0+255),b
 23631  01A426  D009               	goto	l20853
 23632                           
 23633                           ; BSR set to: 1
 23634                           ;ERROR_HANDLING.c: 465: {
 23635                           ;ERROR_HANDLING.c: 466: KW_Counter = 0;
 23636  01A428  0E00               	movlw	0
 23637  01A42A  0101               	movlb	1	; () banked
 23638  01A42C  6FA1               	movwf	_KW_Counter& (0+255),b
 23639                           
 23640                           ;ERROR_HANDLING.c: 467: KW_Maximum_Error = 1;
 23641  01A42E  0E01               	movlw	1
 23642  01A430  0101               	movlb	1	; () banked
 23643  01A432  6FA3               	movwf	_KW_Maximum_Error& (0+255),b
 23644                           
 23645                           ;ERROR_HANDLING.c: 468: Errors = POWER_MAX;
 23646  01A434  0E0E               	movlw	14
 23647  01A436  6E3A               	movwf	_Errors,c
 23648                           
 23649                           ;ERROR_HANDLING.c: 469: }
 23650  01A438  0012               	return	
 23651  01A43A                     l20853:
 23652                           
 23653                           ; BSR set to: 1
 23654                           ;ERROR_HANDLING.c: 470: else
 23655                           ;ERROR_HANDLING.c: 471: {
 23656                           ;ERROR_HANDLING.c: 472: KW_Maximum_Error =0;
 23657  01A43A  0E00               	movlw	0
 23658  01A43C  0101               	movlb	1	; () banked
 23659  01A43E  6FA3               	movwf	_KW_Maximum_Error& (0+255),b
 23660                           
 23661                           ; BSR set to: 1
 23662                           ;ERROR_HANDLING.c: 473: }
 23663                           ;ERROR_HANDLING.c: 474: }
 23664  01A440  0012               	return	
 23665  01A442                     l20855:
 23666                           
 23667                           ;ERROR_HANDLING.c: 475: else
 23668                           ;ERROR_HANDLING.c: 476: {
 23669                           ;ERROR_HANDLING.c: 477: KW_Counter = 0;
 23670  01A442  0E00               	movlw	0
 23671  01A444  0101               	movlb	1	; () banked
 23672  01A446  6FA1               	movwf	_KW_Counter& (0+255),b
 23673                           
 23674                           ;ERROR_HANDLING.c: 478: KW_Maximum_Error = 0;
 23675  01A448  0E00               	movlw	0
 23676  01A44A  0101               	movlb	1	; () banked
 23677  01A44C  6FA3               	movwf	_KW_Maximum_Error& (0+255),b
 23678  01A44E  0012               	return	
 23679  01A450                     __end_of_Grid_Maximum_Power:
 23680                           	opt stack 0
 23681                           tblptru	equ	0xFF8
 23682                           tblptrh	equ	0xFF7
 23683                           tblptrl	equ	0xFF6
 23684                           tablat	equ	0xFF5
 23685                           prodh	equ	0xFF4
 23686                           prodl	equ	0xFF3
 23687                           intcon	equ	0xFF2
 23688                           postinc0	equ	0xFEE
 23689                           wreg	equ	0xFE8
 23690                           postdec1	equ	0xFE5
 23691                           fsr1h	equ	0xFE2
 23692                           fsr1l	equ	0xFE1
 23693                           indf2	equ	0xFDF
 23694                           postinc2	equ	0xFDE
 23695                           postdec2	equ	0xFDD
 23696                           fsr2h	equ	0xFDA
 23697                           fsr2l	equ	0xFD9
 23698                           status	equ	0xFD8
 23699                           
 23700 ;; *************** function _Grid_Frequency *****************
 23701 ;; Defined at:
 23702 ;;		line 359 in file "ERROR_HANDLING.c"
 23703 ;; Parameters:    Size  Location     Type
 23704 ;;		None
 23705 ;; Auto vars:     Size  Location     Type
 23706 ;;		None
 23707 ;; Return value:  Size  Location     Type
 23708 ;;                  1    wreg      void 
 23709 ;; Registers used:
 23710 ;;		wreg, status,2, status,0, cstack
 23711 ;; Tracked objects:
 23712 ;;		On entry : 0/0
 23713 ;;		On exit  : 0/0
 23714 ;;		Unchanged: 0/0
 23715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23720 ;;Total ram usage:        0 bytes
 23721 ;; Hardware stack levels used:    1
 23722 ;; Hardware stack levels required when called:    4
 23723 ;; This function calls:
 23724 ;;		___ftge
 23725 ;; This function is called by:
 23726 ;;		_Error_Checking_One_Second
 23727 ;; This function uses a non-reentrant model
 23728 ;;
 23729                           
 23730                           	psect	text73
 23731  019D7A                     __ptext73:
 23732                           	opt stack 0
 23733  019D7A                     _Grid_Frequency:
 23734                           	opt stack 24
 23735                           
 23736                           ;ERROR_HANDLING.c: 361: if(Frequency <= (47.5) || Frequency >= (52.5))
 23737                           
 23738                           ; BSR set to: 1
 23739                           ;incstack = 0
 23740  019D7A  0E00               	movlw	0
 23741  019D7C  0100               	movlb	0	; () banked
 23742  019D7E  6F8F               	movwf	___ftge@ff1& (0+255),b
 23743  019D80  0E3E               	movlw	62
 23744  019D82  0100               	movlb	0	; () banked
 23745  019D84  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 23746  019D86  0E42               	movlw	66
 23747  019D88  0100               	movlb	0	; () banked
 23748  019D8A  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 23749  019D8C  C109  F092         	movff	_Frequency,___ftge@ff2
 23750  019D90  C10A  F093         	movff	_Frequency+1,___ftge@ff2+1
 23751  019D94  C10B  F094         	movff	_Frequency+2,___ftge@ff2+2
 23752  019D98  EC09  F0C8         	call	___ftge	;wreg free
 23753  019D9C  0100               	movlb	0	; () banked
 23754  019D9E  B0D8               	btfsc	status,0,c
 23755  019DA0  D014               	goto	l20723
 23756                           
 23757                           ; BSR set to: 0
 23758  019DA2  C109  F08F         	movff	_Frequency,___ftge@ff1
 23759  019DA6  C10A  F090         	movff	_Frequency+1,___ftge@ff1+1
 23760  019DAA  C10B  F091         	movff	_Frequency+2,___ftge@ff1+2
 23761  019DAE  0E00               	movlw	0
 23762  019DB0  0100               	movlb	0	; () banked
 23763  019DB2  6F92               	movwf	___ftge@ff2& (0+255),b
 23764  019DB4  0E52               	movlw	82
 23765  019DB6  0100               	movlb	0	; () banked
 23766  019DB8  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23767  019DBA  0E42               	movlw	66
 23768  019DBC  0100               	movlb	0	; () banked
 23769  019DBE  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23770  019DC0  EC09  F0C8         	call	___ftge	;wreg free
 23771  019DC4  0100               	movlb	0	; () banked
 23772  019DC6  A0D8               	btfss	status,0,c
 23773  019DC8  D013               	goto	l20731
 23774  019DCA                     l20723:
 23775                           
 23776                           ; BSR set to: 0
 23777                           ;ERROR_HANDLING.c: 362: {
 23778                           ;ERROR_HANDLING.c: 363: Frequency_Error_counter++;
 23779  019DCA  0101               	movlb	1	; () banked
 23780  019DCC  2B77               	incf	_Frequency_Error_counter& (0+255),f,b
 23781                           
 23782                           ; BSR set to: 1
 23783                           ;ERROR_HANDLING.c: 364: if(Frequency_Error_counter >= 5)
 23784  019DCE  0E04               	movlw	4
 23785  019DD0  0101               	movlb	1	; () banked
 23786  019DD2  6577               	cpfsgt	_Frequency_Error_counter& (0+255),b
 23787  019DD4  D009               	goto	l20729
 23788                           
 23789                           ; BSR set to: 1
 23790                           ;ERROR_HANDLING.c: 365: {
 23791                           ;ERROR_HANDLING.c: 366: Frequency_Error_counter = 0;
 23792  019DD6  0E00               	movlw	0
 23793  019DD8  0101               	movlb	1	; () banked
 23794  019DDA  6F77               	movwf	_Frequency_Error_counter& (0+255),b
 23795                           
 23796                           ;ERROR_HANDLING.c: 367: Grid_Frequency_Error = 1;
 23797  019DDC  0E01               	movlw	1
 23798  019DDE  0101               	movlb	1	; () banked
 23799  019DE0  6F9A               	movwf	_Grid_Frequency_Error& (0+255),b
 23800                           
 23801                           ;ERROR_HANDLING.c: 368: Errors = FREQ;
 23802  019DE2  0E0C               	movlw	12
 23803  019DE4  6E3A               	movwf	_Errors,c
 23804                           
 23805                           ;ERROR_HANDLING.c: 369: }
 23806  019DE6  0012               	return	
 23807  019DE8                     l20729:
 23808                           
 23809                           ; BSR set to: 1
 23810                           ;ERROR_HANDLING.c: 370: else
 23811                           ;ERROR_HANDLING.c: 371: {
 23812                           ;ERROR_HANDLING.c: 372: Grid_Frequency_Error = 0;
 23813  019DE8  0E00               	movlw	0
 23814  019DEA  0101               	movlb	1	; () banked
 23815  019DEC  6F9A               	movwf	_Grid_Frequency_Error& (0+255),b
 23816                           
 23817                           ; BSR set to: 1
 23818                           ;ERROR_HANDLING.c: 373: }
 23819                           ;ERROR_HANDLING.c: 374: }
 23820  019DEE  0012               	return	
 23821  019DF0                     l20731:
 23822                           
 23823                           ;ERROR_HANDLING.c: 375: else
 23824                           ;ERROR_HANDLING.c: 376: {
 23825                           ;ERROR_HANDLING.c: 377: Frequency_Error_counter = 0;
 23826  019DF0  0E00               	movlw	0
 23827  019DF2  0101               	movlb	1	; () banked
 23828  019DF4  6F77               	movwf	_Frequency_Error_counter& (0+255),b
 23829                           
 23830                           ;ERROR_HANDLING.c: 378: Grid_Frequency_Error = 0;
 23831  019DF6  0E00               	movlw	0
 23832  019DF8  0101               	movlb	1	; () banked
 23833  019DFA  6F9A               	movwf	_Grid_Frequency_Error& (0+255),b
 23834  019DFC  0012               	return	
 23835  019DFE                     __end_of_Grid_Frequency:
 23836                           	opt stack 0
 23837                           tblptru	equ	0xFF8
 23838                           tblptrh	equ	0xFF7
 23839                           tblptrl	equ	0xFF6
 23840                           tablat	equ	0xFF5
 23841                           prodh	equ	0xFF4
 23842                           prodl	equ	0xFF3
 23843                           intcon	equ	0xFF2
 23844                           postinc0	equ	0xFEE
 23845                           wreg	equ	0xFE8
 23846                           postdec1	equ	0xFE5
 23847                           fsr1h	equ	0xFE2
 23848                           fsr1l	equ	0xFE1
 23849                           indf2	equ	0xFDF
 23850                           postinc2	equ	0xFDE
 23851                           postdec2	equ	0xFDD
 23852                           fsr2h	equ	0xFDA
 23853                           fsr2l	equ	0xFD9
 23854                           status	equ	0xFD8
 23855                           
 23856 ;; *************** function _Generator_RPM *****************
 23857 ;; Defined at:
 23858 ;;		line 418 in file "ERROR_HANDLING.c"
 23859 ;; Parameters:    Size  Location     Type
 23860 ;;		None
 23861 ;; Auto vars:     Size  Location     Type
 23862 ;;		None
 23863 ;; Return value:  Size  Location     Type
 23864 ;;                  1    wreg      void 
 23865 ;; Registers used:
 23866 ;;		wreg, status,2, status,0, cstack
 23867 ;; Tracked objects:
 23868 ;;		On entry : 0/0
 23869 ;;		On exit  : 0/0
 23870 ;;		Unchanged: 0/0
 23871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23876 ;;Total ram usage:        0 bytes
 23877 ;; Hardware stack levels used:    1
 23878 ;; Hardware stack levels required when called:    4
 23879 ;; This function calls:
 23880 ;;		___ftge
 23881 ;; This function is called by:
 23882 ;;		_Error_Checking_One_Second
 23883 ;; This function uses a non-reentrant model
 23884 ;;
 23885                           
 23886                           	psect	text74
 23887  01A4FE                     __ptext74:
 23888                           	opt stack 0
 23889  01A4FE                     _Generator_RPM:
 23890                           	opt stack 24
 23891                           
 23892                           ;ERROR_HANDLING.c: 420: if(Generator_RPM_FLT >= (1060))
 23893                           
 23894                           ; BSR set to: 1
 23895                           ;incstack = 0
 23896  01A4FE  C0CF  F08F         	movff	_Generator_RPM_FLT,___ftge@ff1
 23897  01A502  C0D0  F090         	movff	_Generator_RPM_FLT+1,___ftge@ff1+1
 23898  01A506  C0D1  F091         	movff	_Generator_RPM_FLT+2,___ftge@ff1+2
 23899  01A50A  0E80               	movlw	128
 23900  01A50C  0100               	movlb	0	; () banked
 23901  01A50E  6F92               	movwf	___ftge@ff2& (0+255),b
 23902  01A510  0E84               	movlw	132
 23903  01A512  0100               	movlb	0	; () banked
 23904  01A514  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 23905  01A516  0E44               	movlw	68
 23906  01A518  0100               	movlb	0	; () banked
 23907  01A51A  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 23908  01A51C  EC09  F0C8         	call	___ftge	;wreg free
 23909  01A520  0100               	movlb	0	; () banked
 23910  01A522  A0D8               	btfss	status,0,c
 23911  01A524  D00F               	goto	l20793
 23912                           
 23913                           ; BSR set to: 0
 23914                           ;ERROR_HANDLING.c: 421: {
 23915                           ;ERROR_HANDLING.c: 422: G_RPM_Counter++;
 23916  01A526  0101               	movlb	1	; () banked
 23917  01A528  2B84               	incf	_G_RPM_Counter& (0+255),f,b
 23918                           
 23919                           ; BSR set to: 1
 23920                           ;ERROR_HANDLING.c: 423: if(G_RPM_Counter >= 10)
 23921  01A52A  0E09               	movlw	9
 23922  01A52C  0101               	movlb	1	; () banked
 23923  01A52E  6584               	cpfsgt	_G_RPM_Counter& (0+255),b
 23924  01A530  0012               	return	
 23925                           
 23926                           ; BSR set to: 1
 23927                           ;ERROR_HANDLING.c: 424: {
 23928                           ;ERROR_HANDLING.c: 425: G_RPM_Counter = 0;
 23929  01A532  0E00               	movlw	0
 23930  01A534  0101               	movlb	1	; () banked
 23931  01A536  6F84               	movwf	_G_RPM_Counter& (0+255),b
 23932                           
 23933                           ;ERROR_HANDLING.c: 426: Generator_Over_Speed = 1;
 23934  01A538  0E01               	movlw	1
 23935  01A53A  0101               	movlb	1	; () banked
 23936  01A53C  6F98               	movwf	_Generator_Over_Speed& (0+255),b
 23937                           
 23938                           ;ERROR_HANDLING.c: 427: Errors = GEN_OS;
 23939  01A53E  0E0B               	movlw	11
 23940  01A540  6E3A               	movwf	_Errors,c
 23941                           
 23942                           ; BSR set to: 1
 23943                           ;ERROR_HANDLING.c: 428: }
 23944                           ;ERROR_HANDLING.c: 429: }
 23945  01A542  0012               	return	
 23946  01A544                     l20793:
 23947                           
 23948                           ;ERROR_HANDLING.c: 430: else
 23949                           ;ERROR_HANDLING.c: 431: {
 23950                           ;ERROR_HANDLING.c: 432: G_RPM_Counter = 0;
 23951  01A544  0E00               	movlw	0
 23952  01A546  0101               	movlb	1	; () banked
 23953  01A548  6F84               	movwf	_G_RPM_Counter& (0+255),b
 23954                           
 23955                           ;ERROR_HANDLING.c: 433: Generator_Over_Speed = 0;
 23956  01A54A  0E00               	movlw	0
 23957  01A54C  0101               	movlb	1	; () banked
 23958  01A54E  6F98               	movwf	_Generator_Over_Speed& (0+255),b
 23959  01A550  0012               	return	
 23960  01A552                     __end_of_Generator_RPM:
 23961                           	opt stack 0
 23962                           tblptru	equ	0xFF8
 23963                           tblptrh	equ	0xFF7
 23964                           tblptrl	equ	0xFF6
 23965                           tablat	equ	0xFF5
 23966                           prodh	equ	0xFF4
 23967                           prodl	equ	0xFF3
 23968                           intcon	equ	0xFF2
 23969                           postinc0	equ	0xFEE
 23970                           wreg	equ	0xFE8
 23971                           postdec1	equ	0xFE5
 23972                           fsr1h	equ	0xFE2
 23973                           fsr1l	equ	0xFE1
 23974                           indf2	equ	0xFDF
 23975                           postinc2	equ	0xFDE
 23976                           postdec2	equ	0xFDD
 23977                           fsr2h	equ	0xFDA
 23978                           fsr2l	equ	0xFD9
 23979                           status	equ	0xFD8
 23980                           
 23981 ;; *************** function _Generator_One_Feedback *****************
 23982 ;; Defined at:
 23983 ;;		line 647 in file "ERROR_HANDLING.c"
 23984 ;; Parameters:    Size  Location     Type
 23985 ;;		None
 23986 ;; Auto vars:     Size  Location     Type
 23987 ;;		None
 23988 ;; Return value:  Size  Location     Type
 23989 ;;                  1    wreg      void 
 23990 ;; Registers used:
 23991 ;;		wreg, status,2, status,0, cstack
 23992 ;; Tracked objects:
 23993 ;;		On entry : 0/0
 23994 ;;		On exit  : 0/0
 23995 ;;		Unchanged: 0/0
 23996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24001 ;;Total ram usage:        0 bytes
 24002 ;; Hardware stack levels used:    1
 24003 ;; Hardware stack levels required when called:    4
 24004 ;; This function calls:
 24005 ;;		_int_eeprom_write
 24006 ;; This function is called by:
 24007 ;;		_Error_Checking_One_Second
 24008 ;; This function uses a non-reentrant model
 24009 ;;
 24010                           
 24011                           	psect	text75
 24012  01A27E                     __ptext75:
 24013                           	opt stack 0
 24014  01A27E                     _Generator_One_Feedback:
 24015                           	opt stack 24
 24016                           
 24017                           ;ERROR_HANDLING.c: 649: if(RB2 == 0 && RD2 == 1 )
 24018                           
 24019                           ; BSR set to: 1
 24020                           ;incstack = 0
 24021  01A27E  A481               	btfss	3969,2,c	;volatile
 24022  01A280  A483               	btfss	3971,2,c	;volatile
 24023  01A282  D011               	goto	l6345
 24024                           
 24025                           ;ERROR_HANDLING.c: 650: {
 24026                           ;ERROR_HANDLING.c: 651: Generator_One_Feedback_Error = 0;
 24027  01A284  0E00               	movlw	0
 24028  01A286  0101               	movlb	1	; () banked
 24029  01A288  6F97               	movwf	_Generator_One_Feedback_Error& (0+255),b
 24030                           
 24031                           ;ERROR_HANDLING.c: 652: Generator_One_Counter = 0;
 24032  01A28A  0E00               	movlw	0
 24033  01A28C  0101               	movlb	1	; () banked
 24034  01A28E  6F96               	movwf	_Generator_One_Counter& (0+255),b
 24035                           
 24036                           ; BSR set to: 1
 24037                           ;ERROR_HANDLING.c: 653: int_eeprom_write((0x01),0);
 24038  01A290  0E00               	movlw	0
 24039  01A292  6E1E               	movwf	int_eeprom_write@adr+1,c
 24040  01A294  0E01               	movlw	1
 24041  01A296  6E1D               	movwf	int_eeprom_write@adr,c
 24042  01A298  0E00               	movlw	0
 24043  01A29A  6E20               	movwf	int_eeprom_write@dat+1,c
 24044  01A29C  0E00               	movlw	0
 24045  01A29E  6E1F               	movwf	int_eeprom_write@dat,c
 24046  01A2A0  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24047                           
 24048                           ;ERROR_HANDLING.c: 654: }
 24049  01A2A4  0012               	return	
 24050  01A2A6                     l6345:
 24051                           
 24052                           ;ERROR_HANDLING.c: 655: else if(RB2 == 1 && RD2 == 1)
 24053  01A2A6  A481               	btfss	3969,2,c	;volatile
 24054  01A2A8  0012               	return	
 24055  01A2AA  A483               	btfss	3971,2,c	;volatile
 24056  01A2AC  0012               	return	
 24057                           
 24058                           ;ERROR_HANDLING.c: 656: {
 24059                           ;ERROR_HANDLING.c: 657: Generator_One_Counter++;
 24060  01A2AE  0101               	movlb	1	; () banked
 24061  01A2B0  2B96               	incf	_Generator_One_Counter& (0+255),f,b
 24062                           
 24063                           ; BSR set to: 1
 24064                           ;ERROR_HANDLING.c: 658: if(Generator_One_Counter > 2)
 24065  01A2B2  0E02               	movlw	2
 24066  01A2B4  0101               	movlb	1	; () banked
 24067  01A2B6  6596               	cpfsgt	_Generator_One_Counter& (0+255),b
 24068  01A2B8  0012               	return	
 24069                           
 24070                           ; BSR set to: 1
 24071                           ;ERROR_HANDLING.c: 659: {
 24072                           ;ERROR_HANDLING.c: 660: Generator_One_Counter = 0;
 24073  01A2BA  0E00               	movlw	0
 24074  01A2BC  0101               	movlb	1	; () banked
 24075  01A2BE  6F96               	movwf	_Generator_One_Counter& (0+255),b
 24076                           
 24077                           ;ERROR_HANDLING.c: 661: Generator_One_Feedback_Error = 1;
 24078  01A2C0  0E01               	movlw	1
 24079  01A2C2  0101               	movlb	1	; () banked
 24080  01A2C4  6F97               	movwf	_Generator_One_Feedback_Error& (0+255),b
 24081                           
 24082                           ;ERROR_HANDLING.c: 662: Errors = GEN_FB;
 24083  01A2C6  0E14               	movlw	20
 24084  01A2C8  6E3A               	movwf	_Errors,c
 24085                           
 24086                           ; BSR set to: 1
 24087                           ;ERROR_HANDLING.c: 663: int_eeprom_write((0x01),1);
 24088  01A2CA  0E00               	movlw	0
 24089  01A2CC  6E1E               	movwf	int_eeprom_write@adr+1,c
 24090  01A2CE  0E01               	movlw	1
 24091  01A2D0  6E1D               	movwf	int_eeprom_write@adr,c
 24092  01A2D2  0E00               	movlw	0
 24093  01A2D4  6E20               	movwf	int_eeprom_write@dat+1,c
 24094  01A2D6  0E01               	movlw	1
 24095  01A2D8  6E1F               	movwf	int_eeprom_write@dat,c
 24096  01A2DA  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24097  01A2DE  0012               	return	
 24098  01A2E0                     __end_of_Generator_One_Feedback:
 24099                           	opt stack 0
 24100                           tblptru	equ	0xFF8
 24101                           tblptrh	equ	0xFF7
 24102                           tblptrl	equ	0xFF6
 24103                           tablat	equ	0xFF5
 24104                           prodh	equ	0xFF4
 24105                           prodl	equ	0xFF3
 24106                           intcon	equ	0xFF2
 24107                           postinc0	equ	0xFEE
 24108                           wreg	equ	0xFE8
 24109                           postdec1	equ	0xFE5
 24110                           fsr1h	equ	0xFE2
 24111                           fsr1l	equ	0xFE1
 24112                           indf2	equ	0xFDF
 24113                           postinc2	equ	0xFDE
 24114                           postdec2	equ	0xFDD
 24115                           fsr2h	equ	0xFDA
 24116                           fsr2l	equ	0xFD9
 24117                           status	equ	0xFD8
 24118                           
 24119 ;; *************** function _DC_Bus_Voltage *****************
 24120 ;; Defined at:
 24121 ;;		line 515 in file "ERROR_HANDLING.c"
 24122 ;; Parameters:    Size  Location     Type
 24123 ;;		None
 24124 ;; Auto vars:     Size  Location     Type
 24125 ;;		None
 24126 ;; Return value:  Size  Location     Type
 24127 ;;                  1    wreg      void 
 24128 ;; Registers used:
 24129 ;;		wreg, status,2, status,0
 24130 ;; Tracked objects:
 24131 ;;		On entry : 0/0
 24132 ;;		On exit  : 0/0
 24133 ;;		Unchanged: 0/0
 24134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24139 ;;Total ram usage:        0 bytes
 24140 ;; Hardware stack levels used:    1
 24141 ;; Hardware stack levels required when called:    3
 24142 ;; This function calls:
 24143 ;;		Nothing
 24144 ;; This function is called by:
 24145 ;;		_Error_Checking_One_Second
 24146 ;; This function uses a non-reentrant model
 24147 ;;
 24148                           
 24149                           	psect	text76
 24150  018B10                     __ptext76:
 24151                           	opt stack 0
 24152  018B10                     _DC_Bus_Voltage:
 24153                           	opt stack 25
 24154                           
 24155                           ;ERROR_HANDLING.c: 517: if(VFD_Error_No == 3)
 24156                           
 24157                           ;incstack = 0
 24158  018B10  0E03               	movlw	3
 24159  018B12  183E               	xorwf	_VFD_Error_No,w,c
 24160  018B14  A4D8               	btfss	status,2,c
 24161  018B16  D012               	goto	l17081
 24162                           
 24163                           ;ERROR_HANDLING.c: 518: {
 24164                           ;ERROR_HANDLING.c: 519: DC_BUS_Low_Counter++;
 24165  018B18  0101               	movlb	1	; () banked
 24166  018B1A  2B6A               	incf	_DC_BUS_Low_Counter& (0+255),f,b
 24167                           
 24168                           ; BSR set to: 1
 24169                           ;ERROR_HANDLING.c: 520: if(DC_BUS_Low_Counter >= 1)
 24170  018B1C  0101               	movlb	1	; () banked
 24171  018B1E  516A               	movf	_DC_BUS_Low_Counter& (0+255),w,b
 24172  018B20  0101               	movlb	1	; () banked
 24173  018B22  B4D8               	btfsc	status,2,c
 24174  018B24  D00B               	goto	l17081
 24175                           
 24176                           ; BSR set to: 1
 24177                           ;ERROR_HANDLING.c: 521: {
 24178                           ;ERROR_HANDLING.c: 522: DC_BUS_Low_Counter = 0;
 24179  018B26  0E00               	movlw	0
 24180  018B28  0101               	movlb	1	; () banked
 24181  018B2A  6F6A               	movwf	_DC_BUS_Low_Counter& (0+255),b
 24182                           
 24183                           ;ERROR_HANDLING.c: 523: Errors = DCB_L_H;
 24184  018B2C  0E03               	movlw	3
 24185  018B2E  6E3A               	movwf	_Errors,c
 24186                           
 24187                           ;ERROR_HANDLING.c: 524: VFD_DC_Bus_Low_Error = 1;
 24188  018B30  0E01               	movlw	1
 24189  018B32  0101               	movlb	1	; () banked
 24190  018B34  6FD1               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 24191                           
 24192                           ;ERROR_HANDLING.c: 525: DC_Bus_Voltage_Flag = 0;
 24193  018B36  0E00               	movlw	0
 24194  018B38  0101               	movlb	1	; () banked
 24195  018B3A  6F6B               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24196  018B3C                     l17081:
 24197                           
 24198                           ;ERROR_HANDLING.c: 526: }
 24199                           ;ERROR_HANDLING.c: 527: }
 24200                           ;ERROR_HANDLING.c: 528: if(VFD_Error_No == 7)
 24201  018B3C  0E07               	movlw	7
 24202  018B3E  183E               	xorwf	_VFD_Error_No,w,c
 24203  018B40  A4D8               	btfss	status,2,c
 24204  018B42  D008               	goto	l17085
 24205                           
 24206                           ;ERROR_HANDLING.c: 529: {
 24207                           ;ERROR_HANDLING.c: 530: Errors = DC_EXT_LOW;
 24208  018B44  0E07               	movlw	7
 24209  018B46  6E3A               	movwf	_Errors,c
 24210                           
 24211                           ;ERROR_HANDLING.c: 531: VFD_DC_EXTREM_LOW_Error = 1;
 24212  018B48  0E01               	movlw	1
 24213  018B4A  0101               	movlb	1	; () banked
 24214  018B4C  6FD2               	movwf	_VFD_DC_EXTREM_LOW_Error& (0+255),b
 24215                           
 24216                           ;ERROR_HANDLING.c: 532: DC_Bus_Voltage_Flag = 0;
 24217  018B4E  0E00               	movlw	0
 24218  018B50  0101               	movlb	1	; () banked
 24219  018B52  6F6B               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24220  018B54                     l17085:
 24221                           
 24222                           ;ERROR_HANDLING.c: 533: }
 24223                           ;ERROR_HANDLING.c: 534: if(VFD_Error_No == 3)
 24224  018B54  0E03               	movlw	3
 24225  018B56  183E               	xorwf	_VFD_Error_No,w,c
 24226  018B58  A4D8               	btfss	status,2,c
 24227  018B5A  D012               	goto	l17093
 24228                           
 24229                           ;ERROR_HANDLING.c: 535: {
 24230                           ;ERROR_HANDLING.c: 536: DC_BUS_High_Counter++;
 24231  018B5C  0101               	movlb	1	; () banked
 24232  018B5E  2B69               	incf	_DC_BUS_High_Counter& (0+255),f,b
 24233                           
 24234                           ; BSR set to: 1
 24235                           ;ERROR_HANDLING.c: 537: if(DC_BUS_High_Counter >= 1)
 24236  018B60  0101               	movlb	1	; () banked
 24237  018B62  5169               	movf	_DC_BUS_High_Counter& (0+255),w,b
 24238  018B64  0101               	movlb	1	; () banked
 24239  018B66  B4D8               	btfsc	status,2,c
 24240  018B68  D00B               	goto	l17093
 24241                           
 24242                           ; BSR set to: 1
 24243                           ;ERROR_HANDLING.c: 538: {
 24244                           ;ERROR_HANDLING.c: 539: DC_BUS_High_Counter = 0;
 24245  018B6A  0E00               	movlw	0
 24246  018B6C  0101               	movlb	1	; () banked
 24247  018B6E  6F69               	movwf	_DC_BUS_High_Counter& (0+255),b
 24248                           
 24249                           ;ERROR_HANDLING.c: 540: Errors = DCB_L_H;
 24250  018B70  0E03               	movlw	3
 24251  018B72  6E3A               	movwf	_Errors,c
 24252                           
 24253                           ;ERROR_HANDLING.c: 541: VFD_DC_Bus_High_Error = 1;
 24254  018B74  0E01               	movlw	1
 24255  018B76  0101               	movlb	1	; () banked
 24256  018B78  6FD0               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 24257                           
 24258                           ;ERROR_HANDLING.c: 542: DC_Bus_Voltage_Flag = 0;
 24259  018B7A  0E00               	movlw	0
 24260  018B7C  0101               	movlb	1	; () banked
 24261  018B7E  6F6B               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24262  018B80                     l17093:
 24263                           
 24264                           ;ERROR_HANDLING.c: 543: }
 24265                           ;ERROR_HANDLING.c: 544: }
 24266                           ;ERROR_HANDLING.c: 545: if(VFD_Error_No == 8)
 24267  018B80  0E08               	movlw	8
 24268  018B82  183E               	xorwf	_VFD_Error_No,w,c
 24269  018B84  A4D8               	btfss	status,2,c
 24270  018B86  D012               	goto	l17101
 24271                           
 24272                           ;ERROR_HANDLING.c: 546: {
 24273                           ;ERROR_HANDLING.c: 547: DC_BUS_Current_Counter++;
 24274  018B88  0101               	movlb	1	; () banked
 24275  018B8A  2B68               	incf	_DC_BUS_Current_Counter& (0+255),f,b
 24276                           
 24277                           ; BSR set to: 1
 24278                           ;ERROR_HANDLING.c: 548: if(DC_BUS_Current_Counter >= 1)
 24279  018B8C  0101               	movlb	1	; () banked
 24280  018B8E  5168               	movf	_DC_BUS_Current_Counter& (0+255),w,b
 24281  018B90  0101               	movlb	1	; () banked
 24282  018B92  B4D8               	btfsc	status,2,c
 24283  018B94  D00B               	goto	l17101
 24284                           
 24285                           ; BSR set to: 1
 24286                           ;ERROR_HANDLING.c: 549: {
 24287                           ;ERROR_HANDLING.c: 550: DC_BUS_Current_Counter = 0;
 24288  018B96  0E00               	movlw	0
 24289  018B98  0101               	movlb	1	; () banked
 24290  018B9A  6F68               	movwf	_DC_BUS_Current_Counter& (0+255),b
 24291                           
 24292                           ;ERROR_HANDLING.c: 551: Errors = VFD_OC;
 24293  018B9C  0E08               	movlw	8
 24294  018B9E  6E3A               	movwf	_Errors,c
 24295                           
 24296                           ;ERROR_HANDLING.c: 552: VFD_DC_Bus_Current_Error = 1;
 24297  018BA0  0E01               	movlw	1
 24298  018BA2  0101               	movlb	1	; () banked
 24299  018BA4  6FCF               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 24300                           
 24301                           ;ERROR_HANDLING.c: 553: DC_Bus_Voltage_Flag = 0;
 24302  018BA6  0E00               	movlw	0
 24303  018BA8  0101               	movlb	1	; () banked
 24304  018BAA  6F6B               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24305  018BAC                     l17101:
 24306                           
 24307                           ;ERROR_HANDLING.c: 554: }
 24308                           ;ERROR_HANDLING.c: 555: }
 24309                           ;ERROR_HANDLING.c: 556: if(VFD_Error_No == 6)
 24310  018BAC  0E06               	movlw	6
 24311  018BAE  183E               	xorwf	_VFD_Error_No,w,c
 24312  018BB0  A4D8               	btfss	status,2,c
 24313  018BB2  D00A               	goto	l6313
 24314                           
 24315                           ;ERROR_HANDLING.c: 557: {
 24316                           ;ERROR_HANDLING.c: 558: Errors = VFD_SHORT_CIRCUIT;
 24317  018BB4  0E06               	movlw	6
 24318  018BB6  6E3A               	movwf	_Errors,c
 24319                           
 24320                           ;ERROR_HANDLING.c: 559: VFD_SHORT_CIRCUIT_fLAG = 1;
 24321  018BB8  0E00               	movlw	0
 24322  018BBA  0102               	movlb	2	; () banked
 24323  018BBC  6FC5               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 24324  018BBE  0E01               	movlw	1
 24325  018BC0  6FC4               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 24326                           
 24327                           ;ERROR_HANDLING.c: 560: DC_Bus_Voltage_Flag = 0;
 24328  018BC2  0E00               	movlw	0
 24329  018BC4  0101               	movlb	1	; () banked
 24330  018BC6  6F6B               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24331  018BC8                     l6313:
 24332                           
 24333                           ;ERROR_HANDLING.c: 561: }
 24334                           ;ERROR_HANDLING.c: 562: if(VFD_Error_No == 0)
 24335  018BC8  503E               	movf	_VFD_Error_No,w,c
 24336  018BCA  A4D8               	btfss	status,2,c
 24337  018BCC  0012               	return	
 24338                           
 24339                           ;ERROR_HANDLING.c: 563: {
 24340                           ;ERROR_HANDLING.c: 564: VFD_DC_Bus_High_Error = 0;
 24341  018BCE  0E00               	movlw	0
 24342  018BD0  0101               	movlb	1	; () banked
 24343  018BD2  6FD0               	movwf	_VFD_DC_Bus_High_Error& (0+255),b
 24344                           
 24345                           ;ERROR_HANDLING.c: 565: VFD_DC_Bus_Low_Error = 0;
 24346  018BD4  0E00               	movlw	0
 24347  018BD6  0101               	movlb	1	; () banked
 24348  018BD8  6FD1               	movwf	_VFD_DC_Bus_Low_Error& (0+255),b
 24349                           
 24350                           ;ERROR_HANDLING.c: 566: VFD_SHORT_CIRCUIT_fLAG = 0;
 24351  018BDA  0E00               	movlw	0
 24352  018BDC  0102               	movlb	2	; () banked
 24353  018BDE  6FC5               	movwf	(_VFD_SHORT_CIRCUIT_fLAG+1)& (0+255),b
 24354  018BE0  0E00               	movlw	0
 24355  018BE2  6FC4               	movwf	_VFD_SHORT_CIRCUIT_fLAG& (0+255),b
 24356                           
 24357                           ;ERROR_HANDLING.c: 567: VFD_DC_Bus_Current_Error = 0;
 24358  018BE4  0E00               	movlw	0
 24359  018BE6  0101               	movlb	1	; () banked
 24360  018BE8  6FCF               	movwf	_VFD_DC_Bus_Current_Error& (0+255),b
 24361                           
 24362                           ;ERROR_HANDLING.c: 568: DC_Bus_Voltage_Flag = 1;
 24363  018BEA  0E01               	movlw	1
 24364  018BEC  0101               	movlb	1	; () banked
 24365  018BEE  6F6B               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 24366  018BF0  0012               	return	
 24367  018BF2                     __end_of_DC_Bus_Voltage:
 24368                           	opt stack 0
 24369                           tblptru	equ	0xFF8
 24370                           tblptrh	equ	0xFF7
 24371                           tblptrl	equ	0xFF6
 24372                           tablat	equ	0xFF5
 24373                           prodh	equ	0xFF4
 24374                           prodl	equ	0xFF3
 24375                           intcon	equ	0xFF2
 24376                           postinc0	equ	0xFEE
 24377                           wreg	equ	0xFE8
 24378                           postdec1	equ	0xFE5
 24379                           fsr1h	equ	0xFE2
 24380                           fsr1l	equ	0xFE1
 24381                           indf2	equ	0xFDF
 24382                           postinc2	equ	0xFDE
 24383                           postdec2	equ	0xFDD
 24384                           fsr2h	equ	0xFDA
 24385                           fsr2l	equ	0xFD9
 24386                           status	equ	0xFD8
 24387                           
 24388 ;; *************** function _Communication_Error *****************
 24389 ;; Defined at:
 24390 ;;		line 81 in file "RS485_COMMUNICATION.c"
 24391 ;; Parameters:    Size  Location     Type
 24392 ;;		None
 24393 ;; Auto vars:     Size  Location     Type
 24394 ;;		None
 24395 ;; Return value:  Size  Location     Type
 24396 ;;                  1    wreg      void 
 24397 ;; Registers used:
 24398 ;;		wreg, status,2, status,0
 24399 ;; Tracked objects:
 24400 ;;		On entry : 0/0
 24401 ;;		On exit  : 0/0
 24402 ;;		Unchanged: 0/0
 24403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24406 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24407 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24408 ;;Total ram usage:        2 bytes
 24409 ;; Hardware stack levels used:    1
 24410 ;; Hardware stack levels required when called:    3
 24411 ;; This function calls:
 24412 ;;		Nothing
 24413 ;; This function is called by:
 24414 ;;		_Error_Checking_One_Second
 24415 ;; This function uses a non-reentrant model
 24416 ;;
 24417                           
 24418                           	psect	text77
 24419  01A1B8                     __ptext77:
 24420                           	opt stack 0
 24421  01A1B8                     _Communication_Error:
 24422                           	opt stack 25
 24423                           
 24424                           ;RS485_COMMUNICATION.c: 83: if(VFD_ON_Flag == 1)
 24425                           
 24426                           ;incstack = 0
 24427  01A1B8  0101               	movlb	1	; () banked
 24428  01A1BA  05D5               	decf	_VFD_ON_Flag& (0+255),w,b
 24429  01A1BC  A4D8               	btfss	status,2,c
 24430  01A1BE  D027               	goto	l17141
 24431                           
 24432                           ; BSR set to: 1
 24433                           ;RS485_COMMUNICATION.c: 84: {
 24434                           ;RS485_COMMUNICATION.c: 85: if(Communication_OTP != Data_1[9])
 24435  01A1C0  5035               	movf	_Communication_OTP,w,c
 24436  01A1C2  6E1D               	movwf	??_Communication_Error& (0+255),c
 24437  01A1C4  6A1E               	clrf	(??_Communication_Error+1)& (0+255),c
 24438  01A1C6  0105               	movlb	5	; () banked
 24439  01A1C8  5112               	movf	(_Data_1+18)& (0+255),w,b
 24440  01A1CA  181D               	xorwf	??_Communication_Error,w,c
 24441  01A1CC  E105               	bnz	u9380
 24442  01A1CE  0105               	movlb	5	; () banked
 24443  01A1D0  5113               	movf	(_Data_1+19)& (0+255),w,b
 24444  01A1D2  181E               	xorwf	??_Communication_Error+1,w,c
 24445  01A1D4  B4D8               	btfsc	status,2,c
 24446  01A1D6  D014               	goto	l17139
 24447  01A1D8                     u9380:
 24448                           
 24449                           ; BSR set to: 5
 24450                           ;RS485_COMMUNICATION.c: 86: {
 24451                           ;RS485_COMMUNICATION.c: 87: VFD_communication_Error_Counter++;
 24452  01A1D8  0101               	movlb	1	; () banked
 24453  01A1DA  2BD9               	incf	_VFD_communication_Error_Counter& (0+255),f,b
 24454                           
 24455                           ; BSR set to: 1
 24456                           ;RS485_COMMUNICATION.c: 88: if(VFD_communication_Error_Counter == 10)
 24457  01A1DC  0E0A               	movlw	10
 24458  01A1DE  0101               	movlb	1	; () banked
 24459  01A1E0  19D9               	xorwf	_VFD_communication_Error_Counter& (0+255),w,b
 24460  01A1E2  A4D8               	btfss	status,2,c
 24461  01A1E4  D009               	goto	l17137
 24462                           
 24463                           ; BSR set to: 1
 24464                           ;RS485_COMMUNICATION.c: 89: {
 24465                           ;RS485_COMMUNICATION.c: 90: VFD_communication_Error_Counter = 0;
 24466  01A1E6  0E00               	movlw	0
 24467  01A1E8  0101               	movlb	1	; () banked
 24468  01A1EA  6FD9               	movwf	_VFD_communication_Error_Counter& (0+255),b
 24469                           
 24470                           ;RS485_COMMUNICATION.c: 91: VFD_communication_Error_Flag = 1;
 24471  01A1EC  0E01               	movlw	1
 24472  01A1EE  0100               	movlb	0	; () banked
 24473  01A1F0  6FD9               	movwf	_VFD_communication_Error_Flag& (0+255),b
 24474                           
 24475                           ;RS485_COMMUNICATION.c: 92: Errors = VFD_COMMU_ERR;
 24476  01A1F2  0E05               	movlw	5
 24477  01A1F4  6E3A               	movwf	_Errors,c
 24478                           
 24479                           ;RS485_COMMUNICATION.c: 93: }
 24480  01A1F6  0012               	return	
 24481  01A1F8                     l17137:
 24482                           
 24483                           ;RS485_COMMUNICATION.c: 94: else
 24484                           ;RS485_COMMUNICATION.c: 95: {
 24485                           ;RS485_COMMUNICATION.c: 96: VFD_communication_Error_Flag = 0;
 24486  01A1F8  0E00               	movlw	0
 24487  01A1FA  0100               	movlb	0	; () banked
 24488  01A1FC  6FD9               	movwf	_VFD_communication_Error_Flag& (0+255),b
 24489                           
 24490                           ; BSR set to: 0
 24491                           ;RS485_COMMUNICATION.c: 97: }
 24492                           ;RS485_COMMUNICATION.c: 98: }
 24493  01A1FE  0012               	return	
 24494  01A200                     l17139:
 24495                           
 24496                           ;RS485_COMMUNICATION.c: 99: else
 24497                           ;RS485_COMMUNICATION.c: 100: {
 24498                           ;RS485_COMMUNICATION.c: 101: VFD_communication_Error_Flag = 0;
 24499  01A200  0E00               	movlw	0
 24500  01A202  0100               	movlb	0	; () banked
 24501  01A204  6FD9               	movwf	_VFD_communication_Error_Flag& (0+255),b
 24502                           
 24503                           ;RS485_COMMUNICATION.c: 102: VFD_communication_Error_Counter = 0;
 24504  01A206  0E00               	movlw	0
 24505  01A208  0101               	movlb	1	; () banked
 24506  01A20A  6FD9               	movwf	_VFD_communication_Error_Counter& (0+255),b
 24507                           
 24508                           ; BSR set to: 1
 24509                           ;RS485_COMMUNICATION.c: 103: }
 24510                           ;RS485_COMMUNICATION.c: 104: }
 24511  01A20C  0012               	return	
 24512  01A20E                     l17141:
 24513                           
 24514                           ; BSR set to: 1
 24515                           ;RS485_COMMUNICATION.c: 105: else
 24516                           ;RS485_COMMUNICATION.c: 106: {
 24517                           ;RS485_COMMUNICATION.c: 107: VFD_communication_Error_Counter = 0;
 24518  01A20E  0E00               	movlw	0
 24519  01A210  0101               	movlb	1	; () banked
 24520  01A212  6FD9               	movwf	_VFD_communication_Error_Counter& (0+255),b
 24521                           
 24522                           ;RS485_COMMUNICATION.c: 108: VFD_communication_Error_Flag = 0;
 24523  01A214  0E00               	movlw	0
 24524  01A216  0100               	movlb	0	; () banked
 24525  01A218  6FD9               	movwf	_VFD_communication_Error_Flag& (0+255),b
 24526  01A21A  0012               	return	
 24527  01A21C                     __end_of_Communication_Error:
 24528                           	opt stack 0
 24529                           tblptru	equ	0xFF8
 24530                           tblptrh	equ	0xFF7
 24531                           tblptrl	equ	0xFF6
 24532                           tablat	equ	0xFF5
 24533                           prodh	equ	0xFF4
 24534                           prodl	equ	0xFF3
 24535                           intcon	equ	0xFF2
 24536                           postinc0	equ	0xFEE
 24537                           wreg	equ	0xFE8
 24538                           postdec1	equ	0xFE5
 24539                           fsr1h	equ	0xFE2
 24540                           fsr1l	equ	0xFE1
 24541                           indf2	equ	0xFDF
 24542                           postinc2	equ	0xFDE
 24543                           postdec2	equ	0xFDD
 24544                           fsr2h	equ	0xFDA
 24545                           fsr2l	equ	0xFD9
 24546                           status	equ	0xFD8
 24547                           
 24548 ;; *************** function _EEPROM_Error_Monitor *****************
 24549 ;; Defined at:
 24550 ;;		line 15 in file "EEPROM.c"
 24551 ;; Parameters:    Size  Location     Type
 24552 ;;		None
 24553 ;; Auto vars:     Size  Location     Type
 24554 ;;		None
 24555 ;; Return value:  Size  Location     Type
 24556 ;;                  1    wreg      void 
 24557 ;; Registers used:
 24558 ;;		wreg, status,2, status,0, cstack
 24559 ;; Tracked objects:
 24560 ;;		On entry : 0/0
 24561 ;;		On exit  : 0/0
 24562 ;;		Unchanged: 0/0
 24563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24568 ;;Total ram usage:        0 bytes
 24569 ;; Hardware stack levels used:    1
 24570 ;; Hardware stack levels required when called:    4
 24571 ;; This function calls:
 24572 ;;		_int_eeprom_read
 24573 ;;		_int_eeprom_write
 24574 ;; This function is called by:
 24575 ;;		_Timer0_OneSecond_Function
 24576 ;; This function uses a non-reentrant model
 24577 ;;
 24578                           
 24579                           	psect	text78
 24580  0166A4                     __ptext78:
 24581                           	opt stack 0
 24582  0166A4                     _EEPROM_Error_Monitor:
 24583                           	opt stack 25
 24584                           
 24585                           ;EEPROM.c: 17: Gen_EP_Err_Flag = int_eeprom_read((0x01));
 24586                           
 24587                           ;incstack = 0
 24588  0166A4  0E00               	movlw	0
 24589  0166A6  6E1E               	movwf	int_eeprom_read@adr+1,c
 24590  0166A8  0E01               	movlw	1
 24591  0166AA  6E1D               	movwf	int_eeprom_read@adr,c
 24592  0166AC  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 24593  0166B0  501D               	movf	?_int_eeprom_read,w,c
 24594  0166B2  0101               	movlb	1	; () banked
 24595  0166B4  6F95               	movwf	_Gen_EP_Err_Flag& (0+255),b
 24596                           
 24597                           ;EEPROM.c: 18: Pitch_EP_Err_Flag = int_eeprom_read((0x02));
 24598  0166B6  0E00               	movlw	0
 24599  0166B8  6E1E               	movwf	int_eeprom_read@adr+1,c
 24600  0166BA  0E02               	movlw	2
 24601  0166BC  6E1D               	movwf	int_eeprom_read@adr,c
 24602  0166BE  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 24603  0166C2  501D               	movf	?_int_eeprom_read,w,c
 24604  0166C4  0101               	movlb	1	; () banked
 24605  0166C6  6FB0               	movwf	_Pitch_EP_Err_Flag& (0+255),b
 24606                           
 24607                           ;EEPROM.c: 19: EEPROM_Error_Flag = int_eeprom_read((0x20));
 24608  0166C8  0E00               	movlw	0
 24609  0166CA  6E1E               	movwf	int_eeprom_read@adr+1,c
 24610  0166CC  0E20               	movlw	32
 24611  0166CE  6E1D               	movwf	int_eeprom_read@adr,c
 24612  0166D0  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 24613  0166D4  501D               	movf	?_int_eeprom_read,w,c
 24614  0166D6  6E36               	movwf	_EEPROM_Error_Flag,c
 24615                           
 24616                           ;EEPROM.c: 20: Start_Stop_Flag = int_eeprom_read((0x21));
 24617  0166D8  0E00               	movlw	0
 24618  0166DA  6E1E               	movwf	int_eeprom_read@adr+1,c
 24619  0166DC  0E21               	movlw	33
 24620  0166DE  6E1D               	movwf	int_eeprom_read@adr,c
 24621  0166E0  EC4C  F0D4         	call	_int_eeprom_read	;wreg free
 24622  0166E4  501D               	movf	?_int_eeprom_read,w,c
 24623  0166E6  6E3D               	movwf	_Start_Stop_Flag,c
 24624                           
 24625                           ;EEPROM.c: 23: if(Start_Stop_Flag != 1)
 24626  0166E8  043D               	decf	_Start_Stop_Flag,w,c
 24627  0166EA  B4D8               	btfsc	status,2,c
 24628  0166EC  D00C               	goto	l17923
 24629                           
 24630                           ;EEPROM.c: 24: {
 24631                           ;EEPROM.c: 25: Start_Stop_Flag = 0;
 24632  0166EE  0E00               	movlw	0
 24633  0166F0  6E3D               	movwf	_Start_Stop_Flag,c
 24634                           
 24635                           ;EEPROM.c: 26: int_eeprom_write((0x21),0);
 24636  0166F2  0E00               	movlw	0
 24637  0166F4  6E1E               	movwf	int_eeprom_write@adr+1,c
 24638  0166F6  0E21               	movlw	33
 24639  0166F8  6E1D               	movwf	int_eeprom_write@adr,c
 24640  0166FA  0E00               	movlw	0
 24641  0166FC  6E20               	movwf	int_eeprom_write@dat+1,c
 24642  0166FE  0E00               	movlw	0
 24643  016700  6E1F               	movwf	int_eeprom_write@dat,c
 24644  016702  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24645  016706                     l17923:
 24646                           
 24647                           ;EEPROM.c: 27: }
 24648                           ;EEPROM.c: 28: if(Pitch_EP_Err_Flag == 1)
 24649  016706  0101               	movlb	1	; () banked
 24650  016708  05B0               	decf	_Pitch_EP_Err_Flag& (0+255),w,b
 24651  01670A  A4D8               	btfss	status,2,c
 24652  01670C  D006               	goto	l17927
 24653                           
 24654                           ; BSR set to: 1
 24655                           ;EEPROM.c: 29: {
 24656                           ;EEPROM.c: 30: Feedback_Error = 1;
 24657  01670E  0E01               	movlw	1
 24658  016710  0101               	movlb	1	; () banked
 24659  016712  6F72               	movwf	_Feedback_Error& (0+255),b
 24660                           
 24661                           ;EEPROM.c: 31: Errors = PITCH_FB;
 24662  016714  0E15               	movlw	21
 24663  016716  6E3A               	movwf	_Errors,c
 24664                           
 24665                           ;EEPROM.c: 32: }
 24666  016718  D00A               	goto	l17929
 24667  01671A                     l17927:
 24668                           
 24669                           ; BSR set to: 1
 24670                           ;EEPROM.c: 33: else
 24671                           ;EEPROM.c: 34: {
 24672                           ;EEPROM.c: 35: int_eeprom_write((0x02),0);
 24673  01671A  0E00               	movlw	0
 24674  01671C  6E1E               	movwf	int_eeprom_write@adr+1,c
 24675  01671E  0E02               	movlw	2
 24676  016720  6E1D               	movwf	int_eeprom_write@adr,c
 24677  016722  0E00               	movlw	0
 24678  016724  6E20               	movwf	int_eeprom_write@dat+1,c
 24679  016726  0E00               	movlw	0
 24680  016728  6E1F               	movwf	int_eeprom_write@dat,c
 24681  01672A  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24682  01672E                     l17929:
 24683                           
 24684                           ;EEPROM.c: 36: }
 24685                           ;EEPROM.c: 38: if(Gen_EP_Err_Flag == 1)
 24686  01672E  0101               	movlb	1	; () banked
 24687  016730  0595               	decf	_Gen_EP_Err_Flag& (0+255),w,b
 24688  016732  A4D8               	btfss	status,2,c
 24689  016734  D006               	goto	l17933
 24690                           
 24691                           ; BSR set to: 1
 24692                           ;EEPROM.c: 39: {
 24693                           ;EEPROM.c: 40: Feedback_Error = 1;
 24694  016736  0E01               	movlw	1
 24695  016738  0101               	movlb	1	; () banked
 24696  01673A  6F72               	movwf	_Feedback_Error& (0+255),b
 24697                           
 24698                           ;EEPROM.c: 41: Errors = GEN_FB;
 24699  01673C  0E14               	movlw	20
 24700  01673E  6E3A               	movwf	_Errors,c
 24701                           
 24702                           ;EEPROM.c: 42: }
 24703  016740  D00A               	goto	l17935
 24704  016742                     l17933:
 24705                           
 24706                           ; BSR set to: 1
 24707                           ;EEPROM.c: 43: else
 24708                           ;EEPROM.c: 44: {
 24709                           ;EEPROM.c: 45: int_eeprom_write((0x01),0);
 24710  016742  0E00               	movlw	0
 24711  016744  6E1E               	movwf	int_eeprom_write@adr+1,c
 24712  016746  0E01               	movlw	1
 24713  016748  6E1D               	movwf	int_eeprom_write@adr,c
 24714  01674A  0E00               	movlw	0
 24715  01674C  6E20               	movwf	int_eeprom_write@dat+1,c
 24716  01674E  0E00               	movlw	0
 24717  016750  6E1F               	movwf	int_eeprom_write@dat,c
 24718  016752  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24719  016756                     l17935:
 24720                           
 24721                           ;EEPROM.c: 46: }
 24722                           ;EEPROM.c: 48: if(EEPROM_Error_Flag == 1)
 24723  016756  0436               	decf	_EEPROM_Error_Flag,w,c
 24724  016758  A4D8               	btfss	status,2,c
 24725  01675A  D003               	goto	l17939
 24726                           
 24727                           ;EEPROM.c: 49: {
 24728                           ;EEPROM.c: 50: Errors = EP_Errors1;
 24729  01675C  C037  F03A         	movff	_EP_Errors1,_Errors
 24730                           
 24731                           ;EEPROM.c: 51: }
 24732  016760  D00A               	goto	l17941
 24733  016762                     l17939:
 24734                           
 24735                           ;EEPROM.c: 52: else
 24736                           ;EEPROM.c: 53: {
 24737                           ;EEPROM.c: 54: int_eeprom_write((0x20),0);
 24738  016762  0E00               	movlw	0
 24739  016764  6E1E               	movwf	int_eeprom_write@adr+1,c
 24740  016766  0E20               	movlw	32
 24741  016768  6E1D               	movwf	int_eeprom_write@adr,c
 24742  01676A  0E00               	movlw	0
 24743  01676C  6E20               	movwf	int_eeprom_write@dat+1,c
 24744  01676E  0E00               	movlw	0
 24745  016770  6E1F               	movwf	int_eeprom_write@dat,c
 24746  016772  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24747  016776                     l17941:
 24748                           
 24749                           ;EEPROM.c: 55: }
 24750                           ;EEPROM.c: 57: if(RC0 == 0)
 24751  016776  B082               	btfsc	3970,0,c	;volatile
 24752  016778  0012               	return	
 24753                           
 24754                           ;EEPROM.c: 58: {
 24755                           ;EEPROM.c: 59: Feedback_Error = 0;
 24756  01677A  0E00               	movlw	0
 24757  01677C  0101               	movlb	1	; () banked
 24758  01677E  6F72               	movwf	_Feedback_Error& (0+255),b
 24759                           
 24760                           ;EEPROM.c: 61: EEPROM_Error_Flag = 0;
 24761  016780  0E00               	movlw	0
 24762  016782  6E36               	movwf	_EEPROM_Error_Flag,c
 24763                           
 24764                           ; BSR set to: 1
 24765                           ;EEPROM.c: 62: int_eeprom_write((0x20),EEPROM_Error_Flag);
 24766  016784  0E00               	movlw	0
 24767  016786  6E1E               	movwf	int_eeprom_write@adr+1,c
 24768  016788  0E20               	movlw	32
 24769  01678A  6E1D               	movwf	int_eeprom_write@adr,c
 24770  01678C  C036  F01F         	movff	_EEPROM_Error_Flag,int_eeprom_write@dat
 24771  016790  6A20               	clrf	int_eeprom_write@dat+1,c
 24772  016792  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24773                           
 24774                           ;EEPROM.c: 64: Total_Min = 0; Minutes_1 = 0; Minutes = 0;
 24775  016796  0E00               	movlw	0
 24776  016798  0101               	movlb	1	; () banked
 24777  01679A  6FC7               	movwf	_Total_Min& (0+255),b
 24778                           
 24779                           ; BSR set to: 1
 24780  01679C  0E00               	movlw	0
 24781  01679E  0101               	movlb	1	; () banked
 24782  0167A0  6FA8               	movwf	_Minutes_1& (0+255),b
 24783                           
 24784                           ; BSR set to: 1
 24785  0167A2  0E00               	movlw	0
 24786  0167A4  0101               	movlb	1	; () banked
 24787  0167A6  6FA7               	movwf	_Minutes& (0+255),b
 24788                           
 24789                           ; BSR set to: 1
 24790                           ;EEPROM.c: 66: Pitch_EP_Err_Flag = 0;
 24791  0167A8  0E00               	movlw	0
 24792  0167AA  0101               	movlb	1	; () banked
 24793  0167AC  6FB0               	movwf	_Pitch_EP_Err_Flag& (0+255),b
 24794                           
 24795                           ; BSR set to: 1
 24796                           ;EEPROM.c: 67: int_eeprom_write((0x02),0);
 24797  0167AE  0E00               	movlw	0
 24798  0167B0  6E1E               	movwf	int_eeprom_write@adr+1,c
 24799  0167B2  0E02               	movlw	2
 24800  0167B4  6E1D               	movwf	int_eeprom_write@adr,c
 24801  0167B6  0E00               	movlw	0
 24802  0167B8  6E20               	movwf	int_eeprom_write@dat+1,c
 24803  0167BA  0E00               	movlw	0
 24804  0167BC  6E1F               	movwf	int_eeprom_write@dat,c
 24805  0167BE  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24806                           
 24807                           ;EEPROM.c: 69: Gen_EP_Err_Flag = 0;
 24808  0167C2  0E00               	movlw	0
 24809  0167C4  0101               	movlb	1	; () banked
 24810  0167C6  6F95               	movwf	_Gen_EP_Err_Flag& (0+255),b
 24811                           
 24812                           ; BSR set to: 1
 24813                           ;EEPROM.c: 70: int_eeprom_write((0x01),0);
 24814  0167C8  0E00               	movlw	0
 24815  0167CA  6E1E               	movwf	int_eeprom_write@adr+1,c
 24816  0167CC  0E01               	movlw	1
 24817  0167CE  6E1D               	movwf	int_eeprom_write@adr,c
 24818  0167D0  0E00               	movlw	0
 24819  0167D2  6E20               	movwf	int_eeprom_write@dat+1,c
 24820  0167D4  0E00               	movlw	0
 24821  0167D6  6E1F               	movwf	int_eeprom_write@dat,c
 24822  0167D8  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24823                           
 24824                           ;EEPROM.c: 73: EP_Errors3 = 0; EP_Errors2 = 0; EP_Errors1 = 0;
 24825  0167DC  0E00               	movlw	0
 24826  0167DE  6E39               	movwf	_EP_Errors3,c
 24827  0167E0  0E00               	movlw	0
 24828  0167E2  6E38               	movwf	_EP_Errors2,c
 24829  0167E4  0E00               	movlw	0
 24830  0167E6  6E37               	movwf	_EP_Errors1,c
 24831                           
 24832                           ;EEPROM.c: 75: int_eeprom_write((0x19),EP_Errors3);
 24833  0167E8  0E00               	movlw	0
 24834  0167EA  6E1E               	movwf	int_eeprom_write@adr+1,c
 24835  0167EC  0E19               	movlw	25
 24836  0167EE  6E1D               	movwf	int_eeprom_write@adr,c
 24837  0167F0  C039  F01F         	movff	_EP_Errors3,int_eeprom_write@dat
 24838  0167F4  6A20               	clrf	int_eeprom_write@dat+1,c
 24839  0167F6  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24840                           
 24841                           ;EEPROM.c: 76: int_eeprom_write((0x18),EP_Errors2);
 24842  0167FA  0E00               	movlw	0
 24843  0167FC  6E1E               	movwf	int_eeprom_write@adr+1,c
 24844  0167FE  0E18               	movlw	24
 24845  016800  6E1D               	movwf	int_eeprom_write@adr,c
 24846  016802  C038  F01F         	movff	_EP_Errors2,int_eeprom_write@dat
 24847  016806  6A20               	clrf	int_eeprom_write@dat+1,c
 24848  016808  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24849                           
 24850                           ;EEPROM.c: 77: int_eeprom_write((0x17),EP_Errors1);
 24851  01680C  0E00               	movlw	0
 24852  01680E  6E1E               	movwf	int_eeprom_write@adr+1,c
 24853  016810  0E17               	movlw	23
 24854  016812  6E1D               	movwf	int_eeprom_write@adr,c
 24855  016814  C037  F01F         	movff	_EP_Errors1,int_eeprom_write@dat
 24856  016818  6A20               	clrf	int_eeprom_write@dat+1,c
 24857  01681A  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24858                           
 24859                           ;EEPROM.c: 79: GiMinutes_3 = 0; GiMinutes_2 = 0; GiMinutes_1 = 0;
 24860  01681E  0E00               	movlw	0
 24861  016820  0101               	movlb	1	; () banked
 24862  016822  6F44               	movwf	(_GiMinutes_3+1)& (0+255),b
 24863  016824  0E00               	movlw	0
 24864  016826  6F43               	movwf	_GiMinutes_3& (0+255),b
 24865                           
 24866                           ; BSR set to: 1
 24867  016828  0E00               	movlw	0
 24868  01682A  6E34               	movwf	_GiMinutes_2+1,c
 24869  01682C  0E00               	movlw	0
 24870  01682E  6E33               	movwf	_GiMinutes_2,c
 24871                           
 24872                           ; BSR set to: 1
 24873  016830  0E00               	movlw	0
 24874  016832  0101               	movlb	1	; () banked
 24875  016834  6F42               	movwf	(_GiMinutes_1+1)& (0+255),b
 24876  016836  0E00               	movlw	0
 24877  016838  6F41               	movwf	_GiMinutes_1& (0+255),b
 24878                           
 24879                           ; BSR set to: 1
 24880                           ;EEPROM.c: 81: int_eeprom_write((0x13),GiMinutes_3);
 24881  01683A  0E00               	movlw	0
 24882  01683C  6E1E               	movwf	int_eeprom_write@adr+1,c
 24883  01683E  0E13               	movlw	19
 24884  016840  6E1D               	movwf	int_eeprom_write@adr,c
 24885  016842  C143  F01F         	movff	_GiMinutes_3,int_eeprom_write@dat
 24886  016846  C144  F020         	movff	_GiMinutes_3+1,int_eeprom_write@dat+1
 24887  01684A  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24888                           
 24889                           ;EEPROM.c: 82: int_eeprom_write((0x12),GiMinutes_2);
 24890  01684E  0E00               	movlw	0
 24891  016850  6E1E               	movwf	int_eeprom_write@adr+1,c
 24892  016852  0E12               	movlw	18
 24893  016854  6E1D               	movwf	int_eeprom_write@adr,c
 24894  016856  C033  F01F         	movff	_GiMinutes_2,int_eeprom_write@dat
 24895  01685A  C034  F020         	movff	_GiMinutes_2+1,int_eeprom_write@dat+1
 24896  01685E  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24897                           
 24898                           ;EEPROM.c: 83: int_eeprom_write((0x11),GiMinutes_1);
 24899  016862  0E00               	movlw	0
 24900  016864  6E1E               	movwf	int_eeprom_write@adr+1,c
 24901  016866  0E11               	movlw	17
 24902  016868  6E1D               	movwf	int_eeprom_write@adr,c
 24903  01686A  C141  F01F         	movff	_GiMinutes_1,int_eeprom_write@dat
 24904  01686E  C142  F020         	movff	_GiMinutes_1+1,int_eeprom_write@dat+1
 24905  016872  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24906                           
 24907                           ;EEPROM.c: 85: GiHours_3 = 0; GiHours_2 = 0; GiHours_1 = 0;
 24908  016876  0E00               	movlw	0
 24909  016878  0101               	movlb	1	; () banked
 24910  01687A  6F40               	movwf	(_GiHours_3+1)& (0+255),b
 24911  01687C  0E00               	movlw	0
 24912  01687E  6F3F               	movwf	_GiHours_3& (0+255),b
 24913  016880  0E00               	movlw	0
 24914  016882  0101               	movlb	1	; () banked
 24915  016884  6F3E               	movwf	(_GiHours_2+1)& (0+255),b
 24916  016886  0E00               	movlw	0
 24917  016888  6F3D               	movwf	_GiHours_2& (0+255),b
 24918  01688A  0E00               	movlw	0
 24919  01688C  0101               	movlb	1	; () banked
 24920  01688E  6F3C               	movwf	(_GiHours_1+1)& (0+255),b
 24921  016890  0E00               	movlw	0
 24922  016892  6F3B               	movwf	_GiHours_1& (0+255),b
 24923                           
 24924                           ; BSR set to: 1
 24925                           ;EEPROM.c: 87: int_eeprom_write((0x16),GiHours_3);
 24926  016894  0E00               	movlw	0
 24927  016896  6E1E               	movwf	int_eeprom_write@adr+1,c
 24928  016898  0E16               	movlw	22
 24929  01689A  6E1D               	movwf	int_eeprom_write@adr,c
 24930  01689C  C13F  F01F         	movff	_GiHours_3,int_eeprom_write@dat
 24931  0168A0  C140  F020         	movff	_GiHours_3+1,int_eeprom_write@dat+1
 24932  0168A4  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24933                           
 24934                           ;EEPROM.c: 88: int_eeprom_write((0x15),GiHours_2);
 24935  0168A8  0E00               	movlw	0
 24936  0168AA  6E1E               	movwf	int_eeprom_write@adr+1,c
 24937  0168AC  0E15               	movlw	21
 24938  0168AE  6E1D               	movwf	int_eeprom_write@adr,c
 24939  0168B0  C13D  F01F         	movff	_GiHours_2,int_eeprom_write@dat
 24940  0168B4  C13E  F020         	movff	_GiHours_2+1,int_eeprom_write@dat+1
 24941  0168B8  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24942                           
 24943                           ;EEPROM.c: 89: int_eeprom_write((0x14),GiHours_1);
 24944  0168BC  0E00               	movlw	0
 24945  0168BE  6E1E               	movwf	int_eeprom_write@adr+1,c
 24946  0168C0  0E14               	movlw	20
 24947  0168C2  6E1D               	movwf	int_eeprom_write@adr,c
 24948  0168C4  C13B  F01F         	movff	_GiHours_1,int_eeprom_write@dat
 24949  0168C8  C13C  F020         	movff	_GiHours_1+1,int_eeprom_write@dat+1
 24950  0168CC  EC80  F0D3         	call	_int_eeprom_write	;wreg free
 24951  0168D0  0012               	return	
 24952  0168D2                     __end_of_EEPROM_Error_Monitor:
 24953                           	opt stack 0
 24954                           tblptru	equ	0xFF8
 24955                           tblptrh	equ	0xFF7
 24956                           tblptrl	equ	0xFF6
 24957                           tablat	equ	0xFF5
 24958                           prodh	equ	0xFF4
 24959                           prodl	equ	0xFF3
 24960                           intcon	equ	0xFF2
 24961                           postinc0	equ	0xFEE
 24962                           wreg	equ	0xFE8
 24963                           postdec1	equ	0xFE5
 24964                           fsr1h	equ	0xFE2
 24965                           fsr1l	equ	0xFE1
 24966                           indf2	equ	0xFDF
 24967                           postinc2	equ	0xFDE
 24968                           postdec2	equ	0xFDD
 24969                           fsr2h	equ	0xFDA
 24970                           fsr2l	equ	0xFD9
 24971                           status	equ	0xFD8
 24972                           
 24973 ;; *************** function _int_eeprom_write *****************
 24974 ;; Defined at:
 24975 ;;		line 217 in file "EEPROM.c"
 24976 ;; Parameters:    Size  Location     Type
 24977 ;;  adr             2   28[COMRAM] unsigned int 
 24978 ;;  dat             2   30[COMRAM] unsigned int 
 24979 ;; Auto vars:     Size  Location     Type
 24980 ;;		None
 24981 ;; Return value:  Size  Location     Type
 24982 ;;                  2   28[COMRAM] unsigned int 
 24983 ;; Registers used:
 24984 ;;		wreg, status,2
 24985 ;; Tracked objects:
 24986 ;;		On entry : 0/0
 24987 ;;		On exit  : 0/0
 24988 ;;		Unchanged: 0/0
 24989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24990 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24993 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24994 ;;Total ram usage:        4 bytes
 24995 ;; Hardware stack levels used:    1
 24996 ;; Hardware stack levels required when called:    3
 24997 ;; This function calls:
 24998 ;;		Nothing
 24999 ;; This function is called by:
 25000 ;;		_Pitch_Feedback
 25001 ;;		_Generator_One_Feedback
 25002 ;;		_Start_Stop
 25003 ;;		_EEPROM_Error_Monitor
 25004 ;;		_EEPROM_Error_Stop
 25005 ;;		_Last_3_EEPROM_ERROR_Trigger
 25006 ;; This function uses a non-reentrant model
 25007 ;;
 25008                           
 25009                           	psect	text79
 25010  01A700                     __ptext79:
 25011                           	opt stack 0
 25012  01A700                     _int_eeprom_write:
 25013                           	opt stack 23
 25014                           
 25015                           ;EEPROM.c: 219: EEADR = adr;
 25016                           
 25017                           ;incstack = 0
 25018  01A700  C01D  FF62         	movff	int_eeprom_write@adr,3938	;volatile
 25019                           
 25020                           ;EEPROM.c: 220: EEDATA = dat;
 25021  01A704  C01F  FF61         	movff	int_eeprom_write@dat,3937	;volatile
 25022                           
 25023                           ;EEPROM.c: 221: EECON1bits.EEPGD = 0;
 25024  01A708  9E7F               	bcf	3967,7,c	;volatile
 25025                           
 25026                           ;EEPROM.c: 222: EECON1bits.CFGS = 0;
 25027  01A70A  9C7F               	bcf	3967,6,c	;volatile
 25028                           
 25029                           ;EEPROM.c: 223: INTCONbits.GIE = 0;
 25030  01A70C  9EF2               	bcf	intcon,7,c	;volatile
 25031                           
 25032                           ;EEPROM.c: 224: EECON1bits.WREN = 1;
 25033  01A70E  847F               	bsf	3967,2,c	;volatile
 25034                           
 25035                           ;EEPROM.c: 226: EECON2 = 0x55;
 25036  01A710  0E55               	movlw	85
 25037  01A712  6E7E               	movwf	3966,c	;volatile
 25038                           
 25039                           ;EEPROM.c: 227: EECON2 = 0xAA;
 25040  01A714  0EAA               	movlw	170
 25041  01A716  6E7E               	movwf	3966,c	;volatile
 25042                           
 25043                           ;EEPROM.c: 228: EECON1bits.WR = 1;
 25044  01A718  827F               	bsf	3967,1,c	;volatile
 25045  01A71A                     l10299:
 25046  01A71A  B27F               	btfsc	3967,1,c	;volatile
 25047  01A71C  D7FE               	goto	l10299
 25048                           
 25049                           ;EEPROM.c: 230: EECON1bits.WREN = 0;
 25050  01A71E  947F               	bcf	3967,2,c	;volatile
 25051                           
 25052                           ;EEPROM.c: 231: INTCONbits.GIE = 1;
 25053  01A720  8EF2               	bsf	intcon,7,c	;volatile
 25054                           
 25055                           ;EEPROM.c: 232: EECON1bits.RD = 1;
 25056  01A722  807F               	bsf	3967,0,c	;volatile
 25057  01A724                     l10302:
 25058  01A724  B07F               	btfsc	3967,0,c	;volatile
 25059  01A726  D7FE               	goto	l10302
 25060                           
 25061                           ;EEPROM.c: 234: dat = EEDATA;
 25062  01A728  CF61 F01F          	movff	3937,int_eeprom_write@dat	;volatile
 25063  01A72C  6A20               	clrf	int_eeprom_write@dat+1,c
 25064                           
 25065                           ;EEPROM.c: 235: return dat;
 25066                           ;	Return value of _int_eeprom_write is never used
 25067  01A72E  0012               	return		;funcret
 25068  01A730                     __end_of_int_eeprom_write:
 25069                           	opt stack 0
 25070                           tblptru	equ	0xFF8
 25071                           tblptrh	equ	0xFF7
 25072                           tblptrl	equ	0xFF6
 25073                           tablat	equ	0xFF5
 25074                           prodh	equ	0xFF4
 25075                           prodl	equ	0xFF3
 25076                           intcon	equ	0xFF2
 25077                           postinc0	equ	0xFEE
 25078                           wreg	equ	0xFE8
 25079                           postdec1	equ	0xFE5
 25080                           fsr1h	equ	0xFE2
 25081                           fsr1l	equ	0xFE1
 25082                           indf2	equ	0xFDF
 25083                           postinc2	equ	0xFDE
 25084                           postdec2	equ	0xFDD
 25085                           fsr2h	equ	0xFDA
 25086                           fsr2l	equ	0xFD9
 25087                           status	equ	0xFD8
 25088                           
 25089 ;; *************** function _int_eeprom_read *****************
 25090 ;; Defined at:
 25091 ;;		line 202 in file "EEPROM.c"
 25092 ;; Parameters:    Size  Location     Type
 25093 ;;  adr             2   28[COMRAM] unsigned int 
 25094 ;; Auto vars:     Size  Location     Type
 25095 ;;  temp            2   30[COMRAM] unsigned int 
 25096 ;; Return value:  Size  Location     Type
 25097 ;;                  2   28[COMRAM] unsigned int 
 25098 ;; Registers used:
 25099 ;;		wreg, status,2
 25100 ;; Tracked objects:
 25101 ;;		On entry : 0/0
 25102 ;;		On exit  : 0/0
 25103 ;;		Unchanged: 0/0
 25104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25105 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25108 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25109 ;;Total ram usage:        4 bytes
 25110 ;; Hardware stack levels used:    1
 25111 ;; Hardware stack levels required when called:    3
 25112 ;; This function calls:
 25113 ;;		Nothing
 25114 ;; This function is called by:
 25115 ;;		_EEPROM_Error_Monitor
 25116 ;;		_EEPROM_Error_Stop
 25117 ;; This function uses a non-reentrant model
 25118 ;;
 25119                           
 25120                           	psect	text80
 25121  01A898                     __ptext80:
 25122                           	opt stack 0
 25123  01A898                     _int_eeprom_read:
 25124                           	opt stack 23
 25125                           
 25126                           ;EEPROM.c: 204: unsigned int temp = 0;
 25127                           
 25128                           ;incstack = 0
 25129  01A898  0E00               	movlw	0
 25130  01A89A  6E20               	movwf	int_eeprom_read@temp+1,c
 25131  01A89C  0E00               	movlw	0
 25132  01A89E  6E1F               	movwf	int_eeprom_read@temp,c
 25133                           
 25134                           ;EEPROM.c: 205: INTCONbits.GIE = 0;
 25135  01A8A0  9EF2               	bcf	intcon,7,c	;volatile
 25136                           
 25137                           ;EEPROM.c: 206: EECON1bits.EEPGD = 0;
 25138  01A8A2  9E7F               	bcf	3967,7,c	;volatile
 25139                           
 25140                           ;EEPROM.c: 207: EEADR = adr;
 25141  01A8A4  C01D  FF62         	movff	int_eeprom_read@adr,3938	;volatile
 25142                           
 25143                           ;EEPROM.c: 209: EECON1bits.RD = 1;
 25144  01A8A8  807F               	bsf	3967,0,c	;volatile
 25145  01A8AA                     l10293:
 25146  01A8AA  B07F               	btfsc	3967,0,c	;volatile
 25147  01A8AC  D7FE               	goto	l10293
 25148                           
 25149                           ;EEPROM.c: 211: temp = EEDATA;
 25150  01A8AE  CF61 F01F          	movff	3937,int_eeprom_read@temp	;volatile
 25151  01A8B2  6A20               	clrf	int_eeprom_read@temp+1,c
 25152                           
 25153                           ;EEPROM.c: 213: INTCONbits.GIE = 1;
 25154  01A8B4  8EF2               	bsf	intcon,7,c	;volatile
 25155                           
 25156                           ;EEPROM.c: 214: return (temp);
 25157  01A8B6  C01F  F01D         	movff	int_eeprom_read@temp,?_int_eeprom_read
 25158  01A8BA  C020  F01E         	movff	int_eeprom_read@temp+1,?_int_eeprom_read+1
 25159  01A8BE  0012               	return		;funcret
 25160  01A8C0                     __end_of_int_eeprom_read:
 25161                           	opt stack 0
 25162                           tblptru	equ	0xFF8
 25163                           tblptrh	equ	0xFF7
 25164                           tblptrl	equ	0xFF6
 25165                           tablat	equ	0xFF5
 25166                           prodh	equ	0xFF4
 25167                           prodl	equ	0xFF3
 25168                           intcon	equ	0xFF2
 25169                           postinc0	equ	0xFEE
 25170                           wreg	equ	0xFE8
 25171                           postdec1	equ	0xFE5
 25172                           fsr1h	equ	0xFE2
 25173                           fsr1l	equ	0xFE1
 25174                           indf2	equ	0xFDF
 25175                           postinc2	equ	0xFDE
 25176                           postdec2	equ	0xFDD
 25177                           fsr2h	equ	0xFDA
 25178                           fsr2l	equ	0xFD9
 25179                           status	equ	0xFD8
 25180                           
 25181 ;; *************** function _Temp_Read *****************
 25182 ;; Defined at:
 25183 ;;		line 117 in file "Power_Meter.c"
 25184 ;; Parameters:    Size  Location     Type
 25185 ;;		None
 25186 ;; Auto vars:     Size  Location     Type
 25187 ;;		None
 25188 ;; Return value:  Size  Location     Type
 25189 ;;                  1    wreg      void 
 25190 ;; Registers used:
 25191 ;;		wreg, status,2, status,0, cstack
 25192 ;; Tracked objects:
 25193 ;;		On entry : 0/0
 25194 ;;		On exit  : 0/0
 25195 ;;		Unchanged: 0/0
 25196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25198 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25200 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25201 ;;Total ram usage:       12 bytes
 25202 ;; Hardware stack levels used:    1
 25203 ;; Hardware stack levels required when called:    5
 25204 ;; This function calls:
 25205 ;;		_Read_Adc
 25206 ;;		___ftadd
 25207 ;;		___ftdiv
 25208 ;;		___ftmul
 25209 ;;		___lwtoft
 25210 ;; This function is called by:
 25211 ;;		_main
 25212 ;; This function uses a non-reentrant model
 25213 ;;
 25214                           
 25215                           	psect	text81
 25216  0173E0                     __ptext81:
 25217                           	opt stack 0
 25218  0173E0                     _Temp_Read:
 25219                           	opt stack 25
 25220                           
 25221                           ;Power_Meter.c: 119: Temp_Sensor = Read_Adc(0);
 25222                           
 25223                           ;incstack = 0
 25224  0173E0  0E00               	movlw	0
 25225  0173E2  ECC8  F0D3         	call	_Read_Adc
 25226  0173E6  C01D  F2AC         	movff	?_Read_Adc,_Temp_Sensor
 25227  0173EA  C01E  F2AD         	movff	?_Read_Adc+1,_Temp_Sensor+1
 25228                           
 25229                           ;Power_Meter.c: 120: Temprature = (Temp_Sensor * (0.122589));
 25230  0173EE  C2AC  F060         	movff	_Temp_Sensor,___lwtoft@c
 25231  0173F2  C2AD  F061         	movff	_Temp_Sensor+1,___lwtoft@c+1
 25232  0173F6  EC84  F0D4         	call	___lwtoft	;wreg free
 25233  0173FA  C060  F06A         	movff	?___lwtoft,___ftmul@f1
 25234  0173FE  C061  F06B         	movff	?___lwtoft+1,___ftmul@f1+1
 25235  017402  C062  F06C         	movff	?___lwtoft+2,___ftmul@f1+2
 25236  017406  0E10               	movlw	16
 25237  017408  0100               	movlb	0	; () banked
 25238  01740A  6F6D               	movwf	___ftmul@f2& (0+255),b
 25239  01740C  0EFB               	movlw	251
 25240  01740E  0100               	movlb	0	; () banked
 25241  017410  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 25242  017412  0E3D               	movlw	61
 25243  017414  0100               	movlb	0	; () banked
 25244  017416  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 25245  017418  EC83  F0BD         	call	___ftmul	;wreg free
 25246  01741C  C06A  F227         	movff	?___ftmul,_Temprature
 25247  017420  C06B  F228         	movff	?___ftmul+1,_Temprature+1
 25248  017424  C06C  F229         	movff	?___ftmul+2,_Temprature+2
 25249                           
 25250                           ;Power_Meter.c: 123: Temp_Arr[5] = Temp_Arr[4];
 25251  017428  C3C0  F3C3         	movff	_Temp_Arr+12,_Temp_Arr+15
 25252  01742C  C3C1  F3C4         	movff	_Temp_Arr+13,_Temp_Arr+16
 25253  017430  C3C2  F3C5         	movff	_Temp_Arr+14,_Temp_Arr+17
 25254                           
 25255                           ;Power_Meter.c: 124: Temp_Arr[4] = Temp_Arr[3];
 25256  017434  C3BD  F3C0         	movff	_Temp_Arr+9,_Temp_Arr+12
 25257  017438  C3BE  F3C1         	movff	_Temp_Arr+10,_Temp_Arr+13
 25258  01743C  C3BF  F3C2         	movff	_Temp_Arr+11,_Temp_Arr+14
 25259                           
 25260                           ;Power_Meter.c: 125: Temp_Arr[3] = Temp_Arr[2];
 25261  017440  C3BA  F3BD         	movff	_Temp_Arr+6,_Temp_Arr+9
 25262  017444  C3BB  F3BE         	movff	_Temp_Arr+7,_Temp_Arr+10
 25263  017448  C3BC  F3BF         	movff	_Temp_Arr+8,_Temp_Arr+11
 25264                           
 25265                           ;Power_Meter.c: 126: Temp_Arr[2] = Temp_Arr[1];
 25266  01744C  C3B7  F3BA         	movff	_Temp_Arr+3,_Temp_Arr+6
 25267  017450  C3B8  F3BB         	movff	_Temp_Arr+4,_Temp_Arr+7
 25268  017454  C3B9  F3BC         	movff	_Temp_Arr+5,_Temp_Arr+8
 25269                           
 25270                           ;Power_Meter.c: 127: Temp_Arr[1] = Temp_Arr[0];
 25271  017458  C3B4  F3B7         	movff	_Temp_Arr,_Temp_Arr+3
 25272  01745C  C3B5  F3B8         	movff	_Temp_Arr+1,_Temp_Arr+4
 25273  017460  C3B6  F3B9         	movff	_Temp_Arr+2,_Temp_Arr+5
 25274                           
 25275                           ;Power_Meter.c: 128: Temp_Arr[0] = Temprature;
 25276  017464  C227  F3B4         	movff	_Temprature,_Temp_Arr
 25277  017468  C228  F3B5         	movff	_Temprature+1,_Temp_Arr+1
 25278  01746C  C229  F3B6         	movff	_Temprature+2,_Temp_Arr+2
 25279                           
 25280                           ;Power_Meter.c: 130: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25281  017470  C3BA  F086         	movff	_Temp_Arr+6,___ftadd@f2
 25282  017474  C3BB  F087         	movff	_Temp_Arr+7,___ftadd@f2+1
 25283  017478  C3BC  F088         	movff	_Temp_Arr+8,___ftadd@f2+2
 25284  01747C  C3B7  F083         	movff	_Temp_Arr+3,___ftadd@f1
 25285  017480  C3B8  F084         	movff	_Temp_Arr+4,___ftadd@f1+1
 25286  017484  C3B9  F085         	movff	_Temp_Arr+5,___ftadd@f1+2
 25287  017488  ECE4  F0AF         	call	___ftadd	;wreg free
 25288  01748C  C083  F0AA         	movff	?___ftadd,_Temp_Read$8111
 25289  017490  C084  F0AB         	movff	?___ftadd+1,_Temp_Read$8111+1
 25290  017494  C085  F0AC         	movff	?___ftadd+2,_Temp_Read$8111+2
 25291                           
 25292                           ;Power_Meter.c: 130: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25293  017498  C3BD  F086         	movff	_Temp_Arr+9,___ftadd@f2
 25294  01749C  C3BE  F087         	movff	_Temp_Arr+10,___ftadd@f2+1
 25295  0174A0  C3BF  F088         	movff	_Temp_Arr+11,___ftadd@f2+2
 25296  0174A4  C0AA  F083         	movff	_Temp_Read$8111,___ftadd@f1
 25297  0174A8  C0AB  F084         	movff	_Temp_Read$8111+1,___ftadd@f1+1
 25298  0174AC  C0AC  F085         	movff	_Temp_Read$8111+2,___ftadd@f1+2
 25299  0174B0  ECE4  F0AF         	call	___ftadd	;wreg free
 25300  0174B4  C083  F0AD         	movff	?___ftadd,_Temp_Read$8112
 25301  0174B8  C084  F0AE         	movff	?___ftadd+1,_Temp_Read$8112+1
 25302  0174BC  C085  F0AF         	movff	?___ftadd+2,_Temp_Read$8112+2
 25303                           
 25304                           ;Power_Meter.c: 130: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25305  0174C0  C3C0  F086         	movff	_Temp_Arr+12,___ftadd@f2
 25306  0174C4  C3C1  F087         	movff	_Temp_Arr+13,___ftadd@f2+1
 25307  0174C8  C3C2  F088         	movff	_Temp_Arr+14,___ftadd@f2+2
 25308  0174CC  C0AD  F083         	movff	_Temp_Read$8112,___ftadd@f1
 25309  0174D0  C0AE  F084         	movff	_Temp_Read$8112+1,___ftadd@f1+1
 25310  0174D4  C0AF  F085         	movff	_Temp_Read$8112+2,___ftadd@f1+2
 25311  0174D8  ECE4  F0AF         	call	___ftadd	;wreg free
 25312  0174DC  C083  F0B0         	movff	?___ftadd,_Temp_Read$8113
 25313  0174E0  C084  F0B1         	movff	?___ftadd+1,_Temp_Read$8113+1
 25314  0174E4  C085  F0B2         	movff	?___ftadd+2,_Temp_Read$8113+2
 25315                           
 25316                           ;Power_Meter.c: 130: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25317  0174E8  C3C3  F086         	movff	_Temp_Arr+15,___ftadd@f2
 25318  0174EC  C3C4  F087         	movff	_Temp_Arr+16,___ftadd@f2+1
 25319  0174F0  C3C5  F088         	movff	_Temp_Arr+17,___ftadd@f2+2
 25320  0174F4  C0B0  F083         	movff	_Temp_Read$8113,___ftadd@f1
 25321  0174F8  C0B1  F084         	movff	_Temp_Read$8113+1,___ftadd@f1+1
 25322  0174FC  C0B2  F085         	movff	_Temp_Read$8113+2,___ftadd@f1+2
 25323  017500  ECE4  F0AF         	call	___ftadd	;wreg free
 25324  017504  C083  F0B3         	movff	?___ftadd,_Temp_Read$8114
 25325  017508  C084  F0B4         	movff	?___ftadd+1,_Temp_Read$8114+1
 25326  01750C  C085  F0B5         	movff	?___ftadd+2,_Temp_Read$8114+2
 25327                           
 25328                           ;Power_Meter.c: 130: Temperature_Avg = ((Temp_Arr[0] + Temp_Arr[1] + Temp_Arr[2] + Temp_
      +                          Arr[3] + Temp_Arr[4] + Temp_Arr[5]) / 6);
 25329  017510  C3B4  F086         	movff	_Temp_Arr,___ftadd@f2
 25330  017514  C3B5  F087         	movff	_Temp_Arr+1,___ftadd@f2+1
 25331  017518  C3B6  F088         	movff	_Temp_Arr+2,___ftadd@f2+2
 25332  01751C  C0B3  F083         	movff	_Temp_Read$8114,___ftadd@f1
 25333  017520  C0B4  F084         	movff	_Temp_Read$8114+1,___ftadd@f1+1
 25334  017524  C0B5  F085         	movff	_Temp_Read$8114+2,___ftadd@f1+2
 25335  017528  ECE4  F0AF         	call	___ftadd	;wreg free
 25336  01752C  C083  F09B         	movff	?___ftadd,___ftdiv@f1
 25337  017530  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
 25338  017534  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
 25339  017538  0E00               	movlw	0
 25340  01753A  0100               	movlb	0	; () banked
 25341  01753C  6F9E               	movwf	___ftdiv@f2& (0+255),b
 25342  01753E  0EC0               	movlw	192
 25343  017540  0100               	movlb	0	; () banked
 25344  017542  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 25345  017544  0E40               	movlw	64
 25346  017546  0100               	movlb	0	; () banked
 25347  017548  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 25348  01754A  EC89  F0BF         	call	___ftdiv	;wreg free
 25349  01754E  C09B  F65D         	movff	?___ftdiv,_Temperature_Avg
 25350  017552  C09C  F65E         	movff	?___ftdiv+1,_Temperature_Avg+1
 25351  017556  C09D  F65F         	movff	?___ftdiv+2,_Temperature_Avg+2
 25352  01755A  0012               	return		;funcret
 25353  01755C                     __end_of_Temp_Read:
 25354                           	opt stack 0
 25355                           tblptru	equ	0xFF8
 25356                           tblptrh	equ	0xFF7
 25357                           tblptrl	equ	0xFF6
 25358                           tablat	equ	0xFF5
 25359                           prodh	equ	0xFF4
 25360                           prodl	equ	0xFF3
 25361                           intcon	equ	0xFF2
 25362                           postinc0	equ	0xFEE
 25363                           wreg	equ	0xFE8
 25364                           postdec1	equ	0xFE5
 25365                           fsr1h	equ	0xFE2
 25366                           fsr1l	equ	0xFE1
 25367                           indf2	equ	0xFDF
 25368                           postinc2	equ	0xFDE
 25369                           postdec2	equ	0xFDD
 25370                           fsr2h	equ	0xFDA
 25371                           fsr2l	equ	0xFD9
 25372                           status	equ	0xFD8
 25373                           
 25374 ;; *************** function _Rampup_state_function *****************
 25375 ;; Defined at:
 25376 ;;		line 30 in file "state.c"
 25377 ;; Parameters:    Size  Location     Type
 25378 ;;		None
 25379 ;; Auto vars:     Size  Location     Type
 25380 ;;		None
 25381 ;; Return value:  Size  Location     Type
 25382 ;;                  1    wreg      void 
 25383 ;; Registers used:
 25384 ;;		wreg, status,2, status,0, cstack
 25385 ;; Tracked objects:
 25386 ;;		On entry : 0/0
 25387 ;;		On exit  : 0/0
 25388 ;;		Unchanged: 0/0
 25389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25394 ;;Total ram usage:        0 bytes
 25395 ;; Hardware stack levels used:    1
 25396 ;; Hardware stack levels required when called:    7
 25397 ;; This function calls:
 25398 ;;		_RAMP_UP
 25399 ;; This function is called by:
 25400 ;;		_main
 25401 ;; This function uses a non-reentrant model
 25402 ;;
 25403                           
 25404                           	psect	text82
 25405  01AB00                     __ptext82:
 25406                           	opt stack 0
 25407  01AB00                     _Rampup_state_function:
 25408                           	opt stack 23
 25409                           
 25410                           ;state.c: 32: RAMP_UP();
 25411                           
 25412                           ;incstack = 0
 25413  01AB00  EC92  F0C4         	call	_RAMP_UP	;wreg free
 25414  01AB04  0012               	return		;funcret
 25415  01AB06                     __end_of_Rampup_state_function:
 25416                           	opt stack 0
 25417                           tblptru	equ	0xFF8
 25418                           tblptrh	equ	0xFF7
 25419                           tblptrl	equ	0xFF6
 25420                           tablat	equ	0xFF5
 25421                           prodh	equ	0xFF4
 25422                           prodl	equ	0xFF3
 25423                           intcon	equ	0xFF2
 25424                           postinc0	equ	0xFEE
 25425                           wreg	equ	0xFE8
 25426                           postdec1	equ	0xFE5
 25427                           fsr1h	equ	0xFE2
 25428                           fsr1l	equ	0xFE1
 25429                           indf2	equ	0xFDF
 25430                           postinc2	equ	0xFDE
 25431                           postdec2	equ	0xFDD
 25432                           fsr2h	equ	0xFDA
 25433                           fsr2l	equ	0xFD9
 25434                           status	equ	0xFD8
 25435                           
 25436 ;; *************** function _RAMP_UP *****************
 25437 ;; Defined at:
 25438 ;;		line 22 in file "RAMP_UP.c"
 25439 ;; Parameters:    Size  Location     Type
 25440 ;;		None
 25441 ;; Auto vars:     Size  Location     Type
 25442 ;;		None
 25443 ;; Return value:  Size  Location     Type
 25444 ;;                  1    wreg      void 
 25445 ;; Registers used:
 25446 ;;		wreg, status,2, status,0, cstack
 25447 ;; Tracked objects:
 25448 ;;		On entry : 0/0
 25449 ;;		On exit  : 0/0
 25450 ;;		Unchanged: 0/0
 25451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25455 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25456 ;;Total ram usage:        1 bytes
 25457 ;; Hardware stack levels used:    1
 25458 ;; Hardware stack levels required when called:    6
 25459 ;; This function calls:
 25460 ;;		_Pitch_Release
 25461 ;;		_Turbine_Pitching
 25462 ;;		_VFD_Data_Kill
 25463 ;;		_VFD_Freq_Step_up
 25464 ;; This function is called by:
 25465 ;;		_Rampup_state_function
 25466 ;; This function uses a non-reentrant model
 25467 ;;
 25468                           
 25469                           	psect	text83
 25470  018924                     __ptext83:
 25471                           	opt stack 0
 25472  018924                     _RAMP_UP:
 25473                           	opt stack 23
 25474                           
 25475                           ;RAMP_UP.c: 24: switch (VFD_RAMP)
 25476                           
 25477                           ;incstack = 0
 25478  018924  D069               	goto	l21461
 25479  018926                     l7042:
 25480                           
 25481                           ; BSR set to: 1
 25482                           ;RAMP_UP.c: 27: (RD0 = 1);
 25483  018926  8083               	bsf	3971,0,c	;volatile
 25484                           
 25485                           ; BSR set to: 1
 25486                           ;RAMP_UP.c: 28: VFD_On_Off = 0;
 25487  018928  0E00               	movlw	0
 25488  01892A  0101               	movlb	1	; () banked
 25489  01892C  6FD6               	movwf	_VFD_On_Off& (0+255),b
 25490                           
 25491                           ;RAMP_UP.c: 29: One_Sec_Delay_vab = 1;
 25492  01892E  0E01               	movlw	1
 25493  018930  0101               	movlb	1	; () banked
 25494  018932  6FAB               	movwf	_One_Sec_Delay_vab& (0+255),b
 25495                           
 25496                           ;RAMP_UP.c: 30: if(One_sec_Delay_Flag)
 25497  018934  0101               	movlb	1	; () banked
 25498  018936  51AE               	movf	_One_sec_Delay_Flag& (0+255),w,b
 25499  018938  B4D8               	btfsc	status,2,c
 25500  01893A  0012               	return	
 25501                           
 25502                           ; BSR set to: 1
 25503                           ;RAMP_UP.c: 31: {
 25504                           ;RAMP_UP.c: 32: VFD_RAMP = VFD_OUT;
 25505  01893C  0E01               	movlw	1
 25506  01893E  0101               	movlb	1	; () banked
 25507  018940  6FD7               	movwf	_VFD_RAMP& (0+255),b
 25508                           
 25509                           ;RAMP_UP.c: 33: One_Sec_Delay_vab = 0;
 25510  018942  0E00               	movlw	0
 25511  018944  0101               	movlb	1	; () banked
 25512  018946  6FAB               	movwf	_One_Sec_Delay_vab& (0+255),b
 25513                           
 25514                           ;RAMP_UP.c: 34: One_sec_Delay_Flag = 0;
 25515  018948  0E00               	movlw	0
 25516  01894A  0101               	movlb	1	; () banked
 25517  01894C  6FAE               	movwf	_One_sec_Delay_Flag& (0+255),b
 25518                           
 25519                           ; BSR set to: 1
 25520                           ;RAMP_UP.c: 35: }
 25521                           ;RAMP_UP.c: 36: break;
 25522  01894E  0012               	return	
 25523  018950                     l7045:
 25524                           
 25525                           ; BSR set to: 1
 25526                           ;RAMP_UP.c: 39: (RD1 = 1);
 25527  018950  8283               	bsf	3971,1,c	;volatile
 25528                           
 25529                           ; BSR set to: 1
 25530                           ;RAMP_UP.c: 40: if(DC_Bus_Voltage_Flag)
 25531  018952  0101               	movlb	1	; () banked
 25532  018954  516B               	movf	_DC_Bus_Voltage_Flag& (0+255),w,b
 25533  018956  B4D8               	btfsc	status,2,c
 25534  018958  D006               	goto	l7046
 25535                           
 25536                           ; BSR set to: 1
 25537                           ;RAMP_UP.c: 41: {
 25538                           ;RAMP_UP.c: 42: DC_Bus_Voltage_Flag = 0;
 25539  01895A  0E00               	movlw	0
 25540  01895C  0101               	movlb	1	; () banked
 25541  01895E  6F6B               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 25542                           
 25543                           ;RAMP_UP.c: 43: VFD_RAMP = VFD_Frequency_Step_up;
 25544  018960  0E02               	movlw	2
 25545  018962  0101               	movlb	1	; () banked
 25546  018964  6FD7               	movwf	_VFD_RAMP& (0+255),b
 25547  018966                     l7046:
 25548                           
 25549                           ; BSR set to: 1
 25550                           ;RAMP_UP.c: 44: }
 25551                           ;RAMP_UP.c: 45: Desired_Frequency = (8);
 25552  018966  0E08               	movlw	8
 25553  018968  0100               	movlb	0	; () banked
 25554  01896A  6FD5               	movwf	_Desired_Frequency& (0+255),b
 25555                           
 25556                           ;RAMP_UP.c: 46: break;
 25557  01896C  0012               	return	
 25558  01896E                     l21425:
 25559                           
 25560                           ;RAMP_UP.c: 49: VFD_On_Off = 1;
 25561  01896E  0E01               	movlw	1
 25562  018970  0101               	movlb	1	; () banked
 25563  018972  6FD6               	movwf	_VFD_On_Off& (0+255),b
 25564                           
 25565                           ;RAMP_UP.c: 50: if(DC_Bus_Voltage_Flag)
 25566  018974  0101               	movlb	1	; () banked
 25567  018976  516B               	movf	_DC_Bus_Voltage_Flag& (0+255),w,b
 25568  018978  B4D8               	btfsc	status,2,c
 25569  01897A  D00C               	goto	l21433
 25570                           
 25571                           ; BSR set to: 1
 25572                           ;RAMP_UP.c: 51: {
 25573                           ;RAMP_UP.c: 52: DC_Bus_Voltage_Flag = 0;
 25574  01897C  0E00               	movlw	0
 25575  01897E  0101               	movlb	1	; () banked
 25576  018980  6F6B               	movwf	_DC_Bus_Voltage_Flag& (0+255),b
 25577                           
 25578                           ;RAMP_UP.c: 61: if(Slip_Flag)
 25579  018982  0101               	movlb	1	; () banked
 25580  018984  51B9               	movf	_Slip_Flag& (0+255),w,b
 25581  018986  B4D8               	btfsc	status,2,c
 25582  018988  D005               	goto	l21433
 25583                           
 25584                           ; BSR set to: 1
 25585                           ;RAMP_UP.c: 62: {
 25586                           ;RAMP_UP.c: 63: Slip_Flag = 0;
 25587  01898A  0E00               	movlw	0
 25588  01898C  0101               	movlb	1	; () banked
 25589  01898E  6FB9               	movwf	_Slip_Flag& (0+255),b
 25590                           
 25591                           ; BSR set to: 1
 25592                           ;RAMP_UP.c: 64: VFD_Freq_Step_up();
 25593  018990  EC1C  F0C3         	call	_VFD_Freq_Step_up	;wreg free
 25594  018994                     l21433:
 25595                           
 25596                           ;RAMP_UP.c: 65: }
 25597                           ;RAMP_UP.c: 66: }
 25598                           ;RAMP_UP.c: 67: Pitch_Release();
 25599  018994  EC11  F0D3         	call	_Pitch_Release	;wreg free
 25600                           
 25601                           ;RAMP_UP.c: 68: break;
 25602  018998  0012               	return	
 25603  01899A                     l7050:
 25604                           
 25605                           ; BSR set to: 1
 25606                           ;RAMP_UP.c: 71: (RD0 = 0);
 25607  01899A  9083               	bcf	3971,0,c	;volatile
 25608                           
 25609                           ; BSR set to: 1
 25610                           ;RAMP_UP.c: 72: VFD_On_Off = 0;
 25611  01899C  0E00               	movlw	0
 25612  01899E  0101               	movlb	1	; () banked
 25613  0189A0  6FD6               	movwf	_VFD_On_Off& (0+255),b
 25614                           
 25615                           ;RAMP_UP.c: 73: One_Sec_Delay_vab = 1;
 25616  0189A2  0E01               	movlw	1
 25617  0189A4  0101               	movlb	1	; () banked
 25618  0189A6  6FAB               	movwf	_One_Sec_Delay_vab& (0+255),b
 25619                           
 25620                           ;RAMP_UP.c: 74: if(One_sec_Delay_Flag)
 25621  0189A8  0101               	movlb	1	; () banked
 25622  0189AA  51AE               	movf	_One_sec_Delay_Flag& (0+255),w,b
 25623  0189AC  B4D8               	btfsc	status,2,c
 25624  0189AE  0012               	return	
 25625                           
 25626                           ; BSR set to: 1
 25627                           ;RAMP_UP.c: 75: {
 25628                           ;RAMP_UP.c: 76: One_sec_Delay_Flag = 0;
 25629  0189B0  0E00               	movlw	0
 25630  0189B2  0101               	movlb	1	; () banked
 25631  0189B4  6FAE               	movwf	_One_sec_Delay_Flag& (0+255),b
 25632                           
 25633                           ;RAMP_UP.c: 77: One_Sec_Delay_vab = 0;
 25634  0189B6  0E00               	movlw	0
 25635  0189B8  0101               	movlb	1	; () banked
 25636  0189BA  6FAB               	movwf	_One_Sec_Delay_vab& (0+255),b
 25637                           
 25638                           ; BSR set to: 1
 25639                           ;RAMP_UP.c: 78: (RD1 = 0);
 25640  0189BC  9283               	bcf	3971,1,c	;volatile
 25641                           
 25642                           ; BSR set to: 1
 25643                           ;RAMP_UP.c: 79: _delay((unsigned long)((50)*(8000000/4000.0)));
 25644  0189BE  0E82               	movlw	130
 25645  0189C0  0100               	movlb	0	; () banked
 25646  0189C2  6FAA               	movwf	??_RAMP_UP& (0+255),b
 25647  0189C4  0EDE               	movlw	222
 25648  0189C6                     u15897:
 25649  0189C6  2EE8               	decfsz	wreg,f,c
 25650  0189C8  D7FE               	goto	u15897
 25651  0189CA  2FAA               	decfsz	??_RAMP_UP& (0+255),f,b
 25652  0189CC  D7FC               	goto	u15897
 25653                           
 25654                           ;RAMP_UP.c: 80: (RD2 = 1);
 25655  0189CE  8483               	bsf	3971,2,c	;volatile
 25656                           
 25657                           ;RAMP_UP.c: 81: Turbine_state = RUNNING_STATE;
 25658  0189D0  0E02               	movlw	2
 25659  0189D2  0100               	movlb	0	; () banked
 25660  0189D4  6FD8               	movwf	_Turbine_state& (0+255),b
 25661                           
 25662                           ; BSR set to: 0
 25663                           ;RAMP_UP.c: 82: VFD_Data_Kill();
 25664  0189D6  EC98  F0D3         	call	_VFD_Data_Kill	;wreg free
 25665                           
 25666                           ;RAMP_UP.c: 83: }
 25667                           ;RAMP_UP.c: 84: break;
 25668  0189DA  0012               	return	
 25669  0189DC                     l21449:
 25670                           
 25671                           ;RAMP_UP.c: 87: VFD_On_Off = 0;
 25672  0189DC  0E00               	movlw	0
 25673  0189DE  0101               	movlb	1	; () banked
 25674  0189E0  6FD6               	movwf	_VFD_On_Off& (0+255),b
 25675                           
 25676                           ;RAMP_UP.c: 88: Desired_Frequency = 0;
 25677  0189E2  0E00               	movlw	0
 25678  0189E4  0100               	movlb	0	; () banked
 25679  0189E6  6FD5               	movwf	_Desired_Frequency& (0+255),b
 25680                           
 25681                           ; BSR set to: 0
 25682                           ;RAMP_UP.c: 89: Turbine_Pitching();
 25683  0189E8  EC86  F0D5         	call	_Turbine_Pitching	;wreg free
 25684                           
 25685                           ;RAMP_UP.c: 90: (RD0 = 0);
 25686  0189EC  9083               	bcf	3971,0,c	;volatile
 25687                           
 25688                           ;RAMP_UP.c: 91: (RD1 = 0);
 25689  0189EE  9283               	bcf	3971,1,c	;volatile
 25690                           
 25691                           ;RAMP_UP.c: 92: Turbine_state = STOPPING_STATE;
 25692  0189F0  0E03               	movlw	3
 25693  0189F2  0100               	movlb	0	; () banked
 25694  0189F4  6FD8               	movwf	_Turbine_state& (0+255),b
 25695                           
 25696                           ; BSR set to: 0
 25697                           ;RAMP_UP.c: 94: }
 25698                           
 25699                           ;RAMP_UP.c: 93: break;
 25700  0189F6  0012               	return	
 25701  0189F8                     l21461:
 25702  0189F8  0101               	movlb	1	; () banked
 25703  0189FA  51D7               	movf	_VFD_RAMP& (0+255),w,b
 25704                           
 25705                           ; Switch size 1, requested type "space"
 25706                           ; Number of cases is 5, Range of values is 0 to 4
 25707                           ; switch strategies available:
 25708                           ; Name         Instructions Cycles
 25709                           ; simple_byte           16     9 (average)
 25710                           ;	Chosen strategy is simple_byte
 25711  0189FC  0A00               	xorlw	0	; case 0
 25712  0189FE  B4D8               	btfsc	status,2,c
 25713  018A00  D792               	goto	l7042
 25714  018A02  0A01               	xorlw	1	; case 1
 25715  018A04  B4D8               	btfsc	status,2,c
 25716  018A06  D7A4               	goto	l7045
 25717  018A08  0A03               	xorlw	3	; case 2
 25718  018A0A  B4D8               	btfsc	status,2,c
 25719  018A0C  D7B0               	goto	l21425
 25720  018A0E  0A01               	xorlw	1	; case 3
 25721  018A10  B4D8               	btfsc	status,2,c
 25722  018A12  D7C3               	goto	l7050
 25723  018A14  0A07               	xorlw	7	; case 4
 25724  018A16  A4D8               	btfss	status,2,c
 25725  018A18  0012               	return	
 25726  018A1A  D7E0               	goto	l21449
 25727  018A1C                     __end_of_RAMP_UP:
 25728                           	opt stack 0
 25729                           tblptru	equ	0xFF8
 25730                           tblptrh	equ	0xFF7
 25731                           tblptrl	equ	0xFF6
 25732                           tablat	equ	0xFF5
 25733                           prodh	equ	0xFF4
 25734                           prodl	equ	0xFF3
 25735                           intcon	equ	0xFF2
 25736                           postinc0	equ	0xFEE
 25737                           wreg	equ	0xFE8
 25738                           postdec1	equ	0xFE5
 25739                           fsr1h	equ	0xFE2
 25740                           fsr1l	equ	0xFE1
 25741                           indf2	equ	0xFDF
 25742                           postinc2	equ	0xFDE
 25743                           postdec2	equ	0xFDD
 25744                           fsr2h	equ	0xFDA
 25745                           fsr2l	equ	0xFD9
 25746                           status	equ	0xFD8
 25747                           
 25748 ;; *************** function _VFD_Freq_Step_up *****************
 25749 ;; Defined at:
 25750 ;;		line 96 in file "RAMP_UP.c"
 25751 ;; Parameters:    Size  Location     Type
 25752 ;;		None
 25753 ;; Auto vars:     Size  Location     Type
 25754 ;;		None
 25755 ;; Return value:  Size  Location     Type
 25756 ;;                  1    wreg      void 
 25757 ;; Registers used:
 25758 ;;		wreg, status,2, status,0, cstack
 25759 ;; Tracked objects:
 25760 ;;		On entry : 0/0
 25761 ;;		On exit  : 0/0
 25762 ;;		Unchanged: 0/0
 25763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25768 ;;Total ram usage:        0 bytes
 25769 ;; Hardware stack levels used:    1
 25770 ;; Hardware stack levels required when called:    5
 25771 ;; This function calls:
 25772 ;;		___ftdiv
 25773 ;;		___ftge
 25774 ;;		___ftmul
 25775 ;; This function is called by:
 25776 ;;		_RAMP_UP
 25777 ;; This function uses a non-reentrant model
 25778 ;;
 25779                           
 25780                           	psect	text84
 25781  018638                     __ptext84:
 25782                           	opt stack 0
 25783  018638                     _VFD_Freq_Step_up:
 25784                           	opt stack 23
 25785                           
 25786                           ;RAMP_UP.c: 98: if(Desired_Frequency < 50)
 25787                           
 25788                           ;incstack = 0
 25789  018638  0E32               	movlw	50
 25790  01863A  0100               	movlb	0	; () banked
 25791  01863C  61D5               	cpfslt	_Desired_Frequency& (0+255),b
 25792  01863E  D002               	goto	l20905
 25793                           
 25794                           ; BSR set to: 0
 25795                           ;RAMP_UP.c: 99: {
 25796                           ;RAMP_UP.c: 100: Desired_Frequency++;
 25797  018640  0100               	movlb	0	; () banked
 25798  018642  2BD5               	incf	_Desired_Frequency& (0+255),f,b
 25799  018644                     l20905:
 25800                           
 25801                           ; BSR set to: 0
 25802                           ;RAMP_UP.c: 101: }
 25803                           ;RAMP_UP.c: 102: GENERATOR_RPM_THEORY = (120*50)/(6) ;
 25804  018644  0E00               	movlw	0
 25805  018646  0102               	movlb	2	; () banked
 25806  018648  6F15               	movwf	_GENERATOR_RPM_THEORY& (0+255),b
 25807  01864A  0E7A               	movlw	122
 25808  01864C  0102               	movlb	2	; () banked
 25809  01864E  6F16               	movwf	(_GENERATOR_RPM_THEORY+1)& (0+255),b
 25810  018650  0E44               	movlw	68
 25811  018652  0102               	movlb	2	; () banked
 25812  018654  6F17               	movwf	(_GENERATOR_RPM_THEORY+2)& (0+255),b
 25813                           
 25814                           ; BSR set to: 2
 25815                           ;RAMP_UP.c: 103: TURBINE_RPM_THEORY = GENERATOR_RPM_THEORY / (17.54) ;
 25816  018656  C215  F09B         	movff	_GENERATOR_RPM_THEORY,___ftdiv@f1
 25817  01865A  C216  F09C         	movff	_GENERATOR_RPM_THEORY+1,___ftdiv@f1+1
 25818  01865E  C217  F09D         	movff	_GENERATOR_RPM_THEORY+2,___ftdiv@f1+2
 25819  018662  0E52               	movlw	82
 25820  018664  0100               	movlb	0	; () banked
 25821  018666  6F9E               	movwf	___ftdiv@f2& (0+255),b
 25822  018668  0E8C               	movlw	140
 25823  01866A  0100               	movlb	0	; () banked
 25824  01866C  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 25825  01866E  0E41               	movlw	65
 25826  018670  0100               	movlb	0	; () banked
 25827  018672  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 25828  018674  EC89  F0BF         	call	___ftdiv	;wreg free
 25829  018678  C09B  F4A8         	movff	?___ftdiv,_TURBINE_RPM_THEORY
 25830  01867C  C09C  F4A9         	movff	?___ftdiv+1,_TURBINE_RPM_THEORY+1
 25831  018680  C09D  F4AA         	movff	?___ftdiv+2,_TURBINE_RPM_THEORY+2
 25832                           
 25833                           ;RAMP_UP.c: 104: RAMP_UP_TURBINE_CUT_IN_RPM = (TURBINE_RPM_THEORY * 0.92) ;
 25834  018684  C4A8  F06A         	movff	_TURBINE_RPM_THEORY,___ftmul@f1
 25835  018688  C4A9  F06B         	movff	_TURBINE_RPM_THEORY+1,___ftmul@f1+1
 25836  01868C  C4AA  F06C         	movff	_TURBINE_RPM_THEORY+2,___ftmul@f1+2
 25837  018690  0E85               	movlw	133
 25838  018692  0100               	movlb	0	; () banked
 25839  018694  6F6D               	movwf	___ftmul@f2& (0+255),b
 25840  018696  0E6B               	movlw	107
 25841  018698  0100               	movlb	0	; () banked
 25842  01869A  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 25843  01869C  0E3F               	movlw	63
 25844  01869E  0100               	movlb	0	; () banked
 25845  0186A0  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 25846  0186A2  EC83  F0BD         	call	___ftmul	;wreg free
 25847  0186A6  C06A  F499         	movff	?___ftmul,_RAMP_UP_TURBINE_CUT_IN_RPM
 25848  0186AA  C06B  F49A         	movff	?___ftmul+1,_RAMP_UP_TURBINE_CUT_IN_RPM+1
 25849  0186AE  C06C  F49B         	movff	?___ftmul+2,_RAMP_UP_TURBINE_CUT_IN_RPM+2
 25850                           
 25851                           ;RAMP_UP.c: 105: RAMP_UP_GENERATOR_CUT_IN_RPM = (GENERATOR_RPM_THEORY * 0.90) ;
 25852  0186B2  C215  F06A         	movff	_GENERATOR_RPM_THEORY,___ftmul@f1
 25853  0186B6  C216  F06B         	movff	_GENERATOR_RPM_THEORY+1,___ftmul@f1+1
 25854  0186BA  C217  F06C         	movff	_GENERATOR_RPM_THEORY+2,___ftmul@f1+2
 25855  0186BE  0E66               	movlw	102
 25856  0186C0  0100               	movlb	0	; () banked
 25857  0186C2  6F6D               	movwf	___ftmul@f2& (0+255),b
 25858  0186C4  0E66               	movlw	102
 25859  0186C6  0100               	movlb	0	; () banked
 25860  0186C8  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 25861  0186CA  0E3F               	movlw	63
 25862  0186CC  0100               	movlb	0	; () banked
 25863  0186CE  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 25864  0186D0  EC83  F0BD         	call	___ftmul	;wreg free
 25865  0186D4  C06A  F496         	movff	?___ftmul,_RAMP_UP_GENERATOR_CUT_IN_RPM
 25866  0186D8  C06B  F497         	movff	?___ftmul+1,_RAMP_UP_GENERATOR_CUT_IN_RPM+1
 25867  0186DC  C06C  F498         	movff	?___ftmul+2,_RAMP_UP_GENERATOR_CUT_IN_RPM+2
 25868                           
 25869                           ;RAMP_UP.c: 107: if( (Turbine_RPM >= RAMP_UP_TURBINE_CUT_IN_RPM) && (Generator_RPM_FLT >
      +                          = RAMP_UP_GENERATOR_CUT_IN_RPM) )
 25870  0186E0  C02D  F08F         	movff	_Turbine_RPM,___ftge@ff1
 25871  0186E4  C02E  F090         	movff	_Turbine_RPM+1,___ftge@ff1+1
 25872  0186E8  C02F  F091         	movff	_Turbine_RPM+2,___ftge@ff1+2
 25873  0186EC  C499  F092         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM,___ftge@ff2
 25874  0186F0  C49A  F093         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM+1,___ftge@ff2+1
 25875  0186F4  C49B  F094         	movff	_RAMP_UP_TURBINE_CUT_IN_RPM+2,___ftge@ff2+2
 25876  0186F8  EC09  F0C8         	call	___ftge	;wreg free
 25877  0186FC  0100               	movlb	0	; () banked
 25878  0186FE  A0D8               	btfss	status,0,c
 25879  018700  0012               	return	
 25880                           
 25881                           ; BSR set to: 0
 25882  018702  C0CF  F08F         	movff	_Generator_RPM_FLT,___ftge@ff1
 25883  018706  C0D0  F090         	movff	_Generator_RPM_FLT+1,___ftge@ff1+1
 25884  01870A  C0D1  F091         	movff	_Generator_RPM_FLT+2,___ftge@ff1+2
 25885  01870E  C496  F092         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM,___ftge@ff2
 25886  018712  C497  F093         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM+1,___ftge@ff2+1
 25887  018716  C498  F094         	movff	_RAMP_UP_GENERATOR_CUT_IN_RPM+2,___ftge@ff2+2
 25888  01871A  EC09  F0C8         	call	___ftge	;wreg free
 25889  01871E  0100               	movlb	0	; () banked
 25890  018720  A0D8               	btfss	status,0,c
 25891  018722  0012               	return	
 25892                           
 25893                           ; BSR set to: 0
 25894                           ;RAMP_UP.c: 108: {
 25895                           ;RAMP_UP.c: 109: VFD_On_Off = 0;
 25896  018724  0E00               	movlw	0
 25897  018726  0101               	movlb	1	; () banked
 25898  018728  6FD6               	movwf	_VFD_On_Off& (0+255),b
 25899                           
 25900                           ;RAMP_UP.c: 110: VFD_RAMP = GRID_Connect;
 25901  01872A  0E03               	movlw	3
 25902  01872C  0101               	movlb	1	; () banked
 25903  01872E  6FD7               	movwf	_VFD_RAMP& (0+255),b
 25904  018730  0012               	return	
 25905  018732                     __end_of_VFD_Freq_Step_up:
 25906                           	opt stack 0
 25907                           tblptru	equ	0xFF8
 25908                           tblptrh	equ	0xFF7
 25909                           tblptrl	equ	0xFF6
 25910                           tablat	equ	0xFF5
 25911                           prodh	equ	0xFF4
 25912                           prodl	equ	0xFF3
 25913                           intcon	equ	0xFF2
 25914                           postinc0	equ	0xFEE
 25915                           wreg	equ	0xFE8
 25916                           postdec1	equ	0xFE5
 25917                           fsr1h	equ	0xFE2
 25918                           fsr1l	equ	0xFE1
 25919                           indf2	equ	0xFDF
 25920                           postinc2	equ	0xFDE
 25921                           postdec2	equ	0xFDD
 25922                           fsr2h	equ	0xFDA
 25923                           fsr2l	equ	0xFD9
 25924                           status	equ	0xFD8
 25925                           
 25926 ;; *************** function _VFD_Data_Kill *****************
 25927 ;; Defined at:
 25928 ;;		line 130 in file "RAMP_UP.c"
 25929 ;; Parameters:    Size  Location     Type
 25930 ;;		None
 25931 ;; Auto vars:     Size  Location     Type
 25932 ;;		None
 25933 ;; Return value:  Size  Location     Type
 25934 ;;                  1    wreg      void 
 25935 ;; Registers used:
 25936 ;;		wreg, status,2
 25937 ;; Tracked objects:
 25938 ;;		On entry : 0/0
 25939 ;;		On exit  : 0/0
 25940 ;;		Unchanged: 0/0
 25941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25946 ;;Total ram usage:        0 bytes
 25947 ;; Hardware stack levels used:    1
 25948 ;; Hardware stack levels required when called:    3
 25949 ;; This function calls:
 25950 ;;		Nothing
 25951 ;; This function is called by:
 25952 ;;		_Turbine_Start_up_1_Second
 25953 ;;		_Stopping_state_function
 25954 ;;		_RAMP_UP
 25955 ;; This function uses a non-reentrant model
 25956 ;;
 25957                           
 25958                           	psect	text85
 25959  01A730                     __ptext85:
 25960                           	opt stack 0
 25961  01A730                     _VFD_Data_Kill:
 25962                           	opt stack 25
 25963                           
 25964                           ;RAMP_UP.c: 132: VFD_Frequency = 0;
 25965                           
 25966                           ;incstack = 0
 25967  01A730  0E00               	movlw	0
 25968  01A732  0101               	movlb	1	; () banked
 25969  01A734  6FD4               	movwf	_VFD_Frequency& (0+255),b
 25970                           
 25971                           ;RAMP_UP.c: 133: Desired_Frequency = 0;
 25972  01A736  0E00               	movlw	0
 25973  01A738  0100               	movlb	0	; () banked
 25974  01A73A  6FD5               	movwf	_Desired_Frequency& (0+255),b
 25975                           
 25976                           ;RAMP_UP.c: 134: VFD_Run_Time_Counter = 0;
 25977  01A73C  0E00               	movlw	0
 25978  01A73E  0101               	movlb	1	; () banked
 25979  01A740  6F5C               	movwf	(_VFD_Run_Time_Counter+1)& (0+255),b
 25980  01A742  0E00               	movlw	0
 25981  01A744  6F5B               	movwf	_VFD_Run_Time_Counter& (0+255),b
 25982                           
 25983                           ;RAMP_UP.c: 135: Rotor_Slip_Error_Flag = 0;
 25984  01A746  0E00               	movlw	0
 25985  01A748  0101               	movlb	1	; () banked
 25986  01A74A  6FB5               	movwf	_Rotor_Slip_Error_Flag& (0+255),b
 25987                           
 25988                           ;RAMP_UP.c: 136: Motor_Slip_Error_Flag = 0;
 25989  01A74C  0E00               	movlw	0
 25990  01A74E  0101               	movlb	1	; () banked
 25991  01A750  6FA9               	movwf	_Motor_Slip_Error_Flag& (0+255),b
 25992                           
 25993                           ;RAMP_UP.c: 137: Slip_Error_Counter = 0;
 25994  01A752  0E00               	movlw	0
 25995  01A754  0101               	movlb	1	; () banked
 25996  01A756  6FB7               	movwf	_Slip_Error_Counter& (0+255),b
 25997                           
 25998                           ;RAMP_UP.c: 138: Slip_Error_Counter_1 = 0;
 25999  01A758  0E00               	movlw	0
 26000  01A75A  0101               	movlb	1	; () banked
 26001  01A75C  6FB8               	movwf	_Slip_Error_Counter_1& (0+255),b
 26002                           
 26003                           ; BSR set to: 1
 26004  01A75E  0012               	return		;funcret
 26005  01A760                     __end_of_VFD_Data_Kill:
 26006                           	opt stack 0
 26007                           tblptru	equ	0xFF8
 26008                           tblptrh	equ	0xFF7
 26009                           tblptrl	equ	0xFF6
 26010                           tablat	equ	0xFF5
 26011                           prodh	equ	0xFF4
 26012                           prodl	equ	0xFF3
 26013                           intcon	equ	0xFF2
 26014                           postinc0	equ	0xFEE
 26015                           wreg	equ	0xFE8
 26016                           postdec1	equ	0xFE5
 26017                           fsr1h	equ	0xFE2
 26018                           fsr1l	equ	0xFE1
 26019                           indf2	equ	0xFDF
 26020                           postinc2	equ	0xFDE
 26021                           postdec2	equ	0xFDD
 26022                           fsr2h	equ	0xFDA
 26023                           fsr2l	equ	0xFD9
 26024                           status	equ	0xFD8
 26025                           
 26026 ;; *************** function _Turbine_Pitching *****************
 26027 ;; Defined at:
 26028 ;;		line 40 in file "PITCHING.c"
 26029 ;; Parameters:    Size  Location     Type
 26030 ;;		None
 26031 ;; Auto vars:     Size  Location     Type
 26032 ;;		None
 26033 ;; Return value:  Size  Location     Type
 26034 ;;                  1    wreg      void 
 26035 ;; Registers used:
 26036 ;;		None
 26037 ;; Tracked objects:
 26038 ;;		On entry : 0/0
 26039 ;;		On exit  : 0/0
 26040 ;;		Unchanged: 0/0
 26041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26046 ;;Total ram usage:        0 bytes
 26047 ;; Hardware stack levels used:    1
 26048 ;; Hardware stack levels required when called:    3
 26049 ;; This function calls:
 26050 ;;		Nothing
 26051 ;; This function is called by:
 26052 ;;		_Stopping_state_function
 26053 ;;		_RAMP_UP
 26054 ;; This function uses a non-reentrant model
 26055 ;;
 26056                           
 26057                           	psect	text86
 26058  01AB0C                     __ptext86:
 26059                           	opt stack 0
 26060  01AB0C                     _Turbine_Pitching:
 26061                           	opt stack 25
 26062                           
 26063                           ;PITCHING.c: 42: (RB0 = 0);
 26064                           
 26065                           ; BSR set to: 1
 26066                           ;incstack = 0
 26067  01AB0C  9081               	bcf	3969,0,c	;volatile
 26068  01AB0E  0012               	return		;funcret
 26069  01AB10                     __end_of_Turbine_Pitching:
 26070                           	opt stack 0
 26071                           tblptru	equ	0xFF8
 26072                           tblptrh	equ	0xFF7
 26073                           tblptrl	equ	0xFF6
 26074                           tablat	equ	0xFF5
 26075                           prodh	equ	0xFF4
 26076                           prodl	equ	0xFF3
 26077                           intcon	equ	0xFF2
 26078                           postinc0	equ	0xFEE
 26079                           wreg	equ	0xFE8
 26080                           postdec1	equ	0xFE5
 26081                           fsr1h	equ	0xFE2
 26082                           fsr1l	equ	0xFE1
 26083                           indf2	equ	0xFDF
 26084                           postinc2	equ	0xFDE
 26085                           postdec2	equ	0xFDD
 26086                           fsr2h	equ	0xFDA
 26087                           fsr2l	equ	0xFD9
 26088                           status	equ	0xFD8
 26089                           
 26090 ;; *************** function _Pitch_Release *****************
 26091 ;; Defined at:
 26092 ;;		line 22 in file "PITCHING.c"
 26093 ;; Parameters:    Size  Location     Type
 26094 ;;		None
 26095 ;; Auto vars:     Size  Location     Type
 26096 ;;		None
 26097 ;; Return value:  Size  Location     Type
 26098 ;;                  2  6374[None  ] int 
 26099 ;; Registers used:
 26100 ;;		wreg, status,2, status,0
 26101 ;; Tracked objects:
 26102 ;;		On entry : 0/0
 26103 ;;		On exit  : 0/0
 26104 ;;		Unchanged: 0/0
 26105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26110 ;;Total ram usage:        0 bytes
 26111 ;; Hardware stack levels used:    1
 26112 ;; Hardware stack levels required when called:    3
 26113 ;; This function calls:
 26114 ;;		Nothing
 26115 ;; This function is called by:
 26116 ;;		_RAMP_UP
 26117 ;; This function uses a non-reentrant model
 26118 ;;
 26119                           
 26120                           	psect	text87
 26121  01A622                     __ptext87:
 26122                           	opt stack 0
 26123  01A622                     _Pitch_Release:
 26124                           	opt stack 25
 26125                           
 26126                           ;PITCHING.c: 24: if(Turbine_state == RAMPUP_STATE)
 26127                           
 26128                           ;incstack = 0
 26129  01A622  0100               	movlb	0	; () banked
 26130  01A624  05D8               	decf	_Turbine_state& (0+255),w,b
 26131  01A626  A4D8               	btfss	status,2,c
 26132  01A628  0012               	return	
 26133                           
 26134                           ; BSR set to: 0
 26135                           ;PITCHING.c: 25: {
 26136                           ;PITCHING.c: 26: if(Pitching_FlAG == 1)
 26137  01A62A  0102               	movlb	2	; () banked
 26138  01A62C  05A2               	decf	_Pitching_FlAG& (0+255),w,b
 26139  01A62E  0102               	movlb	2	; () banked
 26140  01A630  11A3               	iorwf	(_Pitching_FlAG+1)& (0+255),w,b
 26141  01A632  A4D8               	btfss	status,2,c
 26142  01A634  0012               	return	
 26143                           
 26144                           ; BSR set to: 2
 26145                           ;PITCHING.c: 27: {
 26146                           ;PITCHING.c: 28: Two_Sec_Delay_vab = 1;
 26147  01A636  0E01               	movlw	1
 26148  01A638  0101               	movlb	1	; () banked
 26149  01A63A  6FCD               	movwf	_Two_Sec_Delay_vab& (0+255),b
 26150                           
 26151                           ;PITCHING.c: 29: if(Two_sec_Delay_Flag)
 26152  01A63C  0101               	movlb	1	; () banked
 26153  01A63E  51CE               	movf	_Two_sec_Delay_Flag& (0+255),w,b
 26154  01A640  B4D8               	btfsc	status,2,c
 26155  01A642  0012               	return	
 26156                           
 26157                           ; BSR set to: 1
 26158                           ;PITCHING.c: 30: {
 26159                           ;PITCHING.c: 31: Two_Sec_Delay_vab = 0;
 26160  01A644  0E00               	movlw	0
 26161  01A646  0101               	movlb	1	; () banked
 26162  01A648  6FCD               	movwf	_Two_Sec_Delay_vab& (0+255),b
 26163                           
 26164                           ;PITCHING.c: 32: Two_sec_Delay_Flag = 0;
 26165  01A64A  0E00               	movlw	0
 26166  01A64C  0101               	movlb	1	; () banked
 26167  01A64E  6FCE               	movwf	_Two_sec_Delay_Flag& (0+255),b
 26168                           
 26169                           ; BSR set to: 1
 26170                           ;PITCHING.c: 33: (RB0 = 1);
 26171  01A650  8081               	bsf	3969,0,c	;volatile
 26172                           
 26173                           ;PITCHING.c: 34: Pitching_FlAG = 0;
 26174  01A652  0E00               	movlw	0
 26175  01A654  0102               	movlb	2	; () banked
 26176  01A656  6FA3               	movwf	(_Pitching_FlAG+1)& (0+255),b
 26177  01A658  0E00               	movlw	0
 26178  01A65A  6FA2               	movwf	_Pitching_FlAG& (0+255),b
 26179                           
 26180                           ; BSR set to: 2
 26181                           
 26182                           ; BSR set to: 2
 26183  01A65C  0012               	return	
 26184  01A65E                     __end_of_Pitch_Release:
 26185                           	opt stack 0
 26186                           tblptru	equ	0xFF8
 26187                           tblptrh	equ	0xFF7
 26188                           tblptrl	equ	0xFF6
 26189                           tablat	equ	0xFF5
 26190                           prodh	equ	0xFF4
 26191                           prodl	equ	0xFF3
 26192                           intcon	equ	0xFF2
 26193                           postinc0	equ	0xFEE
 26194                           wreg	equ	0xFE8
 26195                           postdec1	equ	0xFE5
 26196                           fsr1h	equ	0xFE2
 26197                           fsr1l	equ	0xFE1
 26198                           indf2	equ	0xFDF
 26199                           postinc2	equ	0xFDE
 26200                           postdec2	equ	0xFDD
 26201                           fsr2h	equ	0xFDA
 26202                           fsr2l	equ	0xFD9
 26203                           status	equ	0xFD8
 26204                           
 26205 ;; *************** function _R_PF_Calc *****************
 26206 ;; Defined at:
 26207 ;;		line 343 in file "Power_Meter.c"
 26208 ;; Parameters:    Size  Location     Type
 26209 ;;		None
 26210 ;; Auto vars:     Size  Location     Type
 26211 ;;		None
 26212 ;; Return value:  Size  Location     Type
 26213 ;;                  1    wreg      void 
 26214 ;; Registers used:
 26215 ;;		wreg, status,2, status,0, cstack
 26216 ;; Tracked objects:
 26217 ;;		On entry : 0/0
 26218 ;;		On exit  : 0/0
 26219 ;;		Unchanged: 0/0
 26220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26222 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26224 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26225 ;;Total ram usage:        3 bytes
 26226 ;; Hardware stack levels used:    1
 26227 ;; Hardware stack levels required when called:    5
 26228 ;; This function calls:
 26229 ;;		___ftadd
 26230 ;;		___ftdiv
 26231 ;;		___ftge
 26232 ;;		___ftmul
 26233 ;;		___ftneg
 26234 ;; This function is called by:
 26235 ;;		_main
 26236 ;; This function uses a non-reentrant model
 26237 ;;
 26238                           
 26239                           	psect	text88
 26240  0168D2                     __ptext88:
 26241                           	opt stack 0
 26242  0168D2                     _R_PF_Calc:
 26243                           	opt stack 25
 26244                           
 26245                           ;Power_Meter.c: 345: if(Rcurr_V_New < Rcurr_V_Old)
 26246                           
 26247                           ;incstack = 0
 26248  0168D2  C1F2  F08F         	movff	_Rcurr_V_New,___ftge@ff1
 26249  0168D6  C1F3  F090         	movff	_Rcurr_V_New+1,___ftge@ff1+1
 26250  0168DA  C1F4  F091         	movff	_Rcurr_V_New+2,___ftge@ff1+2
 26251  0168DE  C221  F092         	movff	_Rcurr_V_Old,___ftge@ff2
 26252  0168E2  C222  F093         	movff	_Rcurr_V_Old+1,___ftge@ff2+1
 26253  0168E6  C223  F094         	movff	_Rcurr_V_Old+2,___ftge@ff2+2
 26254  0168EA  EC09  F0C8         	call	___ftge	;wreg free
 26255  0168EE  0100               	movlb	0	; () banked
 26256  0168F0  B0D8               	btfsc	status,0,c
 26257  0168F2  D02E               	goto	l21597
 26258                           
 26259                           ; BSR set to: 0
 26260                           ;Power_Meter.c: 346: {
 26261                           ;Power_Meter.c: 347: R_V_Gap = ((Rcurr_V_New - Rcurr_V_Old + 1) + 65536);
 26262  0168F4  C1F2  F086         	movff	_Rcurr_V_New,___ftadd@f2
 26263  0168F8  C1F3  F087         	movff	_Rcurr_V_New+1,___ftadd@f2+1
 26264  0168FC  C1F4  F088         	movff	_Rcurr_V_New+2,___ftadd@f2+2
 26265  016900  C221  F079         	movff	_Rcurr_V_Old,___ftneg@f1
 26266  016904  C222  F07A         	movff	_Rcurr_V_Old+1,___ftneg@f1+1
 26267  016908  C223  F07B         	movff	_Rcurr_V_Old+2,___ftneg@f1+2
 26268  01690C  ECE0  F0D3         	call	___ftneg	;wreg free
 26269  016910  C079  F083         	movff	?___ftneg,___ftadd@f1
 26270  016914  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 26271  016918  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 26272  01691C  ECE4  F0AF         	call	___ftadd	;wreg free
 26273  016920  C083  F0AA         	movff	?___ftadd,_R_PF_Calc$8117
 26274  016924  C084  F0AB         	movff	?___ftadd+1,_R_PF_Calc$8117+1
 26275  016928  C085  F0AC         	movff	?___ftadd+2,_R_PF_Calc$8117+2
 26276                           
 26277                           ;Power_Meter.c: 346: {
 26278                           ;Power_Meter.c: 347: R_V_Gap = ((Rcurr_V_New - Rcurr_V_Old + 1) + 65536);
 26279  01692C  C0AA  F083         	movff	_R_PF_Calc$8117,___ftadd@f1
 26280  016930  C0AB  F084         	movff	_R_PF_Calc$8117+1,___ftadd@f1+1
 26281  016934  C0AC  F085         	movff	_R_PF_Calc$8117+2,___ftadd@f1+2
 26282  016938  0E01               	movlw	1
 26283  01693A  0100               	movlb	0	; () banked
 26284  01693C  6F86               	movwf	___ftadd@f2& (0+255),b
 26285  01693E  0E80               	movlw	128
 26286  016940  0100               	movlb	0	; () banked
 26287  016942  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 26288  016944  0E47               	movlw	71
 26289  016946  0100               	movlb	0	; () banked
 26290  016948  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 26291  01694A  ECE4  F0AF         	call	___ftadd	;wreg free
 26292  01694E  D088               	goto	L12
 26293  016950                     l21597:
 26294                           
 26295                           ;Power_Meter.c: 350: else if((Rcurr_New + 100) < Rcurr_V_New)
 26296  016950  0E00               	movlw	0
 26297  016952  0100               	movlb	0	; () banked
 26298  016954  6F86               	movwf	___ftadd@f2& (0+255),b
 26299  016956  0EC8               	movlw	200
 26300  016958  0100               	movlb	0	; () banked
 26301  01695A  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 26302  01695C  0E42               	movlw	66
 26303  01695E  0100               	movlb	0	; () banked
 26304  016960  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 26305  016962  C1EF  F083         	movff	_Rcurr_New,___ftadd@f1
 26306  016966  C1F0  F084         	movff	_Rcurr_New+1,___ftadd@f1+1
 26307  01696A  C1F1  F085         	movff	_Rcurr_New+2,___ftadd@f1+2
 26308  01696E  ECE4  F0AF         	call	___ftadd	;wreg free
 26309  016972  C083  F08F         	movff	?___ftadd,___ftge@ff1
 26310  016976  C084  F090         	movff	?___ftadd+1,___ftge@ff1+1
 26311  01697A  C085  F091         	movff	?___ftadd+2,___ftge@ff1+2
 26312  01697E  C1F2  F092         	movff	_Rcurr_V_New,___ftge@ff2
 26313  016982  C1F3  F093         	movff	_Rcurr_V_New+1,___ftge@ff2+1
 26314  016986  C1F4  F094         	movff	_Rcurr_V_New+2,___ftge@ff2+2
 26315  01698A  EC09  F0C8         	call	___ftge	;wreg free
 26316  01698E  0100               	movlb	0	; () banked
 26317  016990  B0D8               	btfsc	status,0,c
 26318  016992  D034               	goto	l21601
 26319                           
 26320                           ; BSR set to: 0
 26321                           ;Power_Meter.c: 351: {
 26322                           ;Power_Meter.c: 352: R_C_Gap = ((Rcurr_New - Rcurr_V_New + 1) + 65536);
 26323  016994  C1EF  F086         	movff	_Rcurr_New,___ftadd@f2
 26324  016998  C1F0  F087         	movff	_Rcurr_New+1,___ftadd@f2+1
 26325  01699C  C1F1  F088         	movff	_Rcurr_New+2,___ftadd@f2+2
 26326  0169A0  C1F2  F079         	movff	_Rcurr_V_New,___ftneg@f1
 26327  0169A4  C1F3  F07A         	movff	_Rcurr_V_New+1,___ftneg@f1+1
 26328  0169A8  C1F4  F07B         	movff	_Rcurr_V_New+2,___ftneg@f1+2
 26329  0169AC  ECE0  F0D3         	call	___ftneg	;wreg free
 26330  0169B0  C079  F083         	movff	?___ftneg,___ftadd@f1
 26331  0169B4  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 26332  0169B8  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 26333  0169BC  ECE4  F0AF         	call	___ftadd	;wreg free
 26334  0169C0  C083  F0AA         	movff	?___ftadd,_R_PF_Calc$8117
 26335  0169C4  C084  F0AB         	movff	?___ftadd+1,_R_PF_Calc$8117+1
 26336  0169C8  C085  F0AC         	movff	?___ftadd+2,_R_PF_Calc$8117+2
 26337                           
 26338                           ;Power_Meter.c: 351: {
 26339                           ;Power_Meter.c: 352: R_C_Gap = ((Rcurr_New - Rcurr_V_New + 1) + 65536);
 26340  0169CC  C0AA  F083         	movff	_R_PF_Calc$8117,___ftadd@f1
 26341  0169D0  C0AB  F084         	movff	_R_PF_Calc$8117+1,___ftadd@f1+1
 26342  0169D4  C0AC  F085         	movff	_R_PF_Calc$8117+2,___ftadd@f1+2
 26343  0169D8  0E01               	movlw	1
 26344  0169DA  0100               	movlb	0	; () banked
 26345  0169DC  6F86               	movwf	___ftadd@f2& (0+255),b
 26346  0169DE  0E80               	movlw	128
 26347  0169E0  0100               	movlb	0	; () banked
 26348  0169E2  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 26349  0169E4  0E47               	movlw	71
 26350  0169E6  0100               	movlb	0	; () banked
 26351  0169E8  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 26352  0169EA  ECE4  F0AF         	call	___ftadd	;wreg free
 26353  0169EE  C083  F49C         	movff	?___ftadd,_R_C_Gap
 26354  0169F2  C084  F49D         	movff	?___ftadd+1,_R_C_Gap+1
 26355  0169F6  C085  F49E         	movff	?___ftadd+2,_R_C_Gap+2
 26356                           
 26357                           ;Power_Meter.c: 353: }
 26358  0169FA  D038               	goto	l9312
 26359  0169FC                     l21601:
 26360                           
 26361                           ;Power_Meter.c: 355: else
 26362                           ;Power_Meter.c: 356: {
 26363                           ;Power_Meter.c: 357: R_C_Gap = (Rcurr_New - Rcurr_V_New);
 26364  0169FC  C1F2  F079         	movff	_Rcurr_V_New,___ftneg@f1
 26365  016A00  C1F3  F07A         	movff	_Rcurr_V_New+1,___ftneg@f1+1
 26366  016A04  C1F4  F07B         	movff	_Rcurr_V_New+2,___ftneg@f1+2
 26367  016A08  ECE0  F0D3         	call	___ftneg	;wreg free
 26368  016A0C  C079  F083         	movff	?___ftneg,___ftadd@f1
 26369  016A10  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 26370  016A14  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 26371  016A18  C1EF  F086         	movff	_Rcurr_New,___ftadd@f2
 26372  016A1C  C1F0  F087         	movff	_Rcurr_New+1,___ftadd@f2+1
 26373  016A20  C1F1  F088         	movff	_Rcurr_New+2,___ftadd@f2+2
 26374  016A24  ECE4  F0AF         	call	___ftadd	;wreg free
 26375  016A28  C083  F49C         	movff	?___ftadd,_R_C_Gap
 26376  016A2C  C084  F49D         	movff	?___ftadd+1,_R_C_Gap+1
 26377  016A30  C085  F49E         	movff	?___ftadd+2,_R_C_Gap+2
 26378                           
 26379                           ;Power_Meter.c: 358: R_V_Gap = (Rcurr_V_New - Rcurr_V_Old);
 26380  016A34  C221  F079         	movff	_Rcurr_V_Old,___ftneg@f1
 26381  016A38  C222  F07A         	movff	_Rcurr_V_Old+1,___ftneg@f1+1
 26382  016A3C  C223  F07B         	movff	_Rcurr_V_Old+2,___ftneg@f1+2
 26383  016A40  ECE0  F0D3         	call	___ftneg	;wreg free
 26384  016A44  C079  F083         	movff	?___ftneg,___ftadd@f1
 26385  016A48  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 26386  016A4C  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 26387  016A50  C1F2  F086         	movff	_Rcurr_V_New,___ftadd@f2
 26388  016A54  C1F3  F087         	movff	_Rcurr_V_New+1,___ftadd@f2+1
 26389  016A58  C1F4  F088         	movff	_Rcurr_V_New+2,___ftadd@f2+2
 26390  016A5C  ECE4  F0AF         	call	___ftadd	;wreg free
 26391  016A60                     L12:
 26392  016A60  C083  F4A5         	movff	?___ftadd,_R_V_Gap
 26393  016A64  C084  F4A6         	movff	?___ftadd+1,_R_V_Gap+1
 26394  016A68  C085  F4A7         	movff	?___ftadd+2,_R_V_Gap+2
 26395  016A6C                     l9312:
 26396                           
 26397                           ;Power_Meter.c: 359: }
 26398                           ;Power_Meter.c: 361: R_Gap_Ratio = (R_C_Gap / R_V_Gap);
 26399  016A6C  C49C  F09B         	movff	_R_C_Gap,___ftdiv@f1
 26400  016A70  C49D  F09C         	movff	_R_C_Gap+1,___ftdiv@f1+1
 26401  016A74  C49E  F09D         	movff	_R_C_Gap+2,___ftdiv@f1+2
 26402  016A78  C4A5  F09E         	movff	_R_V_Gap,___ftdiv@f2
 26403  016A7C  C4A6  F09F         	movff	_R_V_Gap+1,___ftdiv@f2+1
 26404  016A80  C4A7  F0A0         	movff	_R_V_Gap+2,___ftdiv@f2+2
 26405  016A84  EC89  F0BF         	call	___ftdiv	;wreg free
 26406  016A88  C09B  F11B         	movff	?___ftdiv,_R_Gap_Ratio
 26407  016A8C  C09C  F11C         	movff	?___ftdiv+1,_R_Gap_Ratio+1
 26408  016A90  C09D  F11D         	movff	?___ftdiv+2,_R_Gap_Ratio+2
 26409                           
 26410                           ;Power_Meter.c: 362: R_Deg = R_Gap_Ratio * 360;
 26411  016A94  C11B  F06A         	movff	_R_Gap_Ratio,___ftmul@f1
 26412  016A98  C11C  F06B         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 26413  016A9C  C11D  F06C         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 26414  016AA0  0E00               	movlw	0
 26415  016AA2  0100               	movlb	0	; () banked
 26416  016AA4  6F6D               	movwf	___ftmul@f2& (0+255),b
 26417  016AA6  0EB4               	movlw	180
 26418  016AA8  0100               	movlb	0	; () banked
 26419  016AAA  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 26420  016AAC  0E43               	movlw	67
 26421  016AAE  0100               	movlb	0	; () banked
 26422  016AB0  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 26423  016AB2  EC83  F0BD         	call	___ftmul	;wreg free
 26424  016AB6  C06A  F657         	movff	?___ftmul,_R_Deg
 26425  016ABA  C06B  F658         	movff	?___ftmul+1,_R_Deg+1
 26426  016ABE  C06C  F659         	movff	?___ftmul+2,_R_Deg+2
 26427                           
 26428                           ;Power_Meter.c: 364: RGR_Arr_1[4] = RGR_Arr_1[3];
 26429  016AC2  C3DE  F3E1         	movff	_RGR_Arr_1+9,_RGR_Arr_1+12
 26430  016AC6  C3DF  F3E2         	movff	_RGR_Arr_1+10,_RGR_Arr_1+13
 26431  016ACA  C3E0  F3E3         	movff	_RGR_Arr_1+11,_RGR_Arr_1+14
 26432                           
 26433                           ;Power_Meter.c: 365: RGR_Arr_1[3] = RGR_Arr_1[2];
 26434  016ACE  C3DB  F3DE         	movff	_RGR_Arr_1+6,_RGR_Arr_1+9
 26435  016AD2  C3DC  F3DF         	movff	_RGR_Arr_1+7,_RGR_Arr_1+10
 26436  016AD6  C3DD  F3E0         	movff	_RGR_Arr_1+8,_RGR_Arr_1+11
 26437                           
 26438                           ;Power_Meter.c: 366: RGR_Arr_1[2] = RGR_Arr_1[1];
 26439  016ADA  C3D8  F3DB         	movff	_RGR_Arr_1+3,_RGR_Arr_1+6
 26440  016ADE  C3D9  F3DC         	movff	_RGR_Arr_1+4,_RGR_Arr_1+7
 26441  016AE2  C3DA  F3DD         	movff	_RGR_Arr_1+5,_RGR_Arr_1+8
 26442                           
 26443                           ;Power_Meter.c: 367: RGR_Arr_1[1] = RGR_Arr_1[0];
 26444  016AE6  C3D5  F3D8         	movff	_RGR_Arr_1,_RGR_Arr_1+3
 26445  016AEA  C3D6  F3D9         	movff	_RGR_Arr_1+1,_RGR_Arr_1+4
 26446  016AEE  C3D7  F3DA         	movff	_RGR_Arr_1+2,_RGR_Arr_1+5
 26447                           
 26448                           ;Power_Meter.c: 368: RGR_Arr_1[0] = R_Gap_Ratio;
 26449  016AF2  C11B  F3D5         	movff	_R_Gap_Ratio,_RGR_Arr_1
 26450  016AF6  C11C  F3D6         	movff	_R_Gap_Ratio+1,_RGR_Arr_1+1
 26451  016AFA  C11D  F3D7         	movff	_R_Gap_Ratio+2,_RGR_Arr_1+2
 26452  016AFE  0012               	return		;funcret
 26453  016B00                     __end_of_R_PF_Calc:
 26454                           	opt stack 0
 26455                           tblptru	equ	0xFF8
 26456                           tblptrh	equ	0xFF7
 26457                           tblptrl	equ	0xFF6
 26458                           tablat	equ	0xFF5
 26459                           prodh	equ	0xFF4
 26460                           prodl	equ	0xFF3
 26461                           intcon	equ	0xFF2
 26462                           postinc0	equ	0xFEE
 26463                           wreg	equ	0xFE8
 26464                           postdec1	equ	0xFE5
 26465                           fsr1h	equ	0xFE2
 26466                           fsr1l	equ	0xFE1
 26467                           indf2	equ	0xFDF
 26468                           postinc2	equ	0xFDE
 26469                           postdec2	equ	0xFDD
 26470                           fsr2h	equ	0xFDA
 26471                           fsr2l	equ	0xFD9
 26472                           status	equ	0xFD8
 26473                           
 26474 ;; *************** function _R_PF_Avg *****************
 26475 ;; Defined at:
 26476 ;;		line 372 in file "Power_Meter.c"
 26477 ;; Parameters:    Size  Location     Type
 26478 ;;		None
 26479 ;; Auto vars:     Size  Location     Type
 26480 ;;		None
 26481 ;; Return value:  Size  Location     Type
 26482 ;;                  1    wreg      void 
 26483 ;; Registers used:
 26484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26485 ;; Tracked objects:
 26486 ;;		On entry : 0/0
 26487 ;;		On exit  : 0/0
 26488 ;;		Unchanged: 0/0
 26489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26491 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 26492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26493 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 26494 ;;Total ram usage:       84 bytes
 26495 ;; Hardware stack levels used:    1
 26496 ;; Hardware stack levels required when called:    8
 26497 ;; This function calls:
 26498 ;;		___ftadd
 26499 ;;		___ftdiv
 26500 ;;		___ftge
 26501 ;;		___ftmul
 26502 ;;		_cos
 26503 ;; This function is called by:
 26504 ;;		_main
 26505 ;; This function uses a non-reentrant model
 26506 ;;
 26507                           
 26508                           	psect	text89
 26509  0121EC                     __ptext89:
 26510                           	opt stack 0
 26511  0121EC                     _R_PF_Avg:
 26512                           	opt stack 22
 26513                           
 26514                           ;Power_Meter.c: 374: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 26515                           
 26516                           ;incstack = 0
 26517  0121EC  C3DE  F086         	movff	_RGR_Arr_1+9,___ftadd@f2
 26518  0121F0  C3DF  F087         	movff	_RGR_Arr_1+10,___ftadd@f2+1
 26519  0121F4  C3E0  F088         	movff	_RGR_Arr_1+11,___ftadd@f2+2
 26520  0121F8  C3E1  F083         	movff	_RGR_Arr_1+12,___ftadd@f1
 26521  0121FC  C3E2  F084         	movff	_RGR_Arr_1+13,___ftadd@f1+1
 26522  012200  C3E3  F085         	movff	_RGR_Arr_1+14,___ftadd@f1+2
 26523  012204  ECE4  F0AF         	call	___ftadd	;wreg free
 26524  012208  C083  F6B1         	movff	?___ftadd,_R_PF_Avg$8118
 26525  01220C  C084  F6B2         	movff	?___ftadd+1,_R_PF_Avg$8118+1
 26526  012210  C085  F6B3         	movff	?___ftadd+2,_R_PF_Avg$8118+2
 26527                           
 26528                           ;Power_Meter.c: 374: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 26529  012214  C3DB  F086         	movff	_RGR_Arr_1+6,___ftadd@f2
 26530  012218  C3DC  F087         	movff	_RGR_Arr_1+7,___ftadd@f2+1
 26531  01221C  C3DD  F088         	movff	_RGR_Arr_1+8,___ftadd@f2+2
 26532  012220  C6B1  F083         	movff	_R_PF_Avg$8118,___ftadd@f1
 26533  012224  C6B2  F084         	movff	_R_PF_Avg$8118+1,___ftadd@f1+1
 26534  012228  C6B3  F085         	movff	_R_PF_Avg$8118+2,___ftadd@f1+2
 26535  01222C  ECE4  F0AF         	call	___ftadd	;wreg free
 26536  012230  C083  F6B4         	movff	?___ftadd,_R_PF_Avg$8119
 26537  012234  C084  F6B5         	movff	?___ftadd+1,_R_PF_Avg$8119+1
 26538  012238  C085  F6B6         	movff	?___ftadd+2,_R_PF_Avg$8119+2
 26539                           
 26540                           ;Power_Meter.c: 374: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 26541  01223C  C3D8  F086         	movff	_RGR_Arr_1+3,___ftadd@f2
 26542  012240  C3D9  F087         	movff	_RGR_Arr_1+4,___ftadd@f2+1
 26543  012244  C3DA  F088         	movff	_RGR_Arr_1+5,___ftadd@f2+2
 26544  012248  C6B4  F083         	movff	_R_PF_Avg$8119,___ftadd@f1
 26545  01224C  C6B5  F084         	movff	_R_PF_Avg$8119+1,___ftadd@f1+1
 26546  012250  C6B6  F085         	movff	_R_PF_Avg$8119+2,___ftadd@f1+2
 26547  012254  ECE4  F0AF         	call	___ftadd	;wreg free
 26548  012258  C083  F6B7         	movff	?___ftadd,_R_PF_Avg$8120
 26549  01225C  C084  F6B8         	movff	?___ftadd+1,_R_PF_Avg$8120+1
 26550  012260  C085  F6B9         	movff	?___ftadd+2,_R_PF_Avg$8120+2
 26551                           
 26552                           ;Power_Meter.c: 374: RGR_Avg_1 = ((RGR_Arr_1[4] + RGR_Arr_1[3] + RGR_Arr_1[2] + RGR_Arr_
      +                          1[1] + RGR_Arr_1[0]) / 5);
 26553  012264  C3D5  F086         	movff	_RGR_Arr_1,___ftadd@f2
 26554  012268  C3D6  F087         	movff	_RGR_Arr_1+1,___ftadd@f2+1
 26555  01226C  C3D7  F088         	movff	_RGR_Arr_1+2,___ftadd@f2+2
 26556  012270  C6B7  F083         	movff	_R_PF_Avg$8120,___ftadd@f1
 26557  012274  C6B8  F084         	movff	_R_PF_Avg$8120+1,___ftadd@f1+1
 26558  012278  C6B9  F085         	movff	_R_PF_Avg$8120+2,___ftadd@f1+2
 26559  01227C  ECE4  F0AF         	call	___ftadd	;wreg free
 26560  012280  C083  F09B         	movff	?___ftadd,___ftdiv@f1
 26561  012284  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
 26562  012288  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
 26563  01228C  0E00               	movlw	0
 26564  01228E  0100               	movlb	0	; () banked
 26565  012290  6F9E               	movwf	___ftdiv@f2& (0+255),b
 26566  012292  0EA0               	movlw	160
 26567  012294  0100               	movlb	0	; () banked
 26568  012296  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 26569  012298  0E40               	movlw	64
 26570  01229A  0100               	movlb	0	; () banked
 26571  01229C  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 26572  01229E  EC89  F0BF         	call	___ftdiv	;wreg free
 26573  0122A2  C09B  F21E         	movff	?___ftdiv,_RGR_Avg_1
 26574  0122A6  C09C  F21F         	movff	?___ftdiv+1,_RGR_Avg_1+1
 26575  0122AA  C09D  F220         	movff	?___ftdiv+2,_RGR_Avg_1+2
 26576                           
 26577                           ;Power_Meter.c: 377: RGR_Arr[29] = RGR_Arr[28];
 26578  0122AE  C354  F357         	movff	_RGR_Arr+84,_RGR_Arr+87
 26579  0122B2  C355  F358         	movff	_RGR_Arr+85,_RGR_Arr+88
 26580  0122B6  C356  F359         	movff	_RGR_Arr+86,_RGR_Arr+89
 26581                           
 26582                           ;Power_Meter.c: 378: RGR_Arr[28] = RGR_Arr[27];
 26583  0122BA  C351  F354         	movff	_RGR_Arr+81,_RGR_Arr+84
 26584  0122BE  C352  F355         	movff	_RGR_Arr+82,_RGR_Arr+85
 26585  0122C2  C353  F356         	movff	_RGR_Arr+83,_RGR_Arr+86
 26586                           
 26587                           ;Power_Meter.c: 379: RGR_Arr[27] = RGR_Arr[26];
 26588  0122C6  C34E  F351         	movff	_RGR_Arr+78,_RGR_Arr+81
 26589  0122CA  C34F  F352         	movff	_RGR_Arr+79,_RGR_Arr+82
 26590  0122CE  C350  F353         	movff	_RGR_Arr+80,_RGR_Arr+83
 26591                           
 26592                           ;Power_Meter.c: 380: RGR_Arr[26] = RGR_Arr[25];
 26593  0122D2  C34B  F34E         	movff	_RGR_Arr+75,_RGR_Arr+78
 26594  0122D6  C34C  F34F         	movff	_RGR_Arr+76,_RGR_Arr+79
 26595  0122DA  C34D  F350         	movff	_RGR_Arr+77,_RGR_Arr+80
 26596                           
 26597                           ;Power_Meter.c: 381: RGR_Arr[25] = RGR_Arr[24];
 26598  0122DE  C348  F34B         	movff	_RGR_Arr+72,_RGR_Arr+75
 26599  0122E2  C349  F34C         	movff	_RGR_Arr+73,_RGR_Arr+76
 26600  0122E6  C34A  F34D         	movff	_RGR_Arr+74,_RGR_Arr+77
 26601                           
 26602                           ;Power_Meter.c: 382: RGR_Arr[24] = RGR_Arr[23];
 26603  0122EA  C345  F348         	movff	_RGR_Arr+69,_RGR_Arr+72
 26604  0122EE  C346  F349         	movff	_RGR_Arr+70,_RGR_Arr+73
 26605  0122F2  C347  F34A         	movff	_RGR_Arr+71,_RGR_Arr+74
 26606                           
 26607                           ;Power_Meter.c: 383: RGR_Arr[23] = RGR_Arr[22];
 26608  0122F6  C342  F345         	movff	_RGR_Arr+66,_RGR_Arr+69
 26609  0122FA  C343  F346         	movff	_RGR_Arr+67,_RGR_Arr+70
 26610  0122FE  C344  F347         	movff	_RGR_Arr+68,_RGR_Arr+71
 26611                           
 26612                           ;Power_Meter.c: 384: RGR_Arr[22] = RGR_Arr[21];
 26613  012302  C33F  F342         	movff	_RGR_Arr+63,_RGR_Arr+66
 26614  012306  C340  F343         	movff	_RGR_Arr+64,_RGR_Arr+67
 26615  01230A  C341  F344         	movff	_RGR_Arr+65,_RGR_Arr+68
 26616                           
 26617                           ;Power_Meter.c: 385: RGR_Arr[21] = RGR_Arr[20];
 26618  01230E  C33C  F33F         	movff	_RGR_Arr+60,_RGR_Arr+63
 26619  012312  C33D  F340         	movff	_RGR_Arr+61,_RGR_Arr+64
 26620  012316  C33E  F341         	movff	_RGR_Arr+62,_RGR_Arr+65
 26621                           
 26622                           ;Power_Meter.c: 386: RGR_Arr[20] = RGR_Arr[19];
 26623  01231A  C339  F33C         	movff	_RGR_Arr+57,_RGR_Arr+60
 26624  01231E  C33A  F33D         	movff	_RGR_Arr+58,_RGR_Arr+61
 26625  012322  C33B  F33E         	movff	_RGR_Arr+59,_RGR_Arr+62
 26626                           
 26627                           ;Power_Meter.c: 387: RGR_Arr[19] = RGR_Arr[18];
 26628  012326  C336  F339         	movff	_RGR_Arr+54,_RGR_Arr+57
 26629  01232A  C337  F33A         	movff	_RGR_Arr+55,_RGR_Arr+58
 26630  01232E  C338  F33B         	movff	_RGR_Arr+56,_RGR_Arr+59
 26631                           
 26632                           ;Power_Meter.c: 388: RGR_Arr[18] = RGR_Arr[17];
 26633  012332  C333  F336         	movff	_RGR_Arr+51,_RGR_Arr+54
 26634  012336  C334  F337         	movff	_RGR_Arr+52,_RGR_Arr+55
 26635  01233A  C335  F338         	movff	_RGR_Arr+53,_RGR_Arr+56
 26636                           
 26637                           ;Power_Meter.c: 389: RGR_Arr[17] = RGR_Arr[16];
 26638  01233E  C330  F333         	movff	_RGR_Arr+48,_RGR_Arr+51
 26639  012342  C331  F334         	movff	_RGR_Arr+49,_RGR_Arr+52
 26640  012346  C332  F335         	movff	_RGR_Arr+50,_RGR_Arr+53
 26641                           
 26642                           ;Power_Meter.c: 390: RGR_Arr[16] = RGR_Arr[15];
 26643  01234A  C32D  F330         	movff	_RGR_Arr+45,_RGR_Arr+48
 26644  01234E  C32E  F331         	movff	_RGR_Arr+46,_RGR_Arr+49
 26645  012352  C32F  F332         	movff	_RGR_Arr+47,_RGR_Arr+50
 26646                           
 26647                           ;Power_Meter.c: 391: RGR_Arr[15] = RGR_Arr[14];
 26648  012356  C32A  F32D         	movff	_RGR_Arr+42,_RGR_Arr+45
 26649  01235A  C32B  F32E         	movff	_RGR_Arr+43,_RGR_Arr+46
 26650  01235E  C32C  F32F         	movff	_RGR_Arr+44,_RGR_Arr+47
 26651                           
 26652                           ;Power_Meter.c: 392: RGR_Arr[14] = RGR_Arr[13];
 26653  012362  C327  F32A         	movff	_RGR_Arr+39,_RGR_Arr+42
 26654  012366  C328  F32B         	movff	_RGR_Arr+40,_RGR_Arr+43
 26655  01236A  C329  F32C         	movff	_RGR_Arr+41,_RGR_Arr+44
 26656                           
 26657                           ;Power_Meter.c: 393: RGR_Arr[13] = RGR_Arr[12];
 26658  01236E  C324  F327         	movff	_RGR_Arr+36,_RGR_Arr+39
 26659  012372  C325  F328         	movff	_RGR_Arr+37,_RGR_Arr+40
 26660  012376  C326  F329         	movff	_RGR_Arr+38,_RGR_Arr+41
 26661                           
 26662                           ;Power_Meter.c: 394: RGR_Arr[12] = RGR_Arr[11];
 26663  01237A  C321  F324         	movff	_RGR_Arr+33,_RGR_Arr+36
 26664  01237E  C322  F325         	movff	_RGR_Arr+34,_RGR_Arr+37
 26665  012382  C323  F326         	movff	_RGR_Arr+35,_RGR_Arr+38
 26666                           
 26667                           ;Power_Meter.c: 395: RGR_Arr[11] = RGR_Arr[10];
 26668  012386  C31E  F321         	movff	_RGR_Arr+30,_RGR_Arr+33
 26669  01238A  C31F  F322         	movff	_RGR_Arr+31,_RGR_Arr+34
 26670  01238E  C320  F323         	movff	_RGR_Arr+32,_RGR_Arr+35
 26671                           
 26672                           ;Power_Meter.c: 396: RGR_Arr[10] = RGR_Arr[9];
 26673  012392  C31B  F31E         	movff	_RGR_Arr+27,_RGR_Arr+30
 26674  012396  C31C  F31F         	movff	_RGR_Arr+28,_RGR_Arr+31
 26675  01239A  C31D  F320         	movff	_RGR_Arr+29,_RGR_Arr+32
 26676                           
 26677                           ;Power_Meter.c: 397: RGR_Arr[9] = RGR_Arr[8];
 26678  01239E  C318  F31B         	movff	_RGR_Arr+24,_RGR_Arr+27
 26679  0123A2  C319  F31C         	movff	_RGR_Arr+25,_RGR_Arr+28
 26680  0123A6  C31A  F31D         	movff	_RGR_Arr+26,_RGR_Arr+29
 26681                           
 26682                           ;Power_Meter.c: 398: RGR_Arr[8] = RGR_Arr[7];
 26683  0123AA  C315  F318         	movff	_RGR_Arr+21,_RGR_Arr+24
 26684  0123AE  C316  F319         	movff	_RGR_Arr+22,_RGR_Arr+25
 26685  0123B2  C317  F31A         	movff	_RGR_Arr+23,_RGR_Arr+26
 26686                           
 26687                           ;Power_Meter.c: 399: RGR_Arr[7] = RGR_Arr[6];
 26688  0123B6  C312  F315         	movff	_RGR_Arr+18,_RGR_Arr+21
 26689  0123BA  C313  F316         	movff	_RGR_Arr+19,_RGR_Arr+22
 26690  0123BE  C314  F317         	movff	_RGR_Arr+20,_RGR_Arr+23
 26691                           
 26692                           ;Power_Meter.c: 400: RGR_Arr[6] = RGR_Arr[5];
 26693  0123C2  C30F  F312         	movff	_RGR_Arr+15,_RGR_Arr+18
 26694  0123C6  C310  F313         	movff	_RGR_Arr+16,_RGR_Arr+19
 26695  0123CA  C311  F314         	movff	_RGR_Arr+17,_RGR_Arr+20
 26696                           
 26697                           ;Power_Meter.c: 401: RGR_Arr[5] = RGR_Arr[4];
 26698  0123CE  C30C  F30F         	movff	_RGR_Arr+12,_RGR_Arr+15
 26699  0123D2  C30D  F310         	movff	_RGR_Arr+13,_RGR_Arr+16
 26700  0123D6  C30E  F311         	movff	_RGR_Arr+14,_RGR_Arr+17
 26701                           
 26702                           ;Power_Meter.c: 402: RGR_Arr[4] = RGR_Arr[3];
 26703  0123DA  C309  F30C         	movff	_RGR_Arr+9,_RGR_Arr+12
 26704  0123DE  C30A  F30D         	movff	_RGR_Arr+10,_RGR_Arr+13
 26705  0123E2  C30B  F30E         	movff	_RGR_Arr+11,_RGR_Arr+14
 26706                           
 26707                           ;Power_Meter.c: 403: RGR_Arr[3] = RGR_Arr[2];
 26708  0123E6  C306  F309         	movff	_RGR_Arr+6,_RGR_Arr+9
 26709  0123EA  C307  F30A         	movff	_RGR_Arr+7,_RGR_Arr+10
 26710  0123EE  C308  F30B         	movff	_RGR_Arr+8,_RGR_Arr+11
 26711                           
 26712                           ;Power_Meter.c: 404: RGR_Arr[2] = RGR_Arr[1];
 26713  0123F2  C303  F306         	movff	_RGR_Arr+3,_RGR_Arr+6
 26714  0123F6  C304  F307         	movff	_RGR_Arr+4,_RGR_Arr+7
 26715  0123FA  C305  F308         	movff	_RGR_Arr+5,_RGR_Arr+8
 26716                           
 26717                           ;Power_Meter.c: 405: RGR_Arr[1] = RGR_Arr[0];
 26718  0123FE  C300  F303         	movff	_RGR_Arr,_RGR_Arr+3
 26719  012402  C301  F304         	movff	_RGR_Arr+1,_RGR_Arr+4
 26720  012406  C302  F305         	movff	_RGR_Arr+2,_RGR_Arr+5
 26721                           
 26722                           ;Power_Meter.c: 408: if( (RGR_Avg_1 > (R_Gap_Ratio * 0.8)) && (RGR_Avg_1 < (R_Gap_Ratio 
      +                          * 1.2)) )
 26723  01240A  0ECD               	movlw	205
 26724  01240C  0100               	movlb	0	; () banked
 26725  01240E  6F6D               	movwf	___ftmul@f2& (0+255),b
 26726  012410  0E4C               	movlw	76
 26727  012412  0100               	movlb	0	; () banked
 26728  012414  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 26729  012416  0E3F               	movlw	63
 26730  012418  0100               	movlb	0	; () banked
 26731  01241A  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 26732  01241C  C11B  F06A         	movff	_R_Gap_Ratio,___ftmul@f1
 26733  012420  C11C  F06B         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 26734  012424  C11D  F06C         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 26735  012428  EC83  F0BD         	call	___ftmul	;wreg free
 26736  01242C  C06A  F08F         	movff	?___ftmul,___ftge@ff1
 26737  012430  C06B  F090         	movff	?___ftmul+1,___ftge@ff1+1
 26738  012434  C06C  F091         	movff	?___ftmul+2,___ftge@ff1+2
 26739  012438  C21E  F092         	movff	_RGR_Avg_1,___ftge@ff2
 26740  01243C  C21F  F093         	movff	_RGR_Avg_1+1,___ftge@ff2+1
 26741  012440  C220  F094         	movff	_RGR_Avg_1+2,___ftge@ff2+2
 26742  012444  EC09  F0C8         	call	___ftge	;wreg free
 26743  012448  0100               	movlb	0	; () banked
 26744  01244A  B0D8               	btfsc	status,0,c
 26745  01244C  D028               	goto	l21677
 26746                           
 26747                           ; BSR set to: 0
 26748  01244E  C21E  F08F         	movff	_RGR_Avg_1,___ftge@ff1
 26749  012452  C21F  F090         	movff	_RGR_Avg_1+1,___ftge@ff1+1
 26750  012456  C220  F091         	movff	_RGR_Avg_1+2,___ftge@ff1+2
 26751  01245A  0E9A               	movlw	154
 26752  01245C  0100               	movlb	0	; () banked
 26753  01245E  6F6D               	movwf	___ftmul@f2& (0+255),b
 26754  012460  0E99               	movlw	153
 26755  012462  0100               	movlb	0	; () banked
 26756  012464  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 26757  012466  0E3F               	movlw	63
 26758  012468  0100               	movlb	0	; () banked
 26759  01246A  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 26760  01246C  C11B  F06A         	movff	_R_Gap_Ratio,___ftmul@f1
 26761  012470  C11C  F06B         	movff	_R_Gap_Ratio+1,___ftmul@f1+1
 26762  012474  C11D  F06C         	movff	_R_Gap_Ratio+2,___ftmul@f1+2
 26763  012478  EC83  F0BD         	call	___ftmul	;wreg free
 26764  01247C  C06A  F092         	movff	?___ftmul,___ftge@ff2
 26765  012480  C06B  F093         	movff	?___ftmul+1,___ftge@ff2+1
 26766  012484  C06C  F094         	movff	?___ftmul+2,___ftge@ff2+2
 26767  012488  EC09  F0C8         	call	___ftge	;wreg free
 26768  01248C  0100               	movlb	0	; () banked
 26769  01248E  B0D8               	btfsc	status,0,c
 26770  012490  D006               	goto	l21677
 26771                           
 26772                           ; BSR set to: 0
 26773                           ;Power_Meter.c: 409: {
 26774                           ;Power_Meter.c: 410: RGR_Arr[0] = R_Gap_Ratio;
 26775  012492  C11B  F300         	movff	_R_Gap_Ratio,_RGR_Arr
 26776  012496  C11C  F301         	movff	_R_Gap_Ratio+1,_RGR_Arr+1
 26777  01249A  C11D  F302         	movff	_R_Gap_Ratio+2,_RGR_Arr+2
 26778  01249E                     l21677:
 26779                           
 26780                           ; BSR set to: 0
 26781                           ;Power_Meter.c: 411: }
 26782                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26783                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26784                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26785                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26786  01249E  C354  F086         	movff	_RGR_Arr+84,___ftadd@f2
 26787  0124A2  C355  F087         	movff	_RGR_Arr+85,___ftadd@f2+1
 26788  0124A6  C356  F088         	movff	_RGR_Arr+86,___ftadd@f2+2
 26789  0124AA  C357  F083         	movff	_RGR_Arr+87,___ftadd@f1
 26790  0124AE  C358  F084         	movff	_RGR_Arr+88,___ftadd@f1+1
 26791  0124B2  C359  F085         	movff	_RGR_Arr+89,___ftadd@f1+2
 26792  0124B6  ECE4  F0AF         	call	___ftadd	;wreg free
 26793  0124BA  C083  F6B1         	movff	?___ftadd,_R_PF_Avg$8118
 26794  0124BE  C084  F6B2         	movff	?___ftadd+1,_R_PF_Avg$8118+1
 26795  0124C2  C085  F6B3         	movff	?___ftadd+2,_R_PF_Avg$8118+2
 26796                           
 26797                           ;Power_Meter.c: 411: }
 26798                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26799                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26800                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26801                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26802  0124C6  C351  F086         	movff	_RGR_Arr+81,___ftadd@f2
 26803  0124CA  C352  F087         	movff	_RGR_Arr+82,___ftadd@f2+1
 26804  0124CE  C353  F088         	movff	_RGR_Arr+83,___ftadd@f2+2
 26805  0124D2  C6B1  F083         	movff	_R_PF_Avg$8118,___ftadd@f1
 26806  0124D6  C6B2  F084         	movff	_R_PF_Avg$8118+1,___ftadd@f1+1
 26807  0124DA  C6B3  F085         	movff	_R_PF_Avg$8118+2,___ftadd@f1+2
 26808  0124DE  ECE4  F0AF         	call	___ftadd	;wreg free
 26809  0124E2  C083  F6B4         	movff	?___ftadd,_R_PF_Avg$8119
 26810  0124E6  C084  F6B5         	movff	?___ftadd+1,_R_PF_Avg$8119+1
 26811  0124EA  C085  F6B6         	movff	?___ftadd+2,_R_PF_Avg$8119+2
 26812                           
 26813                           ;Power_Meter.c: 411: }
 26814                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26815                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26816                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26817                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26818  0124EE  C34E  F086         	movff	_RGR_Arr+78,___ftadd@f2
 26819  0124F2  C34F  F087         	movff	_RGR_Arr+79,___ftadd@f2+1
 26820  0124F6  C350  F088         	movff	_RGR_Arr+80,___ftadd@f2+2
 26821  0124FA  C6B4  F083         	movff	_R_PF_Avg$8119,___ftadd@f1
 26822  0124FE  C6B5  F084         	movff	_R_PF_Avg$8119+1,___ftadd@f1+1
 26823  012502  C6B6  F085         	movff	_R_PF_Avg$8119+2,___ftadd@f1+2
 26824  012506  ECE4  F0AF         	call	___ftadd	;wreg free
 26825  01250A  C083  F6B7         	movff	?___ftadd,_R_PF_Avg$8120
 26826  01250E  C084  F6B8         	movff	?___ftadd+1,_R_PF_Avg$8120+1
 26827  012512  C085  F6B9         	movff	?___ftadd+2,_R_PF_Avg$8120+2
 26828                           
 26829                           ;Power_Meter.c: 411: }
 26830                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26831                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26832                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26833                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26834  012516  C34B  F086         	movff	_RGR_Arr+75,___ftadd@f2
 26835  01251A  C34C  F087         	movff	_RGR_Arr+76,___ftadd@f2+1
 26836  01251E  C34D  F088         	movff	_RGR_Arr+77,___ftadd@f2+2
 26837  012522  C6B7  F083         	movff	_R_PF_Avg$8120,___ftadd@f1
 26838  012526  C6B8  F084         	movff	_R_PF_Avg$8120+1,___ftadd@f1+1
 26839  01252A  C6B9  F085         	movff	_R_PF_Avg$8120+2,___ftadd@f1+2
 26840  01252E  ECE4  F0AF         	call	___ftadd	;wreg free
 26841  012532  C083  F666         	movff	?___ftadd,_R_PF_Avg$8121
 26842  012536  C084  F667         	movff	?___ftadd+1,_R_PF_Avg$8121+1
 26843  01253A  C085  F668         	movff	?___ftadd+2,_R_PF_Avg$8121+2
 26844                           
 26845                           ;Power_Meter.c: 411: }
 26846                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26847                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26848                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26849                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26850  01253E  C348  F086         	movff	_RGR_Arr+72,___ftadd@f2
 26851  012542  C349  F087         	movff	_RGR_Arr+73,___ftadd@f2+1
 26852  012546  C34A  F088         	movff	_RGR_Arr+74,___ftadd@f2+2
 26853  01254A  C666  F083         	movff	_R_PF_Avg$8121,___ftadd@f1
 26854  01254E  C667  F084         	movff	_R_PF_Avg$8121+1,___ftadd@f1+1
 26855  012552  C668  F085         	movff	_R_PF_Avg$8121+2,___ftadd@f1+2
 26856  012556  ECE4  F0AF         	call	___ftadd	;wreg free
 26857  01255A  C083  F669         	movff	?___ftadd,_R_PF_Avg$8122
 26858  01255E  C084  F66A         	movff	?___ftadd+1,_R_PF_Avg$8122+1
 26859  012562  C085  F66B         	movff	?___ftadd+2,_R_PF_Avg$8122+2
 26860                           
 26861                           ;Power_Meter.c: 411: }
 26862                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26863                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26864                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26865                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26866  012566  C345  F086         	movff	_RGR_Arr+69,___ftadd@f2
 26867  01256A  C346  F087         	movff	_RGR_Arr+70,___ftadd@f2+1
 26868  01256E  C347  F088         	movff	_RGR_Arr+71,___ftadd@f2+2
 26869  012572  C669  F083         	movff	_R_PF_Avg$8122,___ftadd@f1
 26870  012576  C66A  F084         	movff	_R_PF_Avg$8122+1,___ftadd@f1+1
 26871  01257A  C66B  F085         	movff	_R_PF_Avg$8122+2,___ftadd@f1+2
 26872  01257E  ECE4  F0AF         	call	___ftadd	;wreg free
 26873  012582  C083  F66C         	movff	?___ftadd,_R_PF_Avg$8123
 26874  012586  C084  F66D         	movff	?___ftadd+1,_R_PF_Avg$8123+1
 26875  01258A  C085  F66E         	movff	?___ftadd+2,_R_PF_Avg$8123+2
 26876                           
 26877                           ;Power_Meter.c: 411: }
 26878                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26879                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26880                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26881                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26882  01258E  C342  F086         	movff	_RGR_Arr+66,___ftadd@f2
 26883  012592  C343  F087         	movff	_RGR_Arr+67,___ftadd@f2+1
 26884  012596  C344  F088         	movff	_RGR_Arr+68,___ftadd@f2+2
 26885  01259A  C66C  F083         	movff	_R_PF_Avg$8123,___ftadd@f1
 26886  01259E  C66D  F084         	movff	_R_PF_Avg$8123+1,___ftadd@f1+1
 26887  0125A2  C66E  F085         	movff	_R_PF_Avg$8123+2,___ftadd@f1+2
 26888  0125A6  ECE4  F0AF         	call	___ftadd	;wreg free
 26889  0125AA  C083  F66F         	movff	?___ftadd,_R_PF_Avg$8124
 26890  0125AE  C084  F670         	movff	?___ftadd+1,_R_PF_Avg$8124+1
 26891  0125B2  C085  F671         	movff	?___ftadd+2,_R_PF_Avg$8124+2
 26892                           
 26893                           ;Power_Meter.c: 411: }
 26894                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26895                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26896                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26897                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26898  0125B6  C33F  F086         	movff	_RGR_Arr+63,___ftadd@f2
 26899  0125BA  C340  F087         	movff	_RGR_Arr+64,___ftadd@f2+1
 26900  0125BE  C341  F088         	movff	_RGR_Arr+65,___ftadd@f2+2
 26901  0125C2  C66F  F083         	movff	_R_PF_Avg$8124,___ftadd@f1
 26902  0125C6  C670  F084         	movff	_R_PF_Avg$8124+1,___ftadd@f1+1
 26903  0125CA  C671  F085         	movff	_R_PF_Avg$8124+2,___ftadd@f1+2
 26904  0125CE  ECE4  F0AF         	call	___ftadd	;wreg free
 26905  0125D2  C083  F672         	movff	?___ftadd,_R_PF_Avg$8125
 26906  0125D6  C084  F673         	movff	?___ftadd+1,_R_PF_Avg$8125+1
 26907  0125DA  C085  F674         	movff	?___ftadd+2,_R_PF_Avg$8125+2
 26908                           
 26909                           ;Power_Meter.c: 411: }
 26910                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26911                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26912                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26913                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26914  0125DE  C33C  F086         	movff	_RGR_Arr+60,___ftadd@f2
 26915  0125E2  C33D  F087         	movff	_RGR_Arr+61,___ftadd@f2+1
 26916  0125E6  C33E  F088         	movff	_RGR_Arr+62,___ftadd@f2+2
 26917  0125EA  C672  F083         	movff	_R_PF_Avg$8125,___ftadd@f1
 26918  0125EE  C673  F084         	movff	_R_PF_Avg$8125+1,___ftadd@f1+1
 26919  0125F2  C674  F085         	movff	_R_PF_Avg$8125+2,___ftadd@f1+2
 26920  0125F6  ECE4  F0AF         	call	___ftadd	;wreg free
 26921  0125FA  C083  F675         	movff	?___ftadd,_R_PF_Avg$8126
 26922  0125FE  C084  F676         	movff	?___ftadd+1,_R_PF_Avg$8126+1
 26923  012602  C085  F677         	movff	?___ftadd+2,_R_PF_Avg$8126+2
 26924                           
 26925                           ;Power_Meter.c: 411: }
 26926                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26927                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26928                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26929                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26930  012606  C339  F086         	movff	_RGR_Arr+57,___ftadd@f2
 26931  01260A  C33A  F087         	movff	_RGR_Arr+58,___ftadd@f2+1
 26932  01260E  C33B  F088         	movff	_RGR_Arr+59,___ftadd@f2+2
 26933  012612  C675  F083         	movff	_R_PF_Avg$8126,___ftadd@f1
 26934  012616  C676  F084         	movff	_R_PF_Avg$8126+1,___ftadd@f1+1
 26935  01261A  C677  F085         	movff	_R_PF_Avg$8126+2,___ftadd@f1+2
 26936  01261E  ECE4  F0AF         	call	___ftadd	;wreg free
 26937  012622  C083  F678         	movff	?___ftadd,_R_PF_Avg$8127
 26938  012626  C084  F679         	movff	?___ftadd+1,_R_PF_Avg$8127+1
 26939  01262A  C085  F67A         	movff	?___ftadd+2,_R_PF_Avg$8127+2
 26940                           
 26941                           ;Power_Meter.c: 411: }
 26942                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26943                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26944                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26945                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26946  01262E  C336  F086         	movff	_RGR_Arr+54,___ftadd@f2
 26947  012632  C337  F087         	movff	_RGR_Arr+55,___ftadd@f2+1
 26948  012636  C338  F088         	movff	_RGR_Arr+56,___ftadd@f2+2
 26949  01263A  C678  F083         	movff	_R_PF_Avg$8127,___ftadd@f1
 26950  01263E  C679  F084         	movff	_R_PF_Avg$8127+1,___ftadd@f1+1
 26951  012642  C67A  F085         	movff	_R_PF_Avg$8127+2,___ftadd@f1+2
 26952  012646  ECE4  F0AF         	call	___ftadd	;wreg free
 26953  01264A  C083  F67B         	movff	?___ftadd,_R_PF_Avg$8128
 26954  01264E  C084  F67C         	movff	?___ftadd+1,_R_PF_Avg$8128+1
 26955  012652  C085  F67D         	movff	?___ftadd+2,_R_PF_Avg$8128+2
 26956                           
 26957                           ;Power_Meter.c: 411: }
 26958                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26959                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26960                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26961                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26962  012656  C333  F086         	movff	_RGR_Arr+51,___ftadd@f2
 26963  01265A  C334  F087         	movff	_RGR_Arr+52,___ftadd@f2+1
 26964  01265E  C335  F088         	movff	_RGR_Arr+53,___ftadd@f2+2
 26965  012662  C67B  F083         	movff	_R_PF_Avg$8128,___ftadd@f1
 26966  012666  C67C  F084         	movff	_R_PF_Avg$8128+1,___ftadd@f1+1
 26967  01266A  C67D  F085         	movff	_R_PF_Avg$8128+2,___ftadd@f1+2
 26968  01266E  ECE4  F0AF         	call	___ftadd	;wreg free
 26969  012672  C083  F67E         	movff	?___ftadd,_R_PF_Avg$8129
 26970  012676  C084  F67F         	movff	?___ftadd+1,_R_PF_Avg$8129+1
 26971  01267A  C085  F680         	movff	?___ftadd+2,_R_PF_Avg$8129+2
 26972                           
 26973                           ;Power_Meter.c: 411: }
 26974                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26975                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26976                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26977                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26978  01267E  C330  F086         	movff	_RGR_Arr+48,___ftadd@f2
 26979  012682  C331  F087         	movff	_RGR_Arr+49,___ftadd@f2+1
 26980  012686  C332  F088         	movff	_RGR_Arr+50,___ftadd@f2+2
 26981  01268A  C67E  F083         	movff	_R_PF_Avg$8129,___ftadd@f1
 26982  01268E  C67F  F084         	movff	_R_PF_Avg$8129+1,___ftadd@f1+1
 26983  012692  C680  F085         	movff	_R_PF_Avg$8129+2,___ftadd@f1+2
 26984  012696  ECE4  F0AF         	call	___ftadd	;wreg free
 26985  01269A  C083  F681         	movff	?___ftadd,_R_PF_Avg$8130
 26986  01269E  C084  F682         	movff	?___ftadd+1,_R_PF_Avg$8130+1
 26987  0126A2  C085  F683         	movff	?___ftadd+2,_R_PF_Avg$8130+2
 26988                           
 26989                           ;Power_Meter.c: 411: }
 26990                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 26991                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 26992                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 26993                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 26994  0126A6  C32D  F086         	movff	_RGR_Arr+45,___ftadd@f2
 26995  0126AA  C32E  F087         	movff	_RGR_Arr+46,___ftadd@f2+1
 26996  0126AE  C32F  F088         	movff	_RGR_Arr+47,___ftadd@f2+2
 26997  0126B2  C681  F083         	movff	_R_PF_Avg$8130,___ftadd@f1
 26998  0126B6  C682  F084         	movff	_R_PF_Avg$8130+1,___ftadd@f1+1
 26999  0126BA  C683  F085         	movff	_R_PF_Avg$8130+2,___ftadd@f1+2
 27000  0126BE  ECE4  F0AF         	call	___ftadd	;wreg free
 27001  0126C2  C083  F684         	movff	?___ftadd,_R_PF_Avg$8131
 27002  0126C6  C084  F685         	movff	?___ftadd+1,_R_PF_Avg$8131+1
 27003  0126CA  C085  F686         	movff	?___ftadd+2,_R_PF_Avg$8131+2
 27004                           
 27005                           ;Power_Meter.c: 411: }
 27006                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27007                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27008                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27009                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27010  0126CE  C32A  F086         	movff	_RGR_Arr+42,___ftadd@f2
 27011  0126D2  C32B  F087         	movff	_RGR_Arr+43,___ftadd@f2+1
 27012  0126D6  C32C  F088         	movff	_RGR_Arr+44,___ftadd@f2+2
 27013  0126DA  C684  F083         	movff	_R_PF_Avg$8131,___ftadd@f1
 27014  0126DE  C685  F084         	movff	_R_PF_Avg$8131+1,___ftadd@f1+1
 27015  0126E2  C686  F085         	movff	_R_PF_Avg$8131+2,___ftadd@f1+2
 27016  0126E6  ECE4  F0AF         	call	___ftadd	;wreg free
 27017  0126EA  C083  F687         	movff	?___ftadd,_R_PF_Avg$8132
 27018  0126EE  C084  F688         	movff	?___ftadd+1,_R_PF_Avg$8132+1
 27019  0126F2  C085  F689         	movff	?___ftadd+2,_R_PF_Avg$8132+2
 27020                           
 27021                           ;Power_Meter.c: 411: }
 27022                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27023                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27024                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27025                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27026  0126F6  C327  F086         	movff	_RGR_Arr+39,___ftadd@f2
 27027  0126FA  C328  F087         	movff	_RGR_Arr+40,___ftadd@f2+1
 27028  0126FE  C329  F088         	movff	_RGR_Arr+41,___ftadd@f2+2
 27029  012702  C687  F083         	movff	_R_PF_Avg$8132,___ftadd@f1
 27030  012706  C688  F084         	movff	_R_PF_Avg$8132+1,___ftadd@f1+1
 27031  01270A  C689  F085         	movff	_R_PF_Avg$8132+2,___ftadd@f1+2
 27032  01270E  ECE4  F0AF         	call	___ftadd	;wreg free
 27033  012712  C083  F68A         	movff	?___ftadd,_R_PF_Avg$8133
 27034  012716  C084  F68B         	movff	?___ftadd+1,_R_PF_Avg$8133+1
 27035  01271A  C085  F68C         	movff	?___ftadd+2,_R_PF_Avg$8133+2
 27036                           
 27037                           ;Power_Meter.c: 411: }
 27038                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27039                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27040                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27041                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27042  01271E  C324  F086         	movff	_RGR_Arr+36,___ftadd@f2
 27043  012722  C325  F087         	movff	_RGR_Arr+37,___ftadd@f2+1
 27044  012726  C326  F088         	movff	_RGR_Arr+38,___ftadd@f2+2
 27045  01272A  C68A  F083         	movff	_R_PF_Avg$8133,___ftadd@f1
 27046  01272E  C68B  F084         	movff	_R_PF_Avg$8133+1,___ftadd@f1+1
 27047  012732  C68C  F085         	movff	_R_PF_Avg$8133+2,___ftadd@f1+2
 27048  012736  ECE4  F0AF         	call	___ftadd	;wreg free
 27049  01273A  C083  F68D         	movff	?___ftadd,_R_PF_Avg$8134
 27050  01273E  C084  F68E         	movff	?___ftadd+1,_R_PF_Avg$8134+1
 27051  012742  C085  F68F         	movff	?___ftadd+2,_R_PF_Avg$8134+2
 27052                           
 27053                           ;Power_Meter.c: 411: }
 27054                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27055                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27056                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27057                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27058  012746  C321  F086         	movff	_RGR_Arr+33,___ftadd@f2
 27059  01274A  C322  F087         	movff	_RGR_Arr+34,___ftadd@f2+1
 27060  01274E  C323  F088         	movff	_RGR_Arr+35,___ftadd@f2+2
 27061  012752  C68D  F083         	movff	_R_PF_Avg$8134,___ftadd@f1
 27062  012756  C68E  F084         	movff	_R_PF_Avg$8134+1,___ftadd@f1+1
 27063  01275A  C68F  F085         	movff	_R_PF_Avg$8134+2,___ftadd@f1+2
 27064  01275E  ECE4  F0AF         	call	___ftadd	;wreg free
 27065  012762  C083  F690         	movff	?___ftadd,_R_PF_Avg$8135
 27066  012766  C084  F691         	movff	?___ftadd+1,_R_PF_Avg$8135+1
 27067  01276A  C085  F692         	movff	?___ftadd+2,_R_PF_Avg$8135+2
 27068                           
 27069                           ;Power_Meter.c: 411: }
 27070                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27071                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27072                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27073                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27074  01276E  C31E  F086         	movff	_RGR_Arr+30,___ftadd@f2
 27075  012772  C31F  F087         	movff	_RGR_Arr+31,___ftadd@f2+1
 27076  012776  C320  F088         	movff	_RGR_Arr+32,___ftadd@f2+2
 27077  01277A  C690  F083         	movff	_R_PF_Avg$8135,___ftadd@f1
 27078  01277E  C691  F084         	movff	_R_PF_Avg$8135+1,___ftadd@f1+1
 27079  012782  C692  F085         	movff	_R_PF_Avg$8135+2,___ftadd@f1+2
 27080  012786  ECE4  F0AF         	call	___ftadd	;wreg free
 27081  01278A  C083  F693         	movff	?___ftadd,_R_PF_Avg$8136
 27082  01278E  C084  F694         	movff	?___ftadd+1,_R_PF_Avg$8136+1
 27083  012792  C085  F695         	movff	?___ftadd+2,_R_PF_Avg$8136+2
 27084                           
 27085                           ;Power_Meter.c: 411: }
 27086                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27087                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27088                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27089                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27090  012796  C31B  F086         	movff	_RGR_Arr+27,___ftadd@f2
 27091  01279A  C31C  F087         	movff	_RGR_Arr+28,___ftadd@f2+1
 27092  01279E  C31D  F088         	movff	_RGR_Arr+29,___ftadd@f2+2
 27093  0127A2  C693  F083         	movff	_R_PF_Avg$8136,___ftadd@f1
 27094  0127A6  C694  F084         	movff	_R_PF_Avg$8136+1,___ftadd@f1+1
 27095  0127AA  C695  F085         	movff	_R_PF_Avg$8136+2,___ftadd@f1+2
 27096  0127AE  ECE4  F0AF         	call	___ftadd	;wreg free
 27097  0127B2  C083  F696         	movff	?___ftadd,_R_PF_Avg$8137
 27098  0127B6  C084  F697         	movff	?___ftadd+1,_R_PF_Avg$8137+1
 27099  0127BA  C085  F698         	movff	?___ftadd+2,_R_PF_Avg$8137+2
 27100                           
 27101                           ;Power_Meter.c: 411: }
 27102                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27103                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27104                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27105                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27106  0127BE  C318  F086         	movff	_RGR_Arr+24,___ftadd@f2
 27107  0127C2  C319  F087         	movff	_RGR_Arr+25,___ftadd@f2+1
 27108  0127C6  C31A  F088         	movff	_RGR_Arr+26,___ftadd@f2+2
 27109  0127CA  C696  F083         	movff	_R_PF_Avg$8137,___ftadd@f1
 27110  0127CE  C697  F084         	movff	_R_PF_Avg$8137+1,___ftadd@f1+1
 27111  0127D2  C698  F085         	movff	_R_PF_Avg$8137+2,___ftadd@f1+2
 27112  0127D6  ECE4  F0AF         	call	___ftadd	;wreg free
 27113  0127DA  C083  F699         	movff	?___ftadd,_R_PF_Avg$8138
 27114  0127DE  C084  F69A         	movff	?___ftadd+1,_R_PF_Avg$8138+1
 27115  0127E2  C085  F69B         	movff	?___ftadd+2,_R_PF_Avg$8138+2
 27116                           
 27117                           ;Power_Meter.c: 411: }
 27118                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27119                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27120                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27121                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27122  0127E6  C315  F086         	movff	_RGR_Arr+21,___ftadd@f2
 27123  0127EA  C316  F087         	movff	_RGR_Arr+22,___ftadd@f2+1
 27124  0127EE  C317  F088         	movff	_RGR_Arr+23,___ftadd@f2+2
 27125  0127F2  C699  F083         	movff	_R_PF_Avg$8138,___ftadd@f1
 27126  0127F6  C69A  F084         	movff	_R_PF_Avg$8138+1,___ftadd@f1+1
 27127  0127FA  C69B  F085         	movff	_R_PF_Avg$8138+2,___ftadd@f1+2
 27128  0127FE  ECE4  F0AF         	call	___ftadd	;wreg free
 27129  012802  C083  F69C         	movff	?___ftadd,_R_PF_Avg$8139
 27130  012806  C084  F69D         	movff	?___ftadd+1,_R_PF_Avg$8139+1
 27131  01280A  C085  F69E         	movff	?___ftadd+2,_R_PF_Avg$8139+2
 27132                           
 27133                           ;Power_Meter.c: 411: }
 27134                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27135                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27136                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27137                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27138  01280E  C312  F086         	movff	_RGR_Arr+18,___ftadd@f2
 27139  012812  C313  F087         	movff	_RGR_Arr+19,___ftadd@f2+1
 27140  012816  C314  F088         	movff	_RGR_Arr+20,___ftadd@f2+2
 27141  01281A  C69C  F083         	movff	_R_PF_Avg$8139,___ftadd@f1
 27142  01281E  C69D  F084         	movff	_R_PF_Avg$8139+1,___ftadd@f1+1
 27143  012822  C69E  F085         	movff	_R_PF_Avg$8139+2,___ftadd@f1+2
 27144  012826  ECE4  F0AF         	call	___ftadd	;wreg free
 27145  01282A  C083  F69F         	movff	?___ftadd,_R_PF_Avg$8140
 27146  01282E  C084  F6A0         	movff	?___ftadd+1,_R_PF_Avg$8140+1
 27147  012832  C085  F6A1         	movff	?___ftadd+2,_R_PF_Avg$8140+2
 27148                           
 27149                           ;Power_Meter.c: 411: }
 27150                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27151                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27152                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27153                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27154  012836  C30F  F086         	movff	_RGR_Arr+15,___ftadd@f2
 27155  01283A  C310  F087         	movff	_RGR_Arr+16,___ftadd@f2+1
 27156  01283E  C311  F088         	movff	_RGR_Arr+17,___ftadd@f2+2
 27157  012842  C69F  F083         	movff	_R_PF_Avg$8140,___ftadd@f1
 27158  012846  C6A0  F084         	movff	_R_PF_Avg$8140+1,___ftadd@f1+1
 27159  01284A  C6A1  F085         	movff	_R_PF_Avg$8140+2,___ftadd@f1+2
 27160  01284E  ECE4  F0AF         	call	___ftadd	;wreg free
 27161  012852  C083  F6A2         	movff	?___ftadd,_R_PF_Avg$8141
 27162  012856  C084  F6A3         	movff	?___ftadd+1,_R_PF_Avg$8141+1
 27163  01285A  C085  F6A4         	movff	?___ftadd+2,_R_PF_Avg$8141+2
 27164                           
 27165                           ;Power_Meter.c: 411: }
 27166                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27167                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27168                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27169                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27170  01285E  C30C  F086         	movff	_RGR_Arr+12,___ftadd@f2
 27171  012862  C30D  F087         	movff	_RGR_Arr+13,___ftadd@f2+1
 27172  012866  C30E  F088         	movff	_RGR_Arr+14,___ftadd@f2+2
 27173  01286A  C6A2  F083         	movff	_R_PF_Avg$8141,___ftadd@f1
 27174  01286E  C6A3  F084         	movff	_R_PF_Avg$8141+1,___ftadd@f1+1
 27175  012872  C6A4  F085         	movff	_R_PF_Avg$8141+2,___ftadd@f1+2
 27176  012876  ECE4  F0AF         	call	___ftadd	;wreg free
 27177  01287A  C083  F6A5         	movff	?___ftadd,_R_PF_Avg$8142
 27178  01287E  C084  F6A6         	movff	?___ftadd+1,_R_PF_Avg$8142+1
 27179  012882  C085  F6A7         	movff	?___ftadd+2,_R_PF_Avg$8142+2
 27180                           
 27181                           ;Power_Meter.c: 411: }
 27182                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27183                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27184                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27185                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27186  012886  C309  F086         	movff	_RGR_Arr+9,___ftadd@f2
 27187  01288A  C30A  F087         	movff	_RGR_Arr+10,___ftadd@f2+1
 27188  01288E  C30B  F088         	movff	_RGR_Arr+11,___ftadd@f2+2
 27189  012892  C6A5  F083         	movff	_R_PF_Avg$8142,___ftadd@f1
 27190  012896  C6A6  F084         	movff	_R_PF_Avg$8142+1,___ftadd@f1+1
 27191  01289A  C6A7  F085         	movff	_R_PF_Avg$8142+2,___ftadd@f1+2
 27192  01289E  ECE4  F0AF         	call	___ftadd	;wreg free
 27193  0128A2  C083  F6A8         	movff	?___ftadd,_R_PF_Avg$8143
 27194  0128A6  C084  F6A9         	movff	?___ftadd+1,_R_PF_Avg$8143+1
 27195  0128AA  C085  F6AA         	movff	?___ftadd+2,_R_PF_Avg$8143+2
 27196                           
 27197                           ;Power_Meter.c: 411: }
 27198                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27199                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27200                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27201                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27202  0128AE  C306  F086         	movff	_RGR_Arr+6,___ftadd@f2
 27203  0128B2  C307  F087         	movff	_RGR_Arr+7,___ftadd@f2+1
 27204  0128B6  C308  F088         	movff	_RGR_Arr+8,___ftadd@f2+2
 27205  0128BA  C6A8  F083         	movff	_R_PF_Avg$8143,___ftadd@f1
 27206  0128BE  C6A9  F084         	movff	_R_PF_Avg$8143+1,___ftadd@f1+1
 27207  0128C2  C6AA  F085         	movff	_R_PF_Avg$8143+2,___ftadd@f1+2
 27208  0128C6  ECE4  F0AF         	call	___ftadd	;wreg free
 27209  0128CA  C083  F6AB         	movff	?___ftadd,_R_PF_Avg$8144
 27210  0128CE  C084  F6AC         	movff	?___ftadd+1,_R_PF_Avg$8144+1
 27211  0128D2  C085  F6AD         	movff	?___ftadd+2,_R_PF_Avg$8144+2
 27212                           
 27213                           ;Power_Meter.c: 411: }
 27214                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27215                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27216                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27217                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27218  0128D6  C303  F086         	movff	_RGR_Arr+3,___ftadd@f2
 27219  0128DA  C304  F087         	movff	_RGR_Arr+4,___ftadd@f2+1
 27220  0128DE  C305  F088         	movff	_RGR_Arr+5,___ftadd@f2+2
 27221  0128E2  C6AB  F083         	movff	_R_PF_Avg$8144,___ftadd@f1
 27222  0128E6  C6AC  F084         	movff	_R_PF_Avg$8144+1,___ftadd@f1+1
 27223  0128EA  C6AD  F085         	movff	_R_PF_Avg$8144+2,___ftadd@f1+2
 27224  0128EE  ECE4  F0AF         	call	___ftadd	;wreg free
 27225  0128F2  C083  F6AE         	movff	?___ftadd,_R_PF_Avg$8145
 27226  0128F6  C084  F6AF         	movff	?___ftadd+1,_R_PF_Avg$8145+1
 27227  0128FA  C085  F6B0         	movff	?___ftadd+2,_R_PF_Avg$8145+2
 27228                           
 27229                           ;Power_Meter.c: 411: }
 27230                           ;Power_Meter.c: 413: RGR_Avg = (RGR_Arr[29] + RGR_Arr[28] + RGR_Arr[27] + RGR_Arr[26] + 
      +                          RGR_Arr[25] + RGR_Arr[24] + RGR_Arr[23] + RGR_Arr[22]
 27231                           ;Power_Meter.c: 414: + RGR_Arr[21] + RGR_Arr[20] + RGR_Arr[19] + RGR_Arr[18] + RGR_Arr[1
      +                          7] + RGR_Arr[16] + RGR_Arr[15]
 27232                           ;Power_Meter.c: 415: + RGR_Arr[14] + RGR_Arr[13] + RGR_Arr[12] + RGR_Arr[11] + RGR_Arr[1
      +                          0] + RGR_Arr[9] + RGR_Arr[8] + RGR_Arr[7]
 27233                           ;Power_Meter.c: 416: + RGR_Arr[6] + RGR_Arr[5] + RGR_Arr[4] + RGR_Arr[3] + RGR_Arr[2] + 
      +                          RGR_Arr[1] + RGR_Arr[0] );
 27234  0128FE  C6AE  F083         	movff	_R_PF_Avg$8145,___ftadd@f1
 27235  012902  C6AF  F084         	movff	_R_PF_Avg$8145+1,___ftadd@f1+1
 27236  012906  C6B0  F085         	movff	_R_PF_Avg$8145+2,___ftadd@f1+2
 27237  01290A  C300  F086         	movff	_RGR_Arr,___ftadd@f2
 27238  01290E  C301  F087         	movff	_RGR_Arr+1,___ftadd@f2+1
 27239  012912  C302  F088         	movff	_RGR_Arr+2,___ftadd@f2+2
 27240  012916  ECE4  F0AF         	call	___ftadd	;wreg free
 27241  01291A  C083  F2EB         	movff	?___ftadd,_RGR_Avg
 27242  01291E  C084  F2EC         	movff	?___ftadd+1,_RGR_Avg+1
 27243  012922  C085  F2ED         	movff	?___ftadd+2,_RGR_Avg+2
 27244                           
 27245                           ;Power_Meter.c: 418: RGR_Avg = (RGR_Avg / 30);
 27246  012926  C2EB  F09B         	movff	_RGR_Avg,___ftdiv@f1
 27247  01292A  C2EC  F09C         	movff	_RGR_Avg+1,___ftdiv@f1+1
 27248  01292E  C2ED  F09D         	movff	_RGR_Avg+2,___ftdiv@f1+2
 27249  012932  0E00               	movlw	0
 27250  012934  0100               	movlb	0	; () banked
 27251  012936  6F9E               	movwf	___ftdiv@f2& (0+255),b
 27252  012938  0EF0               	movlw	240
 27253  01293A  0100               	movlb	0	; () banked
 27254  01293C  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 27255  01293E  0E41               	movlw	65
 27256  012940  0100               	movlb	0	; () banked
 27257  012942  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 27258  012944  EC89  F0BF         	call	___ftdiv	;wreg free
 27259  012948  C09B  F2EB         	movff	?___ftdiv,_RGR_Avg
 27260  01294C  C09C  F2EC         	movff	?___ftdiv+1,_RGR_Avg+1
 27261  012950  C09D  F2ED         	movff	?___ftdiv+2,_RGR_Avg+2
 27262                           
 27263                           ;Power_Meter.c: 419: R_Rad = ((RGR_Avg * 2 * 3.1412) - (0.523599));
 27264  012954  0E09               	movlw	9
 27265  012956  0100               	movlb	0	; () banked
 27266  012958  6F6D               	movwf	___ftmul@f2& (0+255),b
 27267  01295A  0EC9               	movlw	201
 27268  01295C  0100               	movlb	0	; () banked
 27269  01295E  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 27270  012960  0E40               	movlw	64
 27271  012962  0100               	movlb	0	; () banked
 27272  012964  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 27273  012966  C2EB  F06A         	movff	_RGR_Avg,___ftmul@f1
 27274  01296A  C2EC  F06B         	movff	_RGR_Avg+1,___ftmul@f1+1
 27275  01296E  C2ED  F06C         	movff	_RGR_Avg+2,___ftmul@f1+2
 27276  012972  EC83  F0BD         	call	___ftmul	;wreg free
 27277  012976  C06A  F083         	movff	?___ftmul,___ftadd@f1
 27278  01297A  C06B  F084         	movff	?___ftmul+1,___ftadd@f1+1
 27279  01297E  C06C  F085         	movff	?___ftmul+2,___ftadd@f1+2
 27280  012982  0E0B               	movlw	11
 27281  012984  0100               	movlb	0	; () banked
 27282  012986  6F86               	movwf	___ftadd@f2& (0+255),b
 27283  012988  0E06               	movlw	6
 27284  01298A  0100               	movlb	0	; () banked
 27285  01298C  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 27286  01298E  0EBF               	movlw	191
 27287  012990  0100               	movlb	0	; () banked
 27288  012992  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 27289  012994  ECE4  F0AF         	call	___ftadd	;wreg free
 27290  012998  C083  F4A2         	movff	?___ftadd,_R_Rad
 27291  01299C  C084  F4A3         	movff	?___ftadd+1,_R_Rad+1
 27292  0129A0  C085  F4A4         	movff	?___ftadd+2,_R_Rad+2
 27293                           
 27294                           ;Power_Meter.c: 420: R_Power_Factor = (cos(R_Rad));
 27295  0129A4  C4A2  F0B7         	movff	_R_Rad,cos@f
 27296  0129A8  C4A3  F0B8         	movff	_R_Rad+1,cos@f+1
 27297  0129AC  C4A4  F0B9         	movff	_R_Rad+2,cos@f+2
 27298  0129B0  ECCE  F0C8         	call	_cos	;wreg free
 27299  0129B4  C0B7  F49F         	movff	?_cos,_R_Power_Factor
 27300  0129B8  C0B8  F4A0         	movff	?_cos+1,_R_Power_Factor+1
 27301  0129BC  C0B9  F4A1         	movff	?_cos+2,_R_Power_Factor+2
 27302  0129C0  0012               	return		;funcret
 27303  0129C2                     __end_of_R_PF_Avg:
 27304                           	opt stack 0
 27305                           tblptru	equ	0xFF8
 27306                           tblptrh	equ	0xFF7
 27307                           tblptrl	equ	0xFF6
 27308                           tablat	equ	0xFF5
 27309                           prodh	equ	0xFF4
 27310                           prodl	equ	0xFF3
 27311                           intcon	equ	0xFF2
 27312                           postinc0	equ	0xFEE
 27313                           wreg	equ	0xFE8
 27314                           postdec1	equ	0xFE5
 27315                           fsr1h	equ	0xFE2
 27316                           fsr1l	equ	0xFE1
 27317                           indf2	equ	0xFDF
 27318                           postinc2	equ	0xFDE
 27319                           postdec2	equ	0xFDD
 27320                           fsr2h	equ	0xFDA
 27321                           fsr2l	equ	0xFD9
 27322                           status	equ	0xFD8
 27323                           
 27324 ;; *************** function _RTC_Init *****************
 27325 ;; Defined at:
 27326 ;;		line 22 in file "RTC.c"
 27327 ;; Parameters:    Size  Location     Type
 27328 ;;		None
 27329 ;; Auto vars:     Size  Location     Type
 27330 ;;		None
 27331 ;; Return value:  Size  Location     Type
 27332 ;;                  1    wreg      void 
 27333 ;; Registers used:
 27334 ;;		wreg, status,2, status,0, cstack
 27335 ;; Tracked objects:
 27336 ;;		On entry : 0/0
 27337 ;;		On exit  : 0/0
 27338 ;;		Unchanged: 0/0
 27339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27344 ;;Total ram usage:        0 bytes
 27345 ;; Hardware stack levels used:    1
 27346 ;; Hardware stack levels required when called:    5
 27347 ;; This function calls:
 27348 ;;		_I2C_Init
 27349 ;;		_I2C_Start
 27350 ;;		_I2C_Stop
 27351 ;;		_I2C_Write
 27352 ;; This function is called by:
 27353 ;;		_main
 27354 ;; This function uses a non-reentrant model
 27355 ;;
 27356                           
 27357                           	psect	text90
 27358  01A96C                     __ptext90:
 27359                           	opt stack 0
 27360  01A96C                     _RTC_Init:
 27361                           	opt stack 25
 27362                           
 27363                           ;RTC.c: 24: I2C_Init();
 27364                           
 27365                           ;incstack = 0
 27366  01A96C  EC08  F0D5         	call	_I2C_Init	;wreg free
 27367                           
 27368                           ;RTC.c: 25: I2C_Start();
 27369  01A970  EC74  F0D5         	call	_I2C_Start	;wreg free
 27370                           
 27371                           ;RTC.c: 27: I2C_Write(0xD0u);
 27372  01A974  0ED0               	movlw	208
 27373  01A976  EC00  F0D5         	call	_I2C_Write
 27374                           
 27375                           ;RTC.c: 28: I2C_Write(0x07u);
 27376  01A97A  0E07               	movlw	7
 27377  01A97C  EC00  F0D5         	call	_I2C_Write
 27378                           
 27379                           ;RTC.c: 30: I2C_Write(0x00);
 27380  01A980  0E00               	movlw	0
 27381  01A982  EC00  F0D5         	call	_I2C_Write
 27382                           
 27383                           ;RTC.c: 32: I2C_Stop();
 27384  01A986  EC70  F0D5         	call	_I2C_Stop	;wreg free
 27385  01A98A  0012               	return		;funcret
 27386  01A98C                     __end_of_RTC_Init:
 27387                           	opt stack 0
 27388                           tblptru	equ	0xFF8
 27389                           tblptrh	equ	0xFF7
 27390                           tblptrl	equ	0xFF6
 27391                           tablat	equ	0xFF5
 27392                           prodh	equ	0xFF4
 27393                           prodl	equ	0xFF3
 27394                           intcon	equ	0xFF2
 27395                           postinc0	equ	0xFEE
 27396                           wreg	equ	0xFE8
 27397                           postdec1	equ	0xFE5
 27398                           fsr1h	equ	0xFE2
 27399                           fsr1l	equ	0xFE1
 27400                           indf2	equ	0xFDF
 27401                           postinc2	equ	0xFDE
 27402                           postdec2	equ	0xFDD
 27403                           fsr2h	equ	0xFDA
 27404                           fsr2l	equ	0xFD9
 27405                           status	equ	0xFD8
 27406                           
 27407 ;; *************** function _I2C_Write *****************
 27408 ;; Defined at:
 27409 ;;		line 109 in file "RTC.c"
 27410 ;; Parameters:    Size  Location     Type
 27411 ;;  v_i2cData_u8    1    wreg     unsigned char 
 27412 ;; Auto vars:     Size  Location     Type
 27413 ;;  v_i2cData_u8    1   28[COMRAM] unsigned char 
 27414 ;; Return value:  Size  Location     Type
 27415 ;;                  1    wreg      void 
 27416 ;; Registers used:
 27417 ;;		wreg, cstack
 27418 ;; Tracked objects:
 27419 ;;		On entry : 0/0
 27420 ;;		On exit  : 0/0
 27421 ;;		Unchanged: 0/0
 27422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27427 ;;Total ram usage:        1 bytes
 27428 ;; Hardware stack levels used:    1
 27429 ;; Hardware stack levels required when called:    4
 27430 ;; This function calls:
 27431 ;;		_i2c_WaitForIdle
 27432 ;; This function is called by:
 27433 ;;		_RTC_Init
 27434 ;;		_RTC_GetDateTime
 27435 ;;		_RTC_SetDateTime
 27436 ;; This function uses a non-reentrant model
 27437 ;;
 27438                           
 27439                           	psect	text91
 27440  01AA00                     __ptext91:
 27441                           	opt stack 0
 27442  01AA00                     _I2C_Write:
 27443                           	opt stack 23
 27444                           
 27445                           ;incstack = 0
 27446                           ;I2C_Write@v_i2cData_u8 stored from wreg
 27447  01AA00  6E1D               	movwf	I2C_Write@v_i2cData_u8,c
 27448                           
 27449                           ;RTC.c: 113: SSP1BUF = v_i2cData_u8;
 27450  01AA02  C01D  FFC9         	movff	I2C_Write@v_i2cData_u8,4041	;volatile
 27451  01AA06                     l1019:
 27452  01AA06  B0C7               	btfsc	4039,0,c	;volatile
 27453  01AA08  D7FE               	goto	l1019
 27454                           
 27455                           ;RTC.c: 115: i2c_WaitForIdle();
 27456  01AA0A  ECF7  F0D4         	call	_i2c_WaitForIdle	;wreg free
 27457  01AA0E  0012               	return		;funcret
 27458  01AA10                     __end_of_I2C_Write:
 27459                           	opt stack 0
 27460                           tblptru	equ	0xFF8
 27461                           tblptrh	equ	0xFF7
 27462                           tblptrl	equ	0xFF6
 27463                           tablat	equ	0xFF5
 27464                           prodh	equ	0xFF4
 27465                           prodl	equ	0xFF3
 27466                           intcon	equ	0xFF2
 27467                           postinc0	equ	0xFEE
 27468                           wreg	equ	0xFE8
 27469                           postdec1	equ	0xFE5
 27470                           fsr1h	equ	0xFE2
 27471                           fsr1l	equ	0xFE1
 27472                           indf2	equ	0xFDF
 27473                           postinc2	equ	0xFDE
 27474                           postdec2	equ	0xFDD
 27475                           fsr2h	equ	0xFDA
 27476                           fsr2l	equ	0xFD9
 27477                           status	equ	0xFD8
 27478                           
 27479 ;; *************** function _i2c_WaitForIdle *****************
 27480 ;; Defined at:
 27481 ;;		line 117 in file "RTC.c"
 27482 ;; Parameters:    Size  Location     Type
 27483 ;;		None
 27484 ;; Auto vars:     Size  Location     Type
 27485 ;;		None
 27486 ;; Return value:  Size  Location     Type
 27487 ;;                  1    wreg      void 
 27488 ;; Registers used:
 27489 ;;		None
 27490 ;; Tracked objects:
 27491 ;;		On entry : 0/0
 27492 ;;		On exit  : 0/0
 27493 ;;		Unchanged: 0/0
 27494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27499 ;;Total ram usage:        0 bytes
 27500 ;; Hardware stack levels used:    1
 27501 ;; Hardware stack levels required when called:    3
 27502 ;; This function calls:
 27503 ;;		Nothing
 27504 ;; This function is called by:
 27505 ;;		_I2C_Read
 27506 ;;		_I2C_Write
 27507 ;; This function uses a non-reentrant model
 27508 ;;
 27509                           
 27510                           	psect	text92
 27511  01A9EE                     __ptext92:
 27512                           	opt stack 0
 27513  01A9EE                     _i2c_WaitForIdle:
 27514                           	opt stack 23
 27515  01A9EE                     l1025:
 27516  01A9EE  A0C5               	btfss	4037,0,c	;volatile
 27517  01A9F0  B2C5               	btfsc	4037,1,c	;volatile
 27518  01A9F2  D7FD               	goto	l1025
 27519  01A9F4  A4C5               	btfss	4037,2,c	;volatile
 27520  01A9F6  B6C5               	btfsc	4037,3,c	;volatile
 27521  01A9F8  D7FA               	goto	l1025
 27522  01A9FA  A4C7               	btfss	4039,2,c	;volatile
 27523  01A9FC  0012               	return	
 27524  01A9FE  D7F7               	goto	l1025
 27525  01AA00                     __end_of_i2c_WaitForIdle:
 27526                           	opt stack 0
 27527                           tblptru	equ	0xFF8
 27528                           tblptrh	equ	0xFF7
 27529                           tblptrl	equ	0xFF6
 27530                           tablat	equ	0xFF5
 27531                           prodh	equ	0xFF4
 27532                           prodl	equ	0xFF3
 27533                           intcon	equ	0xFF2
 27534                           postinc0	equ	0xFEE
 27535                           wreg	equ	0xFE8
 27536                           postdec1	equ	0xFE5
 27537                           fsr1h	equ	0xFE2
 27538                           fsr1l	equ	0xFE1
 27539                           indf2	equ	0xFDF
 27540                           postinc2	equ	0xFDE
 27541                           postdec2	equ	0xFDD
 27542                           fsr2h	equ	0xFDA
 27543                           fsr2l	equ	0xFD9
 27544                           status	equ	0xFD8
 27545                           
 27546 ;; *************** function _I2C_Stop *****************
 27547 ;; Defined at:
 27548 ;;		line 140 in file "RTC.c"
 27549 ;; Parameters:    Size  Location     Type
 27550 ;;		None
 27551 ;; Auto vars:     Size  Location     Type
 27552 ;;		None
 27553 ;; Return value:  Size  Location     Type
 27554 ;;                  1    wreg      void 
 27555 ;; Registers used:
 27556 ;;		None
 27557 ;; Tracked objects:
 27558 ;;		On entry : 0/0
 27559 ;;		On exit  : 0/0
 27560 ;;		Unchanged: 0/0
 27561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27566 ;;Total ram usage:        0 bytes
 27567 ;; Hardware stack levels used:    1
 27568 ;; Hardware stack levels required when called:    3
 27569 ;; This function calls:
 27570 ;;		Nothing
 27571 ;; This function is called by:
 27572 ;;		_RTC_Init
 27573 ;;		_RTC_GetDateTime
 27574 ;;		_RTC_SetDateTime
 27575 ;; This function uses a non-reentrant model
 27576 ;;
 27577                           
 27578                           	psect	text93
 27579  01AAE0                     __ptext93:
 27580                           	opt stack 0
 27581  01AAE0                     _I2C_Stop:
 27582                           	opt stack 24
 27583                           
 27584                           ;RTC.c: 142: SSP1CON2bits.PEN = 1;
 27585                           
 27586                           ;incstack = 0
 27587  01AAE0  84C5               	bsf	4037,2,c	;volatile
 27588  01AAE2                     l1049:
 27589  01AAE2  A4C5               	btfss	4037,2,c	;volatile
 27590  01AAE4  0012               	return	
 27591  01AAE6  D7FD               	goto	l1049
 27592  01AAE8                     __end_of_I2C_Stop:
 27593                           	opt stack 0
 27594                           tblptru	equ	0xFF8
 27595                           tblptrh	equ	0xFF7
 27596                           tblptrl	equ	0xFF6
 27597                           tablat	equ	0xFF5
 27598                           prodh	equ	0xFF4
 27599                           prodl	equ	0xFF3
 27600                           intcon	equ	0xFF2
 27601                           postinc0	equ	0xFEE
 27602                           wreg	equ	0xFE8
 27603                           postdec1	equ	0xFE5
 27604                           fsr1h	equ	0xFE2
 27605                           fsr1l	equ	0xFE1
 27606                           indf2	equ	0xFDF
 27607                           postinc2	equ	0xFDE
 27608                           postdec2	equ	0xFDD
 27609                           fsr2h	equ	0xFDA
 27610                           fsr2l	equ	0xFD9
 27611                           status	equ	0xFD8
 27612                           
 27613 ;; *************** function _I2C_Start *****************
 27614 ;; Defined at:
 27615 ;;		line 134 in file "RTC.c"
 27616 ;; Parameters:    Size  Location     Type
 27617 ;;		None
 27618 ;; Auto vars:     Size  Location     Type
 27619 ;;		None
 27620 ;; Return value:  Size  Location     Type
 27621 ;;                  1    wreg      void 
 27622 ;; Registers used:
 27623 ;;		None
 27624 ;; Tracked objects:
 27625 ;;		On entry : 0/0
 27626 ;;		On exit  : 0/0
 27627 ;;		Unchanged: 0/0
 27628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27633 ;;Total ram usage:        0 bytes
 27634 ;; Hardware stack levels used:    1
 27635 ;; Hardware stack levels required when called:    3
 27636 ;; This function calls:
 27637 ;;		Nothing
 27638 ;; This function is called by:
 27639 ;;		_RTC_Init
 27640 ;;		_RTC_GetDateTime
 27641 ;;		_RTC_SetDateTime
 27642 ;; This function uses a non-reentrant model
 27643 ;;
 27644                           
 27645                           	psect	text94
 27646  01AAE8                     __ptext94:
 27647                           	opt stack 0
 27648  01AAE8                     _I2C_Start:
 27649                           	opt stack 24
 27650                           
 27651                           ;RTC.c: 136: SSP1CON2bits.SEN = 1;
 27652                           
 27653                           ;incstack = 0
 27654  01AAE8  80C5               	bsf	4037,0,c	;volatile
 27655  01AAEA                     l1043:
 27656  01AAEA  A0C5               	btfss	4037,0,c	;volatile
 27657  01AAEC  0012               	return	
 27658  01AAEE  D7FD               	goto	l1043
 27659  01AAF0                     __end_of_I2C_Start:
 27660                           	opt stack 0
 27661                           tblptru	equ	0xFF8
 27662                           tblptrh	equ	0xFF7
 27663                           tblptrl	equ	0xFF6
 27664                           tablat	equ	0xFF5
 27665                           prodh	equ	0xFF4
 27666                           prodl	equ	0xFF3
 27667                           intcon	equ	0xFF2
 27668                           postinc0	equ	0xFEE
 27669                           wreg	equ	0xFE8
 27670                           postdec1	equ	0xFE5
 27671                           fsr1h	equ	0xFE2
 27672                           fsr1l	equ	0xFE1
 27673                           indf2	equ	0xFDF
 27674                           postinc2	equ	0xFDE
 27675                           postdec2	equ	0xFDD
 27676                           fsr2h	equ	0xFDA
 27677                           fsr2l	equ	0xFD9
 27678                           status	equ	0xFD8
 27679                           
 27680 ;; *************** function _I2C_Init *****************
 27681 ;; Defined at:
 27682 ;;		line 75 in file "RTC.c"
 27683 ;; Parameters:    Size  Location     Type
 27684 ;;		None
 27685 ;; Auto vars:     Size  Location     Type
 27686 ;;		None
 27687 ;; Return value:  Size  Location     Type
 27688 ;;                  1    wreg      void 
 27689 ;; Registers used:
 27690 ;;		wreg, status,2, status,0
 27691 ;; Tracked objects:
 27692 ;;		On entry : 0/0
 27693 ;;		On exit  : 0/0
 27694 ;;		Unchanged: 0/0
 27695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27700 ;;Total ram usage:        0 bytes
 27701 ;; Hardware stack levels used:    1
 27702 ;; Hardware stack levels required when called:    3
 27703 ;; This function calls:
 27704 ;;		Nothing
 27705 ;; This function is called by:
 27706 ;;		_RTC_Init
 27707 ;; This function uses a non-reentrant model
 27708 ;;
 27709                           
 27710                           	psect	text95
 27711  01AA10                     __ptext95:
 27712                           	opt stack 0
 27713  01AA10                     _I2C_Init:
 27714                           	opt stack 26
 27715                           
 27716                           ;RTC.c: 77: TRISC3 = 1;
 27717                           
 27718                           ;incstack = 0
 27719  01AA10  8694               	bsf	3988,3,c	;volatile
 27720                           
 27721                           ;RTC.c: 78: TRISC4 = 1;
 27722  01AA12  8894               	bsf	3988,4,c	;volatile
 27723                           
 27724                           ;RTC.c: 80: SSP1STAT |= 0x80;
 27725  01AA14  8EC7               	bsf	4039,7,c	;volatile
 27726                           
 27727                           ;RTC.c: 81: SSP1CON1 = 0x28;
 27728  01AA16  0E28               	movlw	40
 27729  01AA18  6EC6               	movwf	4038,c	;volatile
 27730                           
 27731                           ;RTC.c: 82: SSP1ADD = 24;
 27732  01AA1A  0E18               	movlw	24
 27733  01AA1C  6EC8               	movwf	4040,c	;volatile
 27734  01AA1E  0012               	return		;funcret
 27735  01AA20                     __end_of_I2C_Init:
 27736                           	opt stack 0
 27737                           tblptru	equ	0xFF8
 27738                           tblptrh	equ	0xFF7
 27739                           tblptrl	equ	0xFF6
 27740                           tablat	equ	0xFF5
 27741                           prodh	equ	0xFF4
 27742                           prodl	equ	0xFF3
 27743                           intcon	equ	0xFF2
 27744                           postinc0	equ	0xFEE
 27745                           wreg	equ	0xFE8
 27746                           postdec1	equ	0xFE5
 27747                           fsr1h	equ	0xFE2
 27748                           fsr1l	equ	0xFE1
 27749                           indf2	equ	0xFDF
 27750                           postinc2	equ	0xFDE
 27751                           postdec2	equ	0xFDD
 27752                           fsr2h	equ	0xFDA
 27753                           fsr2l	equ	0xFD9
 27754                           status	equ	0xFD8
 27755                           
 27756 ;; *************** function _RS485_Data_communication *****************
 27757 ;; Defined at:
 27758 ;;		line 25 in file "RS485_COMMUNICATION.c"
 27759 ;; Parameters:    Size  Location     Type
 27760 ;;		None
 27761 ;; Auto vars:     Size  Location     Type
 27762 ;;		None
 27763 ;; Return value:  Size  Location     Type
 27764 ;;                  2   76[None  ] int 
 27765 ;; Registers used:
 27766 ;;		wreg, status,2, status,0, cstack
 27767 ;; Tracked objects:
 27768 ;;		On entry : 0/0
 27769 ;;		On exit  : 0/0
 27770 ;;		Unchanged: 0/0
 27771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27774 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27775 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27776 ;;Total ram usage:        1 bytes
 27777 ;; Hardware stack levels used:    1
 27778 ;; Hardware stack levels required when called:    4
 27779 ;; This function calls:
 27780 ;;		_usart2_init
 27781 ;;		_usart_str_2
 27782 ;; This function is called by:
 27783 ;;		_main
 27784 ;; This function uses a non-reentrant model
 27785 ;;
 27786                           
 27787                           	psect	text96
 27788  0199F0                     __ptext96:
 27789                           	opt stack 0
 27790  0199F0                     _RS485_Data_communication:
 27791                           	opt stack 26
 27792                           
 27793                           ;RS485_COMMUNICATION.c: 27: if(Serial_No == 8)
 27794                           
 27795                           ;incstack = 0
 27796  0199F0  0E08               	movlw	8
 27797  0199F2  0101               	movlb	1	; () banked
 27798  0199F4  194B               	xorwf	_Serial_No& (0+255),w,b
 27799  0199F6  0101               	movlb	1	; () banked
 27800  0199F8  114C               	iorwf	(_Serial_No+1)& (0+255),w,b
 27801  0199FA  B4D8               	btfsc	status,2,c
 27802                           
 27803                           ; BSR set to: 1
 27804                           ;RS485_COMMUNICATION.c: 28: {
 27805                           ;RS485_COMMUNICATION.c: 29: usart2_init();
 27806  0199FC  ECB0  F0D3         	call	_usart2_init	;wreg free
 27807                           
 27808                           ;RS485_COMMUNICATION.c: 30: }
 27809                           ;RS485_COMMUNICATION.c: 31: if(Timer0_Falg2 == 1 && Serial_No > 8)
 27810  019A00  0101               	movlb	1	; () banked
 27811  019A02  05C4               	decf	_Timer0_Falg2& (0+255),w,b
 27812  019A04  A4D8               	btfss	status,2,c
 27813  019A06  0012               	return	
 27814                           
 27815                           ; BSR set to: 1
 27816  019A08  0101               	movlb	1	; () banked
 27817  019A0A  514C               	movf	(_Serial_No+1)& (0+255),w,b
 27818  019A0C  E105               	bnz	u11520
 27819  019A0E  0E09               	movlw	9
 27820  019A10  0101               	movlb	1	; () banked
 27821  019A12  5D4B               	subwf	_Serial_No& (0+255),w,b
 27822  019A14  A0D8               	btfss	status,0,c
 27823  019A16  0012               	return	
 27824  019A18                     u11520:
 27825                           
 27826                           ; BSR set to: 1
 27827                           ;RS485_COMMUNICATION.c: 32: {
 27828                           ;RS485_COMMUNICATION.c: 33: Timer0_Falg2 = 0;
 27829  019A18  0E00               	movlw	0
 27830  019A1A  0101               	movlb	1	; () banked
 27831  019A1C  6FC4               	movwf	_Timer0_Falg2& (0+255),b
 27832                           
 27833                           ; BSR set to: 1
 27834                           ;RS485_COMMUNICATION.c: 34: Communication_OTP++;
 27835  019A1E  2A35               	incf	_Communication_OTP,f,c
 27836                           
 27837                           ; BSR set to: 1
 27838                           ;RS485_COMMUNICATION.c: 35: if(Communication_OTP == 0 || Communication_OTP == 255)
 27839  019A20  5035               	movf	_Communication_OTP,w,c
 27840  019A22  B4D8               	btfsc	status,2,c
 27841  019A24  D003               	goto	l18957
 27842                           
 27843                           ; BSR set to: 1
 27844  019A26  2835               	incf	_Communication_OTP,w,c
 27845  019A28  A4D8               	btfss	status,2,c
 27846  019A2A  D002               	goto	l18959
 27847  019A2C                     l18957:
 27848                           
 27849                           ; BSR set to: 1
 27850                           ;RS485_COMMUNICATION.c: 36: {
 27851                           ;RS485_COMMUNICATION.c: 37: Communication_OTP = 1;
 27852  019A2C  0E01               	movlw	1
 27853  019A2E  6E35               	movwf	_Communication_OTP,c
 27854  019A30                     l18959:
 27855                           
 27856                           ; BSR set to: 1
 27857                           ;RS485_COMMUNICATION.c: 38: }
 27858                           ;RS485_COMMUNICATION.c: 39: RE0 = 1;
 27859  019A30  8084               	bsf	3972,0,c	;volatile
 27860                           
 27861                           ;RS485_COMMUNICATION.c: 40: RS485_Data_Flag = 1;
 27862  019A32  0E01               	movlw	1
 27863  019A34  0101               	movlb	1	; () banked
 27864  019A36  6FB3               	movwf	_RS485_Data_Flag& (0+255),b
 27865                           
 27866                           ;RS485_COMMUNICATION.c: 41: counter_1 = 0;
 27867  019A38  0E00               	movlw	0
 27868  019A3A  0101               	movlb	1	; () banked
 27869  019A3C  6FDF               	movwf	_counter_1& (0+255),b
 27870                           
 27871                           ;RS485_COMMUNICATION.c: 42: Data_1[0] = 0;
 27872  019A3E  0E00               	movlw	0
 27873  019A40  0105               	movlb	5	; () banked
 27874  019A42  6F01               	movwf	(_Data_1+1)& (0+255),b
 27875  019A44  0E00               	movlw	0
 27876  019A46  6F00               	movwf	_Data_1& (0+255),b
 27877                           
 27878                           ; BSR set to: 5
 27879                           ;RS485_COMMUNICATION.c: 44: _delay((unsigned long)((15)*(8000000/4000.0)));
 27880  019A48  0E27               	movlw	39
 27881  019A4A  6E1E               	movwf	??_RS485_Data_communication& (0+255),c
 27882  019A4C  0EF5               	movlw	245
 27883  019A4E                     u15907:
 27884  019A4E  2EE8               	decfsz	wreg,f,c
 27885  019A50  D7FE               	goto	u15907
 27886  019A52  2E1E               	decfsz	??_RS485_Data_communication& (0+255),f,c
 27887  019A54  D7FC               	goto	u15907
 27888  019A56  F000               	nop	
 27889                           
 27890                           ;RS485_COMMUNICATION.c: 45: usart_str_2(0x07);
 27891  019A58  0E07               	movlw	7
 27892  019A5A  EC3C  F0D5         	call	_usart_str_2
 27893                           
 27894                           ;RS485_COMMUNICATION.c: 46: usart_str_2(VFD_On_Off);
 27895  019A5E  0101               	movlb	1	; () banked
 27896  019A60  51D6               	movf	_VFD_On_Off& (0+255),w,b
 27897  019A62  EC3C  F0D5         	call	_usart_str_2
 27898                           
 27899                           ;RS485_COMMUNICATION.c: 47: usart_str_2(Desired_Frequency);
 27900  019A66  0100               	movlb	0	; () banked
 27901  019A68  51D5               	movf	_Desired_Frequency& (0+255),w,b
 27902  019A6A  EC3C  F0D5         	call	_usart_str_2
 27903                           
 27904                           ;RS485_COMMUNICATION.c: 48: usart_str_2(0x30);
 27905  019A6E  0E30               	movlw	48
 27906  019A70  EC3C  F0D5         	call	_usart_str_2
 27907                           
 27908                           ;RS485_COMMUNICATION.c: 49: usart_str_2(Communication_OTP);
 27909  019A74  5035               	movf	_Communication_OTP,w,c
 27910  019A76  EC3C  F0D5         	call	_usart_str_2
 27911                           
 27912                           ;RS485_COMMUNICATION.c: 50: _delay((unsigned long)((15)*(8000000/4000.0)));
 27913  019A7A  0E27               	movlw	39
 27914  019A7C  6E1E               	movwf	??_RS485_Data_communication& (0+255),c
 27915  019A7E  0EF5               	movlw	245
 27916  019A80                     u15917:
 27917  019A80  2EE8               	decfsz	wreg,f,c
 27918  019A82  D7FE               	goto	u15917
 27919  019A84  2E1E               	decfsz	??_RS485_Data_communication& (0+255),f,c
 27920  019A86  D7FC               	goto	u15917
 27921  019A88  F000               	nop	
 27922                           
 27923                           ;RS485_COMMUNICATION.c: 51: RE0 = 0;
 27924  019A8A  9084               	bcf	3972,0,c	;volatile
 27925  019A8C  0012               	return	
 27926  019A8E                     __end_of_RS485_Data_communication:
 27927                           	opt stack 0
 27928                           tblptru	equ	0xFF8
 27929                           tblptrh	equ	0xFF7
 27930                           tblptrl	equ	0xFF6
 27931                           tablat	equ	0xFF5
 27932                           prodh	equ	0xFF4
 27933                           prodl	equ	0xFF3
 27934                           intcon	equ	0xFF2
 27935                           postinc0	equ	0xFEE
 27936                           wreg	equ	0xFE8
 27937                           postdec1	equ	0xFE5
 27938                           fsr1h	equ	0xFE2
 27939                           fsr1l	equ	0xFE1
 27940                           indf2	equ	0xFDF
 27941                           postinc2	equ	0xFDE
 27942                           postdec2	equ	0xFDD
 27943                           fsr2h	equ	0xFDA
 27944                           fsr2l	equ	0xFD9
 27945                           status	equ	0xFD8
 27946                           
 27947 ;; *************** function _usart_str_2 *****************
 27948 ;; Defined at:
 27949 ;;		line 604 in file "UART.c"
 27950 ;; Parameters:    Size  Location     Type
 27951 ;;  str             1    wreg     const unsigned char 
 27952 ;; Auto vars:     Size  Location     Type
 27953 ;;  str             1   28[COMRAM] const unsigned char 
 27954 ;; Return value:  Size  Location     Type
 27955 ;;                  1    wreg      void 
 27956 ;; Registers used:
 27957 ;;		wreg
 27958 ;; Tracked objects:
 27959 ;;		On entry : 0/0
 27960 ;;		On exit  : 0/0
 27961 ;;		Unchanged: 0/0
 27962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27967 ;;Total ram usage:        1 bytes
 27968 ;; Hardware stack levels used:    1
 27969 ;; Hardware stack levels required when called:    3
 27970 ;; This function calls:
 27971 ;;		Nothing
 27972 ;; This function is called by:
 27973 ;;		_RS485_Data_communication
 27974 ;; This function uses a non-reentrant model
 27975 ;;
 27976                           
 27977                           	psect	text97
 27978  01AA78                     __ptext97:
 27979                           	opt stack 0
 27980  01AA78                     _usart_str_2:
 27981                           	opt stack 26
 27982                           
 27983                           ;incstack = 0
 27984                           ;usart_str_2@str stored from wreg
 27985  01AA78  6E1D               	movwf	usart_str_2@str,c
 27986  01AA7A                     l2467:
 27987  01AA7A  A8A4               	btfss	4004,4,c	;volatile
 27988  01AA7C  D7FE               	goto	l2467
 27989                           
 27990                           ;UART.c: 607: TXREG2=(str);
 27991  01AA7E  C01D  FF1C         	movff	usart_str_2@str,3868	;volatile
 27992  01AA82  0012               	return		;funcret
 27993  01AA84                     __end_of_usart_str_2:
 27994                           	opt stack 0
 27995                           tblptru	equ	0xFF8
 27996                           tblptrh	equ	0xFF7
 27997                           tblptrl	equ	0xFF6
 27998                           tablat	equ	0xFF5
 27999                           prodh	equ	0xFF4
 28000                           prodl	equ	0xFF3
 28001                           intcon	equ	0xFF2
 28002                           postinc0	equ	0xFEE
 28003                           wreg	equ	0xFE8
 28004                           postdec1	equ	0xFE5
 28005                           fsr1h	equ	0xFE2
 28006                           fsr1l	equ	0xFE1
 28007                           indf2	equ	0xFDF
 28008                           postinc2	equ	0xFDE
 28009                           postdec2	equ	0xFDD
 28010                           fsr2h	equ	0xFDA
 28011                           fsr2l	equ	0xFD9
 28012                           status	equ	0xFD8
 28013                           
 28014 ;; *************** function _usart2_init *****************
 28015 ;; Defined at:
 28016 ;;		line 559 in file "UART.c"
 28017 ;; Parameters:    Size  Location     Type
 28018 ;;		None
 28019 ;; Auto vars:     Size  Location     Type
 28020 ;;		None
 28021 ;; Return value:  Size  Location     Type
 28022 ;;                  1    wreg      void 
 28023 ;; Registers used:
 28024 ;;		wreg, status,2
 28025 ;; Tracked objects:
 28026 ;;		On entry : 0/0
 28027 ;;		On exit  : 0/0
 28028 ;;		Unchanged: 0/0
 28029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28034 ;;Total ram usage:        0 bytes
 28035 ;; Hardware stack levels used:    1
 28036 ;; Hardware stack levels required when called:    3
 28037 ;; This function calls:
 28038 ;;		Nothing
 28039 ;; This function is called by:
 28040 ;;		_RS485_Data_communication
 28041 ;; This function uses a non-reentrant model
 28042 ;;
 28043                           
 28044                           	psect	text98
 28045  01A760                     __ptext98:
 28046                           	opt stack 0
 28047  01A760                     _usart2_init:
 28048                           	opt stack 26
 28049                           
 28050                           ;UART.c: 562: ANSEL18 = 0;
 28051                           
 28052                           ;incstack = 0
 28053  01A760  010F               	movlb	15	; () banked
 28054  01A762  9523               	bcf	35,2,b	;volatile
 28055                           
 28056                           ;UART.c: 563: ANSEL19 = 0;
 28057  01A764  010F               	movlb	15	; () banked
 28058  01A766  9723               	bcf	35,3,b	;volatile
 28059                           
 28060                           ;UART.c: 564: TRISGbits.TRISG2 = 1;
 28061  01A768  8498               	bsf	3992,2,c	;volatile
 28062                           
 28063                           ;UART.c: 565: TRISGbits.TRISG1 = 0;
 28064  01A76A  9298               	bcf	3992,1,c	;volatile
 28065                           
 28066                           ;UART.c: 566: TXSTA2bits.SYNC = 0;
 28067  01A76C  010F               	movlb	15	; () banked
 28068  01A76E  9921               	bcf	33,4,b	;volatile
 28069                           
 28070                           ;UART.c: 567: TXSTA2bits.BRGH = 1;
 28071  01A770  010F               	movlb	15	; () banked
 28072  01A772  8521               	bsf	33,2,b	;volatile
 28073                           
 28074                           ;UART.c: 568: BAUDCON2bits.BRG16 = 0;
 28075  01A774  010F               	movlb	15	; () banked
 28076  01A776  9720               	bcf	32,3,b	;volatile
 28077                           
 28078                           ;UART.c: 569: TXSTA2bits.TXEN = 1;
 28079  01A778  010F               	movlb	15	; () banked
 28080  01A77A  8B21               	bsf	33,5,b	;volatile
 28081                           
 28082                           ;UART.c: 570: RCSTA2bits.CREN = 1;
 28083  01A77C  010F               	movlb	15	; () banked
 28084  01A77E  8922               	bsf	34,4,b	;volatile
 28085                           
 28086                           ;UART.c: 571: RCSTA2bits.SPEN = 1;
 28087  01A780  010F               	movlb	15	; () banked
 28088  01A782  8F22               	bsf	34,7,b	;volatile
 28089                           
 28090                           ; BSR set to: 15
 28091                           ;UART.c: 572: SPBRG2=51;
 28092  01A784  0E33               	movlw	51
 28093  01A786  010F               	movlb	15	; () banked
 28094  01A788  6F1E               	movwf	30,b	;volatile
 28095                           
 28096                           ; BSR set to: 15
 28097                           ;UART.c: 574: PIR3bits.RC2IF = 0;
 28098  01A78A  9AA4               	bcf	4004,5,c	;volatile
 28099                           
 28100                           ; BSR set to: 15
 28101                           ;UART.c: 575: PIE3bits.RC2IE = 1;
 28102  01A78C  8AA3               	bsf	4003,5,c	;volatile
 28103                           
 28104                           ; BSR set to: 15
 28105  01A78E  0012               	return		;funcret
 28106  01A790                     __end_of_usart2_init:
 28107                           	opt stack 0
 28108                           tblptru	equ	0xFF8
 28109                           tblptrh	equ	0xFF7
 28110                           tblptrl	equ	0xFF6
 28111                           tablat	equ	0xFF5
 28112                           prodh	equ	0xFF4
 28113                           prodl	equ	0xFF3
 28114                           intcon	equ	0xFF2
 28115                           postinc0	equ	0xFEE
 28116                           wreg	equ	0xFE8
 28117                           postdec1	equ	0xFE5
 28118                           fsr1h	equ	0xFE2
 28119                           fsr1l	equ	0xFE1
 28120                           indf2	equ	0xFDF
 28121                           postinc2	equ	0xFDE
 28122                           postdec2	equ	0xFDD
 28123                           fsr2h	equ	0xFDA
 28124                           fsr2l	equ	0xFD9
 28125                           status	equ	0xFD8
 28126                           
 28127 ;; *************** function _RPM_Data_Kill *****************
 28128 ;; Defined at:
 28129 ;;		line 269 in file "RPM_Measurement.c"
 28130 ;; Parameters:    Size  Location     Type
 28131 ;;		None
 28132 ;; Auto vars:     Size  Location     Type
 28133 ;;		None
 28134 ;; Return value:  Size  Location     Type
 28135 ;;                  1    wreg      void 
 28136 ;; Registers used:
 28137 ;;		wreg, status,2, status,0
 28138 ;; Tracked objects:
 28139 ;;		On entry : 0/0
 28140 ;;		On exit  : 0/0
 28141 ;;		Unchanged: 0/0
 28142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28147 ;;Total ram usage:        0 bytes
 28148 ;; Hardware stack levels used:    1
 28149 ;; Hardware stack levels required when called:    3
 28150 ;; This function calls:
 28151 ;;		Nothing
 28152 ;; This function is called by:
 28153 ;;		_main
 28154 ;; This function uses a non-reentrant model
 28155 ;;
 28156                           
 28157                           	psect	text99
 28158  0170C2                     __ptext99:
 28159                           	opt stack 0
 28160  0170C2                     _RPM_Data_Kill:
 28161                           	opt stack 27
 28162                           
 28163                           ;RPM_Measurement.c: 273: if(Timer1_OF_counter_Turbine > 50)
 28164                           
 28165                           ; BSR set to: 15
 28166                           ;incstack = 0
 28167  0170C2  0102               	movlb	2	; () banked
 28168  0170C4  51B7               	movf	(_Timer1_OF_counter_Turbine+1)& (0+255),w,b
 28169  0170C6  E105               	bnz	u11310
 28170  0170C8  0E33               	movlw	51
 28171  0170CA  0102               	movlb	2	; () banked
 28172  0170CC  5DB6               	subwf	_Timer1_OF_counter_Turbine& (0+255),w,b
 28173  0170CE  A0D8               	btfss	status,0,c
 28174  0170D0  D042               	goto	l18859
 28175  0170D2                     u11310:
 28176                           
 28177                           ; BSR set to: 2
 28178                           ;RPM_Measurement.c: 274: {
 28179                           ;RPM_Measurement.c: 275: Timer1_OF_counter_Turbine = 0;
 28180  0170D2  0E00               	movlw	0
 28181  0170D4  0102               	movlb	2	; () banked
 28182  0170D6  6FB7               	movwf	(_Timer1_OF_counter_Turbine+1)& (0+255),b
 28183  0170D8  0E00               	movlw	0
 28184  0170DA  6FB6               	movwf	_Timer1_OF_counter_Turbine& (0+255),b
 28185                           
 28186                           ;RPM_Measurement.c: 276: Turbine_RPM = 0;
 28187  0170DC  0E00               	movlw	0
 28188  0170DE  6E2D               	movwf	_Turbine_RPM,c
 28189  0170E0  0E00               	movlw	0
 28190  0170E2  6E2E               	movwf	_Turbine_RPM+1,c
 28191  0170E4  0E00               	movlw	0
 28192  0170E6  6E2F               	movwf	_Turbine_RPM+2,c
 28193                           
 28194                           ;RPM_Measurement.c: 277: RPM_PWM = 0;
 28195  0170E8  0E00               	movlw	0
 28196  0170EA  0102               	movlb	2	; () banked
 28197  0170EC  6FFB               	movwf	(_RPM_PWM+1)& (0+255),b
 28198  0170EE  0E00               	movlw	0
 28199  0170F0  6FFA               	movwf	_RPM_PWM& (0+255),b
 28200                           
 28201                           ;RPM_Measurement.c: 278: RPM_Time = 0;
 28202  0170F2  0E00               	movlw	0
 28203  0170F4  0101               	movlb	1	; () banked
 28204  0170F6  6F48               	movwf	(_RPM_Time+1)& (0+255),b
 28205  0170F8  0E00               	movlw	0
 28206  0170FA  6F47               	movwf	_RPM_Time& (0+255),b
 28207                           
 28208                           ;RPM_Measurement.c: 279: TRPM_Frequency = 0;
 28209  0170FC  0E00               	movlw	0
 28210  0170FE  0104               	movlb	4	; () banked
 28211  017100  6FEA               	movwf	_TRPM_Frequency& (0+255),b
 28212  017102  0E00               	movlw	0
 28213  017104  0104               	movlb	4	; () banked
 28214  017106  6FEB               	movwf	(_TRPM_Frequency+1)& (0+255),b
 28215  017108  0E00               	movlw	0
 28216  01710A  0104               	movlb	4	; () banked
 28217  01710C  6FEC               	movwf	(_TRPM_Frequency+2)& (0+255),b
 28218                           
 28219                           ;RPM_Measurement.c: 280: TRPM_Time = 0;
 28220  01710E  0E00               	movlw	0
 28221  017110  0104               	movlb	4	; () banked
 28222  017112  6FED               	movwf	_TRPM_Time& (0+255),b
 28223  017114  0E00               	movlw	0
 28224  017116  0104               	movlb	4	; () banked
 28225  017118  6FEE               	movwf	(_TRPM_Time+1)& (0+255),b
 28226  01711A  0E00               	movlw	0
 28227  01711C  0104               	movlb	4	; () banked
 28228  01711E  6FEF               	movwf	(_TRPM_Time+2)& (0+255),b
 28229                           
 28230                           ;RPM_Measurement.c: 281: Turb_RPM = 0; Turbine_RPM_Old = 0; Turbine_RPM_New = 0;
 28231  017120  0E00               	movlw	0
 28232  017122  0104               	movlb	4	; () banked
 28233  017124  6FAB               	movwf	_Turb_RPM& (0+255),b
 28234  017126  0E00               	movlw	0
 28235  017128  0104               	movlb	4	; () banked
 28236  01712A  6FAC               	movwf	(_Turb_RPM+1)& (0+255),b
 28237  01712C  0E00               	movlw	0
 28238  01712E  0104               	movlb	4	; () banked
 28239  017130  6FAD               	movwf	(_Turb_RPM+2)& (0+255),b
 28240  017132  0E00               	movlw	0
 28241  017134  0101               	movlb	1	; () banked
 28242  017136  6F2A               	movwf	_Turbine_RPM_Old& (0+255),b
 28243  017138  0E00               	movlw	0
 28244  01713A  0101               	movlb	1	; () banked
 28245  01713C  6F2B               	movwf	(_Turbine_RPM_Old+1)& (0+255),b
 28246  01713E  0E00               	movlw	0
 28247  017140  0101               	movlb	1	; () banked
 28248  017142  6F2C               	movwf	(_Turbine_RPM_Old+2)& (0+255),b
 28249  017144  0E00               	movlw	0
 28250  017146  0101               	movlb	1	; () banked
 28251  017148  6F27               	movwf	_Turbine_RPM_New& (0+255),b
 28252  01714A  0E00               	movlw	0
 28253  01714C  0101               	movlb	1	; () banked
 28254  01714E  6F28               	movwf	(_Turbine_RPM_New+1)& (0+255),b
 28255  017150  0E00               	movlw	0
 28256  017152  0101               	movlb	1	; () banked
 28257  017154  6F29               	movwf	(_Turbine_RPM_New+2)& (0+255),b
 28258  017156                     l18859:
 28259                           
 28260                           ;RPM_Measurement.c: 282: }
 28261                           ;RPM_Measurement.c: 283: if(Timer1_OF_counter_Generator > 10)
 28262  017156  0102               	movlb	2	; () banked
 28263  017158  51B1               	movf	(_Timer1_OF_counter_Generator+1)& (0+255),w,b
 28264  01715A  E105               	bnz	u11320
 28265  01715C  0E0B               	movlw	11
 28266  01715E  0102               	movlb	2	; () banked
 28267  017160  5DB0               	subwf	_Timer1_OF_counter_Generator& (0+255),w,b
 28268  017162  A0D8               	btfss	status,0,c
 28269  017164  D021               	goto	l18863
 28270  017166                     u11320:
 28271                           
 28272                           ; BSR set to: 2
 28273                           ;RPM_Measurement.c: 284: {
 28274                           ;RPM_Measurement.c: 285: Timer1_OF_counter_Generator = 0;
 28275  017166  0E00               	movlw	0
 28276  017168  0102               	movlb	2	; () banked
 28277  01716A  6FB1               	movwf	(_Timer1_OF_counter_Generator+1)& (0+255),b
 28278  01716C  0E00               	movlw	0
 28279  01716E  6FB0               	movwf	_Timer1_OF_counter_Generator& (0+255),b
 28280                           
 28281                           ;RPM_Measurement.c: 286: GRPM_Frequency = 0; GRPM_Cap_New = 0;Generator_RPM_FLT = 0;Gene
      +                          rator_RPM_INT = 0;
 28282  017170  0E00               	movlw	0
 28283  017172  0104               	movlb	4	; () banked
 28284  017174  6FE1               	movwf	_GRPM_Frequency& (0+255),b
 28285  017176  0E00               	movlw	0
 28286  017178  0104               	movlb	4	; () banked
 28287  01717A  6FE2               	movwf	(_GRPM_Frequency+1)& (0+255),b
 28288  01717C  0E00               	movlw	0
 28289  01717E  0104               	movlb	4	; () banked
 28290  017180  6FE3               	movwf	(_GRPM_Frequency+2)& (0+255),b
 28291  017182  0E00               	movlw	0
 28292  017184  0101               	movlb	1	; () banked
 28293  017186  6F38               	movwf	(_GRPM_Cap_New+1)& (0+255),b
 28294  017188  0E00               	movlw	0
 28295  01718A  6F37               	movwf	_GRPM_Cap_New& (0+255),b
 28296  01718C  0E00               	movlw	0
 28297  01718E  0100               	movlb	0	; () banked
 28298  017190  6FCF               	movwf	_Generator_RPM_FLT& (0+255),b
 28299  017192  0E00               	movlw	0
 28300  017194  0100               	movlb	0	; () banked
 28301  017196  6FD0               	movwf	(_Generator_RPM_FLT+1)& (0+255),b
 28302  017198  0E00               	movlw	0
 28303  01719A  0100               	movlb	0	; () banked
 28304  01719C  6FD1               	movwf	(_Generator_RPM_FLT+2)& (0+255),b
 28305  01719E  0E00               	movlw	0
 28306  0171A0  0102               	movlb	2	; () banked
 28307  0171A2  6F8F               	movwf	(_Generator_RPM_INT+1)& (0+255),b
 28308  0171A4  0E00               	movlw	0
 28309  0171A6  6F8E               	movwf	_Generator_RPM_INT& (0+255),b
 28310  0171A8                     l18863:
 28311                           
 28312                           ; BSR set to: 2
 28313                           ;RPM_Measurement.c: 287: }
 28314                           ;RPM_Measurement.c: 288: if(Timer1_OF_counter_Wind > 10)
 28315  0171A8  0102               	movlb	2	; () banked
 28316  0171AA  51B9               	movf	(_Timer1_OF_counter_Wind+1)& (0+255),w,b
 28317  0171AC  E105               	bnz	u11330
 28318  0171AE  0E0B               	movlw	11
 28319  0171B0  0102               	movlb	2	; () banked
 28320  0171B2  5DB8               	subwf	_Timer1_OF_counter_Wind& (0+255),w,b
 28321  0171B4  A0D8               	btfss	status,0,c
 28322  0171B6  D01E               	goto	l18867
 28323  0171B8                     u11330:
 28324                           
 28325                           ; BSR set to: 2
 28326                           ;RPM_Measurement.c: 289: {
 28327                           ;RPM_Measurement.c: 290: Timer1_OF_counter_Wind = 0;
 28328  0171B8  0E00               	movlw	0
 28329  0171BA  0102               	movlb	2	; () banked
 28330  0171BC  6FB9               	movwf	(_Timer1_OF_counter_Wind+1)& (0+255),b
 28331  0171BE  0E00               	movlw	0
 28332  0171C0  6FB8               	movwf	_Timer1_OF_counter_Wind& (0+255),b
 28333                           
 28334                           ;RPM_Measurement.c: 291: Wind_Frequency = 0;Wind_Cap_New = 0;Wind_Speed = 0;
 28335  0171C2  0E00               	movlw	0
 28336  0171C4  0104               	movlb	4	; () banked
 28337  0171C6  6FB1               	movwf	_Wind_Frequency& (0+255),b
 28338  0171C8  0E00               	movlw	0
 28339  0171CA  0104               	movlb	4	; () banked
 28340  0171CC  6FB2               	movwf	(_Wind_Frequency+1)& (0+255),b
 28341  0171CE  0E00               	movlw	0
 28342  0171D0  0104               	movlb	4	; () banked
 28343  0171D2  6FB3               	movwf	(_Wind_Frequency+2)& (0+255),b
 28344  0171D4  0E00               	movlw	0
 28345  0171D6  0101               	movlb	1	; () banked
 28346  0171D8  6F5E               	movwf	(_Wind_Cap_New+1)& (0+255),b
 28347  0171DA  0E00               	movlw	0
 28348  0171DC  6F5D               	movwf	_Wind_Cap_New& (0+255),b
 28349  0171DE  0E00               	movlw	0
 28350  0171E0  0102               	movlb	2	; () banked
 28351  0171E2  6F36               	movwf	_Wind_Speed& (0+255),b
 28352  0171E4  0E00               	movlw	0
 28353  0171E6  0102               	movlb	2	; () banked
 28354  0171E8  6F37               	movwf	(_Wind_Speed+1)& (0+255),b
 28355  0171EA  0E00               	movlw	0
 28356  0171EC  0102               	movlb	2	; () banked
 28357  0171EE  6F38               	movwf	(_Wind_Speed+2)& (0+255),b
 28358                           
 28359                           ;RPM_Measurement.c: 292: wind_1_Temp_flag = 1;
 28360  0171F0  0E01               	movlw	1
 28361  0171F2  D001               	goto	L13
 28362  0171F4                     l18867:
 28363                           
 28364                           ;RPM_Measurement.c: 294: else
 28365                           ;RPM_Measurement.c: 295: {
 28366                           ;RPM_Measurement.c: 296: wind_1_Temp_flag = 0;
 28367  0171F4  0E00               	movlw	0
 28368  0171F6                     L13:
 28369  0171F6  0101               	movlb	1	; () banked
 28370  0171F8  6FE4               	movwf	_wind_1_Temp_flag& (0+255),b
 28371                           
 28372                           ; BSR set to: 1
 28373                           ;RPM_Measurement.c: 298: }
 28374                           ;RPM_Measurement.c: 299: if(Timer1_OF_counter_Wind_2 > 10)
 28375                           
 28376                           ; BSR set to: 1
 28377  0171FA  0102               	movlb	2	; () banked
 28378  0171FC  51BB               	movf	(_Timer1_OF_counter_Wind_2+1)& (0+255),w,b
 28379  0171FE  E105               	bnz	u11340
 28380  017200  0E0B               	movlw	11
 28381  017202  0102               	movlb	2	; () banked
 28382  017204  5DBA               	subwf	_Timer1_OF_counter_Wind_2& (0+255),w,b
 28383  017206  A0D8               	btfss	status,0,c
 28384  017208  D020               	goto	l18873
 28385  01720A                     u11340:
 28386                           
 28387                           ; BSR set to: 2
 28388                           ;RPM_Measurement.c: 300: {
 28389                           ;RPM_Measurement.c: 301: Timer1_OF_counter_Wind_2 = 0;
 28390  01720A  0E00               	movlw	0
 28391  01720C  0102               	movlb	2	; () banked
 28392  01720E  6FBB               	movwf	(_Timer1_OF_counter_Wind_2+1)& (0+255),b
 28393  017210  0E00               	movlw	0
 28394  017212  6FBA               	movwf	_Timer1_OF_counter_Wind_2& (0+255),b
 28395                           
 28396                           ;RPM_Measurement.c: 302: wind_Frequency_2 = 0;Wind_Cap_New_2 = 0;Wind_Speed_2 = 0;
 28397  017214  0E00               	movlw	0
 28398  017216  0104               	movlb	4	; () banked
 28399  017218  6FD8               	movwf	_wind_Frequency_2& (0+255),b
 28400  01721A  0E00               	movlw	0
 28401  01721C  0104               	movlb	4	; () banked
 28402  01721E  6FD9               	movwf	(_wind_Frequency_2+1)& (0+255),b
 28403  017220  0E00               	movlw	0
 28404  017222  0104               	movlb	4	; () banked
 28405  017224  6FDA               	movwf	(_wind_Frequency_2+2)& (0+255),b
 28406  017226  0E00               	movlw	0
 28407  017228  0101               	movlb	1	; () banked
 28408  01722A  6F60               	movwf	(_Wind_Cap_New_2+1)& (0+255),b
 28409  01722C  0E00               	movlw	0
 28410  01722E  6F5F               	movwf	_Wind_Cap_New_2& (0+255),b
 28411  017230  0E00               	movlw	0
 28412  017232  0102               	movlb	2	; () banked
 28413  017234  6F45               	movwf	_Wind_Speed_2& (0+255),b
 28414  017236  0E00               	movlw	0
 28415  017238  0102               	movlb	2	; () banked
 28416  01723A  6F46               	movwf	(_Wind_Speed_2+1)& (0+255),b
 28417  01723C  0E00               	movlw	0
 28418  01723E  0102               	movlb	2	; () banked
 28419  017240  6F47               	movwf	(_Wind_Speed_2+2)& (0+255),b
 28420                           
 28421                           ;RPM_Measurement.c: 303: wind_2_Temp_flag = 1;
 28422  017242  0E01               	movlw	1
 28423  017244  0101               	movlb	1	; () banked
 28424  017246  6FE5               	movwf	_wind_2_Temp_flag& (0+255),b
 28425                           
 28426                           ;RPM_Measurement.c: 304: }
 28427  017248  0012               	return	
 28428  01724A                     l18873:
 28429                           
 28430                           ;RPM_Measurement.c: 305: else
 28431                           ;RPM_Measurement.c: 306: {
 28432                           ;RPM_Measurement.c: 307: wind_2_Temp_flag = 0;
 28433  01724A  0E00               	movlw	0
 28434  01724C  0101               	movlb	1	; () banked
 28435  01724E  6FE5               	movwf	_wind_2_Temp_flag& (0+255),b
 28436  017250  0012               	return	
 28437  017252                     __end_of_RPM_Data_Kill:
 28438                           	opt stack 0
 28439                           tblptru	equ	0xFF8
 28440                           tblptrh	equ	0xFF7
 28441                           tblptrl	equ	0xFF6
 28442                           tablat	equ	0xFF5
 28443                           prodh	equ	0xFF4
 28444                           prodl	equ	0xFF3
 28445                           intcon	equ	0xFF2
 28446                           postinc0	equ	0xFEE
 28447                           wreg	equ	0xFE8
 28448                           postdec1	equ	0xFE5
 28449                           fsr1h	equ	0xFE2
 28450                           fsr1l	equ	0xFE1
 28451                           indf2	equ	0xFDF
 28452                           postinc2	equ	0xFDE
 28453                           postdec2	equ	0xFDD
 28454                           fsr2h	equ	0xFDA
 28455                           fsr2l	equ	0xFD9
 28456                           status	equ	0xFD8
 28457                           
 28458 ;; *************** function _Power_Factor *****************
 28459 ;; Defined at:
 28460 ;;		line 598 in file "Power_Meter.c"
 28461 ;; Parameters:    Size  Location     Type
 28462 ;;		None
 28463 ;; Auto vars:     Size  Location     Type
 28464 ;;		None
 28465 ;; Return value:  Size  Location     Type
 28466 ;;                  1    wreg      void 
 28467 ;; Registers used:
 28468 ;;		wreg, status,2, status,0, cstack
 28469 ;; Tracked objects:
 28470 ;;		On entry : 0/0
 28471 ;;		On exit  : 0/0
 28472 ;;		Unchanged: 0/0
 28473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28475 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28477 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28478 ;;Total ram usage:        3 bytes
 28479 ;; Hardware stack levels used:    1
 28480 ;; Hardware stack levels required when called:    5
 28481 ;; This function calls:
 28482 ;;		___ftadd
 28483 ;;		___ftdiv
 28484 ;;		___ftge
 28485 ;; This function is called by:
 28486 ;;		_main
 28487 ;; This function uses a non-reentrant model
 28488 ;;
 28489                           
 28490                           	psect	text100
 28491  0190DA                     __ptext100:
 28492                           	opt stack 0
 28493  0190DA                     _Power_Factor:
 28494                           	opt stack 25
 28495                           
 28496                           ;Power_Meter.c: 600: if ( Avg_RYB_Current > 0.5)
 28497                           
 28498                           ; BSR set to: 1
 28499                           ;incstack = 0
 28500  0190DA  0E00               	movlw	0
 28501  0190DC  0100               	movlb	0	; () banked
 28502  0190DE  6F8F               	movwf	___ftge@ff1& (0+255),b
 28503  0190E0  0E00               	movlw	0
 28504  0190E2  0100               	movlb	0	; () banked
 28505  0190E4  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 28506  0190E6  0E3F               	movlw	63
 28507  0190E8  0100               	movlb	0	; () banked
 28508  0190EA  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 28509  0190EC  C100  F092         	movff	_Avg_RYB_Current,___ftge@ff2
 28510  0190F0  C101  F093         	movff	_Avg_RYB_Current+1,___ftge@ff2+1
 28511  0190F4  C102  F094         	movff	_Avg_RYB_Current+2,___ftge@ff2+2
 28512  0190F8  EC09  F0C8         	call	___ftge	;wreg free
 28513  0190FC  0100               	movlb	0	; () banked
 28514  0190FE  B0D8               	btfsc	status,0,c
 28515  019100  D03A               	goto	l21861
 28516                           
 28517                           ; BSR set to: 0
 28518                           ;Power_Meter.c: 601: {
 28519                           ;Power_Meter.c: 602: Total_Power_Factor = ((R_Power_Factor + Y_Power_Factor + B_Power_Fa
      +                          ctor) / 3);
 28520  019102  C275  F086         	movff	_Y_Power_Factor,___ftadd@f2
 28521  019106  C276  F087         	movff	_Y_Power_Factor+1,___ftadd@f2+1
 28522  01910A  C277  F088         	movff	_Y_Power_Factor+2,___ftadd@f2+2
 28523  01910E  C49F  F083         	movff	_R_Power_Factor,___ftadd@f1
 28524  019112  C4A0  F084         	movff	_R_Power_Factor+1,___ftadd@f1+1
 28525  019116  C4A1  F085         	movff	_R_Power_Factor+2,___ftadd@f1+2
 28526  01911A  ECE4  F0AF         	call	___ftadd	;wreg free
 28527  01911E  C083  F0AA         	movff	?___ftadd,_Power_Factor$8204
 28528  019122  C084  F0AB         	movff	?___ftadd+1,_Power_Factor$8204+1
 28529  019126  C085  F0AC         	movff	?___ftadd+2,_Power_Factor$8204+2
 28530                           
 28531                           ;Power_Meter.c: 601: {
 28532                           ;Power_Meter.c: 602: Total_Power_Factor = ((R_Power_Factor + Y_Power_Factor + B_Power_Fa
      +                          ctor) / 3);
 28533  01912A  C51F  F086         	movff	_B_Power_Factor,___ftadd@f2
 28534  01912E  C520  F087         	movff	_B_Power_Factor+1,___ftadd@f2+1
 28535  019132  C521  F088         	movff	_B_Power_Factor+2,___ftadd@f2+2
 28536  019136  C0AA  F083         	movff	_Power_Factor$8204,___ftadd@f1
 28537  01913A  C0AB  F084         	movff	_Power_Factor$8204+1,___ftadd@f1+1
 28538  01913E  C0AC  F085         	movff	_Power_Factor$8204+2,___ftadd@f1+2
 28539  019142  ECE4  F0AF         	call	___ftadd	;wreg free
 28540  019146  C083  F09B         	movff	?___ftadd,___ftdiv@f1
 28541  01914A  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
 28542  01914E  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
 28543  019152  0E00               	movlw	0
 28544  019154  0100               	movlb	0	; () banked
 28545  019156  6F9E               	movwf	___ftdiv@f2& (0+255),b
 28546  019158  0E40               	movlw	64
 28547  01915A  0100               	movlb	0	; () banked
 28548  01915C  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 28549  01915E  0E40               	movlw	64
 28550  019160  0100               	movlb	0	; () banked
 28551  019162  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 28552  019164  EC89  F0BF         	call	___ftdiv	;wreg free
 28553  019168  C09B  F22D         	movff	?___ftdiv,_Total_Power_Factor
 28554  01916C  C09C  F22E         	movff	?___ftdiv+1,_Total_Power_Factor+1
 28555  019170  C09D  F22F         	movff	?___ftdiv+2,_Total_Power_Factor+2
 28556                           
 28557                           ;Power_Meter.c: 603: }
 28558  019174  0012               	return	
 28559  019176                     l21861:
 28560                           
 28561                           ;Power_Meter.c: 604: else
 28562                           ;Power_Meter.c: 605: {
 28563                           ;Power_Meter.c: 606: Total_Power_Factor = 0;
 28564  019176  0E00               	movlw	0
 28565  019178  0102               	movlb	2	; () banked
 28566  01917A  6F2D               	movwf	_Total_Power_Factor& (0+255),b
 28567  01917C  0E00               	movlw	0
 28568  01917E  0102               	movlb	2	; () banked
 28569  019180  6F2E               	movwf	(_Total_Power_Factor+1)& (0+255),b
 28570  019182  0E00               	movlw	0
 28571  019184  0102               	movlb	2	; () banked
 28572  019186  6F2F               	movwf	(_Total_Power_Factor+2)& (0+255),b
 28573                           
 28574                           ;Power_Meter.c: 607: Y_Power_Factor = 0;
 28575  019188  0E00               	movlw	0
 28576  01918A  0102               	movlb	2	; () banked
 28577  01918C  6F75               	movwf	_Y_Power_Factor& (0+255),b
 28578  01918E  0E00               	movlw	0
 28579  019190  0102               	movlb	2	; () banked
 28580  019192  6F76               	movwf	(_Y_Power_Factor+1)& (0+255),b
 28581  019194  0E00               	movlw	0
 28582  019196  0102               	movlb	2	; () banked
 28583  019198  6F77               	movwf	(_Y_Power_Factor+2)& (0+255),b
 28584  01919A  0012               	return	
 28585  01919C                     __end_of_Power_Factor:
 28586                           	opt stack 0
 28587                           tblptru	equ	0xFF8
 28588                           tblptrh	equ	0xFF7
 28589                           tblptrl	equ	0xFF6
 28590                           tablat	equ	0xFF5
 28591                           prodh	equ	0xFF4
 28592                           prodl	equ	0xFF3
 28593                           intcon	equ	0xFF2
 28594                           postinc0	equ	0xFEE
 28595                           wreg	equ	0xFE8
 28596                           postdec1	equ	0xFE5
 28597                           fsr1h	equ	0xFE2
 28598                           fsr1l	equ	0xFE1
 28599                           indf2	equ	0xFDF
 28600                           postinc2	equ	0xFDE
 28601                           postdec2	equ	0xFDD
 28602                           fsr2h	equ	0xFDA
 28603                           fsr2l	equ	0xFD9
 28604                           status	equ	0xFD8
 28605                           
 28606 ;; *************** function _Power_Calc *****************
 28607 ;; Defined at:
 28608 ;;		line 624 in file "Power_Meter.c"
 28609 ;; Parameters:    Size  Location     Type
 28610 ;;		None
 28611 ;; Auto vars:     Size  Location     Type
 28612 ;;		None
 28613 ;; Return value:  Size  Location     Type
 28614 ;;                  1    wreg      void 
 28615 ;; Registers used:
 28616 ;;		wreg, status,2, status,0, cstack
 28617 ;; Tracked objects:
 28618 ;;		On entry : 0/0
 28619 ;;		On exit  : 0/0
 28620 ;;		Unchanged: 0/0
 28621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28623 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28625 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28626 ;;Total ram usage:        9 bytes
 28627 ;; Hardware stack levels used:    1
 28628 ;; Hardware stack levels required when called:    7
 28629 ;; This function calls:
 28630 ;;		___ftadd
 28631 ;;		___ftdiv
 28632 ;;		___ftmul
 28633 ;;		___ftneg
 28634 ;;		_sqrt
 28635 ;; This function is called by:
 28636 ;;		_main
 28637 ;; This function uses a non-reentrant model
 28638 ;;
 28639                           
 28640                           	psect	text101
 28641  016230                     __ptext101:
 28642                           	opt stack 0
 28643  016230                     _Power_Calc:
 28644                           	opt stack 23
 28645                           
 28646                           ;Power_Meter.c: 626: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 28647                           
 28648                           ;incstack = 0
 28649  016230  C100  F06D         	movff	_Avg_RYB_Current,___ftmul@f2
 28650  016234  C101  F06E         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 28651  016238  C102  F06F         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 28652  01623C  C200  F06A         	movff	_Avg_RYB_Voltage,___ftmul@f1
 28653  016240  C201  F06B         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 28654  016244  C202  F06C         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 28655  016248  EC83  F0BD         	call	___ftmul	;wreg free
 28656  01624C  C06A  F0C0         	movff	?___ftmul,_Power_Calc$8205
 28657  016250  C06B  F0C1         	movff	?___ftmul+1,_Power_Calc$8205+1
 28658  016254  C06C  F0C2         	movff	?___ftmul+2,_Power_Calc$8205+2
 28659                           
 28660                           ;Power_Meter.c: 626: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 28661  016258  C22D  F06D         	movff	_Total_Power_Factor,___ftmul@f2
 28662  01625C  C22E  F06E         	movff	_Total_Power_Factor+1,___ftmul@f2+1
 28663  016260  C22F  F06F         	movff	_Total_Power_Factor+2,___ftmul@f2+2
 28664  016264  C0C0  F06A         	movff	_Power_Calc$8205,___ftmul@f1
 28665  016268  C0C1  F06B         	movff	_Power_Calc$8205+1,___ftmul@f1+1
 28666  01626C  C0C2  F06C         	movff	_Power_Calc$8205+2,___ftmul@f1+2
 28667  016270  EC83  F0BD         	call	___ftmul	;wreg free
 28668  016274  C06A  F0BD         	movff	?___ftmul,_Power_Calc$8206
 28669  016278  C06B  F0BE         	movff	?___ftmul+1,_Power_Calc$8206+1
 28670  01627C  C06C  F0BF         	movff	?___ftmul+2,_Power_Calc$8206+2
 28671                           
 28672                           ;Power_Meter.c: 626: KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Total_Power_Factor * 1.7
      +                          32) / 1000);
 28673  016280  0EB2               	movlw	178
 28674  016282  0100               	movlb	0	; () banked
 28675  016284  6F6D               	movwf	___ftmul@f2& (0+255),b
 28676  016286  0EDD               	movlw	221
 28677  016288  0100               	movlb	0	; () banked
 28678  01628A  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 28679  01628C  0E3F               	movlw	63
 28680  01628E  0100               	movlb	0	; () banked
 28681  016290  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 28682  016292  C0BD  F06A         	movff	_Power_Calc$8206,___ftmul@f1
 28683  016296  C0BE  F06B         	movff	_Power_Calc$8206+1,___ftmul@f1+1
 28684  01629A  C0BF  F06C         	movff	_Power_Calc$8206+2,___ftmul@f1+2
 28685  01629E  EC83  F0BD         	call	___ftmul	;wreg free
 28686  0162A2  C06A  F09B         	movff	?___ftmul,___ftdiv@f1
 28687  0162A6  C06B  F09C         	movff	?___ftmul+1,___ftdiv@f1+1
 28688  0162AA  C06C  F09D         	movff	?___ftmul+2,___ftdiv@f1+2
 28689  0162AE  0E00               	movlw	0
 28690  0162B0  0100               	movlb	0	; () banked
 28691  0162B2  6F9E               	movwf	___ftdiv@f2& (0+255),b
 28692  0162B4  0E7A               	movlw	122
 28693  0162B6  0100               	movlb	0	; () banked
 28694  0162B8  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 28695  0162BA  0E44               	movlw	68
 28696  0162BC  0100               	movlb	0	; () banked
 28697  0162BE  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 28698  0162C0  EC89  F0BF         	call	___ftdiv	;wreg free
 28699  0162C4  C09B  F040         	movff	?___ftdiv,_KW
 28700  0162C8  C09C  F041         	movff	?___ftdiv+1,_KW+1
 28701  0162CC  C09D  F042         	movff	?___ftdiv+2,_KW+2
 28702                           
 28703                           ;Power_Meter.c: 627: KVA = (((Avg_RYB_Voltage * Avg_RYB_Current)*1.732) / 1000);
 28704  0162D0  C100  F06D         	movff	_Avg_RYB_Current,___ftmul@f2
 28705  0162D4  C101  F06E         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 28706  0162D8  C102  F06F         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 28707  0162DC  C200  F06A         	movff	_Avg_RYB_Voltage,___ftmul@f1
 28708  0162E0  C201  F06B         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 28709  0162E4  C202  F06C         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 28710  0162E8  EC83  F0BD         	call	___ftmul	;wreg free
 28711  0162EC  C06A  F0C0         	movff	?___ftmul,_Power_Calc$8205
 28712  0162F0  C06B  F0C1         	movff	?___ftmul+1,_Power_Calc$8205+1
 28713  0162F4  C06C  F0C2         	movff	?___ftmul+2,_Power_Calc$8205+2
 28714                           
 28715                           ;Power_Meter.c: 627: KVA = (((Avg_RYB_Voltage * Avg_RYB_Current)*1.732) / 1000);
 28716  0162F8  0EB2               	movlw	178
 28717  0162FA  0100               	movlb	0	; () banked
 28718  0162FC  6F6D               	movwf	___ftmul@f2& (0+255),b
 28719  0162FE  0EDD               	movlw	221
 28720  016300  0100               	movlb	0	; () banked
 28721  016302  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 28722  016304  0E3F               	movlw	63
 28723  016306  0100               	movlb	0	; () banked
 28724  016308  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 28725  01630A  C0C0  F06A         	movff	_Power_Calc$8205,___ftmul@f1
 28726  01630E  C0C1  F06B         	movff	_Power_Calc$8205+1,___ftmul@f1+1
 28727  016312  C0C2  F06C         	movff	_Power_Calc$8205+2,___ftmul@f1+2
 28728  016316  EC83  F0BD         	call	___ftmul	;wreg free
 28729  01631A  C06A  F09B         	movff	?___ftmul,___ftdiv@f1
 28730  01631E  C06B  F09C         	movff	?___ftmul+1,___ftdiv@f1+1
 28731  016322  C06C  F09D         	movff	?___ftmul+2,___ftdiv@f1+2
 28732  016326  0E00               	movlw	0
 28733  016328  0100               	movlb	0	; () banked
 28734  01632A  6F9E               	movwf	___ftdiv@f2& (0+255),b
 28735  01632C  0E7A               	movlw	122
 28736  01632E  0100               	movlb	0	; () banked
 28737  016330  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 28738  016332  0E44               	movlw	68
 28739  016334  0100               	movlb	0	; () banked
 28740  016336  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 28741  016338  EC89  F0BF         	call	___ftdiv	;wreg free
 28742  01633C  C09B  F21B         	movff	?___ftdiv,_KVA
 28743  016340  C09C  F21C         	movff	?___ftdiv+1,_KVA+1
 28744  016344  C09D  F21D         	movff	?___ftdiv+2,_KVA+2
 28745                           
 28746                           ;Power_Meter.c: 628: KVAr = (sqrt ((KVA * KVA)-(KW * KW)));
 28747  016348  C21B  F06D         	movff	_KVA,___ftmul@f2
 28748  01634C  C21C  F06E         	movff	_KVA+1,___ftmul@f2+1
 28749  016350  C21D  F06F         	movff	_KVA+2,___ftmul@f2+2
 28750  016354  C21B  F06A         	movff	_KVA,___ftmul@f1
 28751  016358  C21C  F06B         	movff	_KVA+1,___ftmul@f1+1
 28752  01635C  C21D  F06C         	movff	_KVA+2,___ftmul@f1+2
 28753  016360  EC83  F0BD         	call	___ftmul	;wreg free
 28754  016364  C06A  F083         	movff	?___ftmul,___ftadd@f1
 28755  016368  C06B  F084         	movff	?___ftmul+1,___ftadd@f1+1
 28756  01636C  C06C  F085         	movff	?___ftmul+2,___ftadd@f1+2
 28757  016370  C040  F06D         	movff	_KW,___ftmul@f2
 28758  016374  C041  F06E         	movff	_KW+1,___ftmul@f2+1
 28759  016378  C042  F06F         	movff	_KW+2,___ftmul@f2+2
 28760  01637C  C040  F06A         	movff	_KW,___ftmul@f1
 28761  016380  C041  F06B         	movff	_KW+1,___ftmul@f1+1
 28762  016384  C042  F06C         	movff	_KW+2,___ftmul@f1+2
 28763  016388  EC83  F0BD         	call	___ftmul	;wreg free
 28764  01638C  C06A  F079         	movff	?___ftmul,___ftneg@f1
 28765  016390  C06B  F07A         	movff	?___ftmul+1,___ftneg@f1+1
 28766  016394  C06C  F07B         	movff	?___ftmul+2,___ftneg@f1+2
 28767  016398  ECE0  F0D3         	call	___ftneg	;wreg free
 28768  01639C  C079  F086         	movff	?___ftneg,___ftadd@f2
 28769  0163A0  C07A  F087         	movff	?___ftneg+1,___ftadd@f2+1
 28770  0163A4  C07B  F088         	movff	?___ftneg+2,___ftadd@f2+2
 28771  0163A8  ECE4  F0AF         	call	___ftadd	;wreg free
 28772  0163AC  C083  F0BA         	movff	?___ftadd,_Power_Calc$8207
 28773  0163B0  C084  F0BB         	movff	?___ftadd+1,_Power_Calc$8207+1
 28774  0163B4  C085  F0BC         	movff	?___ftadd+2,_Power_Calc$8207+2
 28775                           
 28776                           ;Power_Meter.c: 628: KVAr = (sqrt ((KVA * KVA)-(KW * KW)));
 28777  0163B8  C0BA  F0A7         	movff	_Power_Calc$8207,sqrt@a
 28778  0163BC  C0BB  F0A8         	movff	_Power_Calc$8207+1,sqrt@a+1
 28779  0163C0  C0BC  F0A9         	movff	_Power_Calc$8207+2,sqrt@a+2
 28780  0163C4  EC82  F0B7         	call	_sqrt	;wreg free
 28781  0163C8  C0A7  F490         	movff	?_sqrt,_KVAr
 28782  0163CC  C0A8  F491         	movff	?_sqrt+1,_KVAr+1
 28783  0163D0  C0A9  F492         	movff	?_sqrt+2,_KVAr+2
 28784                           
 28785                           ;Power_Meter.c: 629: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 28786  0163D4  C100  F06D         	movff	_Avg_RYB_Current,___ftmul@f2
 28787  0163D8  C101  F06E         	movff	_Avg_RYB_Current+1,___ftmul@f2+1
 28788  0163DC  C102  F06F         	movff	_Avg_RYB_Current+2,___ftmul@f2+2
 28789  0163E0  C200  F06A         	movff	_Avg_RYB_Voltage,___ftmul@f1
 28790  0163E4  C201  F06B         	movff	_Avg_RYB_Voltage+1,___ftmul@f1+1
 28791  0163E8  C202  F06C         	movff	_Avg_RYB_Voltage+2,___ftmul@f1+2
 28792  0163EC  EC83  F0BD         	call	___ftmul	;wreg free
 28793  0163F0  C06A  F0C0         	movff	?___ftmul,_Power_Calc$8205
 28794  0163F4  C06B  F0C1         	movff	?___ftmul+1,_Power_Calc$8205+1
 28795  0163F8  C06C  F0C2         	movff	?___ftmul+2,_Power_Calc$8205+2
 28796                           
 28797                           ;Power_Meter.c: 629: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 28798  0163FC  C275  F06D         	movff	_Y_Power_Factor,___ftmul@f2
 28799  016400  C276  F06E         	movff	_Y_Power_Factor+1,___ftmul@f2+1
 28800  016404  C277  F06F         	movff	_Y_Power_Factor+2,___ftmul@f2+2
 28801  016408  C0C0  F06A         	movff	_Power_Calc$8205,___ftmul@f1
 28802  01640C  C0C1  F06B         	movff	_Power_Calc$8205+1,___ftmul@f1+1
 28803  016410  C0C2  F06C         	movff	_Power_Calc$8205+2,___ftmul@f1+2
 28804  016414  EC83  F0BD         	call	___ftmul	;wreg free
 28805  016418  C06A  F0BD         	movff	?___ftmul,_Power_Calc$8206
 28806  01641C  C06B  F0BE         	movff	?___ftmul+1,_Power_Calc$8206+1
 28807  016420  C06C  F0BF         	movff	?___ftmul+2,_Power_Calc$8206+2
 28808                           
 28809                           ;Power_Meter.c: 629: Y_KW = ((Avg_RYB_Voltage * Avg_RYB_Current * Y_Power_Factor * 1.732
      +                          ) / 1000);
 28810  016424  0EB2               	movlw	178
 28811  016426  0100               	movlb	0	; () banked
 28812  016428  6F6D               	movwf	___ftmul@f2& (0+255),b
 28813  01642A  0EDD               	movlw	221
 28814  01642C  0100               	movlb	0	; () banked
 28815  01642E  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 28816  016430  0E3F               	movlw	63
 28817  016432  0100               	movlb	0	; () banked
 28818  016434  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 28819  016436  C0BD  F06A         	movff	_Power_Calc$8206,___ftmul@f1
 28820  01643A  C0BE  F06B         	movff	_Power_Calc$8206+1,___ftmul@f1+1
 28821  01643E  C0BF  F06C         	movff	_Power_Calc$8206+2,___ftmul@f1+2
 28822  016442  EC83  F0BD         	call	___ftmul	;wreg free
 28823  016446  C06A  F09B         	movff	?___ftmul,___ftdiv@f1
 28824  01644A  C06B  F09C         	movff	?___ftmul+1,___ftdiv@f1+1
 28825  01644E  C06C  F09D         	movff	?___ftmul+2,___ftdiv@f1+2
 28826  016452  0E00               	movlw	0
 28827  016454  0100               	movlb	0	; () banked
 28828  016456  6F9E               	movwf	___ftdiv@f2& (0+255),b
 28829  016458  0E7A               	movlw	122
 28830  01645A  0100               	movlb	0	; () banked
 28831  01645C  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 28832  01645E  0E44               	movlw	68
 28833  016460  0100               	movlb	0	; () banked
 28834  016462  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 28835  016464  EC89  F0BF         	call	___ftdiv	;wreg free
 28836  016468  C09B  F2F1         	movff	?___ftdiv,_Y_KW
 28837  01646C  C09C  F2F2         	movff	?___ftdiv+1,_Y_KW+1
 28838  016470  C09D  F2F3         	movff	?___ftdiv+2,_Y_KW+2
 28839  016474  0012               	return		;funcret
 28840  016476                     __end_of_Power_Calc:
 28841                           	opt stack 0
 28842                           tblptru	equ	0xFF8
 28843                           tblptrh	equ	0xFF7
 28844                           tblptrl	equ	0xFF6
 28845                           tablat	equ	0xFF5
 28846                           prodh	equ	0xFF4
 28847                           prodl	equ	0xFF3
 28848                           intcon	equ	0xFF2
 28849                           postinc0	equ	0xFEE
 28850                           wreg	equ	0xFE8
 28851                           postdec1	equ	0xFE5
 28852                           fsr1h	equ	0xFE2
 28853                           fsr1l	equ	0xFE1
 28854                           indf2	equ	0xFDF
 28855                           postinc2	equ	0xFDE
 28856                           postdec2	equ	0xFDD
 28857                           fsr2h	equ	0xFDA
 28858                           fsr2l	equ	0xFD9
 28859                           status	equ	0xFD8
 28860                           
 28861 ;; *************** function _sqrt *****************
 28862 ;; Defined at:
 28863 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\sprcsqrt.c"
 28864 ;; Parameters:    Size  Location     Type
 28865 ;;  a               3   71[BANK0 ] void 
 28866 ;; Auto vars:     Size  Location     Type
 28867 ;;  x               3   87[BANK0 ] void 
 28868 ;;  q               3   84[BANK0 ] void 
 28869 ;;  z               3   80[BANK0 ] void 
 28870 ;;  og              3   77[BANK0 ] void 
 28871 ;;  i               1   83[BANK0 ] unsigned char 
 28872 ;; Return value:  Size  Location     Type
 28873 ;;                  3   71[BANK0 ] unsigned char 
 28874 ;; Registers used:
 28875 ;;		wreg, status,2, status,0, cstack
 28876 ;; Tracked objects:
 28877 ;;		On entry : 0/0
 28878 ;;		On exit  : 0/0
 28879 ;;		Unchanged: 0/0
 28880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28881 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28882 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28883 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28884 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28885 ;;Total ram usage:       19 bytes
 28886 ;; Hardware stack levels used:    1
 28887 ;; Hardware stack levels required when called:    6
 28888 ;; This function calls:
 28889 ;;		___ftge
 28890 ;;		___ftmul
 28891 ;;		___ftsub
 28892 ;; This function is called by:
 28893 ;;		_Power_Calc
 28894 ;; This function uses a non-reentrant model
 28895 ;;
 28896                           
 28897                           	psect	text102
 28898  016F04                     __ptext102:
 28899                           	opt stack 0
 28900  016F04                     _sqrt:
 28901                           	opt stack 23
 28902                           
 28903                           ;incstack = 0
 28904  016F04  0E00               	movlw	0
 28905  016F06  0100               	movlb	0	; () banked
 28906  016F08  6F8F               	movwf	___ftge@ff1& (0+255),b
 28907  016F0A  0E00               	movlw	0
 28908  016F0C  0100               	movlb	0	; () banked
 28909  016F0E  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 28910  016F10  0E00               	movlw	0
 28911  016F12  0100               	movlb	0	; () banked
 28912  016F14  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 28913  016F16  C0A7  F092         	movff	sqrt@a,___ftge@ff2
 28914  016F1A  C0A8  F093         	movff	sqrt@a+1,___ftge@ff2+1
 28915  016F1E  C0A9  F094         	movff	sqrt@a+2,___ftge@ff2+2
 28916  016F22  EC09  F0C8         	call	___ftge	;wreg free
 28917  016F26  0100               	movlb	0	; () banked
 28918  016F28  A0D8               	btfss	status,0,c
 28919  016F2A  D012               	goto	l11057
 28920                           
 28921                           ; BSR set to: 0
 28922  016F2C  0100               	movlb	0	; () banked
 28923  016F2E  AFA9               	btfss	(sqrt@a+2)& (0+255),7,b
 28924  016F30  D005               	goto	l11058
 28925                           
 28926                           ; BSR set to: 0
 28927  016F32  0E00               	movlw	0
 28928  016F34  0105               	movlb	5	; () banked
 28929  016F36  6FF2               	movwf	(_errno+1)& (0+255),b
 28930  016F38  0E21               	movlw	33
 28931  016F3A  6FF1               	movwf	_errno& (0+255),b
 28932  016F3C                     l11058:
 28933  016F3C  0E00               	movlw	0
 28934  016F3E  0100               	movlb	0	; () banked
 28935  016F40  6FA7               	movwf	?_sqrt& (0+255),b
 28936  016F42  0E00               	movlw	0
 28937  016F44  0100               	movlb	0	; () banked
 28938  016F46  6FA8               	movwf	(?_sqrt+1)& (0+255),b
 28939  016F48  0E00               	movlw	0
 28940  016F4A  0100               	movlb	0	; () banked
 28941  016F4C  6FA9               	movwf	(?_sqrt+2)& (0+255),b
 28942                           
 28943                           ; BSR set to: 0
 28944  016F4E  0012               	return	
 28945  016F50                     l11057:
 28946                           
 28947                           ; BSR set to: 0
 28948  016F50  C0A7  F0B0         	movff	sqrt@a,sqrt@z
 28949  016F54  C0A8  F0B1         	movff	sqrt@a+1,sqrt@z+1
 28950  016F58  C0A9  F0B2         	movff	sqrt@a+2,sqrt@z+2
 28951                           
 28952                           ; BSR set to: 0
 28953  016F5C  C0A7  F0AA         	movff	sqrt@a,??_sqrt
 28954  016F60  C0A8  F0AB         	movff	sqrt@a+1,??_sqrt+1
 28955  016F64  C0A9  F0AC         	movff	sqrt@a+2,??_sqrt+2
 28956  016F68  0100               	movlb	0	; () banked
 28957  016F6A  1FAA               	comf	??_sqrt& (0+255),f,b
 28958  016F6C  1FAB               	comf	(??_sqrt+1)& (0+255),f,b
 28959  016F6E  1FAC               	comf	(??_sqrt+2)& (0+255),f,b
 28960  016F70  2BAA               	incf	??_sqrt& (0+255),f,b
 28961  016F72  0E00               	movlw	0
 28962  016F74  23AB               	addwfc	(??_sqrt+1)& (0+255),f,b
 28963  016F76  23AC               	addwfc	(??_sqrt+2)& (0+255),f,b
 28964  016F78  0EC8               	movlw	200
 28965  016F7A  0100               	movlb	0	; () banked
 28966  016F7C  25AA               	addwf	??_sqrt& (0+255),w,b
 28967  016F7E  0100               	movlb	0	; () banked
 28968  016F80  6FB7               	movwf	sqrt@x& (0+255),b
 28969  016F82  0E6E               	movlw	110
 28970  016F84  0100               	movlb	0	; () banked
 28971  016F86  21AB               	addwfc	(??_sqrt+1)& (0+255),w,b
 28972  016F88  0100               	movlb	0	; () banked
 28973  016F8A  6FB8               	movwf	(sqrt@x+1)& (0+255),b
 28974  016F8C  0EBE               	movlw	190
 28975  016F8E  0100               	movlb	0	; () banked
 28976  016F90  21AC               	addwfc	(??_sqrt+2)& (0+255),w,b
 28977  016F92  0100               	movlb	0	; () banked
 28978  016F94  6FB9               	movwf	(sqrt@x+2)& (0+255),b
 28979                           
 28980                           ; BSR set to: 0
 28981  016F96  0100               	movlb	0	; () banked
 28982  016F98  90D8               	bcf	status,0,c
 28983  016F9A  33B9               	rrcf	(sqrt@x+2)& (0+255),f,b
 28984  016F9C  33B8               	rrcf	(sqrt@x+1)& (0+255),f,b
 28985  016F9E  33B7               	rrcf	sqrt@x& (0+255),f,b
 28986                           
 28987                           ; BSR set to: 0
 28988  016FA0  0E00               	movlw	0
 28989  016FA2  0100               	movlb	0	; () banked
 28990  016FA4  5FB0               	subwf	sqrt@z& (0+255),f,b
 28991  016FA6  0E80               	movlw	128
 28992  016FA8  0100               	movlb	0	; () banked
 28993  016FAA  5BB1               	subwfb	(sqrt@z+1)& (0+255),f,b
 28994  016FAC  0E00               	movlw	0
 28995  016FAE  0100               	movlb	0	; () banked
 28996  016FB0  5BB2               	subwfb	(sqrt@z+2)& (0+255),f,b
 28997                           
 28998                           ; BSR set to: 0
 28999  016FB2  0E04               	movlw	4
 29000  016FB4  0100               	movlb	0	; () banked
 29001  016FB6  6FB3               	movwf	sqrt@i& (0+255),b
 29002  016FB8                     l21493:
 29003                           
 29004                           ; BSR set to: 0
 29005  016FB8  C0B7  F0AD         	movff	sqrt@x,sqrt@og
 29006  016FBC  C0B8  F0AE         	movff	sqrt@x+1,sqrt@og+1
 29007  016FC0  C0B9  F0AF         	movff	sqrt@x+2,sqrt@og+2
 29008                           
 29009                           ; BSR set to: 0
 29010  016FC4  C0B7  F06A         	movff	sqrt@x,___ftmul@f1
 29011  016FC8  C0B8  F06B         	movff	sqrt@x+1,___ftmul@f1+1
 29012  016FCC  C0B9  F06C         	movff	sqrt@x+2,___ftmul@f1+2
 29013  016FD0  C0B0  F06D         	movff	sqrt@z,___ftmul@f2
 29014  016FD4  C0B1  F06E         	movff	sqrt@z+1,___ftmul@f2+1
 29015  016FD8  C0B2  F06F         	movff	sqrt@z+2,___ftmul@f2+2
 29016  016FDC  EC83  F0BD         	call	___ftmul	;wreg free
 29017  016FE0  C06A  F0B4         	movff	?___ftmul,sqrt@q
 29018  016FE4  C06B  F0B5         	movff	?___ftmul+1,sqrt@q+1
 29019  016FE8  C06C  F0B6         	movff	?___ftmul+2,sqrt@q+2
 29020  016FEC  C0B4  F06A         	movff	sqrt@q,___ftmul@f1
 29021  016FF0  C0B5  F06B         	movff	sqrt@q+1,___ftmul@f1+1
 29022  016FF4  C0B6  F06C         	movff	sqrt@q+2,___ftmul@f1+2
 29023  016FF8  C0B7  F06D         	movff	sqrt@x,___ftmul@f2
 29024  016FFC  C0B8  F06E         	movff	sqrt@x+1,___ftmul@f2+1
 29025  017000  C0B9  F06F         	movff	sqrt@x+2,___ftmul@f2+2
 29026  017004  EC83  F0BD         	call	___ftmul	;wreg free
 29027  017008  C06A  F0B4         	movff	?___ftmul,sqrt@q
 29028  01700C  C06B  F0B5         	movff	?___ftmul+1,sqrt@q+1
 29029  017010  C06C  F0B6         	movff	?___ftmul+2,sqrt@q+2
 29030  017014  C0B4  F06A         	movff	sqrt@q,___ftmul@f1
 29031  017018  C0B5  F06B         	movff	sqrt@q+1,___ftmul@f1+1
 29032  01701C  C0B6  F06C         	movff	sqrt@q+2,___ftmul@f1+2
 29033  017020  C0B7  F06D         	movff	sqrt@x,___ftmul@f2
 29034  017024  C0B8  F06E         	movff	sqrt@x+1,___ftmul@f2+1
 29035  017028  C0B9  F06F         	movff	sqrt@x+2,___ftmul@f2+2
 29036  01702C  EC83  F0BD         	call	___ftmul	;wreg free
 29037  017030  C06A  F0B4         	movff	?___ftmul,sqrt@q
 29038  017034  C06B  F0B5         	movff	?___ftmul+1,sqrt@q+1
 29039  017038  C06C  F0B6         	movff	?___ftmul+2,sqrt@q+2
 29040  01703C  C0B7  F06A         	movff	sqrt@x,___ftmul@f1
 29041  017040  C0B8  F06B         	movff	sqrt@x+1,___ftmul@f1+1
 29042  017044  C0B9  F06C         	movff	sqrt@x+2,___ftmul@f1+2
 29043  017048  0E00               	movlw	0
 29044  01704A  0100               	movlb	0	; () banked
 29045  01704C  6F6D               	movwf	___ftmul@f2& (0+255),b
 29046  01704E  0EC0               	movlw	192
 29047  017050  0100               	movlb	0	; () banked
 29048  017052  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 29049  017054  0E3F               	movlw	63
 29050  017056  0100               	movlb	0	; () banked
 29051  017058  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 29052  01705A  EC83  F0BD         	call	___ftmul	;wreg free
 29053  01705E  C06A  F0B7         	movff	?___ftmul,sqrt@x
 29054  017062  C06B  F0B8         	movff	?___ftmul+1,sqrt@x+1
 29055  017066  C06C  F0B9         	movff	?___ftmul+2,sqrt@x+2
 29056  01706A  C0B7  F0A1         	movff	sqrt@x,___ftsub@f1
 29057  01706E  C0B8  F0A2         	movff	sqrt@x+1,___ftsub@f1+1
 29058  017072  C0B9  F0A3         	movff	sqrt@x+2,___ftsub@f1+2
 29059  017076  C0B4  F0A4         	movff	sqrt@q,___ftsub@f2
 29060  01707A  C0B5  F0A5         	movff	sqrt@q+1,___ftsub@f2+1
 29061  01707E  C0B6  F0A6         	movff	sqrt@q+2,___ftsub@f2+2
 29062  017082  ECA9  F0D2         	call	___ftsub	;wreg free
 29063  017086  C0A1  F0B7         	movff	?___ftsub,sqrt@x
 29064  01708A  C0A2  F0B8         	movff	?___ftsub+1,sqrt@x+1
 29065  01708E  C0A3  F0B9         	movff	?___ftsub+2,sqrt@x+2
 29066  017092  0100               	movlb	0	; () banked
 29067  017094  2FB3               	decfsz	sqrt@i& (0+255),f,b
 29068  017096  D790               	goto	l21493
 29069                           
 29070                           ; BSR set to: 0
 29071                           
 29072                           ; BSR set to: 0
 29073  017098  C0B7  F06A         	movff	sqrt@x,___ftmul@f1
 29074  01709C  C0B8  F06B         	movff	sqrt@x+1,___ftmul@f1+1
 29075  0170A0  C0B9  F06C         	movff	sqrt@x+2,___ftmul@f1+2
 29076  0170A4  C0A7  F06D         	movff	sqrt@a,___ftmul@f2
 29077  0170A8  C0A8  F06E         	movff	sqrt@a+1,___ftmul@f2+1
 29078  0170AC  C0A9  F06F         	movff	sqrt@a+2,___ftmul@f2+2
 29079  0170B0  EC83  F0BD         	call	___ftmul	;wreg free
 29080  0170B4  C06A  F0A7         	movff	?___ftmul,?_sqrt
 29081  0170B8  C06B  F0A8         	movff	?___ftmul+1,?_sqrt+1
 29082  0170BC  C06C  F0A9         	movff	?___ftmul+2,?_sqrt+2
 29083  0170C0  0012               	return	
 29084  0170C2                     __end_of_sqrt:
 29085                           	opt stack 0
 29086                           tblptru	equ	0xFF8
 29087                           tblptrh	equ	0xFF7
 29088                           tblptrl	equ	0xFF6
 29089                           tablat	equ	0xFF5
 29090                           prodh	equ	0xFF4
 29091                           prodl	equ	0xFF3
 29092                           intcon	equ	0xFF2
 29093                           postinc0	equ	0xFEE
 29094                           wreg	equ	0xFE8
 29095                           postdec1	equ	0xFE5
 29096                           fsr1h	equ	0xFE2
 29097                           fsr1l	equ	0xFE1
 29098                           indf2	equ	0xFDF
 29099                           postinc2	equ	0xFDE
 29100                           postdec2	equ	0xFDD
 29101                           fsr2h	equ	0xFDA
 29102                           fsr2l	equ	0xFD9
 29103                           status	equ	0xFD8
 29104                           
 29105 ;; *************** function _Phase_Sequence *****************
 29106 ;; Defined at:
 29107 ;;		line 264 in file "Power_Meter.c"
 29108 ;; Parameters:    Size  Location     Type
 29109 ;;		None
 29110 ;; Auto vars:     Size  Location     Type
 29111 ;;		None
 29112 ;; Return value:  Size  Location     Type
 29113 ;;                  1    wreg      void 
 29114 ;; Registers used:
 29115 ;;		wreg, status,2, status,0, cstack
 29116 ;; Tracked objects:
 29117 ;;		On entry : 0/0
 29118 ;;		On exit  : 0/0
 29119 ;;		Unchanged: 0/0
 29120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29125 ;;Total ram usage:        0 bytes
 29126 ;; Hardware stack levels used:    1
 29127 ;; Hardware stack levels required when called:    4
 29128 ;; This function calls:
 29129 ;;		_Read_Adc
 29130 ;; This function is called by:
 29131 ;;		_main
 29132 ;; This function uses a non-reentrant model
 29133 ;;
 29134                           
 29135                           	psect	text103
 29136  0179A0                     __ptext103:
 29137                           	opt stack 0
 29138  0179A0                     _Phase_Sequence:
 29139                           	opt stack 26
 29140                           
 29141                           ;Power_Meter.c: 266: RV_PS_Max = 0;
 29142                           
 29143                           ;incstack = 0
 29144  0179A0  0E00               	movlw	0
 29145  0179A2  0102               	movlb	2	; () banked
 29146  0179A4  6FA7               	movwf	(_RV_PS_Max+1)& (0+255),b
 29147  0179A6  0E00               	movlw	0
 29148  0179A8  6FA6               	movwf	_RV_PS_Max& (0+255),b
 29149                           
 29150                           ;Power_Meter.c: 267: YV_PS_Max = 0;
 29151  0179AA  0E00               	movlw	0
 29152  0179AC  0102               	movlb	2	; () banked
 29153  0179AE  6FCF               	movwf	(_YV_PS_Max+1)& (0+255),b
 29154  0179B0  0E00               	movlw	0
 29155  0179B2  6FCE               	movwf	_YV_PS_Max& (0+255),b
 29156                           
 29157                           ;Power_Meter.c: 268: BV_PS_Max = 0;
 29158  0179B4  0E00               	movlw	0
 29159  0179B6  0103               	movlb	3	; () banked
 29160  0179B8  6FFD               	movwf	(_BV_PS_Max+1)& (0+255),b
 29161  0179BA  0E00               	movlw	0
 29162  0179BC  6FFC               	movwf	_BV_PS_Max& (0+255),b
 29163                           
 29164                           ;Power_Meter.c: 269: R_Peak = 0;
 29165  0179BE  0E00               	movlw	0
 29166  0179C0  0101               	movlb	1	; () banked
 29167  0179C2  6F4A               	movwf	(_R_Peak+1)& (0+255),b
 29168  0179C4  0E00               	movlw	0
 29169  0179C6  6F49               	movwf	_R_Peak& (0+255),b
 29170                           
 29171                           ;Power_Meter.c: 270: Y_Peak = 0;
 29172  0179C8  0E00               	movlw	0
 29173  0179CA  0101               	movlb	1	; () banked
 29174  0179CC  6F66               	movwf	(_Y_Peak+1)& (0+255),b
 29175  0179CE  0E00               	movlw	0
 29176  0179D0  6F65               	movwf	_Y_Peak& (0+255),b
 29177                           
 29178                           ;Power_Meter.c: 271: B_Peak = 0;
 29179  0179D2  0E00               	movlw	0
 29180  0179D4  0101               	movlb	1	; () banked
 29181  0179D6  6F34               	movwf	(_B_Peak+1)& (0+255),b
 29182  0179D8  0E00               	movlw	0
 29183  0179DA  6F33               	movwf	_B_Peak& (0+255),b
 29184                           
 29185                           ;Power_Meter.c: 273: for(PS = 0; PS < 70; PS++)
 29186  0179DC  0E00               	movlw	0
 29187  0179DE  6E3B               	movwf	_PS,c
 29188  0179E0                     l18315:
 29189                           
 29190                           ; BSR set to: 1
 29191  0179E0  0E45               	movlw	69
 29192  0179E2  643B               	cpfsgt	_PS,c
 29193  0179E4  D001               	goto	l18319
 29194  0179E6  D04D               	goto	l18337
 29195  0179E8                     l18319:
 29196                           
 29197                           ;Power_Meter.c: 274: {
 29198                           ;Power_Meter.c: 275: RV_PS = Read_Adc(1);
 29199  0179E8  0E01               	movlw	1
 29200  0179EA  ECC8  F0D3         	call	_Read_Adc
 29201  0179EE  C01D  F2A4         	movff	?_Read_Adc,_RV_PS
 29202  0179F2  C01E  F2A5         	movff	?_Read_Adc+1,_RV_PS+1
 29203                           
 29204                           ;Power_Meter.c: 276: YV_PS = Read_Adc(2);
 29205  0179F6  0E02               	movlw	2
 29206  0179F8  ECC8  F0D3         	call	_Read_Adc
 29207  0179FC  C01D  F2CC         	movff	?_Read_Adc,_YV_PS
 29208  017A00  C01E  F2CD         	movff	?_Read_Adc+1,_YV_PS+1
 29209                           
 29210                           ;Power_Meter.c: 277: BV_PS = Read_Adc(3);
 29211  017A04  0E03               	movlw	3
 29212  017A06  ECC8  F0D3         	call	_Read_Adc
 29213  017A0A  C01D  F284         	movff	?_Read_Adc,_BV_PS
 29214  017A0E  C01E  F285         	movff	?_Read_Adc+1,_BV_PS+1
 29215                           
 29216                           ;Power_Meter.c: 279: if(RV_PS_Max < RV_PS)
 29217  017A12  0102               	movlb	2	; () banked
 29218  017A14  51A4               	movf	_RV_PS& (0+255),w,b
 29219  017A16  0102               	movlb	2	; () banked
 29220  017A18  5DA6               	subwf	_RV_PS_Max& (0+255),w,b
 29221  017A1A  0102               	movlb	2	; () banked
 29222  017A1C  51A5               	movf	(_RV_PS+1)& (0+255),w,b
 29223  017A1E  0102               	movlb	2	; () banked
 29224  017A20  59A7               	subwfb	(_RV_PS_Max+1)& (0+255),w,b
 29225  017A22  B0D8               	btfsc	status,0,c
 29226  017A24  D008               	goto	l18325
 29227                           
 29228                           ; BSR set to: 2
 29229                           ;Power_Meter.c: 280: {
 29230                           ;Power_Meter.c: 281: RV_PS_Max = RV_PS;
 29231  017A26  C2A4  F2A6         	movff	_RV_PS,_RV_PS_Max
 29232  017A2A  C2A5  F2A7         	movff	_RV_PS+1,_RV_PS_Max+1
 29233                           
 29234                           ;Power_Meter.c: 282: R_Peak = PS;
 29235  017A2E  C03B  F149         	movff	_PS,_R_Peak
 29236  017A32  0101               	movlb	1	; () banked
 29237  017A34  6B4A               	clrf	(_R_Peak+1)& (0+255),b
 29238  017A36                     l18325:
 29239                           
 29240                           ;Power_Meter.c: 283: }
 29241                           ;Power_Meter.c: 285: if(YV_PS_Max < YV_PS)
 29242  017A36  0102               	movlb	2	; () banked
 29243  017A38  51CC               	movf	_YV_PS& (0+255),w,b
 29244  017A3A  0102               	movlb	2	; () banked
 29245  017A3C  5DCE               	subwf	_YV_PS_Max& (0+255),w,b
 29246  017A3E  0102               	movlb	2	; () banked
 29247  017A40  51CD               	movf	(_YV_PS+1)& (0+255),w,b
 29248  017A42  0102               	movlb	2	; () banked
 29249  017A44  59CF               	subwfb	(_YV_PS_Max+1)& (0+255),w,b
 29250  017A46  B0D8               	btfsc	status,0,c
 29251  017A48  D008               	goto	l18329
 29252                           
 29253                           ; BSR set to: 2
 29254                           ;Power_Meter.c: 286: {
 29255                           ;Power_Meter.c: 287: YV_PS_Max = YV_PS;
 29256  017A4A  C2CC  F2CE         	movff	_YV_PS,_YV_PS_Max
 29257  017A4E  C2CD  F2CF         	movff	_YV_PS+1,_YV_PS_Max+1
 29258                           
 29259                           ;Power_Meter.c: 288: Y_Peak = PS;
 29260  017A52  C03B  F165         	movff	_PS,_Y_Peak
 29261  017A56  0101               	movlb	1	; () banked
 29262  017A58  6B66               	clrf	(_Y_Peak+1)& (0+255),b
 29263  017A5A                     l18329:
 29264                           
 29265                           ;Power_Meter.c: 289: }
 29266                           ;Power_Meter.c: 291: if(BV_PS_Max < BV_PS)
 29267  017A5A  0102               	movlb	2	; () banked
 29268  017A5C  5184               	movf	_BV_PS& (0+255),w,b
 29269  017A5E  0103               	movlb	3	; () banked
 29270  017A60  5DFC               	subwf	_BV_PS_Max& (0+255),w,b
 29271  017A62  0102               	movlb	2	; () banked
 29272  017A64  5185               	movf	(_BV_PS+1)& (0+255),w,b
 29273  017A66  0103               	movlb	3	; () banked
 29274  017A68  59FD               	subwfb	(_BV_PS_Max+1)& (0+255),w,b
 29275  017A6A  B0D8               	btfsc	status,0,c
 29276  017A6C  D008               	goto	l18333
 29277                           
 29278                           ; BSR set to: 3
 29279                           ;Power_Meter.c: 292: {
 29280                           ;Power_Meter.c: 293: BV_PS_Max = BV_PS;
 29281  017A6E  C284  F3FC         	movff	_BV_PS,_BV_PS_Max
 29282  017A72  C285  F3FD         	movff	_BV_PS+1,_BV_PS_Max+1
 29283                           
 29284                           ;Power_Meter.c: 294: B_Peak = PS;
 29285  017A76  C03B  F133         	movff	_PS,_B_Peak
 29286  017A7A  0101               	movlb	1	; () banked
 29287  017A7C  6B34               	clrf	(_B_Peak+1)& (0+255),b
 29288  017A7E                     l18333:
 29289  017A7E  2A3B               	incf	_PS,f,c
 29290  017A80  D7AF               	goto	l18315
 29291  017A82                     l18337:
 29292                           
 29293                           ;Power_Meter.c: 295: }
 29294                           ;Power_Meter.c: 296: }
 29295                           ;Power_Meter.c: 298: if( ((R_Peak > B_Peak) && (B_Peak > Y_Peak)) || ((Y_Peak > R_Peak) 
      +                          && (R_Peak > B_Peak)) || ((B_Peak > Y_Peak) && (Y_Peak > R_Peak)) )
 29296  017A82  0101               	movlb	1	; () banked
 29297  017A84  5149               	movf	_R_Peak& (0+255),w,b
 29298  017A86  0101               	movlb	1	; () banked
 29299  017A88  5D33               	subwf	_B_Peak& (0+255),w,b
 29300  017A8A  0101               	movlb	1	; () banked
 29301  017A8C  514A               	movf	(_R_Peak+1)& (0+255),w,b
 29302  017A8E  0101               	movlb	1	; () banked
 29303  017A90  5934               	subwfb	(_B_Peak+1)& (0+255),w,b
 29304  017A92  B0D8               	btfsc	status,0,c
 29305  017A94  D00A               	goto	l18341
 29306                           
 29307                           ; BSR set to: 1
 29308  017A96  0101               	movlb	1	; () banked
 29309  017A98  5133               	movf	_B_Peak& (0+255),w,b
 29310  017A9A  0101               	movlb	1	; () banked
 29311  017A9C  5D65               	subwf	_Y_Peak& (0+255),w,b
 29312  017A9E  0101               	movlb	1	; () banked
 29313  017AA0  5134               	movf	(_B_Peak+1)& (0+255),w,b
 29314  017AA2  0101               	movlb	1	; () banked
 29315  017AA4  5966               	subwfb	(_Y_Peak+1)& (0+255),w,b
 29316  017AA6  A0D8               	btfss	status,0,c
 29317  017AA8  D028               	goto	l18349
 29318  017AAA                     l18341:
 29319                           
 29320                           ; BSR set to: 1
 29321  017AAA  0101               	movlb	1	; () banked
 29322  017AAC  5165               	movf	_Y_Peak& (0+255),w,b
 29323  017AAE  0101               	movlb	1	; () banked
 29324  017AB0  5D49               	subwf	_R_Peak& (0+255),w,b
 29325  017AB2  0101               	movlb	1	; () banked
 29326  017AB4  5166               	movf	(_Y_Peak+1)& (0+255),w,b
 29327  017AB6  0101               	movlb	1	; () banked
 29328  017AB8  594A               	subwfb	(_R_Peak+1)& (0+255),w,b
 29329  017ABA  B0D8               	btfsc	status,0,c
 29330  017ABC  D00A               	goto	l18345
 29331                           
 29332                           ; BSR set to: 1
 29333  017ABE  0101               	movlb	1	; () banked
 29334  017AC0  5149               	movf	_R_Peak& (0+255),w,b
 29335  017AC2  0101               	movlb	1	; () banked
 29336  017AC4  5D33               	subwf	_B_Peak& (0+255),w,b
 29337  017AC6  0101               	movlb	1	; () banked
 29338  017AC8  514A               	movf	(_R_Peak+1)& (0+255),w,b
 29339  017ACA  0101               	movlb	1	; () banked
 29340  017ACC  5934               	subwfb	(_B_Peak+1)& (0+255),w,b
 29341  017ACE  A0D8               	btfss	status,0,c
 29342  017AD0  D014               	goto	l18349
 29343  017AD2                     l18345:
 29344                           
 29345                           ; BSR set to: 1
 29346  017AD2  0101               	movlb	1	; () banked
 29347  017AD4  5133               	movf	_B_Peak& (0+255),w,b
 29348  017AD6  0101               	movlb	1	; () banked
 29349  017AD8  5D65               	subwf	_Y_Peak& (0+255),w,b
 29350  017ADA  0101               	movlb	1	; () banked
 29351  017ADC  5134               	movf	(_B_Peak+1)& (0+255),w,b
 29352  017ADE  0101               	movlb	1	; () banked
 29353  017AE0  5966               	subwfb	(_Y_Peak+1)& (0+255),w,b
 29354  017AE2  B0D8               	btfsc	status,0,c
 29355  017AE4  D00D               	goto	l18351
 29356                           
 29357                           ; BSR set to: 1
 29358  017AE6  0101               	movlb	1	; () banked
 29359  017AE8  5165               	movf	_Y_Peak& (0+255),w,b
 29360  017AEA  0101               	movlb	1	; () banked
 29361  017AEC  5D49               	subwf	_R_Peak& (0+255),w,b
 29362  017AEE  0101               	movlb	1	; () banked
 29363  017AF0  5166               	movf	(_Y_Peak+1)& (0+255),w,b
 29364  017AF2  0101               	movlb	1	; () banked
 29365  017AF4  594A               	subwfb	(_R_Peak+1)& (0+255),w,b
 29366  017AF6  B0D8               	btfsc	status,0,c
 29367  017AF8  D003               	goto	l18351
 29368  017AFA                     l18349:
 29369                           
 29370                           ; BSR set to: 1
 29371                           ;Power_Meter.c: 299: {
 29372                           ;Power_Meter.c: 300: Phase_Sequence_Ok = 1;
 29373  017AFA  0E01               	movlw	1
 29374  017AFC  6E3C               	movwf	_Phase_Sequence_Ok,c
 29375                           
 29376                           ;Power_Meter.c: 301: }
 29377  017AFE  0012               	return	
 29378  017B00                     l18351:
 29379                           
 29380                           ; BSR set to: 1
 29381                           ;Power_Meter.c: 303: else
 29382                           ;Power_Meter.c: 304: {
 29383                           ;Power_Meter.c: 305: Phase_Sequence_Ok = 0;
 29384  017B00  0E00               	movlw	0
 29385  017B02  6E3C               	movwf	_Phase_Sequence_Ok,c
 29386  017B04  0012               	return	
 29387  017B06                     __end_of_Phase_Sequence:
 29388                           	opt stack 0
 29389                           tblptru	equ	0xFF8
 29390                           tblptrh	equ	0xFF7
 29391                           tblptrl	equ	0xFF6
 29392                           tablat	equ	0xFF5
 29393                           prodh	equ	0xFF4
 29394                           prodl	equ	0xFF3
 29395                           intcon	equ	0xFF2
 29396                           postinc0	equ	0xFEE
 29397                           wreg	equ	0xFE8
 29398                           postdec1	equ	0xFE5
 29399                           fsr1h	equ	0xFE2
 29400                           fsr1l	equ	0xFE1
 29401                           indf2	equ	0xFDF
 29402                           postinc2	equ	0xFDE
 29403                           postdec2	equ	0xFDD
 29404                           fsr2h	equ	0xFDA
 29405                           fsr2l	equ	0xFD9
 29406                           status	equ	0xFD8
 29407                           
 29408 ;; *************** function _Read_Adc *****************
 29409 ;; Defined at:
 29410 ;;		line 105 in file "Power_Meter.c"
 29411 ;; Parameters:    Size  Location     Type
 29412 ;;  ch              1    wreg     unsigned char 
 29413 ;; Auto vars:     Size  Location     Type
 29414 ;;  ch              1   32[COMRAM] unsigned char 
 29415 ;; Return value:  Size  Location     Type
 29416 ;;                  2   28[COMRAM] unsigned int 
 29417 ;; Registers used:
 29418 ;;		wreg, status,2, status,0
 29419 ;; Tracked objects:
 29420 ;;		On entry : 0/0
 29421 ;;		On exit  : 0/0
 29422 ;;		Unchanged: 0/0
 29423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29424 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29425 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29426 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29427 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29428 ;;Total ram usage:        5 bytes
 29429 ;; Hardware stack levels used:    1
 29430 ;; Hardware stack levels required when called:    3
 29431 ;; This function calls:
 29432 ;;		Nothing
 29433 ;; This function is called by:
 29434 ;;		_Temp_Read
 29435 ;;		_Volt_Curr_Read
 29436 ;;		_Phase_Sequence
 29437 ;; This function uses a non-reentrant model
 29438 ;;
 29439                           
 29440                           	psect	text104
 29441  01A790                     __ptext104:
 29442                           	opt stack 0
 29443  01A790                     _Read_Adc:
 29444                           	opt stack 26
 29445                           
 29446                           ; BSR set to: 1
 29447                           ;incstack = 0
 29448                           ;Read_Adc@ch stored from wreg
 29449  01A790  6E21               	movwf	Read_Adc@ch,c
 29450                           
 29451                           ;Power_Meter.c: 107: ADCON0 = 0b00000000;
 29452  01A792  0E00               	movlw	0
 29453  01A794  6EC2               	movwf	4034,c	;volatile
 29454                           
 29455                           ;Power_Meter.c: 108: ADCON0 = (ch<<2);
 29456  01A796  4421               	rlncf	Read_Adc@ch,w,c
 29457  01A798  46E8               	rlncf	wreg,f,c
 29458  01A79A  0BFC               	andlw	252
 29459  01A79C  6EC2               	movwf	4034,c	;volatile
 29460                           
 29461                           ;Power_Meter.c: 109: ADON = 1;
 29462  01A79E  80C2               	bsf	4034,0,c	;volatile
 29463                           
 29464                           ;Power_Meter.c: 110: GODONE = 1;
 29465  01A7A0  82C2               	bsf	4034,1,c	;volatile
 29466  01A7A2                     l9251:
 29467  01A7A2  B2C2               	btfsc	4034,1,c	;volatile
 29468  01A7A4  D7FE               	goto	l9251
 29469                           
 29470                           ;Power_Meter.c: 112: ADON = 0;
 29471  01A7A6  90C2               	bcf	4034,0,c	;volatile
 29472                           
 29473                           ;Power_Meter.c: 113: return ((ADRESH << 8) | ADRESL);
 29474  01A7A8  50C3               	movf	4035,w,c	;volatile
 29475  01A7AA  CFC4 F01F          	movff	4036,??_Read_Adc	;volatile
 29476  01A7AE  6A20               	clrf	(??_Read_Adc+1)& (0+255),c
 29477  01A7B0  C01F  F020         	movff	??_Read_Adc,??_Read_Adc+1
 29478  01A7B4  6A1F               	clrf	??_Read_Adc,c
 29479  01A7B6  101F               	iorwf	??_Read_Adc,w,c
 29480  01A7B8  6E1D               	movwf	?_Read_Adc,c
 29481  01A7BA  5020               	movf	??_Read_Adc+1,w,c
 29482  01A7BC  6E1E               	movwf	?_Read_Adc+1,c
 29483  01A7BE  0012               	return	
 29484  01A7C0                     __end_of_Read_Adc:
 29485                           	opt stack 0
 29486                           tblptru	equ	0xFF8
 29487                           tblptrh	equ	0xFF7
 29488                           tblptrl	equ	0xFF6
 29489                           tablat	equ	0xFF5
 29490                           prodh	equ	0xFF4
 29491                           prodl	equ	0xFF3
 29492                           intcon	equ	0xFF2
 29493                           postinc0	equ	0xFEE
 29494                           wreg	equ	0xFE8
 29495                           postdec1	equ	0xFE5
 29496                           fsr1h	equ	0xFE2
 29497                           fsr1l	equ	0xFE1
 29498                           indf2	equ	0xFDF
 29499                           postinc2	equ	0xFDE
 29500                           postdec2	equ	0xFDD
 29501                           fsr2h	equ	0xFDA
 29502                           fsr2l	equ	0xFD9
 29503                           status	equ	0xFD8
 29504                           
 29505 ;; *************** function _PM_Timer_Initialization *****************
 29506 ;; Defined at:
 29507 ;;		line 88 in file "Power_Meter.c"
 29508 ;; Parameters:    Size  Location     Type
 29509 ;;		None
 29510 ;; Auto vars:     Size  Location     Type
 29511 ;;		None
 29512 ;; Return value:  Size  Location     Type
 29513 ;;                  1    wreg      void 
 29514 ;; Registers used:
 29515 ;;		wreg, status,2
 29516 ;; Tracked objects:
 29517 ;;		On entry : 0/0
 29518 ;;		On exit  : 0/0
 29519 ;;		Unchanged: 0/0
 29520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29525 ;;Total ram usage:        0 bytes
 29526 ;; Hardware stack levels used:    1
 29527 ;; Hardware stack levels required when called:    3
 29528 ;; This function calls:
 29529 ;;		Nothing
 29530 ;; This function is called by:
 29531 ;;		_main
 29532 ;; This function uses a non-reentrant model
 29533 ;;
 29534                           
 29535                           	psect	text105
 29536  01AAAE                     __ptext105:
 29537                           	opt stack 0
 29538  01AAAE                     _PM_Timer_Initialization:
 29539                           	opt stack 27
 29540                           
 29541                           ;Power_Meter.c: 90: T0CON = 0b11000111;
 29542                           
 29543                           ;incstack = 0
 29544  01AAAE  0EC7               	movlw	199
 29545  01AAB0  6ED5               	movwf	4053,c	;volatile
 29546                           
 29547                           ;Power_Meter.c: 92: TMR0IE = 1;
 29548  01AAB2  8AF2               	bsf	intcon,5,c	;volatile
 29549                           
 29550                           ;Power_Meter.c: 93: TMR0IF = 0;
 29551  01AAB4  94F2               	bcf	intcon,2,c	;volatile
 29552  01AAB6  0012               	return		;funcret
 29553  01AAB8                     __end_of_PM_Timer_Initialization:
 29554                           	opt stack 0
 29555                           tblptru	equ	0xFF8
 29556                           tblptrh	equ	0xFF7
 29557                           tblptrl	equ	0xFF6
 29558                           tablat	equ	0xFF5
 29559                           prodh	equ	0xFF4
 29560                           prodl	equ	0xFF3
 29561                           intcon	equ	0xFF2
 29562                           postinc0	equ	0xFEE
 29563                           wreg	equ	0xFE8
 29564                           postdec1	equ	0xFE5
 29565                           fsr1h	equ	0xFE2
 29566                           fsr1l	equ	0xFE1
 29567                           indf2	equ	0xFDF
 29568                           postinc2	equ	0xFDE
 29569                           postdec2	equ	0xFDD
 29570                           fsr2h	equ	0xFDA
 29571                           fsr2l	equ	0xFD9
 29572                           status	equ	0xFD8
 29573                           
 29574 ;; *************** function _PM_IO_Initialization *****************
 29575 ;; Defined at:
 29576 ;;		line 16 in file "Power_Meter.c"
 29577 ;; Parameters:    Size  Location     Type
 29578 ;;		None
 29579 ;; Auto vars:     Size  Location     Type
 29580 ;;		None
 29581 ;; Return value:  Size  Location     Type
 29582 ;;                  1    wreg      void 
 29583 ;; Registers used:
 29584 ;;		wreg, status,2
 29585 ;; Tracked objects:
 29586 ;;		On entry : 0/0
 29587 ;;		On exit  : 0/0
 29588 ;;		Unchanged: 0/0
 29589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29594 ;;Total ram usage:        0 bytes
 29595 ;; Hardware stack levels used:    1
 29596 ;; Hardware stack levels required when called:    3
 29597 ;; This function calls:
 29598 ;;		Nothing
 29599 ;; This function is called by:
 29600 ;;		_main
 29601 ;; This function uses a non-reentrant model
 29602 ;;
 29603                           
 29604                           	psect	text106
 29605  019E80                     __ptext106:
 29606                           	opt stack 0
 29607  019E80                     _PM_IO_Initialization:
 29608                           	opt stack 27
 29609                           
 29610                           ;Power_Meter.c: 20: TRISAbits.TRISA0 = 1;
 29611                           
 29612                           ;incstack = 0
 29613  019E80  8092               	bsf	3986,0,c	;volatile
 29614                           
 29615                           ;Power_Meter.c: 22: TRISAbits.TRISA1 = 1;
 29616  019E82  8292               	bsf	3986,1,c	;volatile
 29617                           
 29618                           ;Power_Meter.c: 23: TRISAbits.TRISA2 = 1;
 29619  019E84  8492               	bsf	3986,2,c	;volatile
 29620                           
 29621                           ;Power_Meter.c: 24: TRISAbits.TRISA3 = 1;
 29622  019E86  8692               	bsf	3986,3,c	;volatile
 29623                           
 29624                           ;Power_Meter.c: 26: TRISFbits.TRISF4 = 1;
 29625  019E88  8897               	bsf	3991,4,c	;volatile
 29626                           
 29627                           ;Power_Meter.c: 27: TRISFbits.TRISF5 = 1;
 29628  019E8A  8A97               	bsf	3991,5,c	;volatile
 29629                           
 29630                           ;Power_Meter.c: 28: TRISFbits.TRISF6 = 1;
 29631  019E8C  8C97               	bsf	3991,6,c	;volatile
 29632                           
 29633                           ;Power_Meter.c: 31: ANSEL0 = 1;
 29634  019E8E  010F               	movlb	15	; () banked
 29635  019E90  8125               	bsf	37,0,b	;volatile
 29636                           
 29637                           ;Power_Meter.c: 33: ANSEL1 = 1;
 29638  019E92  010F               	movlb	15	; () banked
 29639  019E94  8325               	bsf	37,1,b	;volatile
 29640                           
 29641                           ;Power_Meter.c: 34: ANSEL2 = 1;
 29642  019E96  010F               	movlb	15	; () banked
 29643  019E98  8525               	bsf	37,2,b	;volatile
 29644                           
 29645                           ;Power_Meter.c: 35: ANSEL3 = 1;
 29646  019E9A  010F               	movlb	15	; () banked
 29647  019E9C  8725               	bsf	37,3,b	;volatile
 29648                           
 29649                           ;Power_Meter.c: 37: ANSEL9 = 1;
 29650  019E9E  010F               	movlb	15	; () banked
 29651  019EA0  8324               	bsf	36,1,b	;volatile
 29652                           
 29653                           ;Power_Meter.c: 38: ANSEL10 = 1;
 29654  019EA2  010F               	movlb	15	; () banked
 29655  019EA4  8524               	bsf	36,2,b	;volatile
 29656                           
 29657                           ;Power_Meter.c: 39: ANSEL11 = 1;
 29658  019EA6  010F               	movlb	15	; () banked
 29659  019EA8  8724               	bsf	36,3,b	;volatile
 29660                           
 29661                           ;Power_Meter.c: 45: TRISFbits.TRISF7 = 0;
 29662  019EAA  9E97               	bcf	3991,7,c	;volatile
 29663                           
 29664                           ;Power_Meter.c: 46: (RF7 = 0);
 29665  019EAC  9E85               	bcf	3973,7,c	;volatile
 29666                           
 29667                           ;Power_Meter.c: 53: TRISEbits.TRISE2 = 1;
 29668  019EAE  8496               	bsf	3990,2,c	;volatile
 29669                           
 29670                           ; BSR set to: 15
 29671                           ;Power_Meter.c: 54: CCP10CON = 0x04;
 29672  019EB0  0E04               	movlw	4
 29673  019EB2  010F               	movlb	15	; () banked
 29674  019EB4  6F40               	movwf	64,b	;volatile
 29675                           
 29676                           ; BSR set to: 15
 29677                           ;Power_Meter.c: 55: CCP10IE = 1;
 29678  019EB6  8EB6               	bsf	4022,7,c	;volatile
 29679                           
 29680                           ; BSR set to: 15
 29681                           ;Power_Meter.c: 56: CCP10IF = 0;
 29682  019EB8  9EB7               	bcf	4023,7,c	;volatile
 29683                           
 29684                           ; BSR set to: 15
 29685                           ;Power_Meter.c: 58: TRISCbits.TRISC1 = 1;
 29686  019EBA  8294               	bsf	3988,1,c	;volatile
 29687                           
 29688                           ;Power_Meter.c: 59: CCP2CON = 0x04;
 29689  019EBC  0E04               	movlw	4
 29690  019EBE  010F               	movlb	15	; () banked
 29691  019EC0  6F4E               	movwf	78,b	;volatile
 29692                           
 29693                           ; BSR set to: 15
 29694                           ;Power_Meter.c: 60: CCP2IE = 1;
 29695  019EC2  84A3               	bsf	4003,2,c	;volatile
 29696                           
 29697                           ; BSR set to: 15
 29698                           ;Power_Meter.c: 61: CCP2IF = 0;
 29699  019EC4  94A4               	bcf	4004,2,c	;volatile
 29700                           
 29701                           ; BSR set to: 15
 29702                           ;Power_Meter.c: 63: TRISCbits.TRISC2 = 1;
 29703  019EC6  8494               	bsf	3988,2,c	;volatile
 29704                           
 29705                           ;Power_Meter.c: 64: CCP1CON = 0x04;
 29706  019EC8  0E04               	movlw	4
 29707  019ECA  6EBB               	movwf	4027,c	;volatile
 29708                           
 29709                           ; BSR set to: 15
 29710                           ;Power_Meter.c: 65: CCP1IE = 1;
 29711  019ECC  82A3               	bsf	4003,1,c	;volatile
 29712                           
 29713                           ; BSR set to: 15
 29714                           ;Power_Meter.c: 66: CCP1IF = 0;
 29715  019ECE  92A4               	bcf	4004,1,c	;volatile
 29716                           
 29717                           ; BSR set to: 15
 29718                           ;Power_Meter.c: 68: TRISGbits.TRISG0 = 1;
 29719  019ED0  8098               	bsf	3992,0,c	;volatile
 29720                           
 29721                           ;Power_Meter.c: 69: CCP3CON = 0x04;
 29722  019ED2  0E04               	movlw	4
 29723  019ED4  010F               	movlb	15	; () banked
 29724  019ED6  6F49               	movwf	73,b	;volatile
 29725                           
 29726                           ; BSR set to: 15
 29727                           ;Power_Meter.c: 70: CCP3IE = 1;
 29728  019ED8  80B6               	bsf	4022,0,c	;volatile
 29729                           
 29730                           ; BSR set to: 15
 29731                           ;Power_Meter.c: 71: CCP3IF = 0;
 29732  019EDA  90B7               	bcf	4023,0,c	;volatile
 29733                           
 29734                           ; BSR set to: 15
 29735                           ;Power_Meter.c: 73: TRISGbits.TRISG3 = 1;
 29736  019EDC  8698               	bsf	3992,3,c	;volatile
 29737                           
 29738                           ; BSR set to: 15
 29739                           ;Power_Meter.c: 74: ANSEL17 = 0;
 29740  019EDE  010F               	movlb	15	; () banked
 29741  019EE0  9323               	bcf	35,1,b	;volatile
 29742                           
 29743                           ;Power_Meter.c: 75: CCP4CON = 0x04;
 29744  019EE2  0E04               	movlw	4
 29745  019EE4  6E77               	movwf	3959,c	;volatile
 29746                           
 29747                           ; BSR set to: 15
 29748                           ;Power_Meter.c: 76: CCP4IE = 1;
 29749  019EE6  82B6               	bsf	4022,1,c	;volatile
 29750                           
 29751                           ; BSR set to: 15
 29752                           ;Power_Meter.c: 77: CCP4IF = 0;
 29753  019EE8  92B7               	bcf	4023,1,c	;volatile
 29754                           
 29755                           ; BSR set to: 15
 29756                           ;Power_Meter.c: 79: TRISGbits.TRISG4 = 1;
 29757  019EEA  8898               	bsf	3992,4,c	;volatile
 29758                           
 29759                           ; BSR set to: 15
 29760                           ;Power_Meter.c: 80: ANSEL16 = 0;
 29761  019EEC  010F               	movlb	15	; () banked
 29762  019EEE  9123               	bcf	35,0,b	;volatile
 29763                           
 29764                           ;Power_Meter.c: 81: CCP5CON = 0x04;
 29765  019EF0  0E04               	movlw	4
 29766  019EF2  6E74               	movwf	3956,c	;volatile
 29767                           
 29768                           ; BSR set to: 15
 29769                           ;Power_Meter.c: 82: CCP5IE = 1;
 29770  019EF4  84B6               	bsf	4022,2,c	;volatile
 29771                           
 29772                           ; BSR set to: 15
 29773                           ;Power_Meter.c: 83: CCP5IF = 0;
 29774  019EF6  94B7               	bcf	4023,2,c	;volatile
 29775                           
 29776                           ; BSR set to: 15
 29777  019EF8  0012               	return		;funcret
 29778  019EFA                     __end_of_PM_IO_Initialization:
 29779                           	opt stack 0
 29780                           tblptru	equ	0xFF8
 29781                           tblptrh	equ	0xFF7
 29782                           tblptrl	equ	0xFF6
 29783                           tablat	equ	0xFF5
 29784                           prodh	equ	0xFF4
 29785                           prodl	equ	0xFF3
 29786                           intcon	equ	0xFF2
 29787                           postinc0	equ	0xFEE
 29788                           wreg	equ	0xFE8
 29789                           postdec1	equ	0xFE5
 29790                           fsr1h	equ	0xFE2
 29791                           fsr1l	equ	0xFE1
 29792                           indf2	equ	0xFDF
 29793                           postinc2	equ	0xFDE
 29794                           postdec2	equ	0xFDD
 29795                           fsr2h	equ	0xFDA
 29796                           fsr2l	equ	0xFD9
 29797                           status	equ	0xFD8
 29798                           
 29799 ;; *************** function _PM_ADC_Initialization *****************
 29800 ;; Defined at:
 29801 ;;		line 99 in file "Power_Meter.c"
 29802 ;; Parameters:    Size  Location     Type
 29803 ;;		None
 29804 ;; Auto vars:     Size  Location     Type
 29805 ;;		None
 29806 ;; Return value:  Size  Location     Type
 29807 ;;                  1    wreg      void 
 29808 ;; Registers used:
 29809 ;;		wreg, status,2
 29810 ;; Tracked objects:
 29811 ;;		On entry : 0/0
 29812 ;;		On exit  : 0/0
 29813 ;;		Unchanged: 0/0
 29814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29819 ;;Total ram usage:        0 bytes
 29820 ;; Hardware stack levels used:    1
 29821 ;; Hardware stack levels required when called:    3
 29822 ;; This function calls:
 29823 ;;		Nothing
 29824 ;; This function is called by:
 29825 ;;		_main
 29826 ;; This function uses a non-reentrant model
 29827 ;;
 29828                           
 29829                           	psect	text107
 29830  01AAB8                     __ptext107:
 29831                           	opt stack 0
 29832  01AAB8                     _PM_ADC_Initialization:
 29833                           	opt stack 27
 29834                           
 29835                           ;Power_Meter.c: 101: ADCON1 = 0b01000000;
 29836                           
 29837                           ; BSR set to: 15
 29838                           ;incstack = 0
 29839  01AAB8  0E40               	movlw	64
 29840  01AABA  6EC1               	movwf	4033,c	;volatile
 29841                           
 29842                           ;Power_Meter.c: 102: ADCON2 = 0b10001101;
 29843  01AABC  0E8D               	movlw	141
 29844  01AABE  6EC0               	movwf	4032,c	;volatile
 29845  01AAC0  0012               	return		;funcret
 29846  01AAC2                     __end_of_PM_ADC_Initialization:
 29847                           	opt stack 0
 29848                           tblptru	equ	0xFF8
 29849                           tblptrh	equ	0xFF7
 29850                           tblptrl	equ	0xFF6
 29851                           tablat	equ	0xFF5
 29852                           prodh	equ	0xFF4
 29853                           prodl	equ	0xFF3
 29854                           intcon	equ	0xFF2
 29855                           postinc0	equ	0xFEE
 29856                           wreg	equ	0xFE8
 29857                           postdec1	equ	0xFE5
 29858                           fsr1h	equ	0xFE2
 29859                           fsr1l	equ	0xFE1
 29860                           indf2	equ	0xFDF
 29861                           postinc2	equ	0xFDE
 29862                           postdec2	equ	0xFDD
 29863                           fsr2h	equ	0xFDA
 29864                           fsr2l	equ	0xFD9
 29865                           status	equ	0xFD8
 29866                           
 29867 ;; *************** function _OSCILLATOR *****************
 29868 ;; Defined at:
 29869 ;;		line 12 in file "Initialization.c"
 29870 ;; Parameters:    Size  Location     Type
 29871 ;;		None
 29872 ;; Auto vars:     Size  Location     Type
 29873 ;;		None
 29874 ;; Return value:  Size  Location     Type
 29875 ;;                  1    wreg      void 
 29876 ;; Registers used:
 29877 ;;		wreg, status,2
 29878 ;; Tracked objects:
 29879 ;;		On entry : 0/0
 29880 ;;		On exit  : 0/0
 29881 ;;		Unchanged: 0/0
 29882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29887 ;;Total ram usage:        0 bytes
 29888 ;; Hardware stack levels used:    1
 29889 ;; Hardware stack levels required when called:    3
 29890 ;; This function calls:
 29891 ;;		Nothing
 29892 ;; This function is called by:
 29893 ;;		_main
 29894 ;; This function uses a non-reentrant model
 29895 ;;
 29896                           
 29897                           	psect	text108
 29898  01AB06                     __ptext108:
 29899                           	opt stack 0
 29900  01AB06                     _OSCILLATOR:
 29901                           	opt stack 27
 29902                           
 29903                           ;Initialization.c: 14: OSCCON = 0b11101110;
 29904                           
 29905                           ;incstack = 0
 29906  01AB06  0EEE               	movlw	238
 29907  01AB08  6ED3               	movwf	4051,c	;volatile
 29908  01AB0A  0012               	return		;funcret
 29909  01AB0C                     __end_of_OSCILLATOR:
 29910                           	opt stack 0
 29911                           tblptru	equ	0xFF8
 29912                           tblptrh	equ	0xFF7
 29913                           tblptrl	equ	0xFF6
 29914                           tablat	equ	0xFF5
 29915                           prodh	equ	0xFF4
 29916                           prodl	equ	0xFF3
 29917                           intcon	equ	0xFF2
 29918                           postinc0	equ	0xFEE
 29919                           wreg	equ	0xFE8
 29920                           postdec1	equ	0xFE5
 29921                           fsr1h	equ	0xFE2
 29922                           fsr1l	equ	0xFE1
 29923                           indf2	equ	0xFDF
 29924                           postinc2	equ	0xFDE
 29925                           postdec2	equ	0xFDD
 29926                           fsr2h	equ	0xFDA
 29927                           fsr2l	equ	0xFD9
 29928                           status	equ	0xFD8
 29929                           
 29930 ;; *************** function _IO_Initiate *****************
 29931 ;; Defined at:
 29932 ;;		line 56 in file "Initialization.c"
 29933 ;; Parameters:    Size  Location     Type
 29934 ;;		None
 29935 ;; Auto vars:     Size  Location     Type
 29936 ;;		None
 29937 ;; Return value:  Size  Location     Type
 29938 ;;                  2   18[None  ] int 
 29939 ;; Registers used:
 29940 ;;		cstack
 29941 ;; Tracked objects:
 29942 ;;		On entry : 0/0
 29943 ;;		On exit  : 0/0
 29944 ;;		Unchanged: 0/0
 29945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29950 ;;Total ram usage:        0 bytes
 29951 ;; Hardware stack levels used:    1
 29952 ;; Hardware stack levels required when called:    4
 29953 ;; This function calls:
 29954 ;;		_Generator_IO_init
 29955 ;;		_Pitch_Solenoid_init
 29956 ;;		_Power_Meter_Error_IO
 29957 ;;		_VFD_Contactor_IO_init
 29958 ;;		_VFD_Error_IO
 29959 ;; This function is called by:
 29960 ;;		_main
 29961 ;; This function uses a non-reentrant model
 29962 ;;
 29963                           
 29964                           	psect	text109
 29965  01A5E2                     __ptext109:
 29966                           	opt stack 0
 29967  01A5E2                     _IO_Initiate:
 29968                           	opt stack 26
 29969                           
 29970                           ;Initialization.c: 58: TRISE0 = 0;
 29971                           
 29972                           ;incstack = 0
 29973  01A5E2  9096               	bcf	3990,0,c	;volatile
 29974                           
 29975                           ;Initialization.c: 59: RE0 = 0;
 29976  01A5E4  9084               	bcf	3972,0,c	;volatile
 29977                           
 29978                           ;Initialization.c: 61: TRISA5 = 0;
 29979  01A5E6  9A92               	bcf	3986,5,c	;volatile
 29980                           
 29981                           ;Initialization.c: 62: ANSEL4 = 0;
 29982  01A5E8  010F               	movlb	15	; () banked
 29983  01A5EA  9925               	bcf	37,4,b	;volatile
 29984                           
 29985                           ;Initialization.c: 63: RA5 = 0;
 29986  01A5EC  9A80               	bcf	3968,5,c	;volatile
 29987                           
 29988                           ; BSR set to: 15
 29989                           ;Initialization.c: 65: Pitch_Solenoid_init();
 29990  01A5EE  EC78  F0D5         	call	_Pitch_Solenoid_init	;wreg free
 29991                           
 29992                           ;Initialization.c: 66: VFD_Contactor_IO_init();
 29993  01A5F2  EC61  F0D5         	call	_VFD_Contactor_IO_init	;wreg free
 29994                           
 29995                           ;Initialization.c: 67: Generator_IO_init();
 29996  01A5F6  EC7C  F0D5         	call	_Generator_IO_init	;wreg free
 29997                           
 29998                           ;Initialization.c: 68: VFD_Error_IO();
 29999  01A5FA  EC42  F0D5         	call	_VFD_Error_IO	;wreg free
 30000                           
 30001                           ;Initialization.c: 69: Power_Meter_Error_IO();
 30002  01A5FE  EC66  F0D5         	call	_Power_Meter_Error_IO	;wreg free
 30003                           
 30004                           ;Initialization.c: 71: TRISA4 = 0;
 30005  01A602  9892               	bcf	3986,4,c	;volatile
 30006                           
 30007                           ;Initialization.c: 72: RA4 = 0;
 30008  01A604  9880               	bcf	3968,4,c	;volatile
 30009                           
 30010                           ;Initialization.c: 74: TRISE1 = 1;
 30011  01A606  8296               	bsf	3990,1,c	;volatile
 30012                           
 30013                           ;Initialization.c: 76: TRISE7 = 0;
 30014  01A608  9E96               	bcf	3990,7,c	;volatile
 30015                           
 30016                           ;Initialization.c: 77: RE7 = 0;
 30017  01A60A  9E84               	bcf	3972,7,c	;volatile
 30018                           
 30019                           ;Initialization.c: 79: TRISC5 = 1;
 30020  01A60C  8A94               	bsf	3988,5,c	;volatile
 30021                           
 30022                           ;Initialization.c: 81: TRISB4 = 0;
 30023  01A60E  9893               	bcf	3987,4,c	;volatile
 30024                           
 30025                           ;Initialization.c: 82: RB4 = 0;
 30026  01A610  9881               	bcf	3969,4,c	;volatile
 30027                           
 30028                           ;Initialization.c: 84: TRISB5 = 0;
 30029  01A612  9A93               	bcf	3987,5,c	;volatile
 30030                           
 30031                           ;Initialization.c: 85: RB5 = 1;
 30032  01A614  8A81               	bsf	3969,5,c	;volatile
 30033                           
 30034                           ;Initialization.c: 87: TRISF1 = 0;
 30035  01A616  9297               	bcf	3991,1,c	;volatile
 30036                           
 30037                           ;Initialization.c: 88: ANSEL6 = 0;
 30038  01A618  010F               	movlb	15	; () banked
 30039  01A61A  9D25               	bcf	37,6,b	;volatile
 30040                           
 30041                           ; BSR set to: 15
 30042                           ;Initialization.c: 89: RF1 = 0;
 30043  01A61C  9285               	bcf	3973,1,c	;volatile
 30044                           
 30045                           ; BSR set to: 15
 30046                           ;Initialization.c: 91: TRISC0 = 1;
 30047  01A61E  8094               	bsf	3988,0,c	;volatile
 30048                           
 30049                           ; BSR set to: 15
 30050  01A620  0012               	return		;funcret
 30051  01A622                     __end_of_IO_Initiate:
 30052                           	opt stack 0
 30053                           tblptru	equ	0xFF8
 30054                           tblptrh	equ	0xFF7
 30055                           tblptrl	equ	0xFF6
 30056                           tablat	equ	0xFF5
 30057                           prodh	equ	0xFF4
 30058                           prodl	equ	0xFF3
 30059                           intcon	equ	0xFF2
 30060                           postinc0	equ	0xFEE
 30061                           wreg	equ	0xFE8
 30062                           postdec1	equ	0xFE5
 30063                           fsr1h	equ	0xFE2
 30064                           fsr1l	equ	0xFE1
 30065                           indf2	equ	0xFDF
 30066                           postinc2	equ	0xFDE
 30067                           postdec2	equ	0xFDD
 30068                           fsr2h	equ	0xFDA
 30069                           fsr2l	equ	0xFD9
 30070                           status	equ	0xFD8
 30071                           
 30072 ;; *************** function _VFD_Error_IO *****************
 30073 ;; Defined at:
 30074 ;;		line 115 in file "Initialization.c"
 30075 ;; Parameters:    Size  Location     Type
 30076 ;;		None
 30077 ;; Auto vars:     Size  Location     Type
 30078 ;;		None
 30079 ;; Return value:  Size  Location     Type
 30080 ;;                  1    wreg      void 
 30081 ;; Registers used:
 30082 ;;		None
 30083 ;; Tracked objects:
 30084 ;;		On entry : 0/0
 30085 ;;		On exit  : 0/0
 30086 ;;		Unchanged: 0/0
 30087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30092 ;;Total ram usage:        0 bytes
 30093 ;; Hardware stack levels used:    1
 30094 ;; Hardware stack levels required when called:    3
 30095 ;; This function calls:
 30096 ;;		Nothing
 30097 ;; This function is called by:
 30098 ;;		_IO_Initiate
 30099 ;; This function uses a non-reentrant model
 30100 ;;
 30101                           
 30102                           	psect	text110
 30103  01AA84                     __ptext110:
 30104                           	opt stack 0
 30105  01AA84                     _VFD_Error_IO:
 30106                           	opt stack 26
 30107                           
 30108                           ;Initialization.c: 117: TRISE3 = 1;
 30109                           
 30110                           ; BSR set to: 15
 30111                           ;incstack = 0
 30112  01AA84  8696               	bsf	3990,3,c	;volatile
 30113                           
 30114                           ;Initialization.c: 118: TRISF3 = 0;
 30115  01AA86  9697               	bcf	3991,3,c	;volatile
 30116                           
 30117                           ;Initialization.c: 119: ANSEL8 = 0;
 30118  01AA88  010F               	movlb	15	; () banked
 30119  01AA8A  9124               	bcf	36,0,b	;volatile
 30120                           
 30121                           ;Initialization.c: 120: RF3 = 0;
 30122  01AA8C  9685               	bcf	3973,3,c	;volatile
 30123                           
 30124                           ; BSR set to: 15
 30125  01AA8E  0012               	return		;funcret
 30126  01AA90                     __end_of_VFD_Error_IO:
 30127                           	opt stack 0
 30128                           tblptru	equ	0xFF8
 30129                           tblptrh	equ	0xFF7
 30130                           tblptrl	equ	0xFF6
 30131                           tablat	equ	0xFF5
 30132                           prodh	equ	0xFF4
 30133                           prodl	equ	0xFF3
 30134                           intcon	equ	0xFF2
 30135                           postinc0	equ	0xFEE
 30136                           wreg	equ	0xFE8
 30137                           postdec1	equ	0xFE5
 30138                           fsr1h	equ	0xFE2
 30139                           fsr1l	equ	0xFE1
 30140                           indf2	equ	0xFDF
 30141                           postinc2	equ	0xFDE
 30142                           postdec2	equ	0xFDD
 30143                           fsr2h	equ	0xFDA
 30144                           fsr2l	equ	0xFD9
 30145                           status	equ	0xFD8
 30146                           
 30147 ;; *************** function _VFD_Contactor_IO_init *****************
 30148 ;; Defined at:
 30149 ;;		line 102 in file "Initialization.c"
 30150 ;; Parameters:    Size  Location     Type
 30151 ;;		None
 30152 ;; Auto vars:     Size  Location     Type
 30153 ;;		None
 30154 ;; Return value:  Size  Location     Type
 30155 ;;                  1    wreg      void 
 30156 ;; Registers used:
 30157 ;;		None
 30158 ;; Tracked objects:
 30159 ;;		On entry : 0/0
 30160 ;;		On exit  : 0/0
 30161 ;;		Unchanged: 0/0
 30162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30167 ;;Total ram usage:        0 bytes
 30168 ;; Hardware stack levels used:    1
 30169 ;; Hardware stack levels required when called:    3
 30170 ;; This function calls:
 30171 ;;		Nothing
 30172 ;; This function is called by:
 30173 ;;		_IO_Initiate
 30174 ;; This function uses a non-reentrant model
 30175 ;;
 30176                           
 30177                           	psect	text111
 30178  01AAC2                     __ptext111:
 30179                           	opt stack 0
 30180  01AAC2                     _VFD_Contactor_IO_init:
 30181                           	opt stack 26
 30182                           
 30183                           ;Initialization.c: 104: TRISD0 = 0;
 30184                           
 30185                           ; BSR set to: 15
 30186                           ;incstack = 0
 30187  01AAC2  9095               	bcf	3989,0,c	;volatile
 30188                           
 30189                           ;Initialization.c: 105: TRISD1 = 0;
 30190  01AAC4  9295               	bcf	3989,1,c	;volatile
 30191                           
 30192                           ;Initialization.c: 106: RD0 = 0; RD1 = 0;
 30193  01AAC6  9083               	bcf	3971,0,c	;volatile
 30194  01AAC8  9283               	bcf	3971,1,c	;volatile
 30195  01AACA  0012               	return		;funcret
 30196  01AACC                     __end_of_VFD_Contactor_IO_init:
 30197                           	opt stack 0
 30198                           tblptru	equ	0xFF8
 30199                           tblptrh	equ	0xFF7
 30200                           tblptrl	equ	0xFF6
 30201                           tablat	equ	0xFF5
 30202                           prodh	equ	0xFF4
 30203                           prodl	equ	0xFF3
 30204                           intcon	equ	0xFF2
 30205                           postinc0	equ	0xFEE
 30206                           wreg	equ	0xFE8
 30207                           postdec1	equ	0xFE5
 30208                           fsr1h	equ	0xFE2
 30209                           fsr1l	equ	0xFE1
 30210                           indf2	equ	0xFDF
 30211                           postinc2	equ	0xFDE
 30212                           postdec2	equ	0xFDD
 30213                           fsr2h	equ	0xFDA
 30214                           fsr2l	equ	0xFD9
 30215                           status	equ	0xFD8
 30216                           
 30217 ;; *************** function _Power_Meter_Error_IO *****************
 30218 ;; Defined at:
 30219 ;;		line 122 in file "Initialization.c"
 30220 ;; Parameters:    Size  Location     Type
 30221 ;;		None
 30222 ;; Auto vars:     Size  Location     Type
 30223 ;;		None
 30224 ;; Return value:  Size  Location     Type
 30225 ;;                  1    wreg      void 
 30226 ;; Registers used:
 30227 ;;		None
 30228 ;; Tracked objects:
 30229 ;;		On entry : 0/0
 30230 ;;		On exit  : 0/0
 30231 ;;		Unchanged: 0/0
 30232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30237 ;;Total ram usage:        0 bytes
 30238 ;; Hardware stack levels used:    1
 30239 ;; Hardware stack levels required when called:    3
 30240 ;; This function calls:
 30241 ;;		Nothing
 30242 ;; This function is called by:
 30243 ;;		_IO_Initiate
 30244 ;; This function uses a non-reentrant model
 30245 ;;
 30246                           
 30247                           	psect	text112
 30248  01AACC                     __ptext112:
 30249                           	opt stack 0
 30250  01AACC                     _Power_Meter_Error_IO:
 30251                           	opt stack 26
 30252                           
 30253                           ;Initialization.c: 124: TRISC2 = 1;
 30254                           
 30255                           ;incstack = 0
 30256  01AACC  8494               	bsf	3988,2,c	;volatile
 30257                           
 30258                           ;Initialization.c: 125: TRISF4 = 0;
 30259  01AACE  9897               	bcf	3991,4,c	;volatile
 30260                           
 30261                           ;Initialization.c: 126: ANSEL9 = 0;
 30262  01AAD0  010F               	movlb	15	; () banked
 30263  01AAD2  9324               	bcf	36,1,b	;volatile
 30264                           
 30265                           ; BSR set to: 15
 30266  01AAD4  0012               	return		;funcret
 30267  01AAD6                     __end_of_Power_Meter_Error_IO:
 30268                           	opt stack 0
 30269                           tblptru	equ	0xFF8
 30270                           tblptrh	equ	0xFF7
 30271                           tblptrl	equ	0xFF6
 30272                           tablat	equ	0xFF5
 30273                           prodh	equ	0xFF4
 30274                           prodl	equ	0xFF3
 30275                           intcon	equ	0xFF2
 30276                           postinc0	equ	0xFEE
 30277                           wreg	equ	0xFE8
 30278                           postdec1	equ	0xFE5
 30279                           fsr1h	equ	0xFE2
 30280                           fsr1l	equ	0xFE1
 30281                           indf2	equ	0xFDF
 30282                           postinc2	equ	0xFDE
 30283                           postdec2	equ	0xFDD
 30284                           fsr2h	equ	0xFDA
 30285                           fsr2l	equ	0xFD9
 30286                           status	equ	0xFD8
 30287                           
 30288 ;; *************** function _Pitch_Solenoid_init *****************
 30289 ;; Defined at:
 30290 ;;		line 95 in file "Initialization.c"
 30291 ;; Parameters:    Size  Location     Type
 30292 ;;		None
 30293 ;; Auto vars:     Size  Location     Type
 30294 ;;		None
 30295 ;; Return value:  Size  Location     Type
 30296 ;;                  1    wreg      void 
 30297 ;; Registers used:
 30298 ;;		None
 30299 ;; Tracked objects:
 30300 ;;		On entry : 0/0
 30301 ;;		On exit  : 0/0
 30302 ;;		Unchanged: 0/0
 30303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30308 ;;Total ram usage:        0 bytes
 30309 ;; Hardware stack levels used:    1
 30310 ;; Hardware stack levels required when called:    3
 30311 ;; This function calls:
 30312 ;;		Nothing
 30313 ;; This function is called by:
 30314 ;;		_IO_Initiate
 30315 ;; This function uses a non-reentrant model
 30316 ;;
 30317                           
 30318                           	psect	text113
 30319  01AAF0                     __ptext113:
 30320                           	opt stack 0
 30321  01AAF0                     _Pitch_Solenoid_init:
 30322                           	opt stack 26
 30323                           
 30324                           ;Initialization.c: 97: TRISB0 = 0;
 30325                           
 30326                           ; BSR set to: 15
 30327                           ;incstack = 0
 30328  01AAF0  9093               	bcf	3987,0,c	;volatile
 30329                           
 30330                           ;Initialization.c: 98: RB0 = 0;
 30331  01AAF2  9081               	bcf	3969,0,c	;volatile
 30332                           
 30333                           ;Initialization.c: 100: TRISB1 = 1;
 30334  01AAF4  8293               	bsf	3987,1,c	;volatile
 30335  01AAF6  0012               	return		;funcret
 30336  01AAF8                     __end_of_Pitch_Solenoid_init:
 30337                           	opt stack 0
 30338                           tblptru	equ	0xFF8
 30339                           tblptrh	equ	0xFF7
 30340                           tblptrl	equ	0xFF6
 30341                           tablat	equ	0xFF5
 30342                           prodh	equ	0xFF4
 30343                           prodl	equ	0xFF3
 30344                           intcon	equ	0xFF2
 30345                           postinc0	equ	0xFEE
 30346                           wreg	equ	0xFE8
 30347                           postdec1	equ	0xFE5
 30348                           fsr1h	equ	0xFE2
 30349                           fsr1l	equ	0xFE1
 30350                           indf2	equ	0xFDF
 30351                           postinc2	equ	0xFDE
 30352                           postdec2	equ	0xFDD
 30353                           fsr2h	equ	0xFDA
 30354                           fsr2l	equ	0xFD9
 30355                           status	equ	0xFD8
 30356                           
 30357 ;; *************** function _Generator_IO_init *****************
 30358 ;; Defined at:
 30359 ;;		line 108 in file "Initialization.c"
 30360 ;; Parameters:    Size  Location     Type
 30361 ;;		None
 30362 ;; Auto vars:     Size  Location     Type
 30363 ;;		None
 30364 ;; Return value:  Size  Location     Type
 30365 ;;                  1    wreg      void 
 30366 ;; Registers used:
 30367 ;;		None
 30368 ;; Tracked objects:
 30369 ;;		On entry : 0/0
 30370 ;;		On exit  : 0/0
 30371 ;;		Unchanged: 0/0
 30372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30377 ;;Total ram usage:        0 bytes
 30378 ;; Hardware stack levels used:    1
 30379 ;; Hardware stack levels required when called:    3
 30380 ;; This function calls:
 30381 ;;		Nothing
 30382 ;; This function is called by:
 30383 ;;		_IO_Initiate
 30384 ;; This function uses a non-reentrant model
 30385 ;;
 30386                           
 30387                           	psect	text114
 30388  01AAF8                     __ptext114:
 30389                           	opt stack 0
 30390  01AAF8                     _Generator_IO_init:
 30391                           	opt stack 26
 30392                           
 30393                           ;Initialization.c: 110: TRISD2 = 0;
 30394                           
 30395                           ;incstack = 0
 30396  01AAF8  9495               	bcf	3989,2,c	;volatile
 30397                           
 30398                           ;Initialization.c: 111: RD2 = 0;
 30399  01AAFA  9483               	bcf	3971,2,c	;volatile
 30400                           
 30401                           ;Initialization.c: 113: TRISB2 = 1;
 30402  01AAFC  8493               	bsf	3987,2,c	;volatile
 30403  01AAFE  0012               	return		;funcret
 30404  01AB00                     __end_of_Generator_IO_init:
 30405                           	opt stack 0
 30406                           tblptru	equ	0xFF8
 30407                           tblptrh	equ	0xFF7
 30408                           tblptrl	equ	0xFF6
 30409                           tablat	equ	0xFF5
 30410                           prodh	equ	0xFF4
 30411                           prodl	equ	0xFF3
 30412                           intcon	equ	0xFF2
 30413                           postinc0	equ	0xFEE
 30414                           wreg	equ	0xFE8
 30415                           postdec1	equ	0xFE5
 30416                           fsr1h	equ	0xFE2
 30417                           fsr1l	equ	0xFE1
 30418                           indf2	equ	0xFDF
 30419                           postinc2	equ	0xFDE
 30420                           postdec2	equ	0xFDD
 30421                           fsr2h	equ	0xFDA
 30422                           fsr2l	equ	0xFD9
 30423                           status	equ	0xFD8
 30424                           
 30425 ;; *************** function _Generator_RPM_Initiate *****************
 30426 ;; Defined at:
 30427 ;;		line 41 in file "Initialization.c"
 30428 ;; Parameters:    Size  Location     Type
 30429 ;;		None
 30430 ;; Auto vars:     Size  Location     Type
 30431 ;;		None
 30432 ;; Return value:  Size  Location     Type
 30433 ;;                  2   12[None  ] int 
 30434 ;; Registers used:
 30435 ;;		wreg, status,2
 30436 ;; Tracked objects:
 30437 ;;		On entry : 0/0
 30438 ;;		On exit  : 0/0
 30439 ;;		Unchanged: 0/0
 30440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30445 ;;Total ram usage:        0 bytes
 30446 ;; Hardware stack levels used:    1
 30447 ;; Hardware stack levels required when called:    3
 30448 ;; This function calls:
 30449 ;;		Nothing
 30450 ;; This function is called by:
 30451 ;;		_main
 30452 ;; This function uses a non-reentrant model
 30453 ;;
 30454                           
 30455                           	psect	text115
 30456  01AA2E                     __ptext115:
 30457                           	opt stack 0
 30458  01AA2E                     _Generator_RPM_Initiate:
 30459                           	opt stack 27
 30460                           
 30461                           ;Initialization.c: 43: TRISEbits.TRISE4=1;
 30462                           
 30463                           ;incstack = 0
 30464  01AA2E  8896               	bsf	3990,4,c	;volatile
 30465                           
 30466                           ;Initialization.c: 44: CCP8CON = 0x06;
 30467  01AA30  0E06               	movlw	6
 30468  01AA32  010F               	movlb	15	; () banked
 30469  01AA34  6F46               	movwf	70,b	;volatile
 30470                           
 30471                           ; BSR set to: 15
 30472                           ;Initialization.c: 45: CCP8IE = 1;
 30473  01AA36  8AB6               	bsf	4022,5,c	;volatile
 30474                           
 30475                           ; BSR set to: 15
 30476                           ;Initialization.c: 46: CCP8IF = 0;
 30477  01AA38  9AB7               	bcf	4023,5,c	;volatile
 30478                           
 30479                           ; BSR set to: 15
 30480  01AA3A  0012               	return		;funcret
 30481  01AA3C                     __end_of_Generator_RPM_Initiate:
 30482                           	opt stack 0
 30483                           tblptru	equ	0xFF8
 30484                           tblptrh	equ	0xFF7
 30485                           tblptrl	equ	0xFF6
 30486                           tablat	equ	0xFF5
 30487                           prodh	equ	0xFF4
 30488                           prodl	equ	0xFF3
 30489                           intcon	equ	0xFF2
 30490                           postinc0	equ	0xFEE
 30491                           wreg	equ	0xFE8
 30492                           postdec1	equ	0xFE5
 30493                           fsr1h	equ	0xFE2
 30494                           fsr1l	equ	0xFE1
 30495                           indf2	equ	0xFDF
 30496                           postinc2	equ	0xFDE
 30497                           postdec2	equ	0xFDD
 30498                           fsr2h	equ	0xFDA
 30499                           fsr2l	equ	0xFD9
 30500                           status	equ	0xFD8
 30501                           
 30502 ;; *************** function _Generator_RPM_Cal *****************
 30503 ;; Defined at:
 30504 ;;		line 100 in file "RPM_Measurement.c"
 30505 ;; Parameters:    Size  Location     Type
 30506 ;;		None
 30507 ;; Auto vars:     Size  Location     Type
 30508 ;;		None
 30509 ;; Return value:  Size  Location     Type
 30510 ;;                  1    wreg      void 
 30511 ;; Registers used:
 30512 ;;		wreg, status,2, status,0, cstack
 30513 ;; Tracked objects:
 30514 ;;		On entry : 0/0
 30515 ;;		On exit  : 0/0
 30516 ;;		Unchanged: 0/0
 30517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30522 ;;Total ram usage:        2 bytes
 30523 ;; Hardware stack levels used:    1
 30524 ;; Hardware stack levels required when called:    5
 30525 ;; This function calls:
 30526 ;;		___ftadd
 30527 ;;		___ftdiv
 30528 ;;		___ftge
 30529 ;;		___ftmul
 30530 ;;		___fttol
 30531 ;;		___lwtoft
 30532 ;; This function is called by:
 30533 ;;		_main
 30534 ;; This function uses a non-reentrant model
 30535 ;;
 30536                           
 30537                           	psect	text116
 30538  014E7C                     __ptext116:
 30539                           	opt stack 0
 30540  014E7C                     _Generator_RPM_Cal:
 30541                           	opt stack 25
 30542                           
 30543                           ;RPM_Measurement.c: 102: CCP8IE = 0;
 30544                           
 30545                           ; BSR set to: 15
 30546                           ;incstack = 0
 30547  014E7C  9AB6               	bcf	4022,5,c	;volatile
 30548                           
 30549                           ;RPM_Measurement.c: 103: if(GRPM_Cap_New > GRPM_Cap_Old)
 30550  014E7E  0101               	movlb	1	; () banked
 30551  014E80  5137               	movf	_GRPM_Cap_New& (0+255),w,b
 30552  014E82  0101               	movlb	1	; () banked
 30553  014E84  5D39               	subwf	_GRPM_Cap_Old& (0+255),w,b
 30554  014E86  0101               	movlb	1	; () banked
 30555  014E88  5138               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 30556  014E8A  0101               	movlb	1	; () banked
 30557  014E8C  593A               	subwfb	(_GRPM_Cap_Old+1)& (0+255),w,b
 30558  014E8E  B0D8               	btfsc	status,0,c
 30559  014E90  D02F               	goto	l21887
 30560                           
 30561                           ; BSR set to: 1
 30562                           ;RPM_Measurement.c: 104: {
 30563                           ;RPM_Measurement.c: 105: GRPM_Pulse_width = (GRPM_Cap_New - GRPM_Cap_Old + 1) ;
 30564  014E92  C139  F0AA         	movff	_GRPM_Cap_Old,??_Generator_RPM_Cal
 30565  014E96  C13A  F0AB         	movff	_GRPM_Cap_Old+1,??_Generator_RPM_Cal+1
 30566  014E9A  0100               	movlb	0	; () banked
 30567  014E9C  1FAA               	comf	??_Generator_RPM_Cal& (0+255),f,b
 30568  014E9E  1FAB               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30569  014EA0  4BAA               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 30570  014EA2  2BAB               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30571  014EA4  0101               	movlb	1	; () banked
 30572  014EA6  5137               	movf	_GRPM_Cap_New& (0+255),w,b
 30573  014EA8  0100               	movlb	0	; () banked
 30574  014EAA  27AA               	addwf	??_Generator_RPM_Cal& (0+255),f,b
 30575  014EAC  0101               	movlb	1	; () banked
 30576  014EAE  5138               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 30577  014EB0  0100               	movlb	0	; () banked
 30578  014EB2  23AB               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30579  014EB4  0E01               	movlw	1
 30580  014EB6  0100               	movlb	0	; () banked
 30581  014EB8  25AA               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 30582  014EBA  0102               	movlb	2	; () banked
 30583  014EBC  6FF4               	movwf	_GRPM_Pulse_width& (0+255),b
 30584  014EBE  0E00               	movlw	0
 30585  014EC0  0100               	movlb	0	; () banked
 30586  014EC2  21AB               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 30587  014EC4  0102               	movlb	2	; () banked
 30588  014EC6  6FF5               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 30589                           
 30590                           ;RPM_Measurement.c: 106: GRPM_Counter = (Timer1_OF_counter_Generator_New - Timer1_OF_cou
      +                          nter_Generator_Old);
 30591  014EC8  C2B2  F0AA         	movff	_Timer1_OF_counter_Generator_Old,??_Generator_RPM_Cal
 30592  014ECC  C2B3  F0AB         	movff	_Timer1_OF_counter_Generator_Old+1,??_Generator_RPM_Cal+1
 30593  014ED0  0100               	movlb	0	; () banked
 30594  014ED2  1FAA               	comf	??_Generator_RPM_Cal& (0+255),f,b
 30595  014ED4  1FAB               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30596  014ED6  4BAA               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 30597  014ED8  2BAB               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30598  014EDA  0101               	movlb	1	; () banked
 30599  014EDC  5151               	movf	_Timer1_OF_counter_Generator_New& (0+255),w,b
 30600  014EDE  0100               	movlb	0	; () banked
 30601  014EE0  25AA               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 30602  014EE2  0102               	movlb	2	; () banked
 30603  014EE4  6F8C               	movwf	_GRPM_Counter& (0+255),b
 30604  014EE6  0101               	movlb	1	; () banked
 30605  014EE8  5152               	movf	(_Timer1_OF_counter_Generator_New+1)& (0+255),w,b
 30606  014EEA  0100               	movlb	0	; () banked
 30607  014EEC  21AB               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 30608  014EEE  D038               	goto	L14
 30609  014EF0                     l21887:
 30610                           
 30611                           ;RPM_Measurement.c: 108: else
 30612                           ;RPM_Measurement.c: 109: {
 30613                           ;RPM_Measurement.c: 110: GRPM_Pulse_width = (GRPM_Cap_New - GRPM_Cap_Old + 1) + 65536;
 30614  014EF0  C139  F0AA         	movff	_GRPM_Cap_Old,??_Generator_RPM_Cal
 30615  014EF4  C13A  F0AB         	movff	_GRPM_Cap_Old+1,??_Generator_RPM_Cal+1
 30616  014EF8  0100               	movlb	0	; () banked
 30617  014EFA  1FAA               	comf	??_Generator_RPM_Cal& (0+255),f,b
 30618  014EFC  1FAB               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30619  014EFE  4BAA               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 30620  014F00  2BAB               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30621  014F02  0101               	movlb	1	; () banked
 30622  014F04  5137               	movf	_GRPM_Cap_New& (0+255),w,b
 30623  014F06  0100               	movlb	0	; () banked
 30624  014F08  27AA               	addwf	??_Generator_RPM_Cal& (0+255),f,b
 30625  014F0A  0101               	movlb	1	; () banked
 30626  014F0C  5138               	movf	(_GRPM_Cap_New+1)& (0+255),w,b
 30627  014F0E  0100               	movlb	0	; () banked
 30628  014F10  23AB               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30629  014F12  0E01               	movlw	1
 30630  014F14  0100               	movlb	0	; () banked
 30631  014F16  25AA               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 30632  014F18  0102               	movlb	2	; () banked
 30633  014F1A  6FF4               	movwf	_GRPM_Pulse_width& (0+255),b
 30634  014F1C  0E00               	movlw	0
 30635  014F1E  0100               	movlb	0	; () banked
 30636  014F20  21AB               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 30637  014F22  0102               	movlb	2	; () banked
 30638  014F24  6FF5               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 30639                           
 30640                           ;RPM_Measurement.c: 111: GRPM_Counter = (Timer1_OF_counter_Generator_New - Timer1_OF_cou
      +                          nter_Generator_Old);
 30641  014F26  C2B2  F0AA         	movff	_Timer1_OF_counter_Generator_Old,??_Generator_RPM_Cal
 30642  014F2A  C2B3  F0AB         	movff	_Timer1_OF_counter_Generator_Old+1,??_Generator_RPM_Cal+1
 30643  014F2E  0100               	movlb	0	; () banked
 30644  014F30  1FAA               	comf	??_Generator_RPM_Cal& (0+255),f,b
 30645  014F32  1FAB               	comf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30646  014F34  4BAA               	infsnz	??_Generator_RPM_Cal& (0+255),f,b
 30647  014F36  2BAB               	incf	(??_Generator_RPM_Cal+1)& (0+255),f,b
 30648  014F38  0101               	movlb	1	; () banked
 30649  014F3A  5151               	movf	_Timer1_OF_counter_Generator_New& (0+255),w,b
 30650  014F3C  0100               	movlb	0	; () banked
 30651  014F3E  25AA               	addwf	??_Generator_RPM_Cal& (0+255),w,b
 30652  014F40  0102               	movlb	2	; () banked
 30653  014F42  6F8C               	movwf	_GRPM_Counter& (0+255),b
 30654  014F44  0101               	movlb	1	; () banked
 30655  014F46  5152               	movf	(_Timer1_OF_counter_Generator_New+1)& (0+255),w,b
 30656  014F48  0100               	movlb	0	; () banked
 30657  014F4A  21AB               	addwfc	(??_Generator_RPM_Cal+1)& (0+255),w,b
 30658  014F4C  0102               	movlb	2	; () banked
 30659  014F4E  6F8D               	movwf	(_GRPM_Counter+1)& (0+255),b
 30660                           
 30661                           ;RPM_Measurement.c: 112: GRPM_Counter = GRPM_Counter -1;
 30662  014F50  0EFF               	movlw	255
 30663  014F52  0102               	movlb	2	; () banked
 30664  014F54  258C               	addwf	_GRPM_Counter& (0+255),w,b
 30665  014F56  0102               	movlb	2	; () banked
 30666  014F58  6F8C               	movwf	_GRPM_Counter& (0+255),b
 30667  014F5A  0EFF               	movlw	255
 30668  014F5C  0102               	movlb	2	; () banked
 30669  014F5E  218D               	addwfc	(_GRPM_Counter+1)& (0+255),w,b
 30670  014F60                     L14:
 30671  014F60  0102               	movlb	2	; () banked
 30672  014F62  6F8D               	movwf	(_GRPM_Counter+1)& (0+255),b
 30673                           
 30674                           ; BSR set to: 2
 30675                           ;RPM_Measurement.c: 113: }
 30676                           ;RPM_Measurement.c: 114: GRPM_Time = (0.000004 * GRPM_Pulse_width);
 30677                           
 30678                           ; BSR set to: 2
 30679  014F64  C2F4  F060         	movff	_GRPM_Pulse_width,___lwtoft@c
 30680  014F68  C2F5  F061         	movff	_GRPM_Pulse_width+1,___lwtoft@c+1
 30681  014F6C  EC84  F0D4         	call	___lwtoft	;wreg free
 30682  014F70  C060  F06A         	movff	?___lwtoft,___ftmul@f1
 30683  014F74  C061  F06B         	movff	?___lwtoft+1,___ftmul@f1+1
 30684  014F78  C062  F06C         	movff	?___lwtoft+2,___ftmul@f1+2
 30685  014F7C  0E38               	movlw	56
 30686  014F7E  0100               	movlb	0	; () banked
 30687  014F80  6F6D               	movwf	___ftmul@f2& (0+255),b
 30688  014F82  0E86               	movlw	134
 30689  014F84  0100               	movlb	0	; () banked
 30690  014F86  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 30691  014F88  0E36               	movlw	54
 30692  014F8A  0100               	movlb	0	; () banked
 30693  014F8C  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 30694  014F8E  EC83  F0BD         	call	___ftmul	;wreg free
 30695  014F92  C06A  F48A         	movff	?___ftmul,_GRPM_Time
 30696  014F96  C06B  F48B         	movff	?___ftmul+1,_GRPM_Time+1
 30697  014F9A  C06C  F48C         	movff	?___ftmul+2,_GRPM_Time+2
 30698                           
 30699                           ;RPM_Measurement.c: 116: GRPM_Time_1 = GRPM_Time + (0.262 * GRPM_Counter);
 30700  014F9E  0E25               	movlw	37
 30701  014FA0  0100               	movlb	0	; () banked
 30702  014FA2  6F6D               	movwf	___ftmul@f2& (0+255),b
 30703  014FA4  0E86               	movlw	134
 30704  014FA6  0100               	movlb	0	; () banked
 30705  014FA8  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 30706  014FAA  0E3E               	movlw	62
 30707  014FAC  0100               	movlb	0	; () banked
 30708  014FAE  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 30709  014FB0  C28C  F060         	movff	_GRPM_Counter,___lwtoft@c
 30710  014FB4  C28D  F061         	movff	_GRPM_Counter+1,___lwtoft@c+1
 30711  014FB8  EC84  F0D4         	call	___lwtoft	;wreg free
 30712  014FBC  C060  F06A         	movff	?___lwtoft,___ftmul@f1
 30713  014FC0  C061  F06B         	movff	?___lwtoft+1,___ftmul@f1+1
 30714  014FC4  C062  F06C         	movff	?___lwtoft+2,___ftmul@f1+2
 30715  014FC8  EC83  F0BD         	call	___ftmul	;wreg free
 30716  014FCC  C06A  F083         	movff	?___ftmul,___ftadd@f1
 30717  014FD0  C06B  F084         	movff	?___ftmul+1,___ftadd@f1+1
 30718  014FD4  C06C  F085         	movff	?___ftmul+2,___ftadd@f1+2
 30719  014FD8  C48A  F086         	movff	_GRPM_Time,___ftadd@f2
 30720  014FDC  C48B  F087         	movff	_GRPM_Time+1,___ftadd@f2+1
 30721  014FE0  C48C  F088         	movff	_GRPM_Time+2,___ftadd@f2+2
 30722  014FE4  ECE4  F0AF         	call	___ftadd	;wreg free
 30723  014FE8  C083  F2E8         	movff	?___ftadd,_GRPM_Time_1
 30724  014FEC  C084  F2E9         	movff	?___ftadd+1,_GRPM_Time_1+1
 30725  014FF0  C085  F2EA         	movff	?___ftadd+2,_GRPM_Time_1+2
 30726                           
 30727                           ;RPM_Measurement.c: 118: GRPM_Time_1 = GRPM_Time_1 / 4;
 30728  014FF4  C2E8  F09B         	movff	_GRPM_Time_1,___ftdiv@f1
 30729  014FF8  C2E9  F09C         	movff	_GRPM_Time_1+1,___ftdiv@f1+1
 30730  014FFC  C2EA  F09D         	movff	_GRPM_Time_1+2,___ftdiv@f1+2
 30731  015000  0E00               	movlw	0
 30732  015002  0100               	movlb	0	; () banked
 30733  015004  6F9E               	movwf	___ftdiv@f2& (0+255),b
 30734  015006  0E80               	movlw	128
 30735  015008  0100               	movlb	0	; () banked
 30736  01500A  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 30737  01500C  0E40               	movlw	64
 30738  01500E  0100               	movlb	0	; () banked
 30739  015010  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 30740  015012  EC89  F0BF         	call	___ftdiv	;wreg free
 30741  015016  C09B  F2E8         	movff	?___ftdiv,_GRPM_Time_1
 30742  01501A  C09C  F2E9         	movff	?___ftdiv+1,_GRPM_Time_1+1
 30743  01501E  C09D  F2EA         	movff	?___ftdiv+2,_GRPM_Time_1+2
 30744                           
 30745                           ;RPM_Measurement.c: 120: GRPM_Frequency = 1/GRPM_Time_1;
 30746  015022  0E00               	movlw	0
 30747  015024  0100               	movlb	0	; () banked
 30748  015026  6F9B               	movwf	___ftdiv@f1& (0+255),b
 30749  015028  0E80               	movlw	128
 30750  01502A  0100               	movlb	0	; () banked
 30751  01502C  6F9C               	movwf	(___ftdiv@f1+1)& (0+255),b
 30752  01502E  0E3F               	movlw	63
 30753  015030  0100               	movlb	0	; () banked
 30754  015032  6F9D               	movwf	(___ftdiv@f1+2)& (0+255),b
 30755  015034  C2E8  F09E         	movff	_GRPM_Time_1,___ftdiv@f2
 30756  015038  C2E9  F09F         	movff	_GRPM_Time_1+1,___ftdiv@f2+1
 30757  01503C  C2EA  F0A0         	movff	_GRPM_Time_1+2,___ftdiv@f2+2
 30758  015040  EC89  F0BF         	call	___ftdiv	;wreg free
 30759  015044  C09B  F4E1         	movff	?___ftdiv,_GRPM_Frequency
 30760  015048  C09C  F4E2         	movff	?___ftdiv+1,_GRPM_Frequency+1
 30761  01504C  C09D  F4E3         	movff	?___ftdiv+2,_GRPM_Frequency+2
 30762                           
 30763                           ;RPM_Measurement.c: 122: if(G_RPM_counter < (2))
 30764  015050  0E02               	movlw	2
 30765  015052  0101               	movlb	1	; () banked
 30766  015054  6185               	cpfslt	_G_RPM_counter& (0+255),b
 30767  015056  D002               	goto	l21899
 30768                           
 30769                           ; BSR set to: 1
 30770                           ;RPM_Measurement.c: 123: {
 30771                           ;RPM_Measurement.c: 124: G_RPM_counter++;
 30772  015058  0101               	movlb	1	; () banked
 30773  01505A  2B85               	incf	_G_RPM_counter& (0+255),f,b
 30774  01505C                     l21899:
 30775                           
 30776                           ; BSR set to: 1
 30777                           ;RPM_Measurement.c: 125: }
 30778                           ;RPM_Measurement.c: 126: if(G_RPM_counter == (2))
 30779  01505C  0E02               	movlw	2
 30780  01505E  0101               	movlb	1	; () banked
 30781  015060  1985               	xorwf	_G_RPM_counter& (0+255),w,b
 30782  015062  A4D8               	btfss	status,2,c
 30783  015064  D02E               	goto	l21905
 30784                           
 30785                           ; BSR set to: 1
 30786                           ;RPM_Measurement.c: 127: {
 30787                           ;RPM_Measurement.c: 128: Generator_RPM_Old = Generator_RPM_New;
 30788  015066  C10C  F10F         	movff	_Generator_RPM_New,_Generator_RPM_Old
 30789  01506A  C10D  F110         	movff	_Generator_RPM_New+1,_Generator_RPM_Old+1
 30790  01506E  C10E  F111         	movff	_Generator_RPM_New+2,_Generator_RPM_Old+2
 30791                           
 30792                           ; BSR set to: 1
 30793                           ;RPM_Measurement.c: 129: Generator_RPM_New = ((60 * GRPM_Frequency) / (2));
 30794  015072  0E00               	movlw	0
 30795  015074  0100               	movlb	0	; () banked
 30796  015076  6F6D               	movwf	___ftmul@f2& (0+255),b
 30797  015078  0E70               	movlw	112
 30798  01507A  0100               	movlb	0	; () banked
 30799  01507C  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 30800  01507E  0E42               	movlw	66
 30801  015080  0100               	movlb	0	; () banked
 30802  015082  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 30803  015084  C4E1  F06A         	movff	_GRPM_Frequency,___ftmul@f1
 30804  015088  C4E2  F06B         	movff	_GRPM_Frequency+1,___ftmul@f1+1
 30805  01508C  C4E3  F06C         	movff	_GRPM_Frequency+2,___ftmul@f1+2
 30806  015090  EC83  F0BD         	call	___ftmul	;wreg free
 30807  015094  C06A  F09B         	movff	?___ftmul,___ftdiv@f1
 30808  015098  C06B  F09C         	movff	?___ftmul+1,___ftdiv@f1+1
 30809  01509C  C06C  F09D         	movff	?___ftmul+2,___ftdiv@f1+2
 30810  0150A0  0E00               	movlw	0
 30811  0150A2  0100               	movlb	0	; () banked
 30812  0150A4  6F9E               	movwf	___ftdiv@f2& (0+255),b
 30813  0150A6  0E00               	movlw	0
 30814  0150A8  0100               	movlb	0	; () banked
 30815  0150AA  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 30816  0150AC  0E40               	movlw	64
 30817  0150AE  0100               	movlb	0	; () banked
 30818  0150B0  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 30819  0150B2  EC89  F0BF         	call	___ftdiv	;wreg free
 30820  0150B6  C09B  F10C         	movff	?___ftdiv,_Generator_RPM_New
 30821  0150BA  C09C  F10D         	movff	?___ftdiv+1,_Generator_RPM_New+1
 30822  0150BE  C09D  F10E         	movff	?___ftdiv+2,_Generator_RPM_New+2
 30823  0150C2                     l21905:
 30824                           
 30825                           ;RPM_Measurement.c: 131: }
 30826                           ;RPM_Measurement.c: 133: if(Turbine_state == RUNNING_STATE)
 30827  0150C2  0E02               	movlw	2
 30828  0150C4  0100               	movlb	0	; () banked
 30829  0150C6  19D8               	xorwf	_Turbine_state& (0+255),w,b
 30830  0150C8  A4D8               	btfss	status,2,c
 30831  0150CA  D051               	goto	l3794
 30832                           
 30833                           ; BSR set to: 0
 30834                           ;RPM_Measurement.c: 134: {
 30835                           ;RPM_Measurement.c: 135: if ( (Generator_RPM_Old > (Generator_RPM_New * 0.8)) && (Genera
      +                          tor_RPM_Old < (Generator_RPM_New * 1.2)) )
 30836  0150CC  0ECD               	movlw	205
 30837  0150CE  0100               	movlb	0	; () banked
 30838  0150D0  6F6D               	movwf	___ftmul@f2& (0+255),b
 30839  0150D2  0E4C               	movlw	76
 30840  0150D4  0100               	movlb	0	; () banked
 30841  0150D6  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 30842  0150D8  0E3F               	movlw	63
 30843  0150DA  0100               	movlb	0	; () banked
 30844  0150DC  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 30845  0150DE  C10C  F06A         	movff	_Generator_RPM_New,___ftmul@f1
 30846  0150E2  C10D  F06B         	movff	_Generator_RPM_New+1,___ftmul@f1+1
 30847  0150E6  C10E  F06C         	movff	_Generator_RPM_New+2,___ftmul@f1+2
 30848  0150EA  EC83  F0BD         	call	___ftmul	;wreg free
 30849  0150EE  C06A  F08F         	movff	?___ftmul,___ftge@ff1
 30850  0150F2  C06B  F090         	movff	?___ftmul+1,___ftge@ff1+1
 30851  0150F6  C06C  F091         	movff	?___ftmul+2,___ftge@ff1+2
 30852  0150FA  C10F  F092         	movff	_Generator_RPM_Old,___ftge@ff2
 30853  0150FE  C110  F093         	movff	_Generator_RPM_Old+1,___ftge@ff2+1
 30854  015102  C111  F094         	movff	_Generator_RPM_Old+2,___ftge@ff2+2
 30855  015106  EC09  F0C8         	call	___ftge	;wreg free
 30856  01510A  0100               	movlb	0	; () banked
 30857  01510C  B0D8               	btfsc	status,0,c
 30858  01510E  D022               	goto	l3795
 30859                           
 30860                           ; BSR set to: 0
 30861  015110  C10F  F08F         	movff	_Generator_RPM_Old,___ftge@ff1
 30862  015114  C110  F090         	movff	_Generator_RPM_Old+1,___ftge@ff1+1
 30863  015118  C111  F091         	movff	_Generator_RPM_Old+2,___ftge@ff1+2
 30864  01511C  0E9A               	movlw	154
 30865  01511E  0100               	movlb	0	; () banked
 30866  015120  6F6D               	movwf	___ftmul@f2& (0+255),b
 30867  015122  0E99               	movlw	153
 30868  015124  0100               	movlb	0	; () banked
 30869  015126  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 30870  015128  0E3F               	movlw	63
 30871  01512A  0100               	movlb	0	; () banked
 30872  01512C  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 30873  01512E  C10C  F06A         	movff	_Generator_RPM_New,___ftmul@f1
 30874  015132  C10D  F06B         	movff	_Generator_RPM_New+1,___ftmul@f1+1
 30875  015136  C10E  F06C         	movff	_Generator_RPM_New+2,___ftmul@f1+2
 30876  01513A  EC83  F0BD         	call	___ftmul	;wreg free
 30877  01513E  C06A  F092         	movff	?___ftmul,___ftge@ff2
 30878  015142  C06B  F093         	movff	?___ftmul+1,___ftge@ff2+1
 30879  015146  C06C  F094         	movff	?___ftmul+2,___ftge@ff2+2
 30880  01514A  EC09  F0C8         	call	___ftge	;wreg free
 30881  01514E  0100               	movlb	0	; () banked
 30882  015150  A0D8               	btfss	status,0,c
 30883  015152  D00D               	goto	l3794
 30884  015154                     l3795:
 30885                           
 30886                           ; BSR set to: 0
 30887                           ;RPM_Measurement.c: 139: else
 30888                           ;RPM_Measurement.c: 140: {
 30889                           ;RPM_Measurement.c: 141: Generator_RPM_FLT = Generator_RPM_Old;
 30890  015154  C10F  F0CF         	movff	_Generator_RPM_Old,_Generator_RPM_FLT
 30891  015158  C110  F0D0         	movff	_Generator_RPM_Old+1,_Generator_RPM_FLT+1
 30892  01515C  C111  F0D1         	movff	_Generator_RPM_Old+2,_Generator_RPM_FLT+2
 30893                           
 30894                           ;RPM_Measurement.c: 142: Generator_RPM_New = Generator_RPM_Old;
 30895  015160  C10F  F10C         	movff	_Generator_RPM_Old,_Generator_RPM_New
 30896  015164  C110  F10D         	movff	_Generator_RPM_Old+1,_Generator_RPM_New+1
 30897  015168  C111  F10E         	movff	_Generator_RPM_Old+2,_Generator_RPM_New+2
 30898                           
 30899                           ; BSR set to: 0
 30900                           ;RPM_Measurement.c: 143: }
 30901                           ;RPM_Measurement.c: 144: }
 30902  01516C  D006               	goto	l21913
 30903  01516E                     l3794:
 30904                           
 30905                           ; BSR set to: 0
 30906                           ;RPM_Measurement.c: 145: else
 30907                           ;RPM_Measurement.c: 146: {
 30908                           ;RPM_Measurement.c: 147: Generator_RPM_FLT = Generator_RPM_New;
 30909  01516E  C10C  F0CF         	movff	_Generator_RPM_New,_Generator_RPM_FLT
 30910  015172  C10D  F0D0         	movff	_Generator_RPM_New+1,_Generator_RPM_FLT+1
 30911  015176  C10E  F0D1         	movff	_Generator_RPM_New+2,_Generator_RPM_FLT+2
 30912  01517A                     l21913:
 30913                           
 30914                           ; BSR set to: 0
 30915                           ;RPM_Measurement.c: 148: }
 30916                           ;RPM_Measurement.c: 149: Generator_RPM_INT = Generator_RPM_FLT;
 30917  01517A  C0CF  F080         	movff	_Generator_RPM_FLT,___fttol@f1
 30918  01517E  C0D0  F081         	movff	_Generator_RPM_FLT+1,___fttol@f1+1
 30919  015182  C0D1  F082         	movff	_Generator_RPM_FLT+2,___fttol@f1+2
 30920  015186  ECD3  F0C0         	call	___fttol	;wreg free
 30921  01518A  C080  F28E         	movff	?___fttol,_Generator_RPM_INT
 30922  01518E  C081  F28F         	movff	?___fttol+1,_Generator_RPM_INT+1
 30923                           
 30924                           ;RPM_Measurement.c: 152: Timer1_OF_counter_Generator = 0;
 30925  015192  0E00               	movlw	0
 30926  015194  0102               	movlb	2	; () banked
 30927  015196  6FB1               	movwf	(_Timer1_OF_counter_Generator+1)& (0+255),b
 30928  015198  0E00               	movlw	0
 30929  01519A  6FB0               	movwf	_Timer1_OF_counter_Generator& (0+255),b
 30930                           
 30931                           ; BSR set to: 2
 30932                           ;RPM_Measurement.c: 153: GRPM_Pulse_width = 0;
 30933  01519C  0E00               	movlw	0
 30934  01519E  0102               	movlb	2	; () banked
 30935  0151A0  6FF5               	movwf	(_GRPM_Pulse_width+1)& (0+255),b
 30936  0151A2  0E00               	movlw	0
 30937  0151A4  6FF4               	movwf	_GRPM_Pulse_width& (0+255),b
 30938                           
 30939                           ; BSR set to: 2
 30940                           ;RPM_Measurement.c: 154: GRPM_Frequency = 0;
 30941  0151A6  0E00               	movlw	0
 30942  0151A8  0104               	movlb	4	; () banked
 30943  0151AA  6FE1               	movwf	_GRPM_Frequency& (0+255),b
 30944  0151AC  0E00               	movlw	0
 30945  0151AE  0104               	movlb	4	; () banked
 30946  0151B0  6FE2               	movwf	(_GRPM_Frequency+1)& (0+255),b
 30947  0151B2  0E00               	movlw	0
 30948  0151B4  0104               	movlb	4	; () banked
 30949  0151B6  6FE3               	movwf	(_GRPM_Frequency+2)& (0+255),b
 30950                           
 30951                           ; BSR set to: 4
 30952                           ;RPM_Measurement.c: 155: GRPM_Time = 0;
 30953  0151B8  0E00               	movlw	0
 30954  0151BA  0104               	movlb	4	; () banked
 30955  0151BC  6F8A               	movwf	_GRPM_Time& (0+255),b
 30956  0151BE  0E00               	movlw	0
 30957  0151C0  0104               	movlb	4	; () banked
 30958  0151C2  6F8B               	movwf	(_GRPM_Time+1)& (0+255),b
 30959  0151C4  0E00               	movlw	0
 30960  0151C6  0104               	movlb	4	; () banked
 30961  0151C8  6F8C               	movwf	(_GRPM_Time+2)& (0+255),b
 30962                           
 30963                           ; BSR set to: 4
 30964                           ;RPM_Measurement.c: 156: GRPM_Time_1 = 0;
 30965  0151CA  0E00               	movlw	0
 30966  0151CC  0102               	movlb	2	; () banked
 30967  0151CE  6FE8               	movwf	_GRPM_Time_1& (0+255),b
 30968  0151D0  0E00               	movlw	0
 30969  0151D2  0102               	movlb	2	; () banked
 30970  0151D4  6FE9               	movwf	(_GRPM_Time_1+1)& (0+255),b
 30971  0151D6  0E00               	movlw	0
 30972  0151D8  0102               	movlb	2	; () banked
 30973  0151DA  6FEA               	movwf	(_GRPM_Time_1+2)& (0+255),b
 30974                           
 30975                           ; BSR set to: 2
 30976                           ;RPM_Measurement.c: 158: CCP8IE = 1;
 30977  0151DC  8AB6               	bsf	4022,5,c	;volatile
 30978                           
 30979                           ; BSR set to: 2
 30980                           ;RPM_Measurement.c: 159: CCP8IF = 0;
 30981  0151DE  9AB7               	bcf	4023,5,c	;volatile
 30982                           
 30983                           ; BSR set to: 2
 30984  0151E0  0012               	return		;funcret
 30985  0151E2                     __end_of_Generator_RPM_Cal:
 30986                           	opt stack 0
 30987                           tblptru	equ	0xFF8
 30988                           tblptrh	equ	0xFF7
 30989                           tblptrl	equ	0xFF6
 30990                           tablat	equ	0xFF5
 30991                           prodh	equ	0xFF4
 30992                           prodl	equ	0xFF3
 30993                           intcon	equ	0xFF2
 30994                           postinc0	equ	0xFEE
 30995                           wreg	equ	0xFE8
 30996                           postdec1	equ	0xFE5
 30997                           fsr1h	equ	0xFE2
 30998                           fsr1l	equ	0xFE1
 30999                           indf2	equ	0xFDF
 31000                           postinc2	equ	0xFDE
 31001                           postdec2	equ	0xFDD
 31002                           fsr2h	equ	0xFDA
 31003                           fsr2l	equ	0xFD9
 31004                           status	equ	0xFD8
 31005                           
 31006 ;; *************** function ___lwtoft *****************
 31007 ;; Defined at:
 31008 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
 31009 ;; Parameters:    Size  Location     Type
 31010 ;;  c               2    0[BANK0 ] unsigned int 
 31011 ;; Auto vars:     Size  Location     Type
 31012 ;;		None
 31013 ;; Return value:  Size  Location     Type
 31014 ;;                  3    0[BANK0 ] float 
 31015 ;; Registers used:
 31016 ;;		wreg, status,2, status,0, cstack
 31017 ;; Tracked objects:
 31018 ;;		On entry : 0/0
 31019 ;;		On exit  : 0/0
 31020 ;;		Unchanged: 0/0
 31021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31022 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31026 ;;Total ram usage:        3 bytes
 31027 ;; Hardware stack levels used:    1
 31028 ;; Hardware stack levels required when called:    4
 31029 ;; This function calls:
 31030 ;;		___ftpack
 31031 ;; This function is called by:
 31032 ;;		_Turbine_RPM_Cal
 31033 ;;		_Generator_RPM_Cal
 31034 ;;		_Wind_Speed_Cal
 31035 ;;		_VFD_RS485_Data
 31036 ;;		_Temp_Read
 31037 ;;		_Volt_Curr_Read
 31038 ;;		_Wind_Speed_2_Cal
 31039 ;; This function uses a non-reentrant model
 31040 ;;
 31041                           
 31042                           	psect	text117
 31043  01A908                     __ptext117:
 31044                           	opt stack 0
 31045  01A908                     ___lwtoft:
 31046                           	opt stack 25
 31047                           
 31048                           ; BSR set to: 2
 31049                           ;incstack = 0
 31050  01A908  C060  F01D         	movff	___lwtoft@c,___ftpack@arg
 31051  01A90C  C061  F01E         	movff	___lwtoft@c+1,___ftpack@arg+1
 31052  01A910  6A1F               	clrf	___ftpack@arg+2,c
 31053  01A912  0E8E               	movlw	142
 31054  01A914  6E20               	movwf	___ftpack@exp,c
 31055  01A916  0E00               	movlw	0
 31056  01A918  6E21               	movwf	___ftpack@sign,c
 31057  01A91A  ECA0  F0CB         	call	___ftpack	;wreg free
 31058  01A91E  C01D  F060         	movff	?___ftpack,?___lwtoft
 31059  01A922  C01E  F061         	movff	?___ftpack+1,?___lwtoft+1
 31060  01A926  C01F  F062         	movff	?___ftpack+2,?___lwtoft+2
 31061  01A92A  0012               	return	
 31062  01A92C                     __end_of___lwtoft:
 31063                           	opt stack 0
 31064                           tblptru	equ	0xFF8
 31065                           tblptrh	equ	0xFF7
 31066                           tblptrl	equ	0xFF6
 31067                           tablat	equ	0xFF5
 31068                           prodh	equ	0xFF4
 31069                           prodl	equ	0xFF3
 31070                           intcon	equ	0xFF2
 31071                           postinc0	equ	0xFEE
 31072                           wreg	equ	0xFE8
 31073                           postdec1	equ	0xFE5
 31074                           fsr1h	equ	0xFE2
 31075                           fsr1l	equ	0xFE1
 31076                           indf2	equ	0xFDF
 31077                           postinc2	equ	0xFDE
 31078                           postdec2	equ	0xFDD
 31079                           fsr2h	equ	0xFDA
 31080                           fsr2l	equ	0xFD9
 31081                           status	equ	0xFD8
 31082                           
 31083 ;; *************** function _Freq_Calc *****************
 31084 ;; Defined at:
 31085 ;;		line 323 in file "Power_Meter.c"
 31086 ;; Parameters:    Size  Location     Type
 31087 ;;		None
 31088 ;; Auto vars:     Size  Location     Type
 31089 ;;		None
 31090 ;; Return value:  Size  Location     Type
 31091 ;;                  1    wreg      void 
 31092 ;; Registers used:
 31093 ;;		wreg, status,2, status,0, cstack
 31094 ;; Tracked objects:
 31095 ;;		On entry : 0/0
 31096 ;;		On exit  : 0/0
 31097 ;;		Unchanged: 0/0
 31098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31100 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31102 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31103 ;;Total ram usage:        3 bytes
 31104 ;; Hardware stack levels used:    1
 31105 ;; Hardware stack levels required when called:    5
 31106 ;; This function calls:
 31107 ;;		___ftadd
 31108 ;;		___ftdiv
 31109 ;;		___ftge
 31110 ;;		___ftmul
 31111 ;;		___ftneg
 31112 ;; This function is called by:
 31113 ;;		_main
 31114 ;; This function uses a non-reentrant model
 31115 ;;
 31116                           
 31117                           	psect	text118
 31118  016D2E                     __ptext118:
 31119                           	opt stack 0
 31120  016D2E                     _Freq_Calc:
 31121                           	opt stack 25
 31122                           
 31123                           ;Power_Meter.c: 325: if(R_V_New > R_V_Old)
 31124                           
 31125                           ;incstack = 0
 31126  016D2E  C121  F08F         	movff	_R_V_Old,___ftge@ff1
 31127  016D32  C122  F090         	movff	_R_V_Old+1,___ftge@ff1+1
 31128  016D36  C123  F091         	movff	_R_V_Old+2,___ftge@ff1+2
 31129  016D3A  C1EC  F092         	movff	_R_V_New,___ftge@ff2
 31130  016D3E  C1ED  F093         	movff	_R_V_New+1,___ftge@ff2+1
 31131  016D42  C1EE  F094         	movff	_R_V_New+2,___ftge@ff2+2
 31132  016D46  EC09  F0C8         	call	___ftge	;wreg free
 31133  016D4A  0100               	movlb	0	; () banked
 31134  016D4C  B0D8               	btfsc	status,0,c
 31135  016D4E  D02E               	goto	l21585
 31136                           
 31137                           ; BSR set to: 0
 31138                           ;Power_Meter.c: 326: {
 31139                           ;Power_Meter.c: 327: Time_Diff = (R_V_New - R_V_Old + 1);
 31140  016D50  C1EC  F086         	movff	_R_V_New,___ftadd@f2
 31141  016D54  C1ED  F087         	movff	_R_V_New+1,___ftadd@f2+1
 31142  016D58  C1EE  F088         	movff	_R_V_New+2,___ftadd@f2+2
 31143  016D5C  C121  F079         	movff	_R_V_Old,___ftneg@f1
 31144  016D60  C122  F07A         	movff	_R_V_Old+1,___ftneg@f1+1
 31145  016D64  C123  F07B         	movff	_R_V_Old+2,___ftneg@f1+2
 31146  016D68  ECE0  F0D3         	call	___ftneg	;wreg free
 31147  016D6C  C079  F083         	movff	?___ftneg,___ftadd@f1
 31148  016D70  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 31149  016D74  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 31150  016D78  ECE4  F0AF         	call	___ftadd	;wreg free
 31151  016D7C  C083  F0AA         	movff	?___ftadd,_Freq_Calc$8116
 31152  016D80  C084  F0AB         	movff	?___ftadd+1,_Freq_Calc$8116+1
 31153  016D84  C085  F0AC         	movff	?___ftadd+2,_Freq_Calc$8116+2
 31154                           
 31155                           ;Power_Meter.c: 326: {
 31156                           ;Power_Meter.c: 327: Time_Diff = (R_V_New - R_V_Old + 1);
 31157  016D88  C0AA  F083         	movff	_Freq_Calc$8116,___ftadd@f1
 31158  016D8C  C0AB  F084         	movff	_Freq_Calc$8116+1,___ftadd@f1+1
 31159  016D90  C0AC  F085         	movff	_Freq_Calc$8116+2,___ftadd@f1+2
 31160  016D94  0E00               	movlw	0
 31161  016D96  0100               	movlb	0	; () banked
 31162  016D98  6F86               	movwf	___ftadd@f2& (0+255),b
 31163  016D9A  0E80               	movlw	128
 31164  016D9C  0100               	movlb	0	; () banked
 31165  016D9E  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 31166  016DA0  0E3F               	movlw	63
 31167  016DA2  0100               	movlb	0	; () banked
 31168  016DA4  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 31169  016DA6  ECE4  F0AF         	call	___ftadd	;wreg free
 31170  016DAA  D02D               	goto	L15
 31171  016DAC                     l21585:
 31172                           
 31173                           ;Power_Meter.c: 329: else
 31174                           ;Power_Meter.c: 330: {
 31175                           ;Power_Meter.c: 331: Time_Diff = ((R_V_New - R_V_Old + 1) + 65536);
 31176  016DAC  C1EC  F086         	movff	_R_V_New,___ftadd@f2
 31177  016DB0  C1ED  F087         	movff	_R_V_New+1,___ftadd@f2+1
 31178  016DB4  C1EE  F088         	movff	_R_V_New+2,___ftadd@f2+2
 31179  016DB8  C121  F079         	movff	_R_V_Old,___ftneg@f1
 31180  016DBC  C122  F07A         	movff	_R_V_Old+1,___ftneg@f1+1
 31181  016DC0  C123  F07B         	movff	_R_V_Old+2,___ftneg@f1+2
 31182  016DC4  ECE0  F0D3         	call	___ftneg	;wreg free
 31183  016DC8  C079  F083         	movff	?___ftneg,___ftadd@f1
 31184  016DCC  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 31185  016DD0  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 31186  016DD4  ECE4  F0AF         	call	___ftadd	;wreg free
 31187  016DD8  C083  F0AA         	movff	?___ftadd,_Freq_Calc$8116
 31188  016DDC  C084  F0AB         	movff	?___ftadd+1,_Freq_Calc$8116+1
 31189  016DE0  C085  F0AC         	movff	?___ftadd+2,_Freq_Calc$8116+2
 31190                           
 31191                           ;Power_Meter.c: 329: else
 31192                           ;Power_Meter.c: 330: {
 31193                           ;Power_Meter.c: 331: Time_Diff = ((R_V_New - R_V_Old + 1) + 65536);
 31194  016DE4  C0AA  F083         	movff	_Freq_Calc$8116,___ftadd@f1
 31195  016DE8  C0AB  F084         	movff	_Freq_Calc$8116+1,___ftadd@f1+1
 31196  016DEC  C0AC  F085         	movff	_Freq_Calc$8116+2,___ftadd@f1+2
 31197  016DF0  0E01               	movlw	1
 31198  016DF2  0100               	movlb	0	; () banked
 31199  016DF4  6F86               	movwf	___ftadd@f2& (0+255),b
 31200  016DF6  0E80               	movlw	128
 31201  016DF8  0100               	movlb	0	; () banked
 31202  016DFA  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 31203  016DFC  0E47               	movlw	71
 31204  016DFE  0100               	movlb	0	; () banked
 31205  016E00  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 31206  016E02  ECE4  F0AF         	call	___ftadd	;wreg free
 31207  016E06                     L15:
 31208  016E06  C083  F4F0         	movff	?___ftadd,_Time_Diff
 31209  016E0A  C084  F4F1         	movff	?___ftadd+1,_Time_Diff+1
 31210  016E0E  C085  F4F2         	movff	?___ftadd+2,_Time_Diff+2
 31211                           
 31212                           ;Power_Meter.c: 332: }
 31213                           ;Power_Meter.c: 334: Time_Old = Time_New;
 31214  016E12  C1F5  F22A         	movff	_Time_New,_Time_Old
 31215  016E16  C1F6  F22B         	movff	_Time_New+1,_Time_Old+1
 31216  016E1A  C1F7  F22C         	movff	_Time_New+2,_Time_Old+2
 31217                           
 31218                           ;Power_Meter.c: 335: Time_New = (0.000004 * Time_Diff);
 31219  016E1E  C4F0  F06A         	movff	_Time_Diff,___ftmul@f1
 31220  016E22  C4F1  F06B         	movff	_Time_Diff+1,___ftmul@f1+1
 31221  016E26  C4F2  F06C         	movff	_Time_Diff+2,___ftmul@f1+2
 31222  016E2A  0E38               	movlw	56
 31223  016E2C  0100               	movlb	0	; () banked
 31224  016E2E  6F6D               	movwf	___ftmul@f2& (0+255),b
 31225  016E30  0E86               	movlw	134
 31226  016E32  0100               	movlb	0	; () banked
 31227  016E34  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 31228  016E36  0E36               	movlw	54
 31229  016E38  0100               	movlb	0	; () banked
 31230  016E3A  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 31231  016E3C  EC83  F0BD         	call	___ftmul	;wreg free
 31232  016E40  C06A  F1F5         	movff	?___ftmul,_Time_New
 31233  016E44  C06B  F1F6         	movff	?___ftmul+1,_Time_New+1
 31234  016E48  C06C  F1F7         	movff	?___ftmul+2,_Time_New+2
 31235                           
 31236                           ;Power_Meter.c: 337: if ( (Time_Old > (Time_New * 0.8)) && (Time_Old < (Time_New * 1.2))
      +                          )
 31237  016E4C  0ECD               	movlw	205
 31238  016E4E  0100               	movlb	0	; () banked
 31239  016E50  6F6D               	movwf	___ftmul@f2& (0+255),b
 31240  016E52  0E4C               	movlw	76
 31241  016E54  0100               	movlb	0	; () banked
 31242  016E56  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 31243  016E58  0E3F               	movlw	63
 31244  016E5A  0100               	movlb	0	; () banked
 31245  016E5C  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 31246  016E5E  C1F5  F06A         	movff	_Time_New,___ftmul@f1
 31247  016E62  C1F6  F06B         	movff	_Time_New+1,___ftmul@f1+1
 31248  016E66  C1F7  F06C         	movff	_Time_New+2,___ftmul@f1+2
 31249  016E6A  EC83  F0BD         	call	___ftmul	;wreg free
 31250  016E6E  C06A  F08F         	movff	?___ftmul,___ftge@ff1
 31251  016E72  C06B  F090         	movff	?___ftmul+1,___ftge@ff1+1
 31252  016E76  C06C  F091         	movff	?___ftmul+2,___ftge@ff1+2
 31253  016E7A  C22A  F092         	movff	_Time_Old,___ftge@ff2
 31254  016E7E  C22B  F093         	movff	_Time_Old+1,___ftge@ff2+1
 31255  016E82  C22C  F094         	movff	_Time_Old+2,___ftge@ff2+2
 31256  016E86  EC09  F0C8         	call	___ftge	;wreg free
 31257  016E8A  0100               	movlb	0	; () banked
 31258  016E8C  B0D8               	btfsc	status,0,c
 31259  016E8E  0012               	return	
 31260                           
 31261                           ; BSR set to: 0
 31262  016E90  C22A  F08F         	movff	_Time_Old,___ftge@ff1
 31263  016E94  C22B  F090         	movff	_Time_Old+1,___ftge@ff1+1
 31264  016E98  C22C  F091         	movff	_Time_Old+2,___ftge@ff1+2
 31265  016E9C  0E9A               	movlw	154
 31266  016E9E  0100               	movlb	0	; () banked
 31267  016EA0  6F6D               	movwf	___ftmul@f2& (0+255),b
 31268  016EA2  0E99               	movlw	153
 31269  016EA4  0100               	movlb	0	; () banked
 31270  016EA6  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 31271  016EA8  0E3F               	movlw	63
 31272  016EAA  0100               	movlb	0	; () banked
 31273  016EAC  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 31274  016EAE  C1F5  F06A         	movff	_Time_New,___ftmul@f1
 31275  016EB2  C1F6  F06B         	movff	_Time_New+1,___ftmul@f1+1
 31276  016EB6  C1F7  F06C         	movff	_Time_New+2,___ftmul@f1+2
 31277  016EBA  EC83  F0BD         	call	___ftmul	;wreg free
 31278  016EBE  C06A  F092         	movff	?___ftmul,___ftge@ff2
 31279  016EC2  C06B  F093         	movff	?___ftmul+1,___ftge@ff2+1
 31280  016EC6  C06C  F094         	movff	?___ftmul+2,___ftge@ff2+2
 31281  016ECA  EC09  F0C8         	call	___ftge	;wreg free
 31282  016ECE  0100               	movlb	0	; () banked
 31283  016ED0  B0D8               	btfsc	status,0,c
 31284  016ED2  0012               	return	
 31285                           
 31286                           ; BSR set to: 0
 31287                           ;Power_Meter.c: 338: {
 31288                           ;Power_Meter.c: 339: Frequency = (1 / Time_New);
 31289  016ED4  0E00               	movlw	0
 31290  016ED6  0100               	movlb	0	; () banked
 31291  016ED8  6F9B               	movwf	___ftdiv@f1& (0+255),b
 31292  016EDA  0E80               	movlw	128
 31293  016EDC  0100               	movlb	0	; () banked
 31294  016EDE  6F9C               	movwf	(___ftdiv@f1+1)& (0+255),b
 31295  016EE0  0E3F               	movlw	63
 31296  016EE2  0100               	movlb	0	; () banked
 31297  016EE4  6F9D               	movwf	(___ftdiv@f1+2)& (0+255),b
 31298  016EE6  C1F5  F09E         	movff	_Time_New,___ftdiv@f2
 31299  016EEA  C1F6  F09F         	movff	_Time_New+1,___ftdiv@f2+1
 31300  016EEE  C1F7  F0A0         	movff	_Time_New+2,___ftdiv@f2+2
 31301  016EF2  EC89  F0BF         	call	___ftdiv	;wreg free
 31302  016EF6  C09B  F109         	movff	?___ftdiv,_Frequency
 31303  016EFA  C09C  F10A         	movff	?___ftdiv+1,_Frequency+1
 31304  016EFE  C09D  F10B         	movff	?___ftdiv+2,_Frequency+2
 31305  016F02  0012               	return	
 31306  016F04                     __end_of_Freq_Calc:
 31307                           	opt stack 0
 31308                           tblptru	equ	0xFF8
 31309                           tblptrh	equ	0xFF7
 31310                           tblptrl	equ	0xFF6
 31311                           tablat	equ	0xFF5
 31312                           prodh	equ	0xFF4
 31313                           prodl	equ	0xFF3
 31314                           intcon	equ	0xFF2
 31315                           postinc0	equ	0xFEE
 31316                           wreg	equ	0xFE8
 31317                           postdec1	equ	0xFE5
 31318                           fsr1h	equ	0xFE2
 31319                           fsr1l	equ	0xFE1
 31320                           indf2	equ	0xFDF
 31321                           postinc2	equ	0xFDE
 31322                           postdec2	equ	0xFDD
 31323                           fsr2h	equ	0xFDA
 31324                           fsr2l	equ	0xFD9
 31325                           status	equ	0xFD8
 31326                           
 31327 ;; *************** function _Cons_Gene *****************
 31328 ;; Defined at:
 31329 ;;		line 309 in file "Power_Meter.c"
 31330 ;; Parameters:    Size  Location     Type
 31331 ;;		None
 31332 ;; Auto vars:     Size  Location     Type
 31333 ;;		None
 31334 ;; Return value:  Size  Location     Type
 31335 ;;                  1    wreg      void 
 31336 ;; Registers used:
 31337 ;;		wreg, status,2, status,0, cstack
 31338 ;; Tracked objects:
 31339 ;;		On entry : 0/0
 31340 ;;		On exit  : 0/0
 31341 ;;		Unchanged: 0/0
 31342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31347 ;;Total ram usage:        0 bytes
 31348 ;; Hardware stack levels used:    1
 31349 ;; Hardware stack levels required when called:    5
 31350 ;; This function calls:
 31351 ;;		___ftge
 31352 ;;		___ftmul
 31353 ;; This function is called by:
 31354 ;;		_main
 31355 ;; This function uses a non-reentrant model
 31356 ;;
 31357                           
 31358                           	psect	text119
 31359  01852C                     __ptext119:
 31360                           	opt stack 0
 31361  01852C                     _Cons_Gene:
 31362                           	opt stack 25
 31363                           
 31364                           ;Power_Meter.c: 311: if((R_V_Max > (2034)) && (R_C_Max > (2034)))
 31365                           
 31366                           ;incstack = 0
 31367  01852C  0E40               	movlw	64
 31368  01852E  0100               	movlb	0	; () banked
 31369  018530  6F8F               	movwf	___ftge@ff1& (0+255),b
 31370  018532  0EFE               	movlw	254
 31371  018534  0100               	movlb	0	; () banked
 31372  018536  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 31373  018538  0E44               	movlw	68
 31374  01853A  0100               	movlb	0	; () banked
 31375  01853C  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 31376  01853E  C11E  F092         	movff	_R_V_Max,___ftge@ff2
 31377  018542  C11F  F093         	movff	_R_V_Max+1,___ftge@ff2+1
 31378  018546  C120  F094         	movff	_R_V_Max+2,___ftge@ff2+2
 31379  01854A  EC09  F0C8         	call	___ftge	;wreg free
 31380  01854E  0100               	movlb	0	; () banked
 31381  018550  B0D8               	btfsc	status,0,c
 31382  018552  D046               	goto	l21875
 31383                           
 31384                           ; BSR set to: 0
 31385  018554  0E40               	movlw	64
 31386  018556  0100               	movlb	0	; () banked
 31387  018558  6F8F               	movwf	___ftge@ff1& (0+255),b
 31388  01855A  0EFE               	movlw	254
 31389  01855C  0100               	movlb	0	; () banked
 31390  01855E  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 31391  018560  0E44               	movlw	68
 31392  018562  0100               	movlb	0	; () banked
 31393  018564  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 31394  018566  C115  F092         	movff	_R_C_Max,___ftge@ff2
 31395  01856A  C116  F093         	movff	_R_C_Max+1,___ftge@ff2+1
 31396  01856E  C117  F094         	movff	_R_C_Max+2,___ftge@ff2+2
 31397  018572  EC09  F0C8         	call	___ftge	;wreg free
 31398  018576  0100               	movlb	0	; () banked
 31399  018578  B0D8               	btfsc	status,0,c
 31400  01857A  D032               	goto	l21875
 31401                           
 31402                           ; BSR set to: 0
 31403                           ;Power_Meter.c: 312: {
 31404                           ;Power_Meter.c: 313: Consumption = 0;
 31405  01857C  0E00               	movlw	0
 31406  01857E  0102               	movlb	2	; () banked
 31407  018580  6FD5               	movwf	_Consumption& (0+255),b
 31408                           
 31409                           ; BSR set to: 2
 31410                           ;Power_Meter.c: 314: KW = ((-1) * KW);
 31411  018582  C040  F06A         	movff	_KW,___ftmul@f1
 31412  018586  C041  F06B         	movff	_KW+1,___ftmul@f1+1
 31413  01858A  C042  F06C         	movff	_KW+2,___ftmul@f1+2
 31414  01858E  0E00               	movlw	0
 31415  018590  0100               	movlb	0	; () banked
 31416  018592  6F6D               	movwf	___ftmul@f2& (0+255),b
 31417  018594  0E80               	movlw	128
 31418  018596  0100               	movlb	0	; () banked
 31419  018598  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 31420  01859A  0EBF               	movlw	191
 31421  01859C  0100               	movlb	0	; () banked
 31422  01859E  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 31423  0185A0  EC83  F0BD         	call	___ftmul	;wreg free
 31424  0185A4  C06A  F040         	movff	?___ftmul,_KW
 31425  0185A8  C06B  F041         	movff	?___ftmul+1,_KW+1
 31426  0185AC  C06C  F042         	movff	?___ftmul+2,_KW+2
 31427                           
 31428                           ;Power_Meter.c: 315: Y_KW = ((-1) * Y_KW);
 31429  0185B0  C2F1  F06A         	movff	_Y_KW,___ftmul@f1
 31430  0185B4  C2F2  F06B         	movff	_Y_KW+1,___ftmul@f1+1
 31431  0185B8  C2F3  F06C         	movff	_Y_KW+2,___ftmul@f1+2
 31432  0185BC  0E00               	movlw	0
 31433  0185BE  0100               	movlb	0	; () banked
 31434  0185C0  6F6D               	movwf	___ftmul@f2& (0+255),b
 31435  0185C2  0E80               	movlw	128
 31436  0185C4  0100               	movlb	0	; () banked
 31437  0185C6  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 31438  0185C8  0EBF               	movlw	191
 31439  0185CA  0100               	movlb	0	; () banked
 31440  0185CC  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 31441  0185CE  EC83  F0BD         	call	___ftmul	;wreg free
 31442  0185D2  C06A  F2F1         	movff	?___ftmul,_Y_KW
 31443  0185D6  C06B  F2F2         	movff	?___ftmul+1,_Y_KW+1
 31444  0185DA  C06C  F2F3         	movff	?___ftmul+2,_Y_KW+2
 31445                           
 31446                           ;Power_Meter.c: 316: }
 31447  0185DE  0012               	return	
 31448  0185E0                     l21875:
 31449                           
 31450                           ;Power_Meter.c: 317: else if((R_V_Max > (2034)) && (R_C_Max < (2034)))
 31451  0185E0  0E40               	movlw	64
 31452  0185E2  0100               	movlb	0	; () banked
 31453  0185E4  6F8F               	movwf	___ftge@ff1& (0+255),b
 31454  0185E6  0EFE               	movlw	254
 31455  0185E8  0100               	movlb	0	; () banked
 31456  0185EA  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 31457  0185EC  0E44               	movlw	68
 31458  0185EE  0100               	movlb	0	; () banked
 31459  0185F0  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 31460  0185F2  C11E  F092         	movff	_R_V_Max,___ftge@ff2
 31461  0185F6  C11F  F093         	movff	_R_V_Max+1,___ftge@ff2+1
 31462  0185FA  C120  F094         	movff	_R_V_Max+2,___ftge@ff2+2
 31463  0185FE  EC09  F0C8         	call	___ftge	;wreg free
 31464  018602  0100               	movlb	0	; () banked
 31465  018604  B0D8               	btfsc	status,0,c
 31466  018606  0012               	return	
 31467                           
 31468                           ; BSR set to: 0
 31469  018608  C115  F08F         	movff	_R_C_Max,___ftge@ff1
 31470  01860C  C116  F090         	movff	_R_C_Max+1,___ftge@ff1+1
 31471  018610  C117  F091         	movff	_R_C_Max+2,___ftge@ff1+2
 31472  018614  0E40               	movlw	64
 31473  018616  0100               	movlb	0	; () banked
 31474  018618  6F92               	movwf	___ftge@ff2& (0+255),b
 31475  01861A  0EFE               	movlw	254
 31476  01861C  0100               	movlb	0	; () banked
 31477  01861E  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 31478  018620  0E44               	movlw	68
 31479  018622  0100               	movlb	0	; () banked
 31480  018624  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 31481  018626  EC09  F0C8         	call	___ftge	;wreg free
 31482  01862A  0100               	movlb	0	; () banked
 31483  01862C  B0D8               	btfsc	status,0,c
 31484  01862E  0012               	return	
 31485                           
 31486                           ; BSR set to: 0
 31487                           ;Power_Meter.c: 318: {
 31488                           ;Power_Meter.c: 319: Consumption = 1;
 31489  018630  0E01               	movlw	1
 31490  018632  0102               	movlb	2	; () banked
 31491  018634  6FD5               	movwf	_Consumption& (0+255),b
 31492                           
 31493                           ; BSR set to: 2
 31494  018636  0012               	return	
 31495  018638                     __end_of_Cons_Gene:
 31496                           	opt stack 0
 31497                           tblptru	equ	0xFF8
 31498                           tblptrh	equ	0xFF7
 31499                           tblptrl	equ	0xFF6
 31500                           tablat	equ	0xFF5
 31501                           prodh	equ	0xFF4
 31502                           prodl	equ	0xFF3
 31503                           intcon	equ	0xFF2
 31504                           postinc0	equ	0xFEE
 31505                           wreg	equ	0xFE8
 31506                           postdec1	equ	0xFE5
 31507                           fsr1h	equ	0xFE2
 31508                           fsr1l	equ	0xFE1
 31509                           indf2	equ	0xFDF
 31510                           postinc2	equ	0xFDE
 31511                           postdec2	equ	0xFDD
 31512                           fsr2h	equ	0xFDA
 31513                           fsr2l	equ	0xFD9
 31514                           status	equ	0xFD8
 31515                           
 31516 ;; *************** function _B_PF_Calc *****************
 31517 ;; Defined at:
 31518 ;;		line 514 in file "Power_Meter.c"
 31519 ;; Parameters:    Size  Location     Type
 31520 ;;		None
 31521 ;; Auto vars:     Size  Location     Type
 31522 ;;		None
 31523 ;; Return value:  Size  Location     Type
 31524 ;;                  1    wreg      void 
 31525 ;; Registers used:
 31526 ;;		wreg, status,2, status,0, cstack
 31527 ;; Tracked objects:
 31528 ;;		On entry : 0/0
 31529 ;;		On exit  : 0/0
 31530 ;;		Unchanged: 0/0
 31531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31533 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31535 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31536 ;;Total ram usage:        3 bytes
 31537 ;; Hardware stack levels used:    1
 31538 ;; Hardware stack levels required when called:    5
 31539 ;; This function calls:
 31540 ;;		___ftadd
 31541 ;;		___ftdiv
 31542 ;;		___ftge
 31543 ;;		___ftmul
 31544 ;;		___ftneg
 31545 ;; This function is called by:
 31546 ;;		_main
 31547 ;; This function uses a non-reentrant model
 31548 ;;
 31549                           
 31550                           	psect	text120
 31551  016B00                     __ptext120:
 31552                           	opt stack 0
 31553  016B00                     _B_PF_Calc:
 31554                           	opt stack 25
 31555                           
 31556                           ;Power_Meter.c: 516: if(Bcurr_V_New < Bcurr_V_Old)
 31557                           
 31558                           ;incstack = 0
 31559  016B00  C1E9  F08F         	movff	_Bcurr_V_New,___ftge@ff1
 31560  016B04  C1EA  F090         	movff	_Bcurr_V_New+1,___ftge@ff1+1
 31561  016B08  C1EB  F091         	movff	_Bcurr_V_New+2,___ftge@ff1+2
 31562  016B0C  C20F  F092         	movff	_Bcurr_V_Old,___ftge@ff2
 31563  016B10  C210  F093         	movff	_Bcurr_V_Old+1,___ftge@ff2+1
 31564  016B14  C211  F094         	movff	_Bcurr_V_Old+2,___ftge@ff2+2
 31565  016B18  EC09  F0C8         	call	___ftge	;wreg free
 31566  016B1C  0100               	movlb	0	; () banked
 31567  016B1E  B0D8               	btfsc	status,0,c
 31568  016B20  D02E               	goto	l21773
 31569                           
 31570                           ; BSR set to: 0
 31571                           ;Power_Meter.c: 517: {
 31572                           ;Power_Meter.c: 518: B_V_Gap = ((Bcurr_V_New - Bcurr_V_Old + 1) + 65536);
 31573  016B22  C1E9  F086         	movff	_Bcurr_V_New,___ftadd@f2
 31574  016B26  C1EA  F087         	movff	_Bcurr_V_New+1,___ftadd@f2+1
 31575  016B2A  C1EB  F088         	movff	_Bcurr_V_New+2,___ftadd@f2+2
 31576  016B2E  C20F  F079         	movff	_Bcurr_V_Old,___ftneg@f1
 31577  016B32  C210  F07A         	movff	_Bcurr_V_Old+1,___ftneg@f1+1
 31578  016B36  C211  F07B         	movff	_Bcurr_V_Old+2,___ftneg@f1+2
 31579  016B3A  ECE0  F0D3         	call	___ftneg	;wreg free
 31580  016B3E  C079  F083         	movff	?___ftneg,___ftadd@f1
 31581  016B42  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 31582  016B46  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 31583  016B4A  ECE4  F0AF         	call	___ftadd	;wreg free
 31584  016B4E  C083  F0AA         	movff	?___ftadd,_B_PF_Calc$8175
 31585  016B52  C084  F0AB         	movff	?___ftadd+1,_B_PF_Calc$8175+1
 31586  016B56  C085  F0AC         	movff	?___ftadd+2,_B_PF_Calc$8175+2
 31587                           
 31588                           ;Power_Meter.c: 517: {
 31589                           ;Power_Meter.c: 518: B_V_Gap = ((Bcurr_V_New - Bcurr_V_Old + 1) + 65536);
 31590  016B5A  C0AA  F083         	movff	_B_PF_Calc$8175,___ftadd@f1
 31591  016B5E  C0AB  F084         	movff	_B_PF_Calc$8175+1,___ftadd@f1+1
 31592  016B62  C0AC  F085         	movff	_B_PF_Calc$8175+2,___ftadd@f1+2
 31593  016B66  0E01               	movlw	1
 31594  016B68  0100               	movlb	0	; () banked
 31595  016B6A  6F86               	movwf	___ftadd@f2& (0+255),b
 31596  016B6C  0E80               	movlw	128
 31597  016B6E  0100               	movlb	0	; () banked
 31598  016B70  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 31599  016B72  0E47               	movlw	71
 31600  016B74  0100               	movlb	0	; () banked
 31601  016B76  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 31602  016B78  ECE4  F0AF         	call	___ftadd	;wreg free
 31603  016B7C  D088               	goto	L16
 31604  016B7E                     l21773:
 31605                           
 31606                           ;Power_Meter.c: 521: else if((Bcurr_New + 100) < Bcurr_V_New)
 31607  016B7E  0E00               	movlw	0
 31608  016B80  0100               	movlb	0	; () banked
 31609  016B82  6F86               	movwf	___ftadd@f2& (0+255),b
 31610  016B84  0EC8               	movlw	200
 31611  016B86  0100               	movlb	0	; () banked
 31612  016B88  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 31613  016B8A  0E42               	movlw	66
 31614  016B8C  0100               	movlb	0	; () banked
 31615  016B8E  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 31616  016B90  C1E6  F083         	movff	_Bcurr_New,___ftadd@f1
 31617  016B94  C1E7  F084         	movff	_Bcurr_New+1,___ftadd@f1+1
 31618  016B98  C1E8  F085         	movff	_Bcurr_New+2,___ftadd@f1+2
 31619  016B9C  ECE4  F0AF         	call	___ftadd	;wreg free
 31620  016BA0  C083  F08F         	movff	?___ftadd,___ftge@ff1
 31621  016BA4  C084  F090         	movff	?___ftadd+1,___ftge@ff1+1
 31622  016BA8  C085  F091         	movff	?___ftadd+2,___ftge@ff1+2
 31623  016BAC  C1E9  F092         	movff	_Bcurr_V_New,___ftge@ff2
 31624  016BB0  C1EA  F093         	movff	_Bcurr_V_New+1,___ftge@ff2+1
 31625  016BB4  C1EB  F094         	movff	_Bcurr_V_New+2,___ftge@ff2+2
 31626  016BB8  EC09  F0C8         	call	___ftge	;wreg free
 31627  016BBC  0100               	movlb	0	; () banked
 31628  016BBE  B0D8               	btfsc	status,0,c
 31629  016BC0  D034               	goto	l21777
 31630                           
 31631                           ; BSR set to: 0
 31632                           ;Power_Meter.c: 522: {
 31633                           ;Power_Meter.c: 523: B_C_Gap = ((Bcurr_New - Bcurr_V_New + 1) + 65536);
 31634  016BC2  C1E6  F086         	movff	_Bcurr_New,___ftadd@f2
 31635  016BC6  C1E7  F087         	movff	_Bcurr_New+1,___ftadd@f2+1
 31636  016BCA  C1E8  F088         	movff	_Bcurr_New+2,___ftadd@f2+2
 31637  016BCE  C1E9  F079         	movff	_Bcurr_V_New,___ftneg@f1
 31638  016BD2  C1EA  F07A         	movff	_Bcurr_V_New+1,___ftneg@f1+1
 31639  016BD6  C1EB  F07B         	movff	_Bcurr_V_New+2,___ftneg@f1+2
 31640  016BDA  ECE0  F0D3         	call	___ftneg	;wreg free
 31641  016BDE  C079  F083         	movff	?___ftneg,___ftadd@f1
 31642  016BE2  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 31643  016BE6  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 31644  016BEA  ECE4  F0AF         	call	___ftadd	;wreg free
 31645  016BEE  C083  F0AA         	movff	?___ftadd,_B_PF_Calc$8175
 31646  016BF2  C084  F0AB         	movff	?___ftadd+1,_B_PF_Calc$8175+1
 31647  016BF6  C085  F0AC         	movff	?___ftadd+2,_B_PF_Calc$8175+2
 31648                           
 31649                           ;Power_Meter.c: 522: {
 31650                           ;Power_Meter.c: 523: B_C_Gap = ((Bcurr_New - Bcurr_V_New + 1) + 65536);
 31651  016BFA  C0AA  F083         	movff	_B_PF_Calc$8175,___ftadd@f1
 31652  016BFE  C0AB  F084         	movff	_B_PF_Calc$8175+1,___ftadd@f1+1
 31653  016C02  C0AC  F085         	movff	_B_PF_Calc$8175+2,___ftadd@f1+2
 31654  016C06  0E01               	movlw	1
 31655  016C08  0100               	movlb	0	; () banked
 31656  016C0A  6F86               	movwf	___ftadd@f2& (0+255),b
 31657  016C0C  0E80               	movlw	128
 31658  016C0E  0100               	movlb	0	; () banked
 31659  016C10  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 31660  016C12  0E47               	movlw	71
 31661  016C14  0100               	movlb	0	; () banked
 31662  016C16  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 31663  016C18  ECE4  F0AF         	call	___ftadd	;wreg free
 31664  016C1C  C083  F516         	movff	?___ftadd,_B_C_Gap
 31665  016C20  C084  F517         	movff	?___ftadd+1,_B_C_Gap+1
 31666  016C24  C085  F518         	movff	?___ftadd+2,_B_C_Gap+2
 31667                           
 31668                           ;Power_Meter.c: 524: }
 31669  016C28  D038               	goto	l9334
 31670  016C2A                     l21777:
 31671                           
 31672                           ;Power_Meter.c: 526: else
 31673                           ;Power_Meter.c: 527: {
 31674                           ;Power_Meter.c: 528: B_C_Gap = (Bcurr_New - Bcurr_V_New);
 31675  016C2A  C1E9  F079         	movff	_Bcurr_V_New,___ftneg@f1
 31676  016C2E  C1EA  F07A         	movff	_Bcurr_V_New+1,___ftneg@f1+1
 31677  016C32  C1EB  F07B         	movff	_Bcurr_V_New+2,___ftneg@f1+2
 31678  016C36  ECE0  F0D3         	call	___ftneg	;wreg free
 31679  016C3A  C079  F083         	movff	?___ftneg,___ftadd@f1
 31680  016C3E  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 31681  016C42  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 31682  016C46  C1E6  F086         	movff	_Bcurr_New,___ftadd@f2
 31683  016C4A  C1E7  F087         	movff	_Bcurr_New+1,___ftadd@f2+1
 31684  016C4E  C1E8  F088         	movff	_Bcurr_New+2,___ftadd@f2+2
 31685  016C52  ECE4  F0AF         	call	___ftadd	;wreg free
 31686  016C56  C083  F516         	movff	?___ftadd,_B_C_Gap
 31687  016C5A  C084  F517         	movff	?___ftadd+1,_B_C_Gap+1
 31688  016C5E  C085  F518         	movff	?___ftadd+2,_B_C_Gap+2
 31689                           
 31690                           ;Power_Meter.c: 529: B_V_Gap = (Bcurr_V_New - Bcurr_V_Old);
 31691  016C62  C20F  F079         	movff	_Bcurr_V_Old,___ftneg@f1
 31692  016C66  C210  F07A         	movff	_Bcurr_V_Old+1,___ftneg@f1+1
 31693  016C6A  C211  F07B         	movff	_Bcurr_V_Old+2,___ftneg@f1+2
 31694  016C6E  ECE0  F0D3         	call	___ftneg	;wreg free
 31695  016C72  C079  F083         	movff	?___ftneg,___ftadd@f1
 31696  016C76  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 31697  016C7A  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 31698  016C7E  C1E9  F086         	movff	_Bcurr_V_New,___ftadd@f2
 31699  016C82  C1EA  F087         	movff	_Bcurr_V_New+1,___ftadd@f2+1
 31700  016C86  C1EB  F088         	movff	_Bcurr_V_New+2,___ftadd@f2+2
 31701  016C8A  ECE4  F0AF         	call	___ftadd	;wreg free
 31702  016C8E                     L16:
 31703  016C8E  C083  F525         	movff	?___ftadd,_B_V_Gap
 31704  016C92  C084  F526         	movff	?___ftadd+1,_B_V_Gap+1
 31705  016C96  C085  F527         	movff	?___ftadd+2,_B_V_Gap+2
 31706  016C9A                     l9334:
 31707                           
 31708                           ;Power_Meter.c: 530: }
 31709                           ;Power_Meter.c: 532: B_Gap_Ratio = (B_C_Gap / B_V_Gap);
 31710  016C9A  C516  F09B         	movff	_B_C_Gap,___ftdiv@f1
 31711  016C9E  C517  F09C         	movff	_B_C_Gap+1,___ftdiv@f1+1
 31712  016CA2  C518  F09D         	movff	_B_C_Gap+2,___ftdiv@f1+2
 31713  016CA6  C525  F09E         	movff	_B_V_Gap,___ftdiv@f2
 31714  016CAA  C526  F09F         	movff	_B_V_Gap+1,___ftdiv@f2+1
 31715  016CAE  C527  F0A0         	movff	_B_V_Gap+2,___ftdiv@f2+2
 31716  016CB2  EC89  F0BF         	call	___ftdiv	;wreg free
 31717  016CB6  C09B  F106         	movff	?___ftdiv,_B_Gap_Ratio
 31718  016CBA  C09C  F107         	movff	?___ftdiv+1,_B_Gap_Ratio+1
 31719  016CBE  C09D  F108         	movff	?___ftdiv+2,_B_Gap_Ratio+2
 31720                           
 31721                           ;Power_Meter.c: 533: B_Deg = B_Gap_Ratio * 360;
 31722  016CC2  C106  F06A         	movff	_B_Gap_Ratio,___ftmul@f1
 31723  016CC6  C107  F06B         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 31724  016CCA  C108  F06C         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 31725  016CCE  0E00               	movlw	0
 31726  016CD0  0100               	movlb	0	; () banked
 31727  016CD2  6F6D               	movwf	___ftmul@f2& (0+255),b
 31728  016CD4  0EB4               	movlw	180
 31729  016CD6  0100               	movlb	0	; () banked
 31730  016CD8  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 31731  016CDA  0E43               	movlw	67
 31732  016CDC  0100               	movlb	0	; () banked
 31733  016CDE  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 31734  016CE0  EC83  F0BD         	call	___ftmul	;wreg free
 31735  016CE4  C06A  F642         	movff	?___ftmul,_B_Deg
 31736  016CE8  C06B  F643         	movff	?___ftmul+1,_B_Deg+1
 31737  016CEC  C06C  F644         	movff	?___ftmul+2,_B_Deg+2
 31738                           
 31739                           ;Power_Meter.c: 535: BGR_Arr_1[4] = BGR_Arr_1[3];
 31740  016CF0  C3CF  F3D2         	movff	_BGR_Arr_1+9,_BGR_Arr_1+12
 31741  016CF4  C3D0  F3D3         	movff	_BGR_Arr_1+10,_BGR_Arr_1+13
 31742  016CF8  C3D1  F3D4         	movff	_BGR_Arr_1+11,_BGR_Arr_1+14
 31743                           
 31744                           ;Power_Meter.c: 536: BGR_Arr_1[3] = BGR_Arr_1[2];
 31745  016CFC  C3CC  F3CF         	movff	_BGR_Arr_1+6,_BGR_Arr_1+9
 31746  016D00  C3CD  F3D0         	movff	_BGR_Arr_1+7,_BGR_Arr_1+10
 31747  016D04  C3CE  F3D1         	movff	_BGR_Arr_1+8,_BGR_Arr_1+11
 31748                           
 31749                           ;Power_Meter.c: 537: BGR_Arr_1[2] = BGR_Arr_1[1];
 31750  016D08  C3C9  F3CC         	movff	_BGR_Arr_1+3,_BGR_Arr_1+6
 31751  016D0C  C3CA  F3CD         	movff	_BGR_Arr_1+4,_BGR_Arr_1+7
 31752  016D10  C3CB  F3CE         	movff	_BGR_Arr_1+5,_BGR_Arr_1+8
 31753                           
 31754                           ;Power_Meter.c: 538: BGR_Arr_1[1] = BGR_Arr_1[0];
 31755  016D14  C3C6  F3C9         	movff	_BGR_Arr_1,_BGR_Arr_1+3
 31756  016D18  C3C7  F3CA         	movff	_BGR_Arr_1+1,_BGR_Arr_1+4
 31757  016D1C  C3C8  F3CB         	movff	_BGR_Arr_1+2,_BGR_Arr_1+5
 31758                           
 31759                           ;Power_Meter.c: 539: BGR_Arr_1[0] = B_Gap_Ratio;
 31760  016D20  C106  F3C6         	movff	_B_Gap_Ratio,_BGR_Arr_1
 31761  016D24  C107  F3C7         	movff	_B_Gap_Ratio+1,_BGR_Arr_1+1
 31762  016D28  C108  F3C8         	movff	_B_Gap_Ratio+2,_BGR_Arr_1+2
 31763  016D2C  0012               	return		;funcret
 31764  016D2E                     __end_of_B_PF_Calc:
 31765                           	opt stack 0
 31766                           tblptru	equ	0xFF8
 31767                           tblptrh	equ	0xFF7
 31768                           tblptrl	equ	0xFF6
 31769                           tablat	equ	0xFF5
 31770                           prodh	equ	0xFF4
 31771                           prodl	equ	0xFF3
 31772                           intcon	equ	0xFF2
 31773                           postinc0	equ	0xFEE
 31774                           wreg	equ	0xFE8
 31775                           postdec1	equ	0xFE5
 31776                           fsr1h	equ	0xFE2
 31777                           fsr1l	equ	0xFE1
 31778                           indf2	equ	0xFDF
 31779                           postinc2	equ	0xFDE
 31780                           postdec2	equ	0xFDD
 31781                           fsr2h	equ	0xFDA
 31782                           fsr2l	equ	0xFD9
 31783                           status	equ	0xFD8
 31784                           
 31785 ;; *************** function _B_PF_Avg *****************
 31786 ;; Defined at:
 31787 ;;		line 543 in file "Power_Meter.c"
 31788 ;; Parameters:    Size  Location     Type
 31789 ;;		None
 31790 ;; Auto vars:     Size  Location     Type
 31791 ;;		None
 31792 ;; Return value:  Size  Location     Type
 31793 ;;                  1    wreg      void 
 31794 ;; Registers used:
 31795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31796 ;; Tracked objects:
 31797 ;;		On entry : 0/0
 31798 ;;		On exit  : 0/0
 31799 ;;		Unchanged: 0/0
 31800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31802 ;;      Locals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 31803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31804 ;;      Totals:         0       0       0       0       0       0       0      84       0       0       0       0       
      +0       0       0       0       0
 31805 ;;Total ram usage:       84 bytes
 31806 ;; Hardware stack levels used:    1
 31807 ;; Hardware stack levels required when called:    8
 31808 ;; This function calls:
 31809 ;;		___ftadd
 31810 ;;		___ftdiv
 31811 ;;		___ftge
 31812 ;;		___ftmul
 31813 ;;		_cos
 31814 ;; This function is called by:
 31815 ;;		_main
 31816 ;; This function uses a non-reentrant model
 31817 ;;
 31818                           
 31819                           	psect	text121
 31820  0129C2                     __ptext121:
 31821                           	opt stack 0
 31822  0129C2                     _B_PF_Avg:
 31823                           	opt stack 22
 31824                           
 31825                           ;Power_Meter.c: 545: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 31826                           
 31827                           ;incstack = 0
 31828  0129C2  C3CF  F086         	movff	_BGR_Arr_1+9,___ftadd@f2
 31829  0129C6  C3D0  F087         	movff	_BGR_Arr_1+10,___ftadd@f2+1
 31830  0129CA  C3D1  F088         	movff	_BGR_Arr_1+11,___ftadd@f2+2
 31831  0129CE  C3D2  F083         	movff	_BGR_Arr_1+12,___ftadd@f1
 31832  0129D2  C3D3  F084         	movff	_BGR_Arr_1+13,___ftadd@f1+1
 31833  0129D6  C3D4  F085         	movff	_BGR_Arr_1+14,___ftadd@f1+2
 31834  0129DA  ECE4  F0AF         	call	___ftadd	;wreg free
 31835  0129DE  C083  F6B1         	movff	?___ftadd,_B_PF_Avg$8176
 31836  0129E2  C084  F6B2         	movff	?___ftadd+1,_B_PF_Avg$8176+1
 31837  0129E6  C085  F6B3         	movff	?___ftadd+2,_B_PF_Avg$8176+2
 31838                           
 31839                           ;Power_Meter.c: 545: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 31840  0129EA  C3CC  F086         	movff	_BGR_Arr_1+6,___ftadd@f2
 31841  0129EE  C3CD  F087         	movff	_BGR_Arr_1+7,___ftadd@f2+1
 31842  0129F2  C3CE  F088         	movff	_BGR_Arr_1+8,___ftadd@f2+2
 31843  0129F6  C6B1  F083         	movff	_B_PF_Avg$8176,___ftadd@f1
 31844  0129FA  C6B2  F084         	movff	_B_PF_Avg$8176+1,___ftadd@f1+1
 31845  0129FE  C6B3  F085         	movff	_B_PF_Avg$8176+2,___ftadd@f1+2
 31846  012A02  ECE4  F0AF         	call	___ftadd	;wreg free
 31847  012A06  C083  F6B4         	movff	?___ftadd,_B_PF_Avg$8177
 31848  012A0A  C084  F6B5         	movff	?___ftadd+1,_B_PF_Avg$8177+1
 31849  012A0E  C085  F6B6         	movff	?___ftadd+2,_B_PF_Avg$8177+2
 31850                           
 31851                           ;Power_Meter.c: 545: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 31852  012A12  C3C9  F086         	movff	_BGR_Arr_1+3,___ftadd@f2
 31853  012A16  C3CA  F087         	movff	_BGR_Arr_1+4,___ftadd@f2+1
 31854  012A1A  C3CB  F088         	movff	_BGR_Arr_1+5,___ftadd@f2+2
 31855  012A1E  C6B4  F083         	movff	_B_PF_Avg$8177,___ftadd@f1
 31856  012A22  C6B5  F084         	movff	_B_PF_Avg$8177+1,___ftadd@f1+1
 31857  012A26  C6B6  F085         	movff	_B_PF_Avg$8177+2,___ftadd@f1+2
 31858  012A2A  ECE4  F0AF         	call	___ftadd	;wreg free
 31859  012A2E  C083  F6B7         	movff	?___ftadd,_B_PF_Avg$8178
 31860  012A32  C084  F6B8         	movff	?___ftadd+1,_B_PF_Avg$8178+1
 31861  012A36  C085  F6B9         	movff	?___ftadd+2,_B_PF_Avg$8178+2
 31862                           
 31863                           ;Power_Meter.c: 545: BGR_Avg_1 = ((BGR_Arr_1[4] + BGR_Arr_1[3] + BGR_Arr_1[2] + BGR_Arr_
      +                          1[1] + BGR_Arr_1[0]) / 5);
 31864  012A3A  C3C6  F086         	movff	_BGR_Arr_1,___ftadd@f2
 31865  012A3E  C3C7  F087         	movff	_BGR_Arr_1+1,___ftadd@f2+1
 31866  012A42  C3C8  F088         	movff	_BGR_Arr_1+2,___ftadd@f2+2
 31867  012A46  C6B7  F083         	movff	_B_PF_Avg$8178,___ftadd@f1
 31868  012A4A  C6B8  F084         	movff	_B_PF_Avg$8178+1,___ftadd@f1+1
 31869  012A4E  C6B9  F085         	movff	_B_PF_Avg$8178+2,___ftadd@f1+2
 31870  012A52  ECE4  F0AF         	call	___ftadd	;wreg free
 31871  012A56  C083  F09B         	movff	?___ftadd,___ftdiv@f1
 31872  012A5A  C084  F09C         	movff	?___ftadd+1,___ftdiv@f1+1
 31873  012A5E  C085  F09D         	movff	?___ftadd+2,___ftdiv@f1+2
 31874  012A62  0E00               	movlw	0
 31875  012A64  0100               	movlb	0	; () banked
 31876  012A66  6F9E               	movwf	___ftdiv@f2& (0+255),b
 31877  012A68  0EA0               	movlw	160
 31878  012A6A  0100               	movlb	0	; () banked
 31879  012A6C  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 31880  012A6E  0E40               	movlw	64
 31881  012A70  0100               	movlb	0	; () banked
 31882  012A72  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 31883  012A74  EC89  F0BF         	call	___ftdiv	;wreg free
 31884  012A78  C09B  F203         	movff	?___ftdiv,_BGR_Avg_1
 31885  012A7C  C09C  F204         	movff	?___ftdiv+1,_BGR_Avg_1+1
 31886  012A80  C09D  F205         	movff	?___ftdiv+2,_BGR_Avg_1+2
 31887                           
 31888                           ;Power_Meter.c: 548: BGR_Arr[29] = BGR_Arr[28];
 31889  012A84  C454  F457         	movff	_BGR_Arr+84,_BGR_Arr+87
 31890  012A88  C455  F458         	movff	_BGR_Arr+85,_BGR_Arr+88
 31891  012A8C  C456  F459         	movff	_BGR_Arr+86,_BGR_Arr+89
 31892                           
 31893                           ;Power_Meter.c: 549: BGR_Arr[28] = BGR_Arr[27];
 31894  012A90  C451  F454         	movff	_BGR_Arr+81,_BGR_Arr+84
 31895  012A94  C452  F455         	movff	_BGR_Arr+82,_BGR_Arr+85
 31896  012A98  C453  F456         	movff	_BGR_Arr+83,_BGR_Arr+86
 31897                           
 31898                           ;Power_Meter.c: 550: BGR_Arr[27] = BGR_Arr[26];
 31899  012A9C  C44E  F451         	movff	_BGR_Arr+78,_BGR_Arr+81
 31900  012AA0  C44F  F452         	movff	_BGR_Arr+79,_BGR_Arr+82
 31901  012AA4  C450  F453         	movff	_BGR_Arr+80,_BGR_Arr+83
 31902                           
 31903                           ;Power_Meter.c: 551: BGR_Arr[26] = BGR_Arr[25];
 31904  012AA8  C44B  F44E         	movff	_BGR_Arr+75,_BGR_Arr+78
 31905  012AAC  C44C  F44F         	movff	_BGR_Arr+76,_BGR_Arr+79
 31906  012AB0  C44D  F450         	movff	_BGR_Arr+77,_BGR_Arr+80
 31907                           
 31908                           ;Power_Meter.c: 552: BGR_Arr[25] = BGR_Arr[24];
 31909  012AB4  C448  F44B         	movff	_BGR_Arr+72,_BGR_Arr+75
 31910  012AB8  C449  F44C         	movff	_BGR_Arr+73,_BGR_Arr+76
 31911  012ABC  C44A  F44D         	movff	_BGR_Arr+74,_BGR_Arr+77
 31912                           
 31913                           ;Power_Meter.c: 553: BGR_Arr[24] = BGR_Arr[23];
 31914  012AC0  C445  F448         	movff	_BGR_Arr+69,_BGR_Arr+72
 31915  012AC4  C446  F449         	movff	_BGR_Arr+70,_BGR_Arr+73
 31916  012AC8  C447  F44A         	movff	_BGR_Arr+71,_BGR_Arr+74
 31917                           
 31918                           ;Power_Meter.c: 554: BGR_Arr[23] = BGR_Arr[22];
 31919  012ACC  C442  F445         	movff	_BGR_Arr+66,_BGR_Arr+69
 31920  012AD0  C443  F446         	movff	_BGR_Arr+67,_BGR_Arr+70
 31921  012AD4  C444  F447         	movff	_BGR_Arr+68,_BGR_Arr+71
 31922                           
 31923                           ;Power_Meter.c: 555: BGR_Arr[22] = BGR_Arr[21];
 31924  012AD8  C43F  F442         	movff	_BGR_Arr+63,_BGR_Arr+66
 31925  012ADC  C440  F443         	movff	_BGR_Arr+64,_BGR_Arr+67
 31926  012AE0  C441  F444         	movff	_BGR_Arr+65,_BGR_Arr+68
 31927                           
 31928                           ;Power_Meter.c: 556: BGR_Arr[21] = BGR_Arr[20];
 31929  012AE4  C43C  F43F         	movff	_BGR_Arr+60,_BGR_Arr+63
 31930  012AE8  C43D  F440         	movff	_BGR_Arr+61,_BGR_Arr+64
 31931  012AEC  C43E  F441         	movff	_BGR_Arr+62,_BGR_Arr+65
 31932                           
 31933                           ;Power_Meter.c: 557: BGR_Arr[20] = BGR_Arr[19];
 31934  012AF0  C439  F43C         	movff	_BGR_Arr+57,_BGR_Arr+60
 31935  012AF4  C43A  F43D         	movff	_BGR_Arr+58,_BGR_Arr+61
 31936  012AF8  C43B  F43E         	movff	_BGR_Arr+59,_BGR_Arr+62
 31937                           
 31938                           ;Power_Meter.c: 558: BGR_Arr[19] = BGR_Arr[18];
 31939  012AFC  C436  F439         	movff	_BGR_Arr+54,_BGR_Arr+57
 31940  012B00  C437  F43A         	movff	_BGR_Arr+55,_BGR_Arr+58
 31941  012B04  C438  F43B         	movff	_BGR_Arr+56,_BGR_Arr+59
 31942                           
 31943                           ;Power_Meter.c: 559: BGR_Arr[18] = BGR_Arr[17];
 31944  012B08  C433  F436         	movff	_BGR_Arr+51,_BGR_Arr+54
 31945  012B0C  C434  F437         	movff	_BGR_Arr+52,_BGR_Arr+55
 31946  012B10  C435  F438         	movff	_BGR_Arr+53,_BGR_Arr+56
 31947                           
 31948                           ;Power_Meter.c: 560: BGR_Arr[17] = BGR_Arr[16];
 31949  012B14  C430  F433         	movff	_BGR_Arr+48,_BGR_Arr+51
 31950  012B18  C431  F434         	movff	_BGR_Arr+49,_BGR_Arr+52
 31951  012B1C  C432  F435         	movff	_BGR_Arr+50,_BGR_Arr+53
 31952                           
 31953                           ;Power_Meter.c: 561: BGR_Arr[16] = BGR_Arr[15];
 31954  012B20  C42D  F430         	movff	_BGR_Arr+45,_BGR_Arr+48
 31955  012B24  C42E  F431         	movff	_BGR_Arr+46,_BGR_Arr+49
 31956  012B28  C42F  F432         	movff	_BGR_Arr+47,_BGR_Arr+50
 31957                           
 31958                           ;Power_Meter.c: 562: BGR_Arr[15] = BGR_Arr[14];
 31959  012B2C  C42A  F42D         	movff	_BGR_Arr+42,_BGR_Arr+45
 31960  012B30  C42B  F42E         	movff	_BGR_Arr+43,_BGR_Arr+46
 31961  012B34  C42C  F42F         	movff	_BGR_Arr+44,_BGR_Arr+47
 31962                           
 31963                           ;Power_Meter.c: 563: BGR_Arr[14] = BGR_Arr[13];
 31964  012B38  C427  F42A         	movff	_BGR_Arr+39,_BGR_Arr+42
 31965  012B3C  C428  F42B         	movff	_BGR_Arr+40,_BGR_Arr+43
 31966  012B40  C429  F42C         	movff	_BGR_Arr+41,_BGR_Arr+44
 31967                           
 31968                           ;Power_Meter.c: 564: BGR_Arr[13] = BGR_Arr[12];
 31969  012B44  C424  F427         	movff	_BGR_Arr+36,_BGR_Arr+39
 31970  012B48  C425  F428         	movff	_BGR_Arr+37,_BGR_Arr+40
 31971  012B4C  C426  F429         	movff	_BGR_Arr+38,_BGR_Arr+41
 31972                           
 31973                           ;Power_Meter.c: 565: BGR_Arr[12] = BGR_Arr[11];
 31974  012B50  C421  F424         	movff	_BGR_Arr+33,_BGR_Arr+36
 31975  012B54  C422  F425         	movff	_BGR_Arr+34,_BGR_Arr+37
 31976  012B58  C423  F426         	movff	_BGR_Arr+35,_BGR_Arr+38
 31977                           
 31978                           ;Power_Meter.c: 566: BGR_Arr[11] = BGR_Arr[10];
 31979  012B5C  C41E  F421         	movff	_BGR_Arr+30,_BGR_Arr+33
 31980  012B60  C41F  F422         	movff	_BGR_Arr+31,_BGR_Arr+34
 31981  012B64  C420  F423         	movff	_BGR_Arr+32,_BGR_Arr+35
 31982                           
 31983                           ;Power_Meter.c: 567: BGR_Arr[10] = BGR_Arr[9];
 31984  012B68  C41B  F41E         	movff	_BGR_Arr+27,_BGR_Arr+30
 31985  012B6C  C41C  F41F         	movff	_BGR_Arr+28,_BGR_Arr+31
 31986  012B70  C41D  F420         	movff	_BGR_Arr+29,_BGR_Arr+32
 31987                           
 31988                           ;Power_Meter.c: 568: BGR_Arr[9] = BGR_Arr[8];
 31989  012B74  C418  F41B         	movff	_BGR_Arr+24,_BGR_Arr+27
 31990  012B78  C419  F41C         	movff	_BGR_Arr+25,_BGR_Arr+28
 31991  012B7C  C41A  F41D         	movff	_BGR_Arr+26,_BGR_Arr+29
 31992                           
 31993                           ;Power_Meter.c: 569: BGR_Arr[8] = BGR_Arr[7];
 31994  012B80  C415  F418         	movff	_BGR_Arr+21,_BGR_Arr+24
 31995  012B84  C416  F419         	movff	_BGR_Arr+22,_BGR_Arr+25
 31996  012B88  C417  F41A         	movff	_BGR_Arr+23,_BGR_Arr+26
 31997                           
 31998                           ;Power_Meter.c: 570: BGR_Arr[7] = BGR_Arr[6];
 31999  012B8C  C412  F415         	movff	_BGR_Arr+18,_BGR_Arr+21
 32000  012B90  C413  F416         	movff	_BGR_Arr+19,_BGR_Arr+22
 32001  012B94  C414  F417         	movff	_BGR_Arr+20,_BGR_Arr+23
 32002                           
 32003                           ;Power_Meter.c: 571: BGR_Arr[6] = BGR_Arr[5];
 32004  012B98  C40F  F412         	movff	_BGR_Arr+15,_BGR_Arr+18
 32005  012B9C  C410  F413         	movff	_BGR_Arr+16,_BGR_Arr+19
 32006  012BA0  C411  F414         	movff	_BGR_Arr+17,_BGR_Arr+20
 32007                           
 32008                           ;Power_Meter.c: 572: BGR_Arr[5] = BGR_Arr[4];
 32009  012BA4  C40C  F40F         	movff	_BGR_Arr+12,_BGR_Arr+15
 32010  012BA8  C40D  F410         	movff	_BGR_Arr+13,_BGR_Arr+16
 32011  012BAC  C40E  F411         	movff	_BGR_Arr+14,_BGR_Arr+17
 32012                           
 32013                           ;Power_Meter.c: 573: BGR_Arr[4] = BGR_Arr[3];
 32014  012BB0  C409  F40C         	movff	_BGR_Arr+9,_BGR_Arr+12
 32015  012BB4  C40A  F40D         	movff	_BGR_Arr+10,_BGR_Arr+13
 32016  012BB8  C40B  F40E         	movff	_BGR_Arr+11,_BGR_Arr+14
 32017                           
 32018                           ;Power_Meter.c: 574: BGR_Arr[3] = BGR_Arr[2];
 32019  012BBC  C406  F409         	movff	_BGR_Arr+6,_BGR_Arr+9
 32020  012BC0  C407  F40A         	movff	_BGR_Arr+7,_BGR_Arr+10
 32021  012BC4  C408  F40B         	movff	_BGR_Arr+8,_BGR_Arr+11
 32022                           
 32023                           ;Power_Meter.c: 575: BGR_Arr[2] = BGR_Arr[1];
 32024  012BC8  C403  F406         	movff	_BGR_Arr+3,_BGR_Arr+6
 32025  012BCC  C404  F407         	movff	_BGR_Arr+4,_BGR_Arr+7
 32026  012BD0  C405  F408         	movff	_BGR_Arr+5,_BGR_Arr+8
 32027                           
 32028                           ;Power_Meter.c: 576: BGR_Arr[1] = BGR_Arr[0];
 32029  012BD4  C400  F403         	movff	_BGR_Arr,_BGR_Arr+3
 32030  012BD8  C401  F404         	movff	_BGR_Arr+1,_BGR_Arr+4
 32031  012BDC  C402  F405         	movff	_BGR_Arr+2,_BGR_Arr+5
 32032                           
 32033                           ;Power_Meter.c: 578: if( (BGR_Avg_1 > (B_Gap_Ratio * 0.8)) && (BGR_Avg_1 < (B_Gap_Ratio 
      +                          * 1.2)) )
 32034  012BE0  0ECD               	movlw	205
 32035  012BE2  0100               	movlb	0	; () banked
 32036  012BE4  6F6D               	movwf	___ftmul@f2& (0+255),b
 32037  012BE6  0E4C               	movlw	76
 32038  012BE8  0100               	movlb	0	; () banked
 32039  012BEA  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 32040  012BEC  0E3F               	movlw	63
 32041  012BEE  0100               	movlb	0	; () banked
 32042  012BF0  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 32043  012BF2  C106  F06A         	movff	_B_Gap_Ratio,___ftmul@f1
 32044  012BF6  C107  F06B         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 32045  012BFA  C108  F06C         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 32046  012BFE  EC83  F0BD         	call	___ftmul	;wreg free
 32047  012C02  C06A  F08F         	movff	?___ftmul,___ftge@ff1
 32048  012C06  C06B  F090         	movff	?___ftmul+1,___ftge@ff1+1
 32049  012C0A  C06C  F091         	movff	?___ftmul+2,___ftge@ff1+2
 32050  012C0E  C203  F092         	movff	_BGR_Avg_1,___ftge@ff2
 32051  012C12  C204  F093         	movff	_BGR_Avg_1+1,___ftge@ff2+1
 32052  012C16  C205  F094         	movff	_BGR_Avg_1+2,___ftge@ff2+2
 32053  012C1A  EC09  F0C8         	call	___ftge	;wreg free
 32054  012C1E  0100               	movlb	0	; () banked
 32055  012C20  B0D8               	btfsc	status,0,c
 32056  012C22  D028               	goto	l21853
 32057                           
 32058                           ; BSR set to: 0
 32059  012C24  C203  F08F         	movff	_BGR_Avg_1,___ftge@ff1
 32060  012C28  C204  F090         	movff	_BGR_Avg_1+1,___ftge@ff1+1
 32061  012C2C  C205  F091         	movff	_BGR_Avg_1+2,___ftge@ff1+2
 32062  012C30  0E9A               	movlw	154
 32063  012C32  0100               	movlb	0	; () banked
 32064  012C34  6F6D               	movwf	___ftmul@f2& (0+255),b
 32065  012C36  0E99               	movlw	153
 32066  012C38  0100               	movlb	0	; () banked
 32067  012C3A  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 32068  012C3C  0E3F               	movlw	63
 32069  012C3E  0100               	movlb	0	; () banked
 32070  012C40  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 32071  012C42  C106  F06A         	movff	_B_Gap_Ratio,___ftmul@f1
 32072  012C46  C107  F06B         	movff	_B_Gap_Ratio+1,___ftmul@f1+1
 32073  012C4A  C108  F06C         	movff	_B_Gap_Ratio+2,___ftmul@f1+2
 32074  012C4E  EC83  F0BD         	call	___ftmul	;wreg free
 32075  012C52  C06A  F092         	movff	?___ftmul,___ftge@ff2
 32076  012C56  C06B  F093         	movff	?___ftmul+1,___ftge@ff2+1
 32077  012C5A  C06C  F094         	movff	?___ftmul+2,___ftge@ff2+2
 32078  012C5E  EC09  F0C8         	call	___ftge	;wreg free
 32079  012C62  0100               	movlb	0	; () banked
 32080  012C64  B0D8               	btfsc	status,0,c
 32081  012C66  D006               	goto	l21853
 32082                           
 32083                           ; BSR set to: 0
 32084                           ;Power_Meter.c: 579: {
 32085                           ;Power_Meter.c: 580: BGR_Arr[0] = B_Gap_Ratio;
 32086  012C68  C106  F400         	movff	_B_Gap_Ratio,_BGR_Arr
 32087  012C6C  C107  F401         	movff	_B_Gap_Ratio+1,_BGR_Arr+1
 32088  012C70  C108  F402         	movff	_B_Gap_Ratio+2,_BGR_Arr+2
 32089  012C74                     l21853:
 32090                           
 32091                           ; BSR set to: 0
 32092                           ;Power_Meter.c: 581: }
 32093                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32094                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32095                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32096                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32097  012C74  C454  F086         	movff	_BGR_Arr+84,___ftadd@f2
 32098  012C78  C455  F087         	movff	_BGR_Arr+85,___ftadd@f2+1
 32099  012C7C  C456  F088         	movff	_BGR_Arr+86,___ftadd@f2+2
 32100  012C80  C457  F083         	movff	_BGR_Arr+87,___ftadd@f1
 32101  012C84  C458  F084         	movff	_BGR_Arr+88,___ftadd@f1+1
 32102  012C88  C459  F085         	movff	_BGR_Arr+89,___ftadd@f1+2
 32103  012C8C  ECE4  F0AF         	call	___ftadd	;wreg free
 32104  012C90  C083  F6B1         	movff	?___ftadd,_B_PF_Avg$8176
 32105  012C94  C084  F6B2         	movff	?___ftadd+1,_B_PF_Avg$8176+1
 32106  012C98  C085  F6B3         	movff	?___ftadd+2,_B_PF_Avg$8176+2
 32107                           
 32108                           ;Power_Meter.c: 581: }
 32109                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32110                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32111                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32112                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32113  012C9C  C451  F086         	movff	_BGR_Arr+81,___ftadd@f2
 32114  012CA0  C452  F087         	movff	_BGR_Arr+82,___ftadd@f2+1
 32115  012CA4  C453  F088         	movff	_BGR_Arr+83,___ftadd@f2+2
 32116  012CA8  C6B1  F083         	movff	_B_PF_Avg$8176,___ftadd@f1
 32117  012CAC  C6B2  F084         	movff	_B_PF_Avg$8176+1,___ftadd@f1+1
 32118  012CB0  C6B3  F085         	movff	_B_PF_Avg$8176+2,___ftadd@f1+2
 32119  012CB4  ECE4  F0AF         	call	___ftadd	;wreg free
 32120  012CB8  C083  F6B4         	movff	?___ftadd,_B_PF_Avg$8177
 32121  012CBC  C084  F6B5         	movff	?___ftadd+1,_B_PF_Avg$8177+1
 32122  012CC0  C085  F6B6         	movff	?___ftadd+2,_B_PF_Avg$8177+2
 32123                           
 32124                           ;Power_Meter.c: 581: }
 32125                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32126                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32127                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32128                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32129  012CC4  C44E  F086         	movff	_BGR_Arr+78,___ftadd@f2
 32130  012CC8  C44F  F087         	movff	_BGR_Arr+79,___ftadd@f2+1
 32131  012CCC  C450  F088         	movff	_BGR_Arr+80,___ftadd@f2+2
 32132  012CD0  C6B4  F083         	movff	_B_PF_Avg$8177,___ftadd@f1
 32133  012CD4  C6B5  F084         	movff	_B_PF_Avg$8177+1,___ftadd@f1+1
 32134  012CD8  C6B6  F085         	movff	_B_PF_Avg$8177+2,___ftadd@f1+2
 32135  012CDC  ECE4  F0AF         	call	___ftadd	;wreg free
 32136  012CE0  C083  F6B7         	movff	?___ftadd,_B_PF_Avg$8178
 32137  012CE4  C084  F6B8         	movff	?___ftadd+1,_B_PF_Avg$8178+1
 32138  012CE8  C085  F6B9         	movff	?___ftadd+2,_B_PF_Avg$8178+2
 32139                           
 32140                           ;Power_Meter.c: 581: }
 32141                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32142                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32143                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32144                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32145  012CEC  C44B  F086         	movff	_BGR_Arr+75,___ftadd@f2
 32146  012CF0  C44C  F087         	movff	_BGR_Arr+76,___ftadd@f2+1
 32147  012CF4  C44D  F088         	movff	_BGR_Arr+77,___ftadd@f2+2
 32148  012CF8  C6B7  F083         	movff	_B_PF_Avg$8178,___ftadd@f1
 32149  012CFC  C6B8  F084         	movff	_B_PF_Avg$8178+1,___ftadd@f1+1
 32150  012D00  C6B9  F085         	movff	_B_PF_Avg$8178+2,___ftadd@f1+2
 32151  012D04  ECE4  F0AF         	call	___ftadd	;wreg free
 32152  012D08  C083  F666         	movff	?___ftadd,_B_PF_Avg$8179
 32153  012D0C  C084  F667         	movff	?___ftadd+1,_B_PF_Avg$8179+1
 32154  012D10  C085  F668         	movff	?___ftadd+2,_B_PF_Avg$8179+2
 32155                           
 32156                           ;Power_Meter.c: 581: }
 32157                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32158                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32159                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32160                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32161  012D14  C448  F086         	movff	_BGR_Arr+72,___ftadd@f2
 32162  012D18  C449  F087         	movff	_BGR_Arr+73,___ftadd@f2+1
 32163  012D1C  C44A  F088         	movff	_BGR_Arr+74,___ftadd@f2+2
 32164  012D20  C666  F083         	movff	_B_PF_Avg$8179,___ftadd@f1
 32165  012D24  C667  F084         	movff	_B_PF_Avg$8179+1,___ftadd@f1+1
 32166  012D28  C668  F085         	movff	_B_PF_Avg$8179+2,___ftadd@f1+2
 32167  012D2C  ECE4  F0AF         	call	___ftadd	;wreg free
 32168  012D30  C083  F669         	movff	?___ftadd,_B_PF_Avg$8180
 32169  012D34  C084  F66A         	movff	?___ftadd+1,_B_PF_Avg$8180+1
 32170  012D38  C085  F66B         	movff	?___ftadd+2,_B_PF_Avg$8180+2
 32171                           
 32172                           ;Power_Meter.c: 581: }
 32173                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32174                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32175                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32176                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32177  012D3C  C445  F086         	movff	_BGR_Arr+69,___ftadd@f2
 32178  012D40  C446  F087         	movff	_BGR_Arr+70,___ftadd@f2+1
 32179  012D44  C447  F088         	movff	_BGR_Arr+71,___ftadd@f2+2
 32180  012D48  C669  F083         	movff	_B_PF_Avg$8180,___ftadd@f1
 32181  012D4C  C66A  F084         	movff	_B_PF_Avg$8180+1,___ftadd@f1+1
 32182  012D50  C66B  F085         	movff	_B_PF_Avg$8180+2,___ftadd@f1+2
 32183  012D54  ECE4  F0AF         	call	___ftadd	;wreg free
 32184  012D58  C083  F66C         	movff	?___ftadd,_B_PF_Avg$8181
 32185  012D5C  C084  F66D         	movff	?___ftadd+1,_B_PF_Avg$8181+1
 32186  012D60  C085  F66E         	movff	?___ftadd+2,_B_PF_Avg$8181+2
 32187                           
 32188                           ;Power_Meter.c: 581: }
 32189                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32190                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32191                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32192                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32193  012D64  C442  F086         	movff	_BGR_Arr+66,___ftadd@f2
 32194  012D68  C443  F087         	movff	_BGR_Arr+67,___ftadd@f2+1
 32195  012D6C  C444  F088         	movff	_BGR_Arr+68,___ftadd@f2+2
 32196  012D70  C66C  F083         	movff	_B_PF_Avg$8181,___ftadd@f1
 32197  012D74  C66D  F084         	movff	_B_PF_Avg$8181+1,___ftadd@f1+1
 32198  012D78  C66E  F085         	movff	_B_PF_Avg$8181+2,___ftadd@f1+2
 32199  012D7C  ECE4  F0AF         	call	___ftadd	;wreg free
 32200  012D80  C083  F66F         	movff	?___ftadd,_B_PF_Avg$8182
 32201  012D84  C084  F670         	movff	?___ftadd+1,_B_PF_Avg$8182+1
 32202  012D88  C085  F671         	movff	?___ftadd+2,_B_PF_Avg$8182+2
 32203                           
 32204                           ;Power_Meter.c: 581: }
 32205                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32206                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32207                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32208                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32209  012D8C  C43F  F086         	movff	_BGR_Arr+63,___ftadd@f2
 32210  012D90  C440  F087         	movff	_BGR_Arr+64,___ftadd@f2+1
 32211  012D94  C441  F088         	movff	_BGR_Arr+65,___ftadd@f2+2
 32212  012D98  C66F  F083         	movff	_B_PF_Avg$8182,___ftadd@f1
 32213  012D9C  C670  F084         	movff	_B_PF_Avg$8182+1,___ftadd@f1+1
 32214  012DA0  C671  F085         	movff	_B_PF_Avg$8182+2,___ftadd@f1+2
 32215  012DA4  ECE4  F0AF         	call	___ftadd	;wreg free
 32216  012DA8  C083  F672         	movff	?___ftadd,_B_PF_Avg$8183
 32217  012DAC  C084  F673         	movff	?___ftadd+1,_B_PF_Avg$8183+1
 32218  012DB0  C085  F674         	movff	?___ftadd+2,_B_PF_Avg$8183+2
 32219                           
 32220                           ;Power_Meter.c: 581: }
 32221                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32222                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32223                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32224                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32225  012DB4  C43C  F086         	movff	_BGR_Arr+60,___ftadd@f2
 32226  012DB8  C43D  F087         	movff	_BGR_Arr+61,___ftadd@f2+1
 32227  012DBC  C43E  F088         	movff	_BGR_Arr+62,___ftadd@f2+2
 32228  012DC0  C672  F083         	movff	_B_PF_Avg$8183,___ftadd@f1
 32229  012DC4  C673  F084         	movff	_B_PF_Avg$8183+1,___ftadd@f1+1
 32230  012DC8  C674  F085         	movff	_B_PF_Avg$8183+2,___ftadd@f1+2
 32231  012DCC  ECE4  F0AF         	call	___ftadd	;wreg free
 32232  012DD0  C083  F675         	movff	?___ftadd,_B_PF_Avg$8184
 32233  012DD4  C084  F676         	movff	?___ftadd+1,_B_PF_Avg$8184+1
 32234  012DD8  C085  F677         	movff	?___ftadd+2,_B_PF_Avg$8184+2
 32235                           
 32236                           ;Power_Meter.c: 581: }
 32237                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32238                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32239                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32240                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32241  012DDC  C439  F086         	movff	_BGR_Arr+57,___ftadd@f2
 32242  012DE0  C43A  F087         	movff	_BGR_Arr+58,___ftadd@f2+1
 32243  012DE4  C43B  F088         	movff	_BGR_Arr+59,___ftadd@f2+2
 32244  012DE8  C675  F083         	movff	_B_PF_Avg$8184,___ftadd@f1
 32245  012DEC  C676  F084         	movff	_B_PF_Avg$8184+1,___ftadd@f1+1
 32246  012DF0  C677  F085         	movff	_B_PF_Avg$8184+2,___ftadd@f1+2
 32247  012DF4  ECE4  F0AF         	call	___ftadd	;wreg free
 32248  012DF8  C083  F678         	movff	?___ftadd,_B_PF_Avg$8185
 32249  012DFC  C084  F679         	movff	?___ftadd+1,_B_PF_Avg$8185+1
 32250  012E00  C085  F67A         	movff	?___ftadd+2,_B_PF_Avg$8185+2
 32251                           
 32252                           ;Power_Meter.c: 581: }
 32253                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32254                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32255                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32256                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32257  012E04  C436  F086         	movff	_BGR_Arr+54,___ftadd@f2
 32258  012E08  C437  F087         	movff	_BGR_Arr+55,___ftadd@f2+1
 32259  012E0C  C438  F088         	movff	_BGR_Arr+56,___ftadd@f2+2
 32260  012E10  C678  F083         	movff	_B_PF_Avg$8185,___ftadd@f1
 32261  012E14  C679  F084         	movff	_B_PF_Avg$8185+1,___ftadd@f1+1
 32262  012E18  C67A  F085         	movff	_B_PF_Avg$8185+2,___ftadd@f1+2
 32263  012E1C  ECE4  F0AF         	call	___ftadd	;wreg free
 32264  012E20  C083  F67B         	movff	?___ftadd,_B_PF_Avg$8186
 32265  012E24  C084  F67C         	movff	?___ftadd+1,_B_PF_Avg$8186+1
 32266  012E28  C085  F67D         	movff	?___ftadd+2,_B_PF_Avg$8186+2
 32267                           
 32268                           ;Power_Meter.c: 581: }
 32269                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32270                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32271                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32272                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32273  012E2C  C433  F086         	movff	_BGR_Arr+51,___ftadd@f2
 32274  012E30  C434  F087         	movff	_BGR_Arr+52,___ftadd@f2+1
 32275  012E34  C435  F088         	movff	_BGR_Arr+53,___ftadd@f2+2
 32276  012E38  C67B  F083         	movff	_B_PF_Avg$8186,___ftadd@f1
 32277  012E3C  C67C  F084         	movff	_B_PF_Avg$8186+1,___ftadd@f1+1
 32278  012E40  C67D  F085         	movff	_B_PF_Avg$8186+2,___ftadd@f1+2
 32279  012E44  ECE4  F0AF         	call	___ftadd	;wreg free
 32280  012E48  C083  F67E         	movff	?___ftadd,_B_PF_Avg$8187
 32281  012E4C  C084  F67F         	movff	?___ftadd+1,_B_PF_Avg$8187+1
 32282  012E50  C085  F680         	movff	?___ftadd+2,_B_PF_Avg$8187+2
 32283                           
 32284                           ;Power_Meter.c: 581: }
 32285                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32286                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32287                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32288                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32289  012E54  C430  F086         	movff	_BGR_Arr+48,___ftadd@f2
 32290  012E58  C431  F087         	movff	_BGR_Arr+49,___ftadd@f2+1
 32291  012E5C  C432  F088         	movff	_BGR_Arr+50,___ftadd@f2+2
 32292  012E60  C67E  F083         	movff	_B_PF_Avg$8187,___ftadd@f1
 32293  012E64  C67F  F084         	movff	_B_PF_Avg$8187+1,___ftadd@f1+1
 32294  012E68  C680  F085         	movff	_B_PF_Avg$8187+2,___ftadd@f1+2
 32295  012E6C  ECE4  F0AF         	call	___ftadd	;wreg free
 32296  012E70  C083  F681         	movff	?___ftadd,_B_PF_Avg$8188
 32297  012E74  C084  F682         	movff	?___ftadd+1,_B_PF_Avg$8188+1
 32298  012E78  C085  F683         	movff	?___ftadd+2,_B_PF_Avg$8188+2
 32299                           
 32300                           ;Power_Meter.c: 581: }
 32301                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32302                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32303                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32304                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32305  012E7C  C42D  F086         	movff	_BGR_Arr+45,___ftadd@f2
 32306  012E80  C42E  F087         	movff	_BGR_Arr+46,___ftadd@f2+1
 32307  012E84  C42F  F088         	movff	_BGR_Arr+47,___ftadd@f2+2
 32308  012E88  C681  F083         	movff	_B_PF_Avg$8188,___ftadd@f1
 32309  012E8C  C682  F084         	movff	_B_PF_Avg$8188+1,___ftadd@f1+1
 32310  012E90  C683  F085         	movff	_B_PF_Avg$8188+2,___ftadd@f1+2
 32311  012E94  ECE4  F0AF         	call	___ftadd	;wreg free
 32312  012E98  C083  F684         	movff	?___ftadd,_B_PF_Avg$8189
 32313  012E9C  C084  F685         	movff	?___ftadd+1,_B_PF_Avg$8189+1
 32314  012EA0  C085  F686         	movff	?___ftadd+2,_B_PF_Avg$8189+2
 32315                           
 32316                           ;Power_Meter.c: 581: }
 32317                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32318                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32319                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32320                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32321  012EA4  C42A  F086         	movff	_BGR_Arr+42,___ftadd@f2
 32322  012EA8  C42B  F087         	movff	_BGR_Arr+43,___ftadd@f2+1
 32323  012EAC  C42C  F088         	movff	_BGR_Arr+44,___ftadd@f2+2
 32324  012EB0  C684  F083         	movff	_B_PF_Avg$8189,___ftadd@f1
 32325  012EB4  C685  F084         	movff	_B_PF_Avg$8189+1,___ftadd@f1+1
 32326  012EB8  C686  F085         	movff	_B_PF_Avg$8189+2,___ftadd@f1+2
 32327  012EBC  ECE4  F0AF         	call	___ftadd	;wreg free
 32328  012EC0  C083  F687         	movff	?___ftadd,_B_PF_Avg$8190
 32329  012EC4  C084  F688         	movff	?___ftadd+1,_B_PF_Avg$8190+1
 32330  012EC8  C085  F689         	movff	?___ftadd+2,_B_PF_Avg$8190+2
 32331                           
 32332                           ;Power_Meter.c: 581: }
 32333                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32334                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32335                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32336                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32337  012ECC  C427  F086         	movff	_BGR_Arr+39,___ftadd@f2
 32338  012ED0  C428  F087         	movff	_BGR_Arr+40,___ftadd@f2+1
 32339  012ED4  C429  F088         	movff	_BGR_Arr+41,___ftadd@f2+2
 32340  012ED8  C687  F083         	movff	_B_PF_Avg$8190,___ftadd@f1
 32341  012EDC  C688  F084         	movff	_B_PF_Avg$8190+1,___ftadd@f1+1
 32342  012EE0  C689  F085         	movff	_B_PF_Avg$8190+2,___ftadd@f1+2
 32343  012EE4  ECE4  F0AF         	call	___ftadd	;wreg free
 32344  012EE8  C083  F68A         	movff	?___ftadd,_B_PF_Avg$8191
 32345  012EEC  C084  F68B         	movff	?___ftadd+1,_B_PF_Avg$8191+1
 32346  012EF0  C085  F68C         	movff	?___ftadd+2,_B_PF_Avg$8191+2
 32347                           
 32348                           ;Power_Meter.c: 581: }
 32349                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32350                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32351                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32352                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32353  012EF4  C424  F086         	movff	_BGR_Arr+36,___ftadd@f2
 32354  012EF8  C425  F087         	movff	_BGR_Arr+37,___ftadd@f2+1
 32355  012EFC  C426  F088         	movff	_BGR_Arr+38,___ftadd@f2+2
 32356  012F00  C68A  F083         	movff	_B_PF_Avg$8191,___ftadd@f1
 32357  012F04  C68B  F084         	movff	_B_PF_Avg$8191+1,___ftadd@f1+1
 32358  012F08  C68C  F085         	movff	_B_PF_Avg$8191+2,___ftadd@f1+2
 32359  012F0C  ECE4  F0AF         	call	___ftadd	;wreg free
 32360  012F10  C083  F68D         	movff	?___ftadd,_B_PF_Avg$8192
 32361  012F14  C084  F68E         	movff	?___ftadd+1,_B_PF_Avg$8192+1
 32362  012F18  C085  F68F         	movff	?___ftadd+2,_B_PF_Avg$8192+2
 32363                           
 32364                           ;Power_Meter.c: 581: }
 32365                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32366                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32367                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32368                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32369  012F1C  C421  F086         	movff	_BGR_Arr+33,___ftadd@f2
 32370  012F20  C422  F087         	movff	_BGR_Arr+34,___ftadd@f2+1
 32371  012F24  C423  F088         	movff	_BGR_Arr+35,___ftadd@f2+2
 32372  012F28  C68D  F083         	movff	_B_PF_Avg$8192,___ftadd@f1
 32373  012F2C  C68E  F084         	movff	_B_PF_Avg$8192+1,___ftadd@f1+1
 32374  012F30  C68F  F085         	movff	_B_PF_Avg$8192+2,___ftadd@f1+2
 32375  012F34  ECE4  F0AF         	call	___ftadd	;wreg free
 32376  012F38  C083  F690         	movff	?___ftadd,_B_PF_Avg$8193
 32377  012F3C  C084  F691         	movff	?___ftadd+1,_B_PF_Avg$8193+1
 32378  012F40  C085  F692         	movff	?___ftadd+2,_B_PF_Avg$8193+2
 32379                           
 32380                           ;Power_Meter.c: 581: }
 32381                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32382                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32383                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32384                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32385  012F44  C41E  F086         	movff	_BGR_Arr+30,___ftadd@f2
 32386  012F48  C41F  F087         	movff	_BGR_Arr+31,___ftadd@f2+1
 32387  012F4C  C420  F088         	movff	_BGR_Arr+32,___ftadd@f2+2
 32388  012F50  C690  F083         	movff	_B_PF_Avg$8193,___ftadd@f1
 32389  012F54  C691  F084         	movff	_B_PF_Avg$8193+1,___ftadd@f1+1
 32390  012F58  C692  F085         	movff	_B_PF_Avg$8193+2,___ftadd@f1+2
 32391  012F5C  ECE4  F0AF         	call	___ftadd	;wreg free
 32392  012F60  C083  F693         	movff	?___ftadd,_B_PF_Avg$8194
 32393  012F64  C084  F694         	movff	?___ftadd+1,_B_PF_Avg$8194+1
 32394  012F68  C085  F695         	movff	?___ftadd+2,_B_PF_Avg$8194+2
 32395                           
 32396                           ;Power_Meter.c: 581: }
 32397                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32398                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32399                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32400                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32401  012F6C  C41B  F086         	movff	_BGR_Arr+27,___ftadd@f2
 32402  012F70  C41C  F087         	movff	_BGR_Arr+28,___ftadd@f2+1
 32403  012F74  C41D  F088         	movff	_BGR_Arr+29,___ftadd@f2+2
 32404  012F78  C693  F083         	movff	_B_PF_Avg$8194,___ftadd@f1
 32405  012F7C  C694  F084         	movff	_B_PF_Avg$8194+1,___ftadd@f1+1
 32406  012F80  C695  F085         	movff	_B_PF_Avg$8194+2,___ftadd@f1+2
 32407  012F84  ECE4  F0AF         	call	___ftadd	;wreg free
 32408  012F88  C083  F696         	movff	?___ftadd,_B_PF_Avg$8195
 32409  012F8C  C084  F697         	movff	?___ftadd+1,_B_PF_Avg$8195+1
 32410  012F90  C085  F698         	movff	?___ftadd+2,_B_PF_Avg$8195+2
 32411                           
 32412                           ;Power_Meter.c: 581: }
 32413                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32414                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32415                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32416                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32417  012F94  C418  F086         	movff	_BGR_Arr+24,___ftadd@f2
 32418  012F98  C419  F087         	movff	_BGR_Arr+25,___ftadd@f2+1
 32419  012F9C  C41A  F088         	movff	_BGR_Arr+26,___ftadd@f2+2
 32420  012FA0  C696  F083         	movff	_B_PF_Avg$8195,___ftadd@f1
 32421  012FA4  C697  F084         	movff	_B_PF_Avg$8195+1,___ftadd@f1+1
 32422  012FA8  C698  F085         	movff	_B_PF_Avg$8195+2,___ftadd@f1+2
 32423  012FAC  ECE4  F0AF         	call	___ftadd	;wreg free
 32424  012FB0  C083  F699         	movff	?___ftadd,_B_PF_Avg$8196
 32425  012FB4  C084  F69A         	movff	?___ftadd+1,_B_PF_Avg$8196+1
 32426  012FB8  C085  F69B         	movff	?___ftadd+2,_B_PF_Avg$8196+2
 32427                           
 32428                           ;Power_Meter.c: 581: }
 32429                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32430                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32431                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32432                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32433  012FBC  C415  F086         	movff	_BGR_Arr+21,___ftadd@f2
 32434  012FC0  C416  F087         	movff	_BGR_Arr+22,___ftadd@f2+1
 32435  012FC4  C417  F088         	movff	_BGR_Arr+23,___ftadd@f2+2
 32436  012FC8  C699  F083         	movff	_B_PF_Avg$8196,___ftadd@f1
 32437  012FCC  C69A  F084         	movff	_B_PF_Avg$8196+1,___ftadd@f1+1
 32438  012FD0  C69B  F085         	movff	_B_PF_Avg$8196+2,___ftadd@f1+2
 32439  012FD4  ECE4  F0AF         	call	___ftadd	;wreg free
 32440  012FD8  C083  F69C         	movff	?___ftadd,_B_PF_Avg$8197
 32441  012FDC  C084  F69D         	movff	?___ftadd+1,_B_PF_Avg$8197+1
 32442  012FE0  C085  F69E         	movff	?___ftadd+2,_B_PF_Avg$8197+2
 32443                           
 32444                           ;Power_Meter.c: 581: }
 32445                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32446                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32447                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32448                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32449  012FE4  C412  F086         	movff	_BGR_Arr+18,___ftadd@f2
 32450  012FE8  C413  F087         	movff	_BGR_Arr+19,___ftadd@f2+1
 32451  012FEC  C414  F088         	movff	_BGR_Arr+20,___ftadd@f2+2
 32452  012FF0  C69C  F083         	movff	_B_PF_Avg$8197,___ftadd@f1
 32453  012FF4  C69D  F084         	movff	_B_PF_Avg$8197+1,___ftadd@f1+1
 32454  012FF8  C69E  F085         	movff	_B_PF_Avg$8197+2,___ftadd@f1+2
 32455  012FFC  ECE4  F0AF         	call	___ftadd	;wreg free
 32456  013000  C083  F69F         	movff	?___ftadd,_B_PF_Avg$8198
 32457  013004  C084  F6A0         	movff	?___ftadd+1,_B_PF_Avg$8198+1
 32458  013008  C085  F6A1         	movff	?___ftadd+2,_B_PF_Avg$8198+2
 32459                           
 32460                           ;Power_Meter.c: 581: }
 32461                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32462                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32463                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32464                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32465  01300C  C40F  F086         	movff	_BGR_Arr+15,___ftadd@f2
 32466  013010  C410  F087         	movff	_BGR_Arr+16,___ftadd@f2+1
 32467  013014  C411  F088         	movff	_BGR_Arr+17,___ftadd@f2+2
 32468  013018  C69F  F083         	movff	_B_PF_Avg$8198,___ftadd@f1
 32469  01301C  C6A0  F084         	movff	_B_PF_Avg$8198+1,___ftadd@f1+1
 32470  013020  C6A1  F085         	movff	_B_PF_Avg$8198+2,___ftadd@f1+2
 32471  013024  ECE4  F0AF         	call	___ftadd	;wreg free
 32472  013028  C083  F6A2         	movff	?___ftadd,_B_PF_Avg$8199
 32473  01302C  C084  F6A3         	movff	?___ftadd+1,_B_PF_Avg$8199+1
 32474  013030  C085  F6A4         	movff	?___ftadd+2,_B_PF_Avg$8199+2
 32475                           
 32476                           ;Power_Meter.c: 581: }
 32477                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32478                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32479                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32480                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32481  013034  C40C  F086         	movff	_BGR_Arr+12,___ftadd@f2
 32482  013038  C40D  F087         	movff	_BGR_Arr+13,___ftadd@f2+1
 32483  01303C  C40E  F088         	movff	_BGR_Arr+14,___ftadd@f2+2
 32484  013040  C6A2  F083         	movff	_B_PF_Avg$8199,___ftadd@f1
 32485  013044  C6A3  F084         	movff	_B_PF_Avg$8199+1,___ftadd@f1+1
 32486  013048  C6A4  F085         	movff	_B_PF_Avg$8199+2,___ftadd@f1+2
 32487  01304C  ECE4  F0AF         	call	___ftadd	;wreg free
 32488  013050  C083  F6A5         	movff	?___ftadd,_B_PF_Avg$8200
 32489  013054  C084  F6A6         	movff	?___ftadd+1,_B_PF_Avg$8200+1
 32490  013058  C085  F6A7         	movff	?___ftadd+2,_B_PF_Avg$8200+2
 32491                           
 32492                           ;Power_Meter.c: 581: }
 32493                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32494                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32495                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32496                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32497  01305C  C409  F086         	movff	_BGR_Arr+9,___ftadd@f2
 32498  013060  C40A  F087         	movff	_BGR_Arr+10,___ftadd@f2+1
 32499  013064  C40B  F088         	movff	_BGR_Arr+11,___ftadd@f2+2
 32500  013068  C6A5  F083         	movff	_B_PF_Avg$8200,___ftadd@f1
 32501  01306C  C6A6  F084         	movff	_B_PF_Avg$8200+1,___ftadd@f1+1
 32502  013070  C6A7  F085         	movff	_B_PF_Avg$8200+2,___ftadd@f1+2
 32503  013074  ECE4  F0AF         	call	___ftadd	;wreg free
 32504  013078  C083  F6A8         	movff	?___ftadd,_B_PF_Avg$8201
 32505  01307C  C084  F6A9         	movff	?___ftadd+1,_B_PF_Avg$8201+1
 32506  013080  C085  F6AA         	movff	?___ftadd+2,_B_PF_Avg$8201+2
 32507                           
 32508                           ;Power_Meter.c: 581: }
 32509                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32510                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32511                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32512                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32513  013084  C406  F086         	movff	_BGR_Arr+6,___ftadd@f2
 32514  013088  C407  F087         	movff	_BGR_Arr+7,___ftadd@f2+1
 32515  01308C  C408  F088         	movff	_BGR_Arr+8,___ftadd@f2+2
 32516  013090  C6A8  F083         	movff	_B_PF_Avg$8201,___ftadd@f1
 32517  013094  C6A9  F084         	movff	_B_PF_Avg$8201+1,___ftadd@f1+1
 32518  013098  C6AA  F085         	movff	_B_PF_Avg$8201+2,___ftadd@f1+2
 32519  01309C  ECE4  F0AF         	call	___ftadd	;wreg free
 32520  0130A0  C083  F6AB         	movff	?___ftadd,_B_PF_Avg$8202
 32521  0130A4  C084  F6AC         	movff	?___ftadd+1,_B_PF_Avg$8202+1
 32522  0130A8  C085  F6AD         	movff	?___ftadd+2,_B_PF_Avg$8202+2
 32523                           
 32524                           ;Power_Meter.c: 581: }
 32525                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32526                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32527                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32528                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32529  0130AC  C403  F086         	movff	_BGR_Arr+3,___ftadd@f2
 32530  0130B0  C404  F087         	movff	_BGR_Arr+4,___ftadd@f2+1
 32531  0130B4  C405  F088         	movff	_BGR_Arr+5,___ftadd@f2+2
 32532  0130B8  C6AB  F083         	movff	_B_PF_Avg$8202,___ftadd@f1
 32533  0130BC  C6AC  F084         	movff	_B_PF_Avg$8202+1,___ftadd@f1+1
 32534  0130C0  C6AD  F085         	movff	_B_PF_Avg$8202+2,___ftadd@f1+2
 32535  0130C4  ECE4  F0AF         	call	___ftadd	;wreg free
 32536  0130C8  C083  F6AE         	movff	?___ftadd,_B_PF_Avg$8203
 32537  0130CC  C084  F6AF         	movff	?___ftadd+1,_B_PF_Avg$8203+1
 32538  0130D0  C085  F6B0         	movff	?___ftadd+2,_B_PF_Avg$8203+2
 32539                           
 32540                           ;Power_Meter.c: 581: }
 32541                           ;Power_Meter.c: 583: BGR_Avg = (BGR_Arr[29] + BGR_Arr[28] + BGR_Arr[27] + BGR_Arr[26] + 
      +                          BGR_Arr[25] + BGR_Arr[24] + BGR_Arr[23] + BGR_Arr[22]
 32542                           ;Power_Meter.c: 584: + BGR_Arr[21] + BGR_Arr[20] + BGR_Arr[19] + BGR_Arr[18] + BGR_Arr[1
      +                          7] + BGR_Arr[16] + BGR_Arr[15]
 32543                           ;Power_Meter.c: 585: + BGR_Arr[14] + BGR_Arr[13] + BGR_Arr[12] + BGR_Arr[11] + BGR_Arr[1
      +                          0] + BGR_Arr[9] + BGR_Arr[8] + BGR_Arr[7]
 32544                           ;Power_Meter.c: 586: + BGR_Arr[6] + BGR_Arr[5] + BGR_Arr[4] + BGR_Arr[3] + BGR_Arr[2] + 
      +                          BGR_Arr[1] + BGR_Arr[0]);
 32545  0130D4  C6AE  F083         	movff	_B_PF_Avg$8203,___ftadd@f1
 32546  0130D8  C6AF  F084         	movff	_B_PF_Avg$8203+1,___ftadd@f1+1
 32547  0130DC  C6B0  F085         	movff	_B_PF_Avg$8203+2,___ftadd@f1+2
 32548  0130E0  C400  F086         	movff	_BGR_Arr,___ftadd@f2
 32549  0130E4  C401  F087         	movff	_BGR_Arr+1,___ftadd@f2+1
 32550  0130E8  C402  F088         	movff	_BGR_Arr+2,___ftadd@f2+2
 32551  0130EC  ECE4  F0AF         	call	___ftadd	;wreg free
 32552  0130F0  C083  F2E5         	movff	?___ftadd,_BGR_Avg
 32553  0130F4  C084  F2E6         	movff	?___ftadd+1,_BGR_Avg+1
 32554  0130F8  C085  F2E7         	movff	?___ftadd+2,_BGR_Avg+2
 32555                           
 32556                           ;Power_Meter.c: 588: BGR_Avg = (BGR_Avg / 30);
 32557  0130FC  C2E5  F09B         	movff	_BGR_Avg,___ftdiv@f1
 32558  013100  C2E6  F09C         	movff	_BGR_Avg+1,___ftdiv@f1+1
 32559  013104  C2E7  F09D         	movff	_BGR_Avg+2,___ftdiv@f1+2
 32560  013108  0E00               	movlw	0
 32561  01310A  0100               	movlb	0	; () banked
 32562  01310C  6F9E               	movwf	___ftdiv@f2& (0+255),b
 32563  01310E  0EF0               	movlw	240
 32564  013110  0100               	movlb	0	; () banked
 32565  013112  6F9F               	movwf	(___ftdiv@f2+1)& (0+255),b
 32566  013114  0E41               	movlw	65
 32567  013116  0100               	movlb	0	; () banked
 32568  013118  6FA0               	movwf	(___ftdiv@f2+2)& (0+255),b
 32569  01311A  EC89  F0BF         	call	___ftdiv	;wreg free
 32570  01311E  C09B  F2E5         	movff	?___ftdiv,_BGR_Avg
 32571  013122  C09C  F2E6         	movff	?___ftdiv+1,_BGR_Avg+1
 32572  013126  C09D  F2E7         	movff	?___ftdiv+2,_BGR_Avg+2
 32573                           
 32574                           ;Power_Meter.c: 589: B_Rad = ((BGR_Avg * 2 * 3.1412) - (0.523599));
 32575  01312A  0E09               	movlw	9
 32576  01312C  0100               	movlb	0	; () banked
 32577  01312E  6F6D               	movwf	___ftmul@f2& (0+255),b
 32578  013130  0EC9               	movlw	201
 32579  013132  0100               	movlb	0	; () banked
 32580  013134  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 32581  013136  0E40               	movlw	64
 32582  013138  0100               	movlb	0	; () banked
 32583  01313A  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 32584  01313C  C2E5  F06A         	movff	_BGR_Avg,___ftmul@f1
 32585  013140  C2E6  F06B         	movff	_BGR_Avg+1,___ftmul@f1+1
 32586  013144  C2E7  F06C         	movff	_BGR_Avg+2,___ftmul@f1+2
 32587  013148  EC83  F0BD         	call	___ftmul	;wreg free
 32588  01314C  C06A  F083         	movff	?___ftmul,___ftadd@f1
 32589  013150  C06B  F084         	movff	?___ftmul+1,___ftadd@f1+1
 32590  013154  C06C  F085         	movff	?___ftmul+2,___ftadd@f1+2
 32591  013158  0E0B               	movlw	11
 32592  01315A  0100               	movlb	0	; () banked
 32593  01315C  6F86               	movwf	___ftadd@f2& (0+255),b
 32594  01315E  0E06               	movlw	6
 32595  013160  0100               	movlb	0	; () banked
 32596  013162  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 32597  013164  0EBF               	movlw	191
 32598  013166  0100               	movlb	0	; () banked
 32599  013168  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 32600  01316A  ECE4  F0AF         	call	___ftadd	;wreg free
 32601  01316E  C083  F522         	movff	?___ftadd,_B_Rad
 32602  013172  C084  F523         	movff	?___ftadd+1,_B_Rad+1
 32603  013176  C085  F524         	movff	?___ftadd+2,_B_Rad+2
 32604                           
 32605                           ;Power_Meter.c: 590: B_Power_Factor = (cos(B_Rad));
 32606  01317A  C522  F0B7         	movff	_B_Rad,cos@f
 32607  01317E  C523  F0B8         	movff	_B_Rad+1,cos@f+1
 32608  013182  C524  F0B9         	movff	_B_Rad+2,cos@f+2
 32609  013186  ECCE  F0C8         	call	_cos	;wreg free
 32610  01318A  C0B7  F51F         	movff	?_cos,_B_Power_Factor
 32611  01318E  C0B8  F520         	movff	?_cos+1,_B_Power_Factor+1
 32612  013192  C0B9  F521         	movff	?_cos+2,_B_Power_Factor+2
 32613  013196  0012               	return		;funcret
 32614  013198                     __end_of_B_PF_Avg:
 32615                           	opt stack 0
 32616                           tblptru	equ	0xFF8
 32617                           tblptrh	equ	0xFF7
 32618                           tblptrl	equ	0xFF6
 32619                           tablat	equ	0xFF5
 32620                           prodh	equ	0xFF4
 32621                           prodl	equ	0xFF3
 32622                           intcon	equ	0xFF2
 32623                           postinc0	equ	0xFEE
 32624                           wreg	equ	0xFE8
 32625                           postdec1	equ	0xFE5
 32626                           fsr1h	equ	0xFE2
 32627                           fsr1l	equ	0xFE1
 32628                           indf2	equ	0xFDF
 32629                           postinc2	equ	0xFDE
 32630                           postdec2	equ	0xFDD
 32631                           fsr2h	equ	0xFDA
 32632                           fsr2l	equ	0xFD9
 32633                           status	equ	0xFD8
 32634                           
 32635 ;; *************** function _cos *****************
 32636 ;; Defined at:
 32637 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\cos.c"
 32638 ;; Parameters:    Size  Location     Type
 32639 ;;  f               3   87[BANK0 ] void 
 32640 ;; Auto vars:     Size  Location     Type
 32641 ;;		None
 32642 ;; Return value:  Size  Location     Type
 32643 ;;                  3   87[BANK0 ] void 
 32644 ;; Registers used:
 32645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32646 ;; Tracked objects:
 32647 ;;		On entry : 0/0
 32648 ;;		On exit  : 0/0
 32649 ;;		Unchanged: 0/0
 32650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32651 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32652 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32654 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32655 ;;Total ram usage:        6 bytes
 32656 ;; Hardware stack levels used:    1
 32657 ;; Hardware stack levels required when called:    7
 32658 ;; This function calls:
 32659 ;;		___ftadd
 32660 ;;		___ftge
 32661 ;;		_sin
 32662 ;; This function is called by:
 32663 ;;		_R_PF_Avg
 32664 ;;		_Y_PF_Avg
 32665 ;;		_B_PF_Avg
 32666 ;; This function uses a non-reentrant model
 32667 ;;
 32668                           
 32669                           	psect	text122
 32670  01919C                     __ptext122:
 32671                           	opt stack 0
 32672  01919C                     _cos:
 32673                           	opt stack 22
 32674                           
 32675                           ;incstack = 0
 32676  01919C  0E10               	movlw	16
 32677  01919E  0100               	movlb	0	; () banked
 32678  0191A0  6F8F               	movwf	___ftge@ff1& (0+255),b
 32679  0191A2  0E49               	movlw	73
 32680  0191A4  0100               	movlb	0	; () banked
 32681  0191A6  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 32682  0191A8  0E40               	movlw	64
 32683  0191AA  0100               	movlb	0	; () banked
 32684  0191AC  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 32685  0191AE  C0B7  F092         	movff	cos@f,___ftge@ff2
 32686  0191B2  C0B8  F093         	movff	cos@f+1,___ftge@ff2+1
 32687  0191B6  C0B9  F094         	movff	cos@f+2,___ftge@ff2+2
 32688  0191BA  EC09  F0C8         	call	___ftge	;wreg free
 32689  0191BE  0100               	movlb	0	; () banked
 32690  0191C0  B0D8               	btfsc	status,0,c
 32691  0191C2  D026               	goto	l21471
 32692                           
 32693                           ; BSR set to: 0
 32694  0191C4  C0B7  F083         	movff	cos@f,___ftadd@f1
 32695  0191C8  C0B8  F084         	movff	cos@f+1,___ftadd@f1+1
 32696  0191CC  C0B9  F085         	movff	cos@f+2,___ftadd@f1+2
 32697  0191D0  0ECC               	movlw	204
 32698  0191D2  0100               	movlb	0	; () banked
 32699  0191D4  6F86               	movwf	___ftadd@f2& (0+255),b
 32700  0191D6  0E96               	movlw	150
 32701  0191D8  0100               	movlb	0	; () banked
 32702  0191DA  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 32703  0191DC  0EC0               	movlw	192
 32704  0191DE  0100               	movlb	0	; () banked
 32705  0191E0  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 32706  0191E2  ECE4  F0AF         	call	___ftadd	;wreg free
 32707  0191E6  C083  F0BA         	movff	?___ftadd,_cos$8212
 32708  0191EA  C084  F0BB         	movff	?___ftadd+1,_cos$8212+1
 32709  0191EE  C085  F0BC         	movff	?___ftadd+2,_cos$8212+2
 32710  0191F2  C0BA  F0AA         	movff	_cos$8212,sin@f
 32711  0191F6  C0BB  F0AB         	movff	_cos$8212+1,sin@f+1
 32712  0191FA  C0BC  F0AC         	movff	_cos$8212+2,sin@f+2
 32713  0191FE  EC61  F0AD         	call	_sin	;wreg free
 32714  019202  C0AA  F0B7         	movff	?_sin,?_cos
 32715  019206  C0AB  F0B8         	movff	?_sin+1,?_cos+1
 32716  01920A  C0AC  F0B9         	movff	?_sin+2,?_cos+2
 32717  01920E  0012               	return	
 32718  019210                     l21471:
 32719  019210  C0B7  F083         	movff	cos@f,___ftadd@f1
 32720  019214  C0B8  F084         	movff	cos@f+1,___ftadd@f1+1
 32721  019218  C0B9  F085         	movff	cos@f+2,___ftadd@f1+2
 32722  01921C  0E10               	movlw	16
 32723  01921E  0100               	movlb	0	; () banked
 32724  019220  6F86               	movwf	___ftadd@f2& (0+255),b
 32725  019222  0EC9               	movlw	201
 32726  019224  0100               	movlb	0	; () banked
 32727  019226  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 32728  019228  0E3F               	movlw	63
 32729  01922A  0100               	movlb	0	; () banked
 32730  01922C  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 32731  01922E  ECE4  F0AF         	call	___ftadd	;wreg free
 32732  019232  C083  F0BA         	movff	?___ftadd,_cos$8212
 32733  019236  C084  F0BB         	movff	?___ftadd+1,_cos$8212+1
 32734  01923A  C085  F0BC         	movff	?___ftadd+2,_cos$8212+2
 32735  01923E  C0BA  F0AA         	movff	_cos$8212,sin@f
 32736  019242  C0BB  F0AB         	movff	_cos$8212+1,sin@f+1
 32737  019246  C0BC  F0AC         	movff	_cos$8212+2,sin@f+2
 32738  01924A  EC61  F0AD         	call	_sin	;wreg free
 32739  01924E  C0AA  F0B7         	movff	?_sin,?_cos
 32740  019252  C0AB  F0B8         	movff	?_sin+1,?_cos+1
 32741  019256  C0AC  F0B9         	movff	?_sin+2,?_cos+2
 32742  01925A  0012               	return	
 32743  01925C                     __end_of_cos:
 32744                           	opt stack 0
 32745                           tblptru	equ	0xFF8
 32746                           tblptrh	equ	0xFF7
 32747                           tblptrl	equ	0xFF6
 32748                           tablat	equ	0xFF5
 32749                           prodh	equ	0xFF4
 32750                           prodl	equ	0xFF3
 32751                           intcon	equ	0xFF2
 32752                           postinc0	equ	0xFEE
 32753                           wreg	equ	0xFE8
 32754                           postdec1	equ	0xFE5
 32755                           fsr1h	equ	0xFE2
 32756                           fsr1l	equ	0xFE1
 32757                           indf2	equ	0xFDF
 32758                           postinc2	equ	0xFDE
 32759                           postdec2	equ	0xFDD
 32760                           fsr2h	equ	0xFDA
 32761                           fsr2l	equ	0xFD9
 32762                           status	equ	0xFD8
 32763                           
 32764 ;; *************** function _sin *****************
 32765 ;; Defined at:
 32766 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\sin.c"
 32767 ;; Parameters:    Size  Location     Type
 32768 ;;  f               3   74[BANK0 ] void 
 32769 ;; Auto vars:     Size  Location     Type
 32770 ;;  x2              3   83[BANK0 ] void 
 32771 ;;  y               3   77[BANK0 ] void 
 32772 ;;  sgn             1   86[BANK0 ] unsigned char 
 32773 ;; Return value:  Size  Location     Type
 32774 ;;                  3   74[BANK0 ] unsigned char 
 32775 ;; Registers used:
 32776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32777 ;; Tracked objects:
 32778 ;;		On entry : 0/0
 32779 ;;		On exit  : 0/0
 32780 ;;		Unchanged: 0/0
 32781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32782 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32783 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32785 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32786 ;;Total ram usage:       13 bytes
 32787 ;; Hardware stack levels used:    1
 32788 ;; Hardware stack levels required when called:    6
 32789 ;; This function calls:
 32790 ;;		___ftadd
 32791 ;;		___ftdiv
 32792 ;;		___ftge
 32793 ;;		___ftmul
 32794 ;;		___ftneg
 32795 ;;		___ftsub
 32796 ;;		_eval_poly
 32797 ;;		_floor
 32798 ;; This function is called by:
 32799 ;;		_cos
 32800 ;; This function uses a non-reentrant model
 32801 ;;
 32802                           
 32803                           	psect	text123
 32804  015AC2                     __ptext123:
 32805                           	opt stack 0
 32806  015AC2                     _sin:
 32807                           	opt stack 22
 32808                           
 32809                           ;incstack = 0
 32810  015AC2  0E00               	movlw	0
 32811  015AC4  0100               	movlb	0	; () banked
 32812  015AC6  6FB6               	movwf	sin@sgn& (0+255),b
 32813                           
 32814                           ; BSR set to: 0
 32815  015AC8  0100               	movlb	0	; () banked
 32816  015ACA  AFAC               	btfss	(sin@f+2)& (0+255),7,b
 32817  015ACC  D011               	goto	l20927
 32818                           
 32819                           ; BSR set to: 0
 32820  015ACE  C0AA  F079         	movff	sin@f,___ftneg@f1
 32821  015AD2  C0AB  F07A         	movff	sin@f+1,___ftneg@f1+1
 32822  015AD6  C0AC  F07B         	movff	sin@f+2,___ftneg@f1+2
 32823  015ADA  ECE0  F0D3         	call	___ftneg	;wreg free
 32824  015ADE  C079  F0AA         	movff	?___ftneg,sin@f
 32825  015AE2  C07A  F0AB         	movff	?___ftneg+1,sin@f+1
 32826  015AE6  C07B  F0AC         	movff	?___ftneg+2,sin@f+2
 32827  015AEA  0E01               	movlw	1
 32828  015AEC  0100               	movlb	0	; () banked
 32829  015AEE  6FB6               	movwf	sin@sgn& (0+255),b
 32830  015AF0                     l20927:
 32831                           
 32832                           ; BSR set to: 0
 32833  015AF0  C0AA  F06A         	movff	sin@f,___ftmul@f1
 32834  015AF4  C0AB  F06B         	movff	sin@f+1,___ftmul@f1+1
 32835  015AF8  C0AC  F06C         	movff	sin@f+2,___ftmul@f1+2
 32836  015AFC  0EFA               	movlw	250
 32837  015AFE  0100               	movlb	0	; () banked
 32838  015B00  6F6D               	movwf	___ftmul@f2& (0+255),b
 32839  015B02  0E22               	movlw	34
 32840  015B04  0100               	movlb	0	; () banked
 32841  015B06  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 32842  015B08  0E3E               	movlw	62
 32843  015B0A  0100               	movlb	0	; () banked
 32844  015B0C  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 32845  015B0E  EC83  F0BD         	call	___ftmul	;wreg free
 32846  015B12  C06A  F0AA         	movff	?___ftmul,sin@f
 32847  015B16  C06B  F0AB         	movff	?___ftmul+1,sin@f+1
 32848  015B1A  C06C  F0AC         	movff	?___ftmul+2,sin@f+2
 32849  015B1E  C0AA  F0A1         	movff	sin@f,___ftsub@f1
 32850  015B22  C0AB  F0A2         	movff	sin@f+1,___ftsub@f1+1
 32851  015B26  C0AC  F0A3         	movff	sin@f+2,___ftsub@f1+2
 32852  015B2A  C0AA  F099         	movff	sin@f,floor@x
 32853  015B2E  C0AB  F09A         	movff	sin@f+1,floor@x+1
 32854  015B32  C0AC  F09B         	movff	sin@f+2,floor@x+2
 32855  015B36  EC99  F0C3         	call	_floor	;wreg free
 32856  015B3A  C099  F0A4         	movff	?_floor,___ftsub@f2
 32857  015B3E  C09A  F0A5         	movff	?_floor+1,___ftsub@f2+1
 32858  015B42  C09B  F0A6         	movff	?_floor+2,___ftsub@f2+2
 32859  015B46  ECA9  F0D2         	call	___ftsub	;wreg free
 32860  015B4A  C0A1  F0AA         	movff	?___ftsub,sin@f
 32861  015B4E  C0A2  F0AB         	movff	?___ftsub+1,sin@f+1
 32862  015B52  C0A3  F0AC         	movff	?___ftsub+2,sin@f+2
 32863  015B56  C0AA  F06A         	movff	sin@f,___ftmul@f1
 32864  015B5A  C0AB  F06B         	movff	sin@f+1,___ftmul@f1+1
 32865  015B5E  C0AC  F06C         	movff	sin@f+2,___ftmul@f1+2
 32866  015B62  0E00               	movlw	0
 32867  015B64  0100               	movlb	0	; () banked
 32868  015B66  6F6D               	movwf	___ftmul@f2& (0+255),b
 32869  015B68  0E80               	movlw	128
 32870  015B6A  0100               	movlb	0	; () banked
 32871  015B6C  6F6E               	movwf	(___ftmul@f2+1)& (0+255),b
 32872  015B6E  0E40               	movlw	64
 32873  015B70  0100               	movlb	0	; () banked
 32874  015B72  6F6F               	movwf	(___ftmul@f2+2)& (0+255),b
 32875  015B74  EC83  F0BD         	call	___ftmul	;wreg free
 32876  015B78  C06A  F0AA         	movff	?___ftmul,sin@f
 32877  015B7C  C06B  F0AB         	movff	?___ftmul+1,sin@f+1
 32878  015B80  C06C  F0AC         	movff	?___ftmul+2,sin@f+2
 32879  015B84  0E00               	movlw	0
 32880  015B86  0100               	movlb	0	; () banked
 32881  015B88  6F8F               	movwf	___ftge@ff1& (0+255),b
 32882  015B8A  0E00               	movlw	0
 32883  015B8C  0100               	movlb	0	; () banked
 32884  015B8E  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 32885  015B90  0E40               	movlw	64
 32886  015B92  0100               	movlb	0	; () banked
 32887  015B94  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 32888  015B96  C0AA  F092         	movff	sin@f,___ftge@ff2
 32889  015B9A  C0AB  F093         	movff	sin@f+1,___ftge@ff2+1
 32890  015B9E  C0AC  F094         	movff	sin@f+2,___ftge@ff2+2
 32891  015BA2  EC09  F0C8         	call	___ftge	;wreg free
 32892  015BA6  0100               	movlb	0	; () banked
 32893  015BA8  B0D8               	btfsc	status,0,c
 32894  015BAA  D021               	goto	l20939
 32895                           
 32896                           ; BSR set to: 0
 32897  015BAC  C0AA  F0A1         	movff	sin@f,___ftsub@f1
 32898  015BB0  C0AB  F0A2         	movff	sin@f+1,___ftsub@f1+1
 32899  015BB4  C0AC  F0A3         	movff	sin@f+2,___ftsub@f1+2
 32900  015BB8  0E00               	movlw	0
 32901  015BBA  0100               	movlb	0	; () banked
 32902  015BBC  6FA4               	movwf	___ftsub@f2& (0+255),b
 32903  015BBE  0E00               	movlw	0
 32904  015BC0  0100               	movlb	0	; () banked
 32905  015BC2  6FA5               	movwf	(___ftsub@f2+1)& (0+255),b
 32906  015BC4  0E40               	movlw	64
 32907  015BC6  0100               	movlb	0	; () banked
 32908  015BC8  6FA6               	movwf	(___ftsub@f2+2)& (0+255),b
 32909  015BCA  ECA9  F0D2         	call	___ftsub	;wreg free
 32910  015BCE  C0A1  F0AA         	movff	?___ftsub,sin@f
 32911  015BD2  C0A2  F0AB         	movff	?___ftsub+1,sin@f+1
 32912  015BD6  C0A3  F0AC         	movff	?___ftsub+2,sin@f+2
 32913  015BDA  0100               	movlb	0	; () banked
 32914  015BDC  51B6               	movf	sin@sgn& (0+255),w,b
 32915  015BDE  0100               	movlb	0	; () banked
 32916  015BE0  A4D8               	btfss	status,2,c
 32917  015BE2  D002               	goto	u14640
 32918  015BE4  0E01               	movlw	1
 32919  015BE6  D001               	goto	u14650
 32920  015BE8                     u14640:
 32921  015BE8  0E00               	movlw	0
 32922  015BEA                     u14650:
 32923  015BEA  0100               	movlb	0	; () banked
 32924  015BEC  6FB6               	movwf	sin@sgn& (0+255),b
 32925  015BEE                     l20939:
 32926                           
 32927                           ; BSR set to: 0
 32928  015BEE  0E00               	movlw	0
 32929  015BF0  0100               	movlb	0	; () banked
 32930  015BF2  6F8F               	movwf	___ftge@ff1& (0+255),b
 32931  015BF4  0E80               	movlw	128
 32932  015BF6  0100               	movlb	0	; () banked
 32933  015BF8  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 32934  015BFA  0E3F               	movlw	63
 32935  015BFC  0100               	movlb	0	; () banked
 32936  015BFE  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 32937  015C00  C0AA  F092         	movff	sin@f,___ftge@ff2
 32938  015C04  C0AB  F093         	movff	sin@f+1,___ftge@ff2+1
 32939  015C08  C0AC  F094         	movff	sin@f+2,___ftge@ff2+2
 32940  015C0C  EC09  F0C8         	call	___ftge	;wreg free
 32941  015C10  0100               	movlb	0	; () banked
 32942  015C12  B0D8               	btfsc	status,0,c
 32943  015C14  D01F               	goto	l10930
 32944                           
 32945                           ; BSR set to: 0
 32946  015C16  C0AA  F079         	movff	sin@f,___ftneg@f1
 32947  015C1A  C0AB  F07A         	movff	sin@f+1,___ftneg@f1+1
 32948  015C1E  C0AC  F07B         	movff	sin@f+2,___ftneg@f1+2
 32949  015C22  ECE0  F0D3         	call	___ftneg	;wreg free
 32950  015C26  C079  F083         	movff	?___ftneg,___ftadd@f1
 32951  015C2A  C07A  F084         	movff	?___ftneg+1,___ftadd@f1+1
 32952  015C2E  C07B  F085         	movff	?___ftneg+2,___ftadd@f1+2
 32953  015C32  0E00               	movlw	0
 32954  015C34  0100               	movlb	0	; () banked
 32955  015C36  6F86               	movwf	___ftadd@f2& (0+255),b
 32956  015C38  0E00               	movlw	0
 32957  015C3A  0100               	movlb	0	; () banked
 32958  015C3C  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 32959  015C3E  0E40               	movlw	64
 32960  015C40  0100               	movlb	0	; () banked
 32961  015C42  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 32962  015C44  ECE4  F0AF         	call	___ftadd	;wreg free
 32963  015C48  C083  F0AA         	movff	?___ftadd,sin@f
 32964  015C4C  C084  F0AB         	movff	?___ftadd+1,sin@f+1
 32965  015C50  C085  F0AC         	movff	?___ftadd+2,sin@f+2
 32966  015C54                     l10930:
 32967  015C54  C0AA  F06A         	movff	sin@f,___ftmul@f1
 32968  015C58  C0AB  F06B         	movff	sin@f+1,___ftmul@f1+1
 32969  015C5C  C0AC  F06C         	movff	sin@f+2,___ftmul@f1+2
 32970  015C60  C0AA  F06D         	movff	sin@f,___ftmul@f2
 32971  015C64  C0AB  F06E         	movff	sin@f+1,___ftmul@f2+1
 32972  015C68  C0AC  F06F         	movff	sin@f+2,___ftmul@f2+2
 32973  015C6C  EC83  F0BD         	call	___ftmul	;wreg free
 32974  015C70  C06A  F0B3         	movff	?___ftmul,sin@x2
 32975  015C74  C06B  F0B4         	movff	?___ftmul+1,sin@x2+1
 32976  015C78  C06C  F0B5         	movff	?___ftmul+2,sin@x2+2
 32977  015C7C  C0B3  F08F         	movff	sin@x2,eval_poly@x
 32978  015C80  C0B4  F090         	movff	sin@x2+1,eval_poly@x+1
 32979  015C84  C0B5  F091         	movff	sin@x2+2,eval_poly@x+2
 32980  015C88  0EFE               	movlw	low sin@coeff_b
 32981  015C8A  0100               	movlb	0	; () banked
 32982  015C8C  6F92               	movwf	eval_poly@d& (0+255),b
 32983  015C8E  0EFB               	movlw	high sin@coeff_b
 32984  015C90  0100               	movlb	0	; () banked
 32985  015C92  6F93               	movwf	(eval_poly@d+1)& (0+255),b
 32986  015C94  0E00               	movlw	0
 32987  015C96  0100               	movlb	0	; () banked
 32988  015C98  6F95               	movwf	(eval_poly@n+1)& (0+255),b
 32989  015C9A  0E03               	movlw	3
 32990  015C9C  6F94               	movwf	eval_poly@n& (0+255),b
 32991  015C9E  EC0E  F0C5         	call	_eval_poly	;wreg free
 32992  015CA2  C08F  F0AD         	movff	?_eval_poly,sin@y
 32993  015CA6  C090  F0AE         	movff	?_eval_poly+1,sin@y+1
 32994  015CAA  C091  F0AF         	movff	?_eval_poly+2,sin@y+2
 32995  015CAE  C0AD  F09E         	movff	sin@y,___ftdiv@f2
 32996  015CB2  C0AE  F09F         	movff	sin@y+1,___ftdiv@f2+1
 32997  015CB6  C0AF  F0A0         	movff	sin@y+2,___ftdiv@f2+2
 32998  015CBA  0E00               	movlw	0
 32999  015CBC  0100               	movlb	0	; () banked
 33000  015CBE  6F95               	movwf	(eval_poly@n+1)& (0+255),b
 33001  015CC0  0E04               	movlw	4
 33002  015CC2  6F94               	movwf	eval_poly@n& (0+255),b
 33003  015CC4  0EEF               	movlw	low sin@coeff_a
 33004  015CC6  0100               	movlb	0	; () banked
 33005  015CC8  6F92               	movwf	eval_poly@d& (0+255),b
 33006  015CCA  0EFB               	movlw	high sin@coeff_a
 33007  015CCC  0100               	movlb	0	; () banked
 33008  015CCE  6F93               	movwf	(eval_poly@d+1)& (0+255),b
 33009  015CD0  C0B3  F08F         	movff	sin@x2,eval_poly@x
 33010  015CD4  C0B4  F090         	movff	sin@x2+1,eval_poly@x+1
 33011  015CD8  C0B5  F091         	movff	sin@x2+2,eval_poly@x+2
 33012  015CDC  EC0E  F0C5         	call	_eval_poly	;wreg free
 33013  015CE0  C08F  F09B         	movff	?_eval_poly,___ftdiv@f1
 33014  015CE4  C090  F09C         	movff	?_eval_poly+1,___ftdiv@f1+1
 33015  015CE8  C091  F09D         	movff	?_eval_poly+2,___ftdiv@f1+2
 33016  015CEC  EC89  F0BF         	call	___ftdiv	;wreg free
 33017  015CF0  C09B  F0B0         	movff	?___ftdiv,_sin$8213
 33018  015CF4  C09C  F0B1         	movff	?___ftdiv+1,_sin$8213+1
 33019  015CF8  C09D  F0B2         	movff	?___ftdiv+2,_sin$8213+2
 33020  015CFC  C0AA  F06A         	movff	sin@f,___ftmul@f1
 33021  015D00  C0AB  F06B         	movff	sin@f+1,___ftmul@f1+1
 33022  015D04  C0AC  F06C         	movff	sin@f+2,___ftmul@f1+2
 33023  015D08  C0B0  F06D         	movff	_sin$8213,___ftmul@f2
 33024  015D0C  C0B1  F06E         	movff	_sin$8213+1,___ftmul@f2+1
 33025  015D10  C0B2  F06F         	movff	_sin$8213+2,___ftmul@f2+2
 33026  015D14  EC83  F0BD         	call	___ftmul	;wreg free
 33027  015D18  C06A  F0AA         	movff	?___ftmul,sin@f
 33028  015D1C  C06B  F0AB         	movff	?___ftmul+1,sin@f+1
 33029  015D20  C06C  F0AC         	movff	?___ftmul+2,sin@f+2
 33030  015D24  0100               	movlb	0	; () banked
 33031  015D26  51B6               	movf	sin@sgn& (0+255),w,b
 33032  015D28  0100               	movlb	0	; () banked
 33033  015D2A  B4D8               	btfsc	status,2,c
 33034  015D2C  D00F               	goto	l10931
 33035                           
 33036                           ; BSR set to: 0
 33037  015D2E  C0AA  F079         	movff	sin@f,___ftneg@f1
 33038  015D32  C0AB  F07A         	movff	sin@f+1,___ftneg@f1+1
 33039  015D36  C0AC  F07B         	movff	sin@f+2,___ftneg@f1+2
 33040  015D3A  ECE0  F0D3         	call	___ftneg	;wreg free
 33041  015D3E  C079  F0AA         	movff	?___ftneg,?_sin
 33042  015D42  C07A  F0AB         	movff	?___ftneg+1,?_sin+1
 33043  015D46  C07B  F0AC         	movff	?___ftneg+2,?_sin+2
 33044  015D4A  0012               	return	
 33045  015D4C                     l10931:
 33046                           
 33047                           ; BSR set to: 0
 33048  015D4C  C0AA  F0AA         	movff	sin@f,?_sin
 33049  015D50  C0AB  F0AB         	movff	sin@f+1,?_sin+1
 33050  015D54  C0AC  F0AC         	movff	sin@f+2,?_sin+2
 33051  015D58  0012               	return		;funcret
 33052  015D5A                     __end_of_sin:
 33053                           	opt stack 0
 33054                           tblptru	equ	0xFF8
 33055                           tblptrh	equ	0xFF7
 33056                           tblptrl	equ	0xFF6
 33057                           tablat	equ	0xFF5
 33058                           prodh	equ	0xFF4
 33059                           prodl	equ	0xFF3
 33060                           intcon	equ	0xFF2
 33061                           postinc0	equ	0xFEE
 33062                           wreg	equ	0xFE8
 33063                           postdec1	equ	0xFE5
 33064                           fsr1h	equ	0xFE2
 33065                           fsr1l	equ	0xFE1
 33066                           indf2	equ	0xFDF
 33067                           postinc2	equ	0xFDE
 33068                           postdec2	equ	0xFDD
 33069                           fsr2h	equ	0xFDA
 33070                           fsr2l	equ	0xFD9
 33071                           status	equ	0xFD8
 33072                           
 33073 ;; *************** function _floor *****************
 33074 ;; Defined at:
 33075 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\floor.c"
 33076 ;; Parameters:    Size  Location     Type
 33077 ;;  x               3   57[BANK0 ] unsigned char 
 33078 ;; Auto vars:     Size  Location     Type
 33079 ;;  i               3   60[BANK0 ] unsigned char 
 33080 ;;  expon           2   63[BANK0 ] int 
 33081 ;; Return value:  Size  Location     Type
 33082 ;;                  3   57[BANK0 ] int 
 33083 ;; Registers used:
 33084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 33085 ;; Tracked objects:
 33086 ;;		On entry : 0/0
 33087 ;;		On exit  : 0/0
 33088 ;;		Unchanged: 0/0
 33089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33090 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33091 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33093 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33094 ;;Total ram usage:        8 bytes
 33095 ;; Hardware stack levels used:    1
 33096 ;; Hardware stack levels required when called:    5
 33097 ;; This function calls:
 33098 ;;		___altoft
 33099 ;;		___ftadd
 33100 ;;		___ftge
 33101 ;;		___fttol
 33102 ;;		_frexp
 33103 ;; This function is called by:
 33104 ;;		_sin
 33105 ;; This function uses a non-reentrant model
 33106 ;;
 33107                           
 33108                           	psect	text124
 33109  018732                     __ptext124:
 33110                           	opt stack 0
 33111  018732                     _floor:
 33112                           	opt stack 22
 33113                           
 33114                           ;incstack = 0
 33115  018732  C099  F01D         	movff	floor@x,frexp@value
 33116  018736  C09A  F01E         	movff	floor@x+1,frexp@value+1
 33117  01873A  C09B  F01F         	movff	floor@x+2,frexp@value+2
 33118  01873E  0E9F               	movlw	low floor@expon
 33119  018740  6E20               	movwf	frexp@eptr,c
 33120  018742  0E00               	movlw	high floor@expon
 33121  018744  6E21               	movwf	frexp@eptr+1,c
 33122  018746  ECBA  F0CF         	call	_frexp	;wreg free
 33123  01874A  0100               	movlb	0	; () banked
 33124  01874C  AFA0               	btfss	(floor@expon+1)& (0+255),7,b
 33125  01874E  D017               	goto	l20317
 33126                           
 33127                           ; BSR set to: 0
 33128  018750  0100               	movlb	0	; () banked
 33129  018752  AF9B               	btfss	(floor@x+2)& (0+255),7,b
 33130  018754  D00A               	goto	l20313
 33131                           
 33132                           ; BSR set to: 0
 33133  018756  0E00               	movlw	0
 33134  018758  0100               	movlb	0	; () banked
 33135  01875A  6F99               	movwf	?_floor& (0+255),b
 33136  01875C  0E80               	movlw	128
 33137  01875E  0100               	movlb	0	; () banked
 33138  018760  6F9A               	movwf	(?_floor+1)& (0+255),b
 33139  018762  0EBF               	movlw	191
 33140  018764  0100               	movlb	0	; () banked
 33141  018766  6F9B               	movwf	(?_floor+2)& (0+255),b
 33142                           
 33143                           ; BSR set to: 0
 33144  018768  0012               	return	
 33145  01876A                     l20313:
 33146                           
 33147                           ; BSR set to: 0
 33148  01876A  0E00               	movlw	0
 33149  01876C  0100               	movlb	0	; () banked
 33150  01876E  6F99               	movwf	?_floor& (0+255),b
 33151  018770  0E00               	movlw	0
 33152  018772  0100               	movlb	0	; () banked
 33153  018774  6F9A               	movwf	(?_floor+1)& (0+255),b
 33154  018776  0E00               	movlw	0
 33155  018778  0100               	movlb	0	; () banked
 33156  01877A  6F9B               	movwf	(?_floor+2)& (0+255),b
 33157                           
 33158                           ; BSR set to: 0
 33159  01877C  0012               	return	
 33160  01877E                     l20317:
 33161                           
 33162                           ; BSR set to: 0
 33163  01877E  0100               	movlb	0	; () banked
 33164  018780  51A0               	movf	(floor@expon+1)& (0+255),w,b
 33165  018782  E105               	bnz	u13760
 33166  018784  0E15               	movlw	21
 33167  018786  0100               	movlb	0	; () banked
 33168  018788  5D9F               	subwf	floor@expon& (0+255),w,b
 33169  01878A  A0D8               	btfss	status,0,c
 33170  01878C  D007               	goto	l20321
 33171  01878E                     u13760:
 33172                           
 33173                           ; BSR set to: 0
 33174  01878E  C099  F099         	movff	floor@x,?_floor
 33175  018792  C09A  F09A         	movff	floor@x+1,?_floor+1
 33176  018796  C09B  F09B         	movff	floor@x+2,?_floor+2
 33177  01879A  0012               	return	
 33178  01879C                     l20321:
 33179                           
 33180                           ; BSR set to: 0
 33181  01879C  C099  F080         	movff	floor@x,___fttol@f1
 33182  0187A0  C09A  F081         	movff	floor@x+1,___fttol@f1+1
 33183  0187A4  C09B  F082         	movff	floor@x+2,___fttol@f1+2
 33184  0187A8  ECD3  F0C0         	call	___fttol	;wreg free
 33185  0187AC  C080  F08F         	movff	?___fttol,___altoft@c
 33186  0187B0  C081  F090         	movff	?___fttol+1,___altoft@c+1
 33187  0187B4  C082  F091         	movff	?___fttol+2,___altoft@c+2
 33188  0187B8  C083  F092         	movff	?___fttol+3,___altoft@c+3
 33189  0187BC  EC47  F0CD         	call	___altoft	;wreg free
 33190  0187C0  C08F  F09C         	movff	?___altoft,floor@i
 33191  0187C4  C090  F09D         	movff	?___altoft+1,floor@i+1
 33192  0187C8  C091  F09E         	movff	?___altoft+2,floor@i+2
 33193  0187CC  C099  F08F         	movff	floor@x,___ftge@ff1
 33194  0187D0  C09A  F090         	movff	floor@x+1,___ftge@ff1+1
 33195  0187D4  C09B  F091         	movff	floor@x+2,___ftge@ff1+2
 33196  0187D8  C09C  F092         	movff	floor@i,___ftge@ff2
 33197  0187DC  C09D  F093         	movff	floor@i+1,___ftge@ff2+1
 33198  0187E0  C09E  F094         	movff	floor@i+2,___ftge@ff2+2
 33199  0187E4  EC09  F0C8         	call	___ftge	;wreg free
 33200  0187E8  0100               	movlb	0	; () banked
 33201  0187EA  B0D8               	btfsc	status,0,c
 33202  0187EC  D018               	goto	l11097
 33203                           
 33204                           ; BSR set to: 0
 33205  0187EE  C09C  F083         	movff	floor@i,___ftadd@f1
 33206  0187F2  C09D  F084         	movff	floor@i+1,___ftadd@f1+1
 33207  0187F6  C09E  F085         	movff	floor@i+2,___ftadd@f1+2
 33208  0187FA  0E00               	movlw	0
 33209  0187FC  0100               	movlb	0	; () banked
 33210  0187FE  6F86               	movwf	___ftadd@f2& (0+255),b
 33211  018800  0E80               	movlw	128
 33212  018802  0100               	movlb	0	; () banked
 33213  018804  6F87               	movwf	(___ftadd@f2+1)& (0+255),b
 33214  018806  0EBF               	movlw	191
 33215  018808  0100               	movlb	0	; () banked
 33216  01880A  6F88               	movwf	(___ftadd@f2+2)& (0+255),b
 33217  01880C  ECE4  F0AF         	call	___ftadd	;wreg free
 33218  018810  C083  F099         	movff	?___ftadd,?_floor
 33219  018814  C084  F09A         	movff	?___ftadd+1,?_floor+1
 33220  018818  C085  F09B         	movff	?___ftadd+2,?_floor+2
 33221  01881C  0012               	return	
 33222  01881E                     l11097:
 33223                           
 33224                           ; BSR set to: 0
 33225  01881E  C09C  F099         	movff	floor@i,?_floor
 33226  018822  C09D  F09A         	movff	floor@i+1,?_floor+1
 33227  018826  C09E  F09B         	movff	floor@i+2,?_floor+2
 33228  01882A  0012               	return		;funcret
 33229  01882C                     __end_of_floor:
 33230                           	opt stack 0
 33231                           tblptru	equ	0xFF8
 33232                           tblptrh	equ	0xFF7
 33233                           tblptrl	equ	0xFF6
 33234                           tablat	equ	0xFF5
 33235                           prodh	equ	0xFF4
 33236                           prodl	equ	0xFF3
 33237                           intcon	equ	0xFF2
 33238                           postinc0	equ	0xFEE
 33239                           wreg	equ	0xFE8
 33240                           postdec1	equ	0xFE5
 33241                           fsr1h	equ	0xFE2
 33242                           fsr1l	equ	0xFE1
 33243                           indf2	equ	0xFDF
 33244                           postinc2	equ	0xFDE
 33245                           postdec2	equ	0xFDD
 33246                           fsr2h	equ	0xFDA
 33247                           fsr2l	equ	0xFD9
 33248                           status	equ	0xFD8
 33249                           
 33250 ;; *************** function _frexp *****************
 33251 ;; Defined at:
 33252 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
 33253 ;; Parameters:    Size  Location     Type
 33254 ;;  value           3   28[COMRAM] int 
 33255 ;;  eptr            2   31[COMRAM] PTR int 
 33256 ;;		 -> floor@expon(2), 
 33257 ;; Auto vars:     Size  Location     Type
 33258 ;;		None
 33259 ;; Return value:  Size  Location     Type
 33260 ;;                  3   28[COMRAM] PTR int 
 33261 ;; Registers used:
 33262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 33263 ;; Tracked objects:
 33264 ;;		On entry : 0/0
 33265 ;;		On exit  : 0/0
 33266 ;;		Unchanged: 0/0
 33267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33268 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33271 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33272 ;;Total ram usage:        7 bytes
 33273 ;; Hardware stack levels used:    1
 33274 ;; Hardware stack levels required when called:    3
 33275 ;; This function calls:
 33276 ;;		Nothing
 33277 ;; This function is called by:
 33278 ;;		_floor
 33279 ;; This function uses a non-reentrant model
 33280 ;;
 33281                           
 33282                           	psect	text125
 33283  019F74                     __ptext125:
 33284                           	opt stack 0
 33285  019F74                     _frexp:
 33286                           	opt stack 23
 33287                           
 33288                           ;incstack = 0
 33289  019F74  501D               	movf	frexp@value,w,c
 33290  019F76  101E               	iorwf	frexp@value+1,w,c
 33291  019F78  101F               	iorwf	frexp@value+2,w,c
 33292  019F7A  A4D8               	btfss	status,2,c
 33293  019F7C  D009               	goto	l19931
 33294  019F7E  C020  FFD9         	movff	frexp@eptr,fsr2l
 33295  019F82  C021  FFDA         	movff	frexp@eptr+1,fsr2h
 33296  019F86  0E00               	movlw	0
 33297  019F88  6EDE               	movwf	postinc2,c
 33298  019F8A  0E00               	movlw	0
 33299  019F8C  6EDD               	movwf	postdec2,c
 33300                           
 33301                           ;	Return value of _frexp is never used
 33302  019F8E  0012               	return	
 33303  019F90                     l19931:
 33304  019F90  501F               	movf	frexp@value+2,w,c
 33305  019F92  0B7F               	andlw	127
 33306  019F94  6E22               	movwf	??_frexp& (0+255),c
 33307  019F96  6A23               	clrf	(??_frexp+1)& (0+255),c
 33308  019F98  90D8               	bcf	status,0,c
 33309  019F9A  3622               	rlcf	??_frexp,f,c
 33310  019F9C  3623               	rlcf	??_frexp+1,f,c
 33311  019F9E  C020  FFD9         	movff	frexp@eptr,fsr2l
 33312  019FA2  C021  FFDA         	movff	frexp@eptr+1,fsr2h
 33313  019FA6  C022  FFDE         	movff	??_frexp,postinc2
 33314  019FAA  C023  FFDD         	movff	??_frexp+1,postdec2
 33315  019FAE  AE1E               	btfss	frexp@value+1,7,c
 33316  019FB0  D003               	goto	u13080
 33317  019FB2  6A22               	clrf	??_frexp& (0+255),c
 33318  019FB4  2A22               	incf	??_frexp& (0+255),f,c
 33319  019FB6  D001               	goto	u13088
 33320  019FB8                     u13080:
 33321  019FB8  6A22               	clrf	??_frexp& (0+255),c
 33322  019FBA                     u13088:
 33323  019FBA  5022               	movf	??_frexp,w,c
 33324  019FBC  C020  FFD9         	movff	frexp@eptr,fsr2l
 33325  019FC0  C021  FFDA         	movff	frexp@eptr+1,fsr2h
 33326  019FC4  12DE               	iorwf	postinc2,f,c
 33327  019FC6  0E00               	movlw	0
 33328  019FC8  12DD               	iorwf	postdec2,f,c
 33329  019FCA  C020  FFD9         	movff	frexp@eptr,fsr2l
 33330  019FCE  C021  FFDA         	movff	frexp@eptr+1,fsr2h
 33331  019FD2  0E82               	movlw	130
 33332  019FD4  26DE               	addwf	postinc2,f,c
 33333  019FD6  0EFF               	movlw	255
 33334  019FD8  22DD               	addwfc	postdec2,f,c
 33335  019FDA  801F               	bsf	frexp@value+2,0,c
 33336  019FDC  821F               	bsf	frexp@value+2,1,c
 33337  019FDE  841F               	bsf	frexp@value+2,2,c
 33338  019FE0  861F               	bsf	frexp@value+2,3,c
 33339  019FE2  881F               	bsf	frexp@value+2,4,c
 33340  019FE4  8A1F               	bsf	frexp@value+2,5,c
 33341  019FE6  9C1F               	bcf	frexp@value+2,6,c
 33342  019FE8  9E1E               	bcf	frexp@value+1,7,c
 33343  019FEA  0012               	return	
 33344  019FEC                     __end_of_frexp:
 33345                           	opt stack 0
 33346                           tblptru	equ	0xFF8
 33347                           tblptrh	equ	0xFF7
 33348                           tblptrl	equ	0xFF6
 33349                           tablat	equ	0xFF5
 33350                           prodh	equ	0xFF4
 33351                           prodl	equ	0xFF3
 33352                           intcon	equ	0xFF2
 33353                           postinc0	equ	0xFEE
 33354                           wreg	equ	0xFE8
 33355                           postdec1	equ	0xFE5
 33356                           fsr1h	equ	0xFE2
 33357                           fsr1l	equ	0xFE1
 33358                           indf2	equ	0xFDF
 33359                           postinc2	equ	0xFDE
 33360                           postdec2	equ	0xFDD
 33361                           fsr2h	equ	0xFDA
 33362                           fsr2l	equ	0xFD9
 33363                           status	equ	0xFD8
 33364                           
 33365 ;; *************** function ___fttol *****************
 33366 ;; Defined at:
 33367 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 33368 ;; Parameters:    Size  Location     Type
 33369 ;;  f1              3   32[BANK0 ] float 
 33370 ;; Auto vars:     Size  Location     Type
 33371 ;;  lval            4   42[BANK0 ] unsigned long 
 33372 ;;  exp1            1   46[BANK0 ] unsigned char 
 33373 ;;  sign1           1   41[BANK0 ] unsigned char 
 33374 ;; Return value:  Size  Location     Type
 33375 ;;                  4   32[BANK0 ] long 
 33376 ;; Registers used:
 33377 ;;		wreg, status,2, status,0
 33378 ;; Tracked objects:
 33379 ;;		On entry : 0/0
 33380 ;;		On exit  : 0/0
 33381 ;;		Unchanged: 0/0
 33382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33383 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33384 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33385 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33386 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33387 ;;Total ram usage:       15 bytes
 33388 ;; Hardware stack levels used:    1
 33389 ;; Hardware stack levels required when called:    3
 33390 ;; This function calls:
 33391 ;;		Nothing
 33392 ;; This function is called by:
 33393 ;;		_Generator_RPM_Cal
 33394 ;;		_printf
 33395 ;;		_floor
 33396 ;; This function uses a non-reentrant model
 33397 ;;
 33398                           
 33399                           	psect	text126
 33400  0181A6                     __ptext126:
 33401                           	opt stack 0
 33402  0181A6                     ___fttol:
 33403                           	opt stack 23
 33404                           
 33405                           ;incstack = 0
 33406  0181A6  C082  F084         	movff	___fttol@f1+2,??___fttol
 33407  0181AA  0100               	movlb	0	; () banked
 33408  0181AC  6B85               	clrf	(??___fttol+1)& (0+255),b
 33409  0181AE  6B86               	clrf	(??___fttol+2)& (0+255),b
 33410  0181B0  0100               	movlb	0	; () banked
 33411  0181B2  3581               	rlcf	(___fttol@f1+1)& (0+255),w,b
 33412  0181B4  0100               	movlb	0	; () banked
 33413  0181B6  3784               	rlcf	??___fttol& (0+255),f,b
 33414  0181B8  E301               	bnc	u12921
 33415  0181BA  8185               	bsf	(??___fttol+1)& (0+255),0,b
 33416  0181BC                     u12921:
 33417  0181BC  0100               	movlb	0	; () banked
 33418  0181BE  5184               	movf	??___fttol& (0+255),w,b
 33419  0181C0  0100               	movlb	0	; () banked
 33420  0181C2  6F8E               	movwf	___fttol@exp1& (0+255),b
 33421  0181C4  0100               	movlb	0	; () banked
 33422  0181C6  518E               	movf	___fttol@exp1& (0+255),w,b
 33423  0181C8  A4D8               	btfss	status,2,c
 33424  0181CA  D00A               	goto	l19837
 33425                           
 33426                           ; BSR set to: 0
 33427  0181CC  0E00               	movlw	0
 33428  0181CE  0100               	movlb	0	; () banked
 33429  0181D0  6F80               	movwf	?___fttol& (0+255),b
 33430  0181D2  0E00               	movlw	0
 33431  0181D4  6F81               	movwf	(?___fttol+1)& (0+255),b
 33432  0181D6  0E00               	movlw	0
 33433  0181D8  6F82               	movwf	(?___fttol+2)& (0+255),b
 33434  0181DA  0E00               	movlw	0
 33435  0181DC  6F83               	movwf	(?___fttol+3)& (0+255),b
 33436                           
 33437                           ; BSR set to: 0
 33438  0181DE  0012               	return	
 33439  0181E0                     l19837:
 33440                           
 33441                           ; BSR set to: 0
 33442  0181E0  0E17               	movlw	23
 33443  0181E2  0100               	movlb	0	; () banked
 33444  0181E4  6F84               	movwf	??___fttol& (0+255),b
 33445  0181E6  C080  F085         	movff	___fttol@f1,??___fttol+1
 33446  0181EA  C081  F086         	movff	___fttol@f1+1,??___fttol+2
 33447  0181EE  C082  F087         	movff	___fttol@f1+2,??___fttol+3
 33448  0181F2  0100               	movlb	0	; () banked
 33449  0181F4  2984               	incf	??___fttol& (0+255),w,b
 33450  0181F6  0100               	movlb	0	; () banked
 33451  0181F8  6F88               	movwf	(??___fttol+4)& (0+255),b
 33452  0181FA  D005               	goto	u12940
 33453  0181FC                     u12945:
 33454  0181FC  0100               	movlb	0	; () banked
 33455  0181FE  90D8               	bcf	status,0,c
 33456  018200  3387               	rrcf	(??___fttol+3)& (0+255),f,b
 33457  018202  3386               	rrcf	(??___fttol+2)& (0+255),f,b
 33458  018204  3385               	rrcf	(??___fttol+1)& (0+255),f,b
 33459  018206                     u12940:
 33460  018206  0100               	movlb	0	; () banked
 33461  018208  2F88               	decfsz	(??___fttol+4)& (0+255),f,b
 33462  01820A  D7F8               	goto	u12945
 33463  01820C  0100               	movlb	0	; () banked
 33464  01820E  5185               	movf	(??___fttol+1)& (0+255),w,b
 33465  018210  0100               	movlb	0	; () banked
 33466  018212  6F89               	movwf	___fttol@sign1& (0+255),b
 33467                           
 33468                           ; BSR set to: 0
 33469  018214  0100               	movlb	0	; () banked
 33470  018216  8F81               	bsf	(___fttol@f1+1)& (0+255),7,b
 33471                           
 33472                           ; BSR set to: 0
 33473  018218  0EFF               	movlw	255
 33474  01821A  0100               	movlb	0	; () banked
 33475  01821C  1780               	andwf	___fttol@f1& (0+255),f,b
 33476  01821E  0EFF               	movlw	255
 33477  018220  0100               	movlb	0	; () banked
 33478  018222  1781               	andwf	(___fttol@f1+1)& (0+255),f,b
 33479  018224  0E00               	movlw	0
 33480  018226  0100               	movlb	0	; () banked
 33481  018228  1782               	andwf	(___fttol@f1+2)& (0+255),f,b
 33482                           
 33483                           ; BSR set to: 0
 33484  01822A  0100               	movlb	0	; () banked
 33485  01822C  5180               	movf	___fttol@f1& (0+255),w,b
 33486  01822E  0100               	movlb	0	; () banked
 33487  018230  6F8A               	movwf	___fttol@lval& (0+255),b
 33488  018232  0100               	movlb	0	; () banked
 33489  018234  5181               	movf	(___fttol@f1+1)& (0+255),w,b
 33490  018236  0100               	movlb	0	; () banked
 33491  018238  6F8B               	movwf	(___fttol@lval+1)& (0+255),b
 33492  01823A  0100               	movlb	0	; () banked
 33493  01823C  5182               	movf	(___fttol@f1+2)& (0+255),w,b
 33494  01823E  0100               	movlb	0	; () banked
 33495  018240  6F8C               	movwf	(___fttol@lval+2)& (0+255),b
 33496  018242  0100               	movlb	0	; () banked
 33497  018244  6B8D               	clrf	(___fttol@lval+3)& (0+255),b
 33498                           
 33499                           ; BSR set to: 0
 33500  018246  0E8E               	movlw	142
 33501  018248  0100               	movlb	0	; () banked
 33502  01824A  5F8E               	subwf	___fttol@exp1& (0+255),f,b
 33503                           
 33504                           ; BSR set to: 0
 33505  01824C  0100               	movlb	0	; () banked
 33506  01824E  AF8E               	btfss	___fttol@exp1& (0+255),7,b
 33507  018250  D01A               	goto	l19859
 33508                           
 33509                           ; BSR set to: 0
 33510  018252  0100               	movlb	0	; () banked
 33511  018254  518E               	movf	___fttol@exp1& (0+255),w,b
 33512  018256  0A80               	xorlw	128
 33513  018258  0F8F               	addlw	143
 33514  01825A  B0D8               	btfsc	status,0,c
 33515  01825C  D00A               	goto	l19855
 33516                           
 33517                           ; BSR set to: 0
 33518  01825E  0E00               	movlw	0
 33519  018260  0100               	movlb	0	; () banked
 33520  018262  6F80               	movwf	?___fttol& (0+255),b
 33521  018264  0E00               	movlw	0
 33522  018266  6F81               	movwf	(?___fttol+1)& (0+255),b
 33523  018268  0E00               	movlw	0
 33524  01826A  6F82               	movwf	(?___fttol+2)& (0+255),b
 33525  01826C  0E00               	movlw	0
 33526  01826E  6F83               	movwf	(?___fttol+3)& (0+255),b
 33527                           
 33528                           ; BSR set to: 0
 33529  018270  0012               	return	
 33530  018272                     l19855:
 33531                           
 33532                           ; BSR set to: 0
 33533  018272  0100               	movlb	0	; () banked
 33534  018274  90D8               	bcf	status,0,c
 33535  018276  338D               	rrcf	(___fttol@lval+3)& (0+255),f,b
 33536  018278  338C               	rrcf	(___fttol@lval+2)& (0+255),f,b
 33537  01827A  338B               	rrcf	(___fttol@lval+1)& (0+255),f,b
 33538  01827C  338A               	rrcf	___fttol@lval& (0+255),f,b
 33539                           
 33540                           ; BSR set to: 0
 33541  01827E  0100               	movlb	0	; () banked
 33542  018280  3F8E               	incfsz	___fttol@exp1& (0+255),f,b
 33543  018282  D7F7               	goto	l19855
 33544                           
 33545                           ; BSR set to: 0
 33546  018284  D01B               	goto	l19869
 33547  018286                     l19859:
 33548                           
 33549                           ; BSR set to: 0
 33550  018286  0E17               	movlw	23
 33551  018288  0100               	movlb	0	; () banked
 33552  01828A  658E               	cpfsgt	___fttol@exp1& (0+255),b
 33553  01828C  D012               	goto	l19867
 33554                           
 33555                           ; BSR set to: 0
 33556  01828E  0E00               	movlw	0
 33557  018290  0100               	movlb	0	; () banked
 33558  018292  6F80               	movwf	?___fttol& (0+255),b
 33559  018294  0E00               	movlw	0
 33560  018296  6F81               	movwf	(?___fttol+1)& (0+255),b
 33561  018298  0E00               	movlw	0
 33562  01829A  6F82               	movwf	(?___fttol+2)& (0+255),b
 33563  01829C  0E00               	movlw	0
 33564  01829E  6F83               	movwf	(?___fttol+3)& (0+255),b
 33565                           
 33566                           ; BSR set to: 0
 33567  0182A0  0012               	return	
 33568  0182A2                     l19865:
 33569                           
 33570                           ; BSR set to: 0
 33571  0182A2  0100               	movlb	0	; () banked
 33572  0182A4  90D8               	bcf	status,0,c
 33573  0182A6  378A               	rlcf	___fttol@lval& (0+255),f,b
 33574  0182A8  378B               	rlcf	(___fttol@lval+1)& (0+255),f,b
 33575  0182AA  378C               	rlcf	(___fttol@lval+2)& (0+255),f,b
 33576  0182AC  378D               	rlcf	(___fttol@lval+3)& (0+255),f,b
 33577  0182AE  0100               	movlb	0	; () banked
 33578  0182B0  078E               	decf	___fttol@exp1& (0+255),f,b
 33579  0182B2                     l19867:
 33580                           
 33581                           ; BSR set to: 0
 33582  0182B2  0100               	movlb	0	; () banked
 33583  0182B4  518E               	movf	___fttol@exp1& (0+255),w,b
 33584  0182B6  0100               	movlb	0	; () banked
 33585  0182B8  A4D8               	btfss	status,2,c
 33586  0182BA  D7F3               	goto	l19865
 33587  0182BC                     l19869:
 33588                           
 33589                           ; BSR set to: 0
 33590  0182BC  0100               	movlb	0	; () banked
 33591  0182BE  5189               	movf	___fttol@sign1& (0+255),w,b
 33592  0182C0  0100               	movlb	0	; () banked
 33593  0182C2  B4D8               	btfsc	status,2,c
 33594  0182C4  D009               	goto	l19873
 33595                           
 33596                           ; BSR set to: 0
 33597  0182C6  0100               	movlb	0	; () banked
 33598  0182C8  1F8D               	comf	(___fttol@lval+3)& (0+255),f,b
 33599  0182CA  1F8C               	comf	(___fttol@lval+2)& (0+255),f,b
 33600  0182CC  1F8B               	comf	(___fttol@lval+1)& (0+255),f,b
 33601  0182CE  6D8A               	negf	___fttol@lval& (0+255),b
 33602  0182D0  0E00               	movlw	0
 33603  0182D2  238B               	addwfc	(___fttol@lval+1)& (0+255),f,b
 33604  0182D4  238C               	addwfc	(___fttol@lval+2)& (0+255),f,b
 33605  0182D6  238D               	addwfc	(___fttol@lval+3)& (0+255),f,b
 33606  0182D8                     l19873:
 33607                           
 33608                           ; BSR set to: 0
 33609  0182D8  C08A  F080         	movff	___fttol@lval,?___fttol
 33610  0182DC  C08B  F081         	movff	___fttol@lval+1,?___fttol+1
 33611  0182E0  C08C  F082         	movff	___fttol@lval+2,?___fttol+2
 33612  0182E4  C08D  F083         	movff	___fttol@lval+3,?___fttol+3
 33613  0182E8  0012               	return	
 33614  0182EA                     __end_of___fttol:
 33615                           	opt stack 0
 33616                           tblptru	equ	0xFF8
 33617                           tblptrh	equ	0xFF7
 33618                           tblptrl	equ	0xFF6
 33619                           tablat	equ	0xFF5
 33620                           prodh	equ	0xFF4
 33621                           prodl	equ	0xFF3
 33622                           intcon	equ	0xFF2
 33623                           postinc0	equ	0xFEE
 33624                           wreg	equ	0xFE8
 33625                           postdec1	equ	0xFE5
 33626                           fsr1h	equ	0xFE2
 33627                           fsr1l	equ	0xFE1
 33628                           indf2	equ	0xFDF
 33629                           postinc2	equ	0xFDE
 33630                           postdec2	equ	0xFDD
 33631                           fsr2h	equ	0xFDA
 33632                           fsr2l	equ	0xFD9
 33633                           status	equ	0xFD8
 33634                           
 33635 ;; *************** function ___ftge *****************
 33636 ;; Defined at:
 33637 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 33638 ;; Parameters:    Size  Location     Type
 33639 ;;  ff1             3   47[BANK0 ] float 
 33640 ;;  ff2             3   50[BANK0 ] float 
 33641 ;; Auto vars:     Size  Location     Type
 33642 ;;		None
 33643 ;; Return value:  Size  Location     Type
 33644 ;;		None               void
 33645 ;; Registers used:
 33646 ;;		wreg, status,2, status,0
 33647 ;; Tracked objects:
 33648 ;;		On entry : 0/0
 33649 ;;		On exit  : 0/0
 33650 ;;		Unchanged: 0/0
 33651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33652 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33654 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33655 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33656 ;;Total ram usage:        9 bytes
 33657 ;; Hardware stack levels used:    1
 33658 ;; Hardware stack levels required when called:    3
 33659 ;; This function calls:
 33660 ;;		Nothing
 33661 ;; This function is called by:
 33662 ;;		_Turbine_RPM_Cal
 33663 ;;		_Generator_RPM_Cal
 33664 ;;		_Stopping_state_function
 33665 ;;		_Turbine_Restore_Check
 33666 ;;		_Wind_Speed_Error_Trigger
 33667 ;;		_Grid_UV
 33668 ;;		_Grid_OV
 33669 ;;		_Turbine_Over_Speed
 33670 ;;		_Turbine_Under_speed
 33671 ;;		_Grid_Frequency
 33672 ;;		_Grid_Over_Current
 33673 ;;		_Generator_RPM
 33674 ;;		_Grid_Minimum_Power
 33675 ;;		_Grid_Maximum_Power
 33676 ;;		_Turbine_OverLoaded_Error
 33677 ;;		_VFD_Freq_Step_up
 33678 ;;		_Pitch_PS_ON_Function
 33679 ;;		_Volt_Curr_Read
 33680 ;;		_Cons_Gene
 33681 ;;		_Freq_Calc
 33682 ;;		_R_PF_Calc
 33683 ;;		_R_PF_Avg
 33684 ;;		_Y_PF_Calc
 33685 ;;		_Y_PF_Avg
 33686 ;;		_B_PF_Calc
 33687 ;;		_B_PF_Avg
 33688 ;;		_Power_Factor
 33689 ;;		_Ramp_Up_Slip
 33690 ;;		_Ramp_Up_Slip_Error_Trigger
 33691 ;;		_printf
 33692 ;;		_cos
 33693 ;;		_sin
 33694 ;;		_sqrt
 33695 ;;		_floor
 33696 ;;		_Turbine2Wheel_Ratio
 33697 ;;		_Turbine_RPM_Checking_Rampup
 33698 ;; This function uses a non-reentrant model
 33699 ;;
 33700                           
 33701                           	psect	text127
 33702  019012                     __ptext127:
 33703                           	opt stack 0
 33704  019012                     ___ftge:
 33705                           	opt stack 26
 33706                           
 33707                           ; BSR set to: 0
 33708                           ;incstack = 0
 33709  019012  0100               	movlb	0	; () banked
 33710  019014  AF91               	btfss	(___ftge@ff1+2)& (0+255),7,b
 33711  019016  D01D               	goto	l19813
 33712                           
 33713                           ; BSR set to: 0
 33714  019018  C08F  F095         	movff	___ftge@ff1,??___ftge
 33715  01901C  C090  F096         	movff	___ftge@ff1+1,??___ftge+1
 33716  019020  C091  F097         	movff	___ftge@ff1+2,??___ftge+2
 33717  019024  0100               	movlb	0	; () banked
 33718  019026  1F95               	comf	??___ftge& (0+255),f,b
 33719  019028  1F96               	comf	(??___ftge+1)& (0+255),f,b
 33720  01902A  1F97               	comf	(??___ftge+2)& (0+255),f,b
 33721  01902C  2B95               	incf	??___ftge& (0+255),f,b
 33722  01902E  0E00               	movlw	0
 33723  019030  2396               	addwfc	(??___ftge+1)& (0+255),f,b
 33724  019032  2397               	addwfc	(??___ftge+2)& (0+255),f,b
 33725  019034  0E00               	movlw	0
 33726  019036  0100               	movlb	0	; () banked
 33727  019038  2595               	addwf	??___ftge& (0+255),w,b
 33728  01903A  0100               	movlb	0	; () banked
 33729  01903C  6F8F               	movwf	___ftge@ff1& (0+255),b
 33730  01903E  0E00               	movlw	0
 33731  019040  0100               	movlb	0	; () banked
 33732  019042  2196               	addwfc	(??___ftge+1)& (0+255),w,b
 33733  019044  0100               	movlb	0	; () banked
 33734  019046  6F90               	movwf	(___ftge@ff1+1)& (0+255),b
 33735  019048  0E80               	movlw	128
 33736  01904A  0100               	movlb	0	; () banked
 33737  01904C  2197               	addwfc	(??___ftge+2)& (0+255),w,b
 33738  01904E  0100               	movlb	0	; () banked
 33739  019050  6F91               	movwf	(___ftge@ff1+2)& (0+255),b
 33740  019052                     l19813:
 33741                           
 33742                           ; BSR set to: 0
 33743  019052  0100               	movlb	0	; () banked
 33744  019054  AF94               	btfss	(___ftge@ff2+2)& (0+255),7,b
 33745  019056  D01D               	goto	l19817
 33746                           
 33747                           ; BSR set to: 0
 33748  019058  C092  F095         	movff	___ftge@ff2,??___ftge
 33749  01905C  C093  F096         	movff	___ftge@ff2+1,??___ftge+1
 33750  019060  C094  F097         	movff	___ftge@ff2+2,??___ftge+2
 33751  019064  0100               	movlb	0	; () banked
 33752  019066  1F95               	comf	??___ftge& (0+255),f,b
 33753  019068  1F96               	comf	(??___ftge+1)& (0+255),f,b
 33754  01906A  1F97               	comf	(??___ftge+2)& (0+255),f,b
 33755  01906C  2B95               	incf	??___ftge& (0+255),f,b
 33756  01906E  0E00               	movlw	0
 33757  019070  2396               	addwfc	(??___ftge+1)& (0+255),f,b
 33758  019072  2397               	addwfc	(??___ftge+2)& (0+255),f,b
 33759  019074  0E00               	movlw	0
 33760  019076  0100               	movlb	0	; () banked
 33761  019078  2595               	addwf	??___ftge& (0+255),w,b
 33762  01907A  0100               	movlb	0	; () banked
 33763  01907C  6F92               	movwf	___ftge@ff2& (0+255),b
 33764  01907E  0E00               	movlw	0
 33765  019080  0100               	movlb	0	; () banked
 33766  019082  2196               	addwfc	(??___ftge+1)& (0+255),w,b
 33767  019084  0100               	movlb	0	; () banked
 33768  019086  6F93               	movwf	(___ftge@ff2+1)& (0+255),b
 33769  019088  0E80               	movlw	128
 33770  01908A  0100               	movlb	0	; () banked
 33771  01908C  2197               	addwfc	(??___ftge+2)& (0+255),w,b
 33772  01908E  0100               	movlb	0	; () banked
 33773  019090  6F94               	movwf	(___ftge@ff2+2)& (0+255),b
 33774  019092                     l19817:
 33775                           
 33776                           ; BSR set to: 0
 33777  019092  0E00               	movlw	0
 33778  019094  0100               	movlb	0	; () banked
 33779  019096  1B8F               	xorwf	___ftge@ff1& (0+255),f,b
 33780  019098  0E00               	movlw	0
 33781  01909A  0100               	movlb	0	; () banked
 33782  01909C  1B90               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 33783  01909E  0E80               	movlw	128
 33784  0190A0  0100               	movlb	0	; () banked
 33785  0190A2  1B91               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 33786                           
 33787                           ; BSR set to: 0
 33788  0190A4  0E00               	movlw	0
 33789  0190A6  0100               	movlb	0	; () banked
 33790  0190A8  1B92               	xorwf	___ftge@ff2& (0+255),f,b
 33791  0190AA  0E00               	movlw	0
 33792  0190AC  0100               	movlb	0	; () banked
 33793  0190AE  1B93               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 33794  0190B0  0E80               	movlw	128
 33795  0190B2  0100               	movlb	0	; () banked
 33796  0190B4  1B94               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 33797  0190B6  0100               	movlb	0	; () banked
 33798  0190B8  5192               	movf	___ftge@ff2& (0+255),w,b
 33799  0190BA  0100               	movlb	0	; () banked
 33800  0190BC  5D8F               	subwf	___ftge@ff1& (0+255),w,b
 33801  0190BE  0100               	movlb	0	; () banked
 33802  0190C0  5193               	movf	(___ftge@ff2+1)& (0+255),w,b
 33803  0190C2  0100               	movlb	0	; () banked
 33804  0190C4  5990               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 33805  0190C6  0100               	movlb	0	; () banked
 33806  0190C8  5194               	movf	(___ftge@ff2+2)& (0+255),w,b
 33807  0190CA  0100               	movlb	0	; () banked
 33808  0190CC  5991               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 33809  0190CE  B0D8               	btfsc	status,0,c
 33810  0190D0  D002               	goto	l19823
 33811                           
 33812                           ; BSR set to: 0
 33813  0190D2  90D8               	bcf	status,0,c
 33814  0190D4  0012               	return	
 33815  0190D6                     l19823:
 33816                           
 33817                           ; BSR set to: 0
 33818  0190D6  80D8               	bsf	status,0,c
 33819                           
 33820                           ; BSR set to: 0
 33821  0190D8  0012               	return	
 33822  0190DA                     __end_of___ftge:
 33823                           	opt stack 0
 33824                           tblptru	equ	0xFF8
 33825                           tblptrh	equ	0xFF7
 33826                           tblptrl	equ	0xFF6
 33827                           tablat	equ	0xFF5
 33828                           prodh	equ	0xFF4
 33829                           prodl	equ	0xFF3
 33830                           intcon	equ	0xFF2
 33831                           postinc0	equ	0xFEE
 33832                           wreg	equ	0xFE8
 33833                           postdec1	equ	0xFE5
 33834                           fsr1h	equ	0xFE2
 33835                           fsr1l	equ	0xFE1
 33836                           indf2	equ	0xFDF
 33837                           postinc2	equ	0xFDE
 33838                           postdec2	equ	0xFDD
 33839                           fsr2h	equ	0xFDA
 33840                           fsr2l	equ	0xFD9
 33841                           status	equ	0xFD8
 33842                           
 33843 ;; *************** function ___altoft *****************
 33844 ;; Defined at:
 33845 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 33846 ;; Parameters:    Size  Location     Type
 33847 ;;  c               4   47[BANK0 ] long 
 33848 ;; Auto vars:     Size  Location     Type
 33849 ;;  sign            1   56[BANK0 ] unsigned char 
 33850 ;;  exp             1   55[BANK0 ] unsigned char 
 33851 ;; Return value:  Size  Location     Type
 33852 ;;                  3   47[BANK0 ] float 
 33853 ;; Registers used:
 33854 ;;		wreg, status,2, status,0, cstack
 33855 ;; Tracked objects:
 33856 ;;		On entry : 0/0
 33857 ;;		On exit  : 0/0
 33858 ;;		Unchanged: 0/0
 33859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33860 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33862 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33863 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33864 ;;Total ram usage:       10 bytes
 33865 ;; Hardware stack levels used:    1
 33866 ;; Hardware stack levels required when called:    4
 33867 ;; This function calls:
 33868 ;;		___ftpack
 33869 ;; This function is called by:
 33870 ;;		_floor
 33871 ;; This function uses a non-reentrant model
 33872 ;;
 33873                           
 33874                           	psect	text128
 33875  019A8E                     __ptext128:
 33876                           	opt stack 0
 33877  019A8E                     ___altoft:
 33878                           	opt stack 22
 33879                           
 33880                           ; BSR set to: 0
 33881                           ;incstack = 0
 33882  019A8E  0E00               	movlw	0
 33883  019A90  0100               	movlb	0	; () banked
 33884  019A92  6F98               	movwf	___altoft@sign& (0+255),b
 33885  019A94  0E8E               	movlw	142
 33886  019A96  0100               	movlb	0	; () banked
 33887  019A98  6F97               	movwf	___altoft@exp& (0+255),b
 33888                           
 33889                           ; BSR set to: 0
 33890  019A9A  0100               	movlb	0	; () banked
 33891  019A9C  AF92               	btfss	(___altoft@c+3)& (0+255),7,b
 33892  019A9E  D015               	goto	l19795
 33893                           
 33894                           ; BSR set to: 0
 33895  019AA0  0100               	movlb	0	; () banked
 33896  019AA2  1F92               	comf	(___altoft@c+3)& (0+255),f,b
 33897  019AA4  1F91               	comf	(___altoft@c+2)& (0+255),f,b
 33898  019AA6  1F90               	comf	(___altoft@c+1)& (0+255),f,b
 33899  019AA8  6D8F               	negf	___altoft@c& (0+255),b
 33900  019AAA  0E00               	movlw	0
 33901  019AAC  2390               	addwfc	(___altoft@c+1)& (0+255),f,b
 33902  019AAE  2391               	addwfc	(___altoft@c+2)& (0+255),f,b
 33903  019AB0  2392               	addwfc	(___altoft@c+3)& (0+255),f,b
 33904                           
 33905                           ; BSR set to: 0
 33906  019AB2  0E01               	movlw	1
 33907  019AB4  0100               	movlb	0	; () banked
 33908  019AB6  6F98               	movwf	___altoft@sign& (0+255),b
 33909                           
 33910                           ; BSR set to: 0
 33911  019AB8  D008               	goto	l19795
 33912  019ABA                     l19793:
 33913                           
 33914                           ; BSR set to: 0
 33915  019ABA  0100               	movlb	0	; () banked
 33916  019ABC  90D8               	bcf	status,0,c
 33917  019ABE  3392               	rrcf	(___altoft@c+3)& (0+255),f,b
 33918  019AC0  3391               	rrcf	(___altoft@c+2)& (0+255),f,b
 33919  019AC2  3390               	rrcf	(___altoft@c+1)& (0+255),f,b
 33920  019AC4  338F               	rrcf	___altoft@c& (0+255),f,b
 33921  019AC6  0100               	movlb	0	; () banked
 33922  019AC8  2B97               	incf	___altoft@exp& (0+255),f,b
 33923  019ACA                     l19795:
 33924                           
 33925                           ; BSR set to: 0
 33926  019ACA  0E00               	movlw	0
 33927  019ACC  0100               	movlb	0	; () banked
 33928  019ACE  158F               	andwf	___altoft@c& (0+255),w,b
 33929  019AD0  0100               	movlb	0	; () banked
 33930  019AD2  6F93               	movwf	??___altoft& (0+255),b
 33931  019AD4  0E00               	movlw	0
 33932  019AD6  0100               	movlb	0	; () banked
 33933  019AD8  1590               	andwf	(___altoft@c+1)& (0+255),w,b
 33934  019ADA  0100               	movlb	0	; () banked
 33935  019ADC  6F94               	movwf	(??___altoft+1)& (0+255),b
 33936  019ADE  0E00               	movlw	0
 33937  019AE0  0100               	movlb	0	; () banked
 33938  019AE2  1591               	andwf	(___altoft@c+2)& (0+255),w,b
 33939  019AE4  0100               	movlb	0	; () banked
 33940  019AE6  6F95               	movwf	(??___altoft+2)& (0+255),b
 33941  019AE8  0EFF               	movlw	255
 33942  019AEA  0100               	movlb	0	; () banked
 33943  019AEC  1592               	andwf	(___altoft@c+3)& (0+255),w,b
 33944  019AEE  0100               	movlb	0	; () banked
 33945  019AF0  6F96               	movwf	(??___altoft+3)& (0+255),b
 33946  019AF2  0100               	movlb	0	; () banked
 33947  019AF4  5193               	movf	??___altoft& (0+255),w,b
 33948  019AF6  0100               	movlb	0	; () banked
 33949  019AF8  1194               	iorwf	(??___altoft+1)& (0+255),w,b
 33950  019AFA  0100               	movlb	0	; () banked
 33951  019AFC  1195               	iorwf	(??___altoft+2)& (0+255),w,b
 33952  019AFE  0100               	movlb	0	; () banked
 33953  019B00  1196               	iorwf	(??___altoft+3)& (0+255),w,b
 33954  019B02  A4D8               	btfss	status,2,c
 33955  019B04  D7DA               	goto	l19793
 33956                           
 33957                           ; BSR set to: 0
 33958                           
 33959                           ; BSR set to: 0
 33960  019B06  C08F  F01D         	movff	___altoft@c,___ftpack@arg
 33961  019B0A  C090  F01E         	movff	___altoft@c+1,___ftpack@arg+1
 33962  019B0E  C091  F01F         	movff	___altoft@c+2,___ftpack@arg+2
 33963  019B12  C097  F020         	movff	___altoft@exp,___ftpack@exp
 33964  019B16  C098  F021         	movff	___altoft@sign,___ftpack@sign
 33965  019B1A  ECA0  F0CB         	call	___ftpack	;wreg free
 33966  019B1E  C01D  F08F         	movff	?___ftpack,?___altoft
 33967  019B22  C01E  F090         	movff	?___ftpack+1,?___altoft+1
 33968  019B26  C01F  F091         	movff	?___ftpack+2,?___altoft+2
 33969  019B2A  0012               	return	
 33970  019B2C                     __end_of___altoft:
 33971                           	opt stack 0
 33972                           tblptru	equ	0xFF8
 33973                           tblptrh	equ	0xFF7
 33974                           tblptrl	equ	0xFF6
 33975                           tablat	equ	0xFF5
 33976                           prodh	equ	0xFF4
 33977                           prodl	equ	0xFF3
 33978                           intcon	equ	0xFF2
 33979                           postinc0	equ	0xFEE
 33980                           wreg	equ	0xFE8
 33981                           postdec1	equ	0xFE5
 33982                           fsr1h	equ	0xFE2
 33983                           fsr1l	equ	0xFE1
 33984                           indf2	equ	0xFDF
 33985                           postinc2	equ	0xFDE
 33986                           postdec2	equ	0xFDD
 33987                           fsr2h	equ	0xFDA
 33988                           fsr2l	equ	0xFD9
 33989                           status	equ	0xFD8
 33990                           
 33991 ;; *************** function _eval_poly *****************
 33992 ;; Defined at:
 33993 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
 33994 ;; Parameters:    Size  Location     Type
 33995 ;;  x               3   47[BANK0 ] float 
 33996 ;;  d               2   50[BANK0 ] PTR const 
 33997 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
 33998 ;;  n               2   52[BANK0 ] int 
 33999 ;; Auto vars:     Size  Location     Type
 34000 ;;  res             3   56[BANK0 ] int 
 34001 ;; Return value:  Size  Location     Type
 34002 ;;                  3   47[BANK0 ] int 
 34003 ;; Registers used:
 34004 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34005 ;; Tracked objects:
 34006 ;;		On entry : 0/0
 34007 ;;		On exit  : 0/0
 34008 ;;		Unchanged: 0/0
 34009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34010 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34011 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34013 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34014 ;;Total ram usage:       12 bytes
 34015 ;; Hardware stack levels used:    1
 34016 ;; Hardware stack levels required when called:    5
 34017 ;; This function calls:
 34018 ;;		___ftadd
 34019 ;;		___ftmul
 34020 ;;		___wmul
 34021 ;; This function is called by:
 34022 ;;		_sin
 34023 ;; This function uses a non-reentrant model
 34024 ;;
 34025                           
 34026                           	psect	text129
 34027  018A1C                     __ptext129:
 34028                           	opt stack 0
 34029  018A1C                     _eval_poly:
 34030                           	opt stack 22
 34031                           
 34032                           ;incstack = 0
 34033  018A1C  C094  F064         	movff	eval_poly@n,___wmul@multiplier
 34034  018A20  C095  F065         	movff	eval_poly@n+1,___wmul@multiplier+1
 34035  018A24  0E00               	movlw	0
 34036  018A26  0100               	movlb	0	; () banked
 34037  018A28  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 34038  018A2A  0E03               	movlw	3
 34039  018A2C  6F66               	movwf	___wmul@multiplicand& (0+255),b
 34040  018A2E  EC4B  F0D3         	call	___wmul	;wreg free
 34041  018A32  C092  F096         	movff	eval_poly@d,??_eval_poly
 34042  018A36  C093  F097         	movff	eval_poly@d+1,??_eval_poly+1
 34043  018A3A  0100               	movlb	0	; () banked
 34044  018A3C  5164               	movf	?___wmul& (0+255),w,b
 34045  018A3E  0100               	movlb	0	; () banked
 34046  018A40  2796               	addwf	??_eval_poly& (0+255),f,b
 34047  018A42  0100               	movlb	0	; () banked
 34048  018A44  5165               	movf	(?___wmul+1)& (0+255),w,b
 34049  018A46  0100               	movlb	0	; () banked
 34050  018A48  2397               	addwfc	(??_eval_poly+1)& (0+255),f,b
 34051  018A4A  C096  FFF6         	movff	??_eval_poly,tblptrl
 34052  018A4E  C097  FFF7         	movff	??_eval_poly+1,tblptrh
 34053  018A52                     	if	0	;tblptru may be non-zero
 34054  018A52                     	endif
 34055  018A52                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 34056  018A52  0E00               	movlw	low (__mediumconst shr (0+16))
 34057  018A54  6EF8               	movwf	tblptru,c
 34058  018A56                     	endif
 34059  018A56  0009               	tblrd		*+
 34060  018A58  CFF5 F098          	movff	tablat,eval_poly@res
 34061  018A5C  0009               	tblrd		*+
 34062  018A5E  CFF5 F099          	movff	tablat,eval_poly@res+1
 34063  018A62  000A               	tblrd		*-
 34064  018A64  CFF5 F09A          	movff	tablat,eval_poly@res+2
 34065  018A68  D046               	goto	l20331
 34066  018A6A                     l20329:
 34067                           
 34068                           ; BSR set to: 0
 34069  018A6A  C098  F06D         	movff	eval_poly@res,___ftmul@f2
 34070  018A6E  C099  F06E         	movff	eval_poly@res+1,___ftmul@f2+1
 34071  018A72  C09A  F06F         	movff	eval_poly@res+2,___ftmul@f2+2
 34072  018A76  C08F  F06A         	movff	eval_poly@x,___ftmul@f1
 34073  018A7A  C090  F06B         	movff	eval_poly@x+1,___ftmul@f1+1
 34074  018A7E  C091  F06C         	movff	eval_poly@x+2,___ftmul@f1+2
 34075  018A82  EC83  F0BD         	call	___ftmul	;wreg free
 34076  018A86  C06A  F083         	movff	?___ftmul,___ftadd@f1
 34077  018A8A  C06B  F084         	movff	?___ftmul+1,___ftadd@f1+1
 34078  018A8E  C06C  F085         	movff	?___ftmul+2,___ftadd@f1+2
 34079  018A92  0E00               	movlw	0
 34080  018A94  0100               	movlb	0	; () banked
 34081  018A96  6F67               	movwf	(___wmul@multiplicand+1)& (0+255),b
 34082  018A98  0E03               	movlw	3
 34083  018A9A  6F66               	movwf	___wmul@multiplicand& (0+255),b
 34084  018A9C  0100               	movlb	0	; () banked
 34085  018A9E  0794               	decf	eval_poly@n& (0+255),f,b
 34086  018AA0  A0D8               	btfss	status,0,c
 34087  018AA2  0795               	decf	(eval_poly@n+1)& (0+255),f,b
 34088  018AA4  C094  F064         	movff	eval_poly@n,___wmul@multiplier
 34089  018AA8  C095  F065         	movff	eval_poly@n+1,___wmul@multiplier+1
 34090  018AAC  EC4B  F0D3         	call	___wmul	;wreg free
 34091  018AB0  C092  F096         	movff	eval_poly@d,??_eval_poly
 34092  018AB4  C093  F097         	movff	eval_poly@d+1,??_eval_poly+1
 34093  018AB8  0100               	movlb	0	; () banked
 34094  018ABA  5164               	movf	?___wmul& (0+255),w,b
 34095  018ABC  0100               	movlb	0	; () banked
 34096  018ABE  2796               	addwf	??_eval_poly& (0+255),f,b
 34097  018AC0  0100               	movlb	0	; () banked
 34098  018AC2  5165               	movf	(?___wmul+1)& (0+255),w,b
 34099  018AC4  0100               	movlb	0	; () banked
 34100  018AC6  2397               	addwfc	(??_eval_poly+1)& (0+255),f,b
 34101  018AC8  C096  FFF6         	movff	??_eval_poly,tblptrl
 34102  018ACC  C097  FFF7         	movff	??_eval_poly+1,tblptrh
 34103  018AD0                     	if	0	;tblptru may be non-zero
 34104  018AD0                     	endif
 34105  018AD0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 34106  018AD0  0E00               	movlw	low (__mediumconst shr (0+16))
 34107  018AD2  6EF8               	movwf	tblptru,c
 34108  018AD4                     	endif
 34109  018AD4  0009               	tblrd		*+
 34110  018AD6  CFF5 F086          	movff	tablat,___ftadd@f2
 34111  018ADA  0009               	tblrd		*+
 34112  018ADC  CFF5 F087          	movff	tablat,___ftadd@f2+1
 34113  018AE0  000A               	tblrd		*-
 34114  018AE2  CFF5 F088          	movff	tablat,___ftadd@f2+2
 34115  018AE6  ECE4  F0AF         	call	___ftadd	;wreg free
 34116  018AEA  C083  F098         	movff	?___ftadd,eval_poly@res
 34117  018AEE  C084  F099         	movff	?___ftadd+1,eval_poly@res+1
 34118  018AF2  C085  F09A         	movff	?___ftadd+2,eval_poly@res+2
 34119  018AF6                     l20331:
 34120  018AF6  0100               	movlb	0	; () banked
 34121  018AF8  5194               	movf	eval_poly@n& (0+255),w,b
 34122  018AFA  0100               	movlb	0	; () banked
 34123  018AFC  1195               	iorwf	(eval_poly@n+1)& (0+255),w,b
 34124  018AFE  A4D8               	btfss	status,2,c
 34125  018B00  D7B4               	goto	l20329
 34126                           
 34127                           ; BSR set to: 0
 34128  018B02  C098  F08F         	movff	eval_poly@res,?_eval_poly
 34129  018B06  C099  F090         	movff	eval_poly@res+1,?_eval_poly+1
 34130  018B0A  C09A  F091         	movff	eval_poly@res+2,?_eval_poly+2
 34131                           
 34132                           ; BSR set to: 0
 34133  018B0E  0012               	return		;funcret
 34134  018B10                     __end_of_eval_poly:
 34135                           	opt stack 0
 34136                           tblptru	equ	0xFF8
 34137                           tblptrh	equ	0xFF7
 34138                           tblptrl	equ	0xFF6
 34139                           tablat	equ	0xFF5
 34140                           prodh	equ	0xFF4
 34141                           prodl	equ	0xFF3
 34142                           intcon	equ	0xFF2
 34143                           postinc0	equ	0xFEE
 34144                           wreg	equ	0xFE8
 34145                           postdec1	equ	0xFE5
 34146                           fsr1h	equ	0xFE2
 34147                           fsr1l	equ	0xFE1
 34148                           indf2	equ	0xFDF
 34149                           postinc2	equ	0xFDE
 34150                           postdec2	equ	0xFDD
 34151                           fsr2h	equ	0xFDA
 34152                           fsr2l	equ	0xFD9
 34153                           status	equ	0xFD8
 34154                           
 34155 ;; *************** function ___wmul *****************
 34156 ;; Defined at:
 34157 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
 34158 ;; Parameters:    Size  Location     Type
 34159 ;;  multiplier      2    4[BANK0 ] unsigned int 
 34160 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 34161 ;; Auto vars:     Size  Location     Type
 34162 ;;  product         2    8[BANK0 ] unsigned int 
 34163 ;; Return value:  Size  Location     Type
 34164 ;;                  2    4[BANK0 ] unsigned int 
 34165 ;; Registers used:
 34166 ;;		wreg, status,2, status,0, prodl, prodh
 34167 ;; Tracked objects:
 34168 ;;		On entry : 0/0
 34169 ;;		On exit  : 0/0
 34170 ;;		Unchanged: 0/0
 34171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34172 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34173 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34175 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34176 ;;Total ram usage:        6 bytes
 34177 ;; Hardware stack levels used:    1
 34178 ;; Hardware stack levels required when called:    3
 34179 ;; This function calls:
 34180 ;;		Nothing
 34181 ;; This function is called by:
 34182 ;;		_BCDtoI
 34183 ;;		_fround
 34184 ;;		_scale
 34185 ;;		_printf
 34186 ;;		_eval_poly
 34187 ;; This function uses a non-reentrant model
 34188 ;;
 34189                           
 34190                           	psect	text130
 34191  01A696                     __ptext130:
 34192                           	opt stack 0
 34193  01A696                     ___wmul:
 34194                           	opt stack 23
 34195                           
 34196                           ; BSR set to: 0
 34197                           ;incstack = 0
 34198  01A696  0100               	movlb	0	; () banked
 34199  01A698  5164               	movf	___wmul@multiplier& (0+255),w,b
 34200  01A69A  0100               	movlb	0	; () banked
 34201  01A69C  0366               	mulwf	___wmul@multiplicand& (0+255),b
 34202  01A69E  CFF3 F068          	movff	prodl,___wmul@product
 34203  01A6A2  CFF4 F069          	movff	prodh,___wmul@product+1
 34204  01A6A6  0100               	movlb	0	; () banked
 34205  01A6A8  5164               	movf	___wmul@multiplier& (0+255),w,b
 34206  01A6AA  0100               	movlb	0	; () banked
 34207  01A6AC  0367               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 34208  01A6AE  50F3               	movf	prodl,w,c
 34209  01A6B0  0100               	movlb	0	; () banked
 34210  01A6B2  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 34211  01A6B4  0100               	movlb	0	; () banked
 34212  01A6B6  5165               	movf	(___wmul@multiplier+1)& (0+255),w,b
 34213  01A6B8  0100               	movlb	0	; () banked
 34214  01A6BA  0366               	mulwf	___wmul@multiplicand& (0+255),b
 34215  01A6BC  50F3               	movf	prodl,w,c
 34216  01A6BE  0100               	movlb	0	; () banked
 34217  01A6C0  2769               	addwf	(___wmul@product+1)& (0+255),f,b
 34218                           
 34219                           ; BSR set to: 0
 34220  01A6C2  C068  F064         	movff	___wmul@product,?___wmul
 34221  01A6C6  C069  F065         	movff	___wmul@product+1,?___wmul+1
 34222  01A6CA  0012               	return	
 34223  01A6CC                     __end_of___wmul:
 34224                           	opt stack 0
 34225                           tblptru	equ	0xFF8
 34226                           tblptrh	equ	0xFF7
 34227                           tblptrl	equ	0xFF6
 34228                           tablat	equ	0xFF5
 34229                           prodh	equ	0xFF4
 34230                           prodl	equ	0xFF3
 34231                           intcon	equ	0xFF2
 34232                           postinc0	equ	0xFEE
 34233                           wreg	equ	0xFE8
 34234                           postdec1	equ	0xFE5
 34235                           fsr1h	equ	0xFE2
 34236                           fsr1l	equ	0xFE1
 34237                           indf2	equ	0xFDF
 34238                           postinc2	equ	0xFDE
 34239                           postdec2	equ	0xFDD
 34240                           fsr2h	equ	0xFDA
 34241                           fsr2l	equ	0xFD9
 34242                           status	equ	0xFD8
 34243                           
 34244 ;; *************** function ___ftmul *****************
 34245 ;; Defined at:
 34246 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 34247 ;; Parameters:    Size  Location     Type
 34248 ;;  f1              3   10[BANK0 ] float 
 34249 ;;  f2              3   13[BANK0 ] float 
 34250 ;; Auto vars:     Size  Location     Type
 34251 ;;  f3_as_produc    3   20[BANK0 ] unsigned um
 34252 ;;  sign            1   24[BANK0 ] unsigned char 
 34253 ;;  cntr            1   23[BANK0 ] unsigned char 
 34254 ;;  exp             1   19[BANK0 ] unsigned char 
 34255 ;; Return value:  Size  Location     Type
 34256 ;;                  3   10[BANK0 ] float 
 34257 ;; Registers used:
 34258 ;;		wreg, status,2, status,0, cstack
 34259 ;; Tracked objects:
 34260 ;;		On entry : 0/0
 34261 ;;		On exit  : 0/0
 34262 ;;		Unchanged: 0/0
 34263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34264 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34265 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34266 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34267 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34268 ;;Total ram usage:       15 bytes
 34269 ;; Hardware stack levels used:    1
 34270 ;; Hardware stack levels required when called:    4
 34271 ;; This function calls:
 34272 ;;		___ftpack
 34273 ;; This function is called by:
 34274 ;;		_Turbine_RPM_Cal
 34275 ;;		_Generator_RPM_Cal
 34276 ;;		_Wind_Speed_Cal
 34277 ;;		_VFD_Freq_Step_up
 34278 ;;		_Temp_Read
 34279 ;;		_Volt_Curr_Avg
 34280 ;;		_Cons_Gene
 34281 ;;		_Freq_Calc
 34282 ;;		_R_PF_Calc
 34283 ;;		_R_PF_Avg
 34284 ;;		_Y_PF_Calc
 34285 ;;		_Y_PF_Avg
 34286 ;;		_B_PF_Calc
 34287 ;;		_B_PF_Avg
 34288 ;;		_Power_Calc
 34289 ;;		_Rotor_Slip_Cal
 34290 ;;		_Motor_Slip_Cal
 34291 ;;		_fround
 34292 ;;		_scale
 34293 ;;		_printf
 34294 ;;		_sin
 34295 ;;		_sqrt
 34296 ;;		_eval_poly
 34297 ;;		_Wind_Speed_2_Cal
 34298 ;; This function uses a non-reentrant model
 34299 ;;
 34300                           
 34301                           	psect	text131
 34302  017B06                     __ptext131:
 34303                           	opt stack 0
 34304  017B06                     ___ftmul:
 34305                           	opt stack 25
 34306                           
 34307                           ; BSR set to: 0
 34308                           ;incstack = 0
 34309  017B06  C06C  F070         	movff	___ftmul@f1+2,??___ftmul
 34310  017B0A  0100               	movlb	0	; () banked
 34311  017B0C  6B71               	clrf	(??___ftmul+1)& (0+255),b
 34312  017B0E  6B72               	clrf	(??___ftmul+2)& (0+255),b
 34313  017B10  0100               	movlb	0	; () banked
 34314  017B12  356B               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 34315  017B14  0100               	movlb	0	; () banked
 34316  017B16  3770               	rlcf	??___ftmul& (0+255),f,b
 34317  017B18  E301               	bnc	u12501
 34318  017B1A  8171               	bsf	(??___ftmul+1)& (0+255),0,b
 34319  017B1C                     u12501:
 34320  017B1C  0100               	movlb	0	; () banked
 34321  017B1E  5170               	movf	??___ftmul& (0+255),w,b
 34322  017B20  0100               	movlb	0	; () banked
 34323  017B22  6F73               	movwf	___ftmul@exp& (0+255),b
 34324  017B24  0100               	movlb	0	; () banked
 34325  017B26  5173               	movf	___ftmul@exp& (0+255),w,b
 34326  017B28  A4D8               	btfss	status,2,c
 34327  017B2A  D00A               	goto	l19523
 34328                           
 34329                           ; BSR set to: 0
 34330  017B2C  0E00               	movlw	0
 34331  017B2E  0100               	movlb	0	; () banked
 34332  017B30  6F6A               	movwf	?___ftmul& (0+255),b
 34333  017B32  0E00               	movlw	0
 34334  017B34  0100               	movlb	0	; () banked
 34335  017B36  6F6B               	movwf	(?___ftmul+1)& (0+255),b
 34336  017B38  0E00               	movlw	0
 34337  017B3A  0100               	movlb	0	; () banked
 34338  017B3C  6F6C               	movwf	(?___ftmul+2)& (0+255),b
 34339                           
 34340                           ; BSR set to: 0
 34341  017B3E  0012               	return	
 34342  017B40                     l19523:
 34343                           
 34344                           ; BSR set to: 0
 34345  017B40  C06F  F070         	movff	___ftmul@f2+2,??___ftmul
 34346  017B44  0100               	movlb	0	; () banked
 34347  017B46  6B71               	clrf	(??___ftmul+1)& (0+255),b
 34348  017B48  6B72               	clrf	(??___ftmul+2)& (0+255),b
 34349  017B4A  0100               	movlb	0	; () banked
 34350  017B4C  356E               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 34351  017B4E  0100               	movlb	0	; () banked
 34352  017B50  3770               	rlcf	??___ftmul& (0+255),f,b
 34353  017B52  E301               	bnc	u12521
 34354  017B54  8171               	bsf	(??___ftmul+1)& (0+255),0,b
 34355  017B56                     u12521:
 34356  017B56  0100               	movlb	0	; () banked
 34357  017B58  5170               	movf	??___ftmul& (0+255),w,b
 34358  017B5A  0100               	movlb	0	; () banked
 34359  017B5C  6F78               	movwf	___ftmul@sign& (0+255),b
 34360  017B5E  0100               	movlb	0	; () banked
 34361  017B60  5178               	movf	___ftmul@sign& (0+255),w,b
 34362  017B62  A4D8               	btfss	status,2,c
 34363  017B64  D00A               	goto	l19529
 34364                           
 34365                           ; BSR set to: 0
 34366  017B66  0E00               	movlw	0
 34367  017B68  0100               	movlb	0	; () banked
 34368  017B6A  6F6A               	movwf	?___ftmul& (0+255),b
 34369  017B6C  0E00               	movlw	0
 34370  017B6E  0100               	movlb	0	; () banked
 34371  017B70  6F6B               	movwf	(?___ftmul+1)& (0+255),b
 34372  017B72  0E00               	movlw	0
 34373  017B74  0100               	movlb	0	; () banked
 34374  017B76  6F6C               	movwf	(?___ftmul+2)& (0+255),b
 34375                           
 34376                           ; BSR set to: 0
 34377  017B78  0012               	return	
 34378  017B7A                     l19529:
 34379                           
 34380                           ; BSR set to: 0
 34381  017B7A  0100               	movlb	0	; () banked
 34382  017B7C  5178               	movf	___ftmul@sign& (0+255),w,b
 34383  017B7E  0F7B               	addlw	123
 34384  017B80  0100               	movlb	0	; () banked
 34385  017B82  2773               	addwf	___ftmul@exp& (0+255),f,b
 34386                           
 34387                           ; BSR set to: 0
 34388  017B84  C06C  F078         	movff	___ftmul@f1+2,___ftmul@sign
 34389  017B88  0100               	movlb	0	; () banked
 34390  017B8A  516F               	movf	(___ftmul@f2+2)& (0+255),w,b
 34391  017B8C  0100               	movlb	0	; () banked
 34392  017B8E  1B78               	xorwf	___ftmul@sign& (0+255),f,b
 34393  017B90  0E80               	movlw	128
 34394  017B92  0100               	movlb	0	; () banked
 34395  017B94  1778               	andwf	___ftmul@sign& (0+255),f,b
 34396                           
 34397                           ; BSR set to: 0
 34398  017B96  0100               	movlb	0	; () banked
 34399  017B98  8F6B               	bsf	(___ftmul@f1+1)& (0+255),7,b
 34400                           
 34401                           ; BSR set to: 0
 34402  017B9A  0100               	movlb	0	; () banked
 34403  017B9C  8F6E               	bsf	(___ftmul@f2+1)& (0+255),7,b
 34404                           
 34405                           ; BSR set to: 0
 34406  017B9E  0EFF               	movlw	255
 34407  017BA0  0100               	movlb	0	; () banked
 34408  017BA2  176D               	andwf	___ftmul@f2& (0+255),f,b
 34409  017BA4  0EFF               	movlw	255
 34410  017BA6  0100               	movlb	0	; () banked
 34411  017BA8  176E               	andwf	(___ftmul@f2+1)& (0+255),f,b
 34412  017BAA  0E00               	movlw	0
 34413  017BAC  0100               	movlb	0	; () banked
 34414  017BAE  176F               	andwf	(___ftmul@f2+2)& (0+255),f,b
 34415                           
 34416                           ; BSR set to: 0
 34417  017BB0  0E00               	movlw	0
 34418  017BB2  0100               	movlb	0	; () banked
 34419  017BB4  6F74               	movwf	___ftmul@f3_as_product& (0+255),b
 34420  017BB6  0E00               	movlw	0
 34421  017BB8  0100               	movlb	0	; () banked
 34422  017BBA  6F75               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 34423  017BBC  0E00               	movlw	0
 34424  017BBE  0100               	movlb	0	; () banked
 34425  017BC0  6F76               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 34426                           
 34427                           ; BSR set to: 0
 34428  017BC2  0E07               	movlw	7
 34429  017BC4  0100               	movlb	0	; () banked
 34430  017BC6  6F77               	movwf	___ftmul@cntr& (0+255),b
 34431  017BC8                     l19543:
 34432                           
 34433                           ; BSR set to: 0
 34434  017BC8  0100               	movlb	0	; () banked
 34435  017BCA  A16A               	btfss	___ftmul@f1& (0+255),0,b
 34436  017BCC  D00C               	goto	l19547
 34437                           
 34438                           ; BSR set to: 0
 34439  017BCE  0100               	movlb	0	; () banked
 34440  017BD0  516D               	movf	___ftmul@f2& (0+255),w,b
 34441  017BD2  0100               	movlb	0	; () banked
 34442  017BD4  2774               	addwf	___ftmul@f3_as_product& (0+255),f,b
 34443  017BD6  0100               	movlb	0	; () banked
 34444  017BD8  516E               	movf	(___ftmul@f2+1)& (0+255),w,b
 34445  017BDA  0100               	movlb	0	; () banked
 34446  017BDC  2375               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 34447  017BDE  0100               	movlb	0	; () banked
 34448  017BE0  516F               	movf	(___ftmul@f2+2)& (0+255),w,b
 34449  017BE2  0100               	movlb	0	; () banked
 34450  017BE4  2376               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 34451  017BE6                     l19547:
 34452                           
 34453                           ; BSR set to: 0
 34454  017BE6  0100               	movlb	0	; () banked
 34455  017BE8  90D8               	bcf	status,0,c
 34456  017BEA  336C               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 34457  017BEC  336B               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 34458  017BEE  336A               	rrcf	___ftmul@f1& (0+255),f,b
 34459  017BF0  0100               	movlb	0	; () banked
 34460  017BF2  90D8               	bcf	status,0,c
 34461  017BF4  376D               	rlcf	___ftmul@f2& (0+255),f,b
 34462  017BF6  376E               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 34463  017BF8  376F               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 34464                           
 34465                           ; BSR set to: 0
 34466  017BFA  0100               	movlb	0	; () banked
 34467  017BFC  2F77               	decfsz	___ftmul@cntr& (0+255),f,b
 34468  017BFE  D7E4               	goto	l19543
 34469                           
 34470                           ; BSR set to: 0
 34471                           
 34472                           ; BSR set to: 0
 34473  017C00  0E09               	movlw	9
 34474  017C02  0100               	movlb	0	; () banked
 34475  017C04  6F77               	movwf	___ftmul@cntr& (0+255),b
 34476  017C06                     l19553:
 34477                           
 34478                           ; BSR set to: 0
 34479  017C06  0100               	movlb	0	; () banked
 34480  017C08  A16A               	btfss	___ftmul@f1& (0+255),0,b
 34481  017C0A  D00C               	goto	l19557
 34482                           
 34483                           ; BSR set to: 0
 34484  017C0C  0100               	movlb	0	; () banked
 34485  017C0E  516D               	movf	___ftmul@f2& (0+255),w,b
 34486  017C10  0100               	movlb	0	; () banked
 34487  017C12  2774               	addwf	___ftmul@f3_as_product& (0+255),f,b
 34488  017C14  0100               	movlb	0	; () banked
 34489  017C16  516E               	movf	(___ftmul@f2+1)& (0+255),w,b
 34490  017C18  0100               	movlb	0	; () banked
 34491  017C1A  2375               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 34492  017C1C  0100               	movlb	0	; () banked
 34493  017C1E  516F               	movf	(___ftmul@f2+2)& (0+255),w,b
 34494  017C20  0100               	movlb	0	; () banked
 34495  017C22  2376               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 34496  017C24                     l19557:
 34497                           
 34498                           ; BSR set to: 0
 34499  017C24  0100               	movlb	0	; () banked
 34500  017C26  90D8               	bcf	status,0,c
 34501  017C28  336C               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 34502  017C2A  336B               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 34503  017C2C  336A               	rrcf	___ftmul@f1& (0+255),f,b
 34504  017C2E  0100               	movlb	0	; () banked
 34505  017C30  90D8               	bcf	status,0,c
 34506  017C32  3376               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 34507  017C34  3375               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 34508  017C36  3374               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 34509                           
 34510                           ; BSR set to: 0
 34511  017C38  0100               	movlb	0	; () banked
 34512  017C3A  2F77               	decfsz	___ftmul@cntr& (0+255),f,b
 34513  017C3C  D7E4               	goto	l19553
 34514                           
 34515                           ; BSR set to: 0
 34516                           
 34517                           ; BSR set to: 0
 34518  017C3E  C074  F01D         	movff	___ftmul@f3_as_product,___ftpack@arg
 34519  017C42  C075  F01E         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 34520  017C46  C076  F01F         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 34521  017C4A  C073  F020         	movff	___ftmul@exp,___ftpack@exp
 34522  017C4E  C078  F021         	movff	___ftmul@sign,___ftpack@sign
 34523  017C52  ECA0  F0CB         	call	___ftpack	;wreg free
 34524  017C56  C01D  F06A         	movff	?___ftpack,?___ftmul
 34525  017C5A  C01E  F06B         	movff	?___ftpack+1,?___ftmul+1
 34526  017C5E  C01F  F06C         	movff	?___ftpack+2,?___ftmul+2
 34527  017C62  0012               	return	
 34528  017C64                     __end_of___ftmul:
 34529                           	opt stack 0
 34530                           tblptru	equ	0xFF8
 34531                           tblptrh	equ	0xFF7
 34532                           tblptrl	equ	0xFF6
 34533                           tablat	equ	0xFF5
 34534                           prodh	equ	0xFF4
 34535                           prodl	equ	0xFF3
 34536                           intcon	equ	0xFF2
 34537                           postinc0	equ	0xFEE
 34538                           wreg	equ	0xFE8
 34539                           postdec1	equ	0xFE5
 34540                           fsr1h	equ	0xFE2
 34541                           fsr1l	equ	0xFE1
 34542                           indf2	equ	0xFDF
 34543                           postinc2	equ	0xFDE
 34544                           postdec2	equ	0xFDD
 34545                           fsr2h	equ	0xFDA
 34546                           fsr2l	equ	0xFD9
 34547                           status	equ	0xFD8
 34548                           
 34549 ;; *************** function ___ftsub *****************
 34550 ;; Defined at:
 34551 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 34552 ;; Parameters:    Size  Location     Type
 34553 ;;  f1              3   65[BANK0 ] float 
 34554 ;;  f2              3   68[BANK0 ] float 
 34555 ;; Auto vars:     Size  Location     Type
 34556 ;;		None
 34557 ;; Return value:  Size  Location     Type
 34558 ;;                  3   65[BANK0 ] float 
 34559 ;; Registers used:
 34560 ;;		wreg, status,2, status,0, cstack
 34561 ;; Tracked objects:
 34562 ;;		On entry : 0/0
 34563 ;;		On exit  : 0/0
 34564 ;;		Unchanged: 0/0
 34565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34566 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34569 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34570 ;;Total ram usage:        6 bytes
 34571 ;; Hardware stack levels used:    1
 34572 ;; Hardware stack levels required when called:    5
 34573 ;; This function calls:
 34574 ;;		___ftadd
 34575 ;; This function is called by:
 34576 ;;		_printf
 34577 ;;		_sin
 34578 ;;		_sqrt
 34579 ;; This function uses a non-reentrant model
 34580 ;;
 34581                           
 34582                           	psect	text132
 34583  01A552                     __ptext132:
 34584                           	opt stack 0
 34585  01A552                     ___ftsub:
 34586                           	opt stack 22
 34587                           
 34588                           ;incstack = 0
 34589  01A552  0100               	movlb	0	; () banked
 34590  01A554  51A4               	movf	___ftsub@f2& (0+255),w,b
 34591  01A556  0100               	movlb	0	; () banked
 34592  01A558  11A5               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 34593  01A55A  0100               	movlb	0	; () banked
 34594  01A55C  11A6               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 34595  01A55E  B4D8               	btfsc	status,2,c
 34596  01A560  D009               	goto	l19805
 34597                           
 34598                           ; BSR set to: 0
 34599  01A562  0E00               	movlw	0
 34600  01A564  0100               	movlb	0	; () banked
 34601  01A566  1BA4               	xorwf	___ftsub@f2& (0+255),f,b
 34602  01A568  0E00               	movlw	0
 34603  01A56A  0100               	movlb	0	; () banked
 34604  01A56C  1BA5               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 34605  01A56E  0E80               	movlw	128
 34606  01A570  0100               	movlb	0	; () banked
 34607  01A572  1BA6               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 34608  01A574                     l19805:
 34609                           
 34610                           ; BSR set to: 0
 34611  01A574  C0A1  F083         	movff	___ftsub@f1,___ftadd@f1
 34612  01A578  C0A2  F084         	movff	___ftsub@f1+1,___ftadd@f1+1
 34613  01A57C  C0A3  F085         	movff	___ftsub@f1+2,___ftadd@f1+2
 34614  01A580  C0A4  F086         	movff	___ftsub@f2,___ftadd@f2
 34615  01A584  C0A5  F087         	movff	___ftsub@f2+1,___ftadd@f2+1
 34616  01A588  C0A6  F088         	movff	___ftsub@f2+2,___ftadd@f2+2
 34617  01A58C  ECE4  F0AF         	call	___ftadd	;wreg free
 34618  01A590  C083  F0A1         	movff	?___ftadd,?___ftsub
 34619  01A594  C084  F0A2         	movff	?___ftadd+1,?___ftsub+1
 34620  01A598  C085  F0A3         	movff	?___ftadd+2,?___ftsub+2
 34621  01A59C  0012               	return	
 34622  01A59E                     __end_of___ftsub:
 34623                           	opt stack 0
 34624                           tblptru	equ	0xFF8
 34625                           tblptrh	equ	0xFF7
 34626                           tblptrl	equ	0xFF6
 34627                           tablat	equ	0xFF5
 34628                           prodh	equ	0xFF4
 34629                           prodl	equ	0xFF3
 34630                           intcon	equ	0xFF2
 34631                           postinc0	equ	0xFEE
 34632                           wreg	equ	0xFE8
 34633                           postdec1	equ	0xFE5
 34634                           fsr1h	equ	0xFE2
 34635                           fsr1l	equ	0xFE1
 34636                           indf2	equ	0xFDF
 34637                           postinc2	equ	0xFDE
 34638                           postdec2	equ	0xFDD
 34639                           fsr2h	equ	0xFDA
 34640                           fsr2l	equ	0xFD9
 34641                           status	equ	0xFD8
 34642                           
 34643 ;; *************** function ___ftadd *****************
 34644 ;; Defined at:
 34645 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 34646 ;; Parameters:    Size  Location     Type
 34647 ;;  f1              3   35[BANK0 ] float 
 34648 ;;  f2              3   38[BANK0 ] float 
 34649 ;; Auto vars:     Size  Location     Type
 34650 ;;  exp1            1   46[BANK0 ] unsigned char 
 34651 ;;  exp2            1   45[BANK0 ] unsigned char 
 34652 ;;  sign            1   44[BANK0 ] unsigned char 
 34653 ;; Return value:  Size  Location     Type
 34654 ;;                  3   35[BANK0 ] float 
 34655 ;; Registers used:
 34656 ;;		wreg, status,2, status,0, cstack
 34657 ;; Tracked objects:
 34658 ;;		On entry : 0/0
 34659 ;;		On exit  : 0/0
 34660 ;;		Unchanged: 0/0
 34661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34662 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34663 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34664 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34665 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34666 ;;Total ram usage:       12 bytes
 34667 ;; Hardware stack levels used:    1
 34668 ;; Hardware stack levels required when called:    4
 34669 ;; This function calls:
 34670 ;;		___ftpack
 34671 ;; This function is called by:
 34672 ;;		_Turbine_RPM_Cal
 34673 ;;		_Generator_RPM_Cal
 34674 ;;		_Wind_Speed_Cal
 34675 ;;		_Wind_Average
 34676 ;;		_Temp_Read
 34677 ;;		_Volt_Curr_Avg
 34678 ;;		_Freq_Calc
 34679 ;;		_R_PF_Calc
 34680 ;;		_R_PF_Avg
 34681 ;;		_Y_PF_Calc
 34682 ;;		_Y_PF_Avg
 34683 ;;		_B_PF_Calc
 34684 ;;		_B_PF_Avg
 34685 ;;		_Power_Factor
 34686 ;;		_Power_Calc
 34687 ;;		_Rotor_Slip_Cal
 34688 ;;		_Motor_Slip_Cal
 34689 ;;		_printf
 34690 ;;		_cos
 34691 ;;		___ftsub
 34692 ;;		_sin
 34693 ;;		_eval_poly
 34694 ;;		_floor
 34695 ;;		_Wind_Speed_2_Cal
 34696 ;;		_Turbine2Wheel_Ratio
 34697 ;;		_Turbine_RPM_Checking_Rampup
 34698 ;; This function uses a non-reentrant model
 34699 ;;
 34700                           
 34701                           	psect	text133
 34702  015FC8                     __ptext133:
 34703                           	opt stack 0
 34704  015FC8                     ___ftadd:
 34705                           	opt stack 25
 34706                           
 34707                           ;incstack = 0
 34708  015FC8  C085  F089         	movff	___ftadd@f1+2,??___ftadd
 34709  015FCC  0100               	movlb	0	; () banked
 34710  015FCE  6B8A               	clrf	(??___ftadd+1)& (0+255),b
 34711  015FD0  6B8B               	clrf	(??___ftadd+2)& (0+255),b
 34712  015FD2  0100               	movlb	0	; () banked
 34713  015FD4  3584               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 34714  015FD6  0100               	movlb	0	; () banked
 34715  015FD8  3789               	rlcf	??___ftadd& (0+255),f,b
 34716  015FDA  E301               	bnc	u12291
 34717  015FDC  818A               	bsf	(??___ftadd+1)& (0+255),0,b
 34718  015FDE                     u12291:
 34719  015FDE  0100               	movlb	0	; () banked
 34720  015FE0  5189               	movf	??___ftadd& (0+255),w,b
 34721  015FE2  0100               	movlb	0	; () banked
 34722  015FE4  6F8E               	movwf	___ftadd@exp1& (0+255),b
 34723  015FE6  C088  F089         	movff	___ftadd@f2+2,??___ftadd
 34724  015FEA  0100               	movlb	0	; () banked
 34725  015FEC  6B8A               	clrf	(??___ftadd+1)& (0+255),b
 34726  015FEE  6B8B               	clrf	(??___ftadd+2)& (0+255),b
 34727  015FF0  0100               	movlb	0	; () banked
 34728  015FF2  3587               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 34729  015FF4  0100               	movlb	0	; () banked
 34730  015FF6  3789               	rlcf	??___ftadd& (0+255),f,b
 34731  015FF8  E301               	bnc	u12301
 34732  015FFA  818A               	bsf	(??___ftadd+1)& (0+255),0,b
 34733  015FFC                     u12301:
 34734  015FFC  0100               	movlb	0	; () banked
 34735  015FFE  5189               	movf	??___ftadd& (0+255),w,b
 34736  016000  0100               	movlb	0	; () banked
 34737  016002  6F8D               	movwf	___ftadd@exp2& (0+255),b
 34738                           
 34739                           ; BSR set to: 0
 34740  016004  0100               	movlb	0	; () banked
 34741  016006  518E               	movf	___ftadd@exp1& (0+255),w,b
 34742  016008  0100               	movlb	0	; () banked
 34743  01600A  B4D8               	btfsc	status,2,c
 34744  01600C  D011               	goto	l10714
 34745                           
 34746                           ; BSR set to: 0
 34747  01600E  0100               	movlb	0	; () banked
 34748  016010  518D               	movf	___ftadd@exp2& (0+255),w,b
 34749  016012  0100               	movlb	0	; () banked
 34750  016014  5D8E               	subwf	___ftadd@exp1& (0+255),w,b
 34751  016016  B0D8               	btfsc	status,0,c
 34752  016018  D012               	goto	l19455
 34753                           
 34754                           ; BSR set to: 0
 34755  01601A  0100               	movlb	0	; () banked
 34756  01601C  518E               	movf	___ftadd@exp1& (0+255),w,b
 34757  01601E  0800               	sublw	0
 34758  016020  0100               	movlb	0	; () banked
 34759  016022  258D               	addwf	___ftadd@exp2& (0+255),w,b
 34760  016024  0100               	movlb	0	; () banked
 34761  016026  6F89               	movwf	??___ftadd& (0+255),b
 34762  016028  0E18               	movlw	24
 34763  01602A  0100               	movlb	0	; () banked
 34764  01602C  6589               	cpfsgt	??___ftadd& (0+255),b
 34765  01602E  D007               	goto	l19455
 34766  016030                     l10714:
 34767                           
 34768                           ; BSR set to: 0
 34769  016030  C086  F083         	movff	___ftadd@f2,?___ftadd
 34770  016034  C087  F084         	movff	___ftadd@f2+1,?___ftadd+1
 34771  016038  C088  F085         	movff	___ftadd@f2+2,?___ftadd+2
 34772  01603C  0012               	return	
 34773  01603E                     l19455:
 34774                           
 34775                           ; BSR set to: 0
 34776  01603E  0100               	movlb	0	; () banked
 34777  016040  518D               	movf	___ftadd@exp2& (0+255),w,b
 34778  016042  0100               	movlb	0	; () banked
 34779  016044  B4D8               	btfsc	status,2,c
 34780  016046  D011               	goto	l10718
 34781                           
 34782                           ; BSR set to: 0
 34783  016048  0100               	movlb	0	; () banked
 34784  01604A  518E               	movf	___ftadd@exp1& (0+255),w,b
 34785  01604C  0100               	movlb	0	; () banked
 34786  01604E  5D8D               	subwf	___ftadd@exp2& (0+255),w,b
 34787  016050  B0D8               	btfsc	status,0,c
 34788  016052  D012               	goto	l19461
 34789                           
 34790                           ; BSR set to: 0
 34791  016054  0100               	movlb	0	; () banked
 34792  016056  518D               	movf	___ftadd@exp2& (0+255),w,b
 34793  016058  0800               	sublw	0
 34794  01605A  0100               	movlb	0	; () banked
 34795  01605C  258E               	addwf	___ftadd@exp1& (0+255),w,b
 34796  01605E  0100               	movlb	0	; () banked
 34797  016060  6F89               	movwf	??___ftadd& (0+255),b
 34798  016062  0E18               	movlw	24
 34799  016064  0100               	movlb	0	; () banked
 34800  016066  6589               	cpfsgt	??___ftadd& (0+255),b
 34801  016068  D007               	goto	l19461
 34802  01606A                     l10718:
 34803                           
 34804                           ; BSR set to: 0
 34805  01606A  C083  F083         	movff	___ftadd@f1,?___ftadd
 34806  01606E  C084  F084         	movff	___ftadd@f1+1,?___ftadd+1
 34807  016072  C085  F085         	movff	___ftadd@f1+2,?___ftadd+2
 34808  016076  0012               	return	
 34809  016078                     l19461:
 34810                           
 34811                           ; BSR set to: 0
 34812  016078  0E06               	movlw	6
 34813  01607A  0100               	movlb	0	; () banked
 34814  01607C  6F8C               	movwf	___ftadd@sign& (0+255),b
 34815                           
 34816                           ; BSR set to: 0
 34817  01607E  0100               	movlb	0	; () banked
 34818  016080  AF85               	btfss	(___ftadd@f1+2)& (0+255),7,b
 34819  016082  D002               	goto	l19467
 34820                           
 34821                           ; BSR set to: 0
 34822  016084  0100               	movlb	0	; () banked
 34823  016086  8F8C               	bsf	___ftadd@sign& (0+255),7,b
 34824  016088                     l19467:
 34825                           
 34826                           ; BSR set to: 0
 34827  016088  0100               	movlb	0	; () banked
 34828  01608A  AF88               	btfss	(___ftadd@f2+2)& (0+255),7,b
 34829  01608C  D002               	goto	l10720
 34830                           
 34831                           ; BSR set to: 0
 34832  01608E  0100               	movlb	0	; () banked
 34833  016090  8D8C               	bsf	___ftadd@sign& (0+255),6,b
 34834  016092                     l10720:
 34835                           
 34836                           ; BSR set to: 0
 34837  016092  0100               	movlb	0	; () banked
 34838  016094  8F84               	bsf	(___ftadd@f1+1)& (0+255),7,b
 34839                           
 34840                           ; BSR set to: 0
 34841  016096  0EFF               	movlw	255
 34842  016098  0100               	movlb	0	; () banked
 34843  01609A  1783               	andwf	___ftadd@f1& (0+255),f,b
 34844  01609C  0EFF               	movlw	255
 34845  01609E  0100               	movlb	0	; () banked
 34846  0160A0  1784               	andwf	(___ftadd@f1+1)& (0+255),f,b
 34847  0160A2  0E00               	movlw	0
 34848  0160A4  0100               	movlb	0	; () banked
 34849  0160A6  1785               	andwf	(___ftadd@f1+2)& (0+255),f,b
 34850  0160A8  0100               	movlb	0	; () banked
 34851  0160AA  8F87               	bsf	(___ftadd@f2+1)& (0+255),7,b
 34852                           
 34853                           ; BSR set to: 0
 34854  0160AC  0EFF               	movlw	255
 34855  0160AE  0100               	movlb	0	; () banked
 34856  0160B0  1786               	andwf	___ftadd@f2& (0+255),f,b
 34857  0160B2  0EFF               	movlw	255
 34858  0160B4  0100               	movlb	0	; () banked
 34859  0160B6  1787               	andwf	(___ftadd@f2+1)& (0+255),f,b
 34860  0160B8  0E00               	movlw	0
 34861  0160BA  0100               	movlb	0	; () banked
 34862  0160BC  1788               	andwf	(___ftadd@f2+2)& (0+255),f,b
 34863                           
 34864                           ; BSR set to: 0
 34865  0160BE  0100               	movlb	0	; () banked
 34866  0160C0  518D               	movf	___ftadd@exp2& (0+255),w,b
 34867  0160C2  0100               	movlb	0	; () banked
 34868  0160C4  5D8E               	subwf	___ftadd@exp1& (0+255),w,b
 34869  0160C6  B0D8               	btfsc	status,0,c
 34870  0160C8  D025               	goto	l19487
 34871  0160CA                     l19477:
 34872                           
 34873                           ; BSR set to: 0
 34874  0160CA  0100               	movlb	0	; () banked
 34875  0160CC  90D8               	bcf	status,0,c
 34876  0160CE  3786               	rlcf	___ftadd@f2& (0+255),f,b
 34877  0160D0  3787               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 34878  0160D2  3788               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 34879  0160D4  0100               	movlb	0	; () banked
 34880  0160D6  078D               	decf	___ftadd@exp2& (0+255),f,b
 34881                           
 34882                           ; BSR set to: 0
 34883  0160D8  0100               	movlb	0	; () banked
 34884  0160DA  518E               	movf	___ftadd@exp1& (0+255),w,b
 34885  0160DC  0100               	movlb	0	; () banked
 34886  0160DE  198D               	xorwf	___ftadd@exp2& (0+255),w,b
 34887  0160E0  B4D8               	btfsc	status,2,c
 34888  0160E2  D011               	goto	l19485
 34889                           
 34890                           ; BSR set to: 0
 34891  0160E4  0100               	movlb	0	; () banked
 34892  0160E6  078C               	decf	___ftadd@sign& (0+255),f,b
 34893  0160E8  C08C  F089         	movff	___ftadd@sign,??___ftadd
 34894  0160EC  0E07               	movlw	7
 34895  0160EE  0100               	movlb	0	; () banked
 34896  0160F0  1789               	andwf	??___ftadd& (0+255),f,b
 34897  0160F2  B4D8               	btfsc	status,2,c
 34898  0160F4  D008               	goto	l19485
 34899  0160F6  D7E9               	goto	l19477
 34900  0160F8                     l19483:
 34901                           
 34902                           ; BSR set to: 0
 34903  0160F8  0100               	movlb	0	; () banked
 34904  0160FA  90D8               	bcf	status,0,c
 34905  0160FC  3385               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 34906  0160FE  3384               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 34907  016100  3383               	rrcf	___ftadd@f1& (0+255),f,b
 34908  016102  0100               	movlb	0	; () banked
 34909  016104  2B8E               	incf	___ftadd@exp1& (0+255),f,b
 34910  016106                     l19485:
 34911                           
 34912                           ; BSR set to: 0
 34913  016106  0100               	movlb	0	; () banked
 34914  016108  518D               	movf	___ftadd@exp2& (0+255),w,b
 34915  01610A  0100               	movlb	0	; () banked
 34916  01610C  198E               	xorwf	___ftadd@exp1& (0+255),w,b
 34917  01610E  B4D8               	btfsc	status,2,c
 34918  016110  D02B               	goto	l10729
 34919  016112  D7F2               	goto	l19483
 34920  016114                     l19487:
 34921                           
 34922                           ; BSR set to: 0
 34923  016114  0100               	movlb	0	; () banked
 34924  016116  518E               	movf	___ftadd@exp1& (0+255),w,b
 34925  016118  0100               	movlb	0	; () banked
 34926  01611A  5D8D               	subwf	___ftadd@exp2& (0+255),w,b
 34927  01611C  B0D8               	btfsc	status,0,c
 34928  01611E  D024               	goto	l10729
 34929  016120                     l19489:
 34930                           
 34931                           ; BSR set to: 0
 34932  016120  0100               	movlb	0	; () banked
 34933  016122  90D8               	bcf	status,0,c
 34934  016124  3783               	rlcf	___ftadd@f1& (0+255),f,b
 34935  016126  3784               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 34936  016128  3785               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 34937  01612A  0100               	movlb	0	; () banked
 34938  01612C  078E               	decf	___ftadd@exp1& (0+255),f,b
 34939                           
 34940                           ; BSR set to: 0
 34941  01612E  0100               	movlb	0	; () banked
 34942  016130  518E               	movf	___ftadd@exp1& (0+255),w,b
 34943  016132  0100               	movlb	0	; () banked
 34944  016134  198D               	xorwf	___ftadd@exp2& (0+255),w,b
 34945  016136  B4D8               	btfsc	status,2,c
 34946  016138  D011               	goto	l19497
 34947                           
 34948                           ; BSR set to: 0
 34949  01613A  0100               	movlb	0	; () banked
 34950  01613C  078C               	decf	___ftadd@sign& (0+255),f,b
 34951  01613E  C08C  F089         	movff	___ftadd@sign,??___ftadd
 34952  016142  0E07               	movlw	7
 34953  016144  0100               	movlb	0	; () banked
 34954  016146  1789               	andwf	??___ftadd& (0+255),f,b
 34955  016148  B4D8               	btfsc	status,2,c
 34956  01614A  D008               	goto	l19497
 34957  01614C  D7E9               	goto	l19489
 34958  01614E                     l19495:
 34959                           
 34960                           ; BSR set to: 0
 34961  01614E  0100               	movlb	0	; () banked
 34962  016150  90D8               	bcf	status,0,c
 34963  016152  3388               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 34964  016154  3387               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 34965  016156  3386               	rrcf	___ftadd@f2& (0+255),f,b
 34966  016158  0100               	movlb	0	; () banked
 34967  01615A  2B8D               	incf	___ftadd@exp2& (0+255),f,b
 34968  01615C                     l19497:
 34969                           
 34970                           ; BSR set to: 0
 34971  01615C  0100               	movlb	0	; () banked
 34972  01615E  518D               	movf	___ftadd@exp2& (0+255),w,b
 34973  016160  0100               	movlb	0	; () banked
 34974  016162  198E               	xorwf	___ftadd@exp1& (0+255),w,b
 34975  016164  A4D8               	btfss	status,2,c
 34976  016166  D7F3               	goto	l19495
 34977  016168                     l10729:
 34978                           
 34979                           ; BSR set to: 0
 34980  016168  0100               	movlb	0	; () banked
 34981  01616A  AF8C               	btfss	___ftadd@sign& (0+255),7,b
 34982  01616C  D012               	goto	l10738
 34983                           
 34984                           ; BSR set to: 0
 34985  01616E  0EFF               	movlw	255
 34986  016170  0100               	movlb	0	; () banked
 34987  016172  1B83               	xorwf	___ftadd@f1& (0+255),f,b
 34988  016174  0EFF               	movlw	255
 34989  016176  0100               	movlb	0	; () banked
 34990  016178  1B84               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 34991  01617A  0EFF               	movlw	255
 34992  01617C  0100               	movlb	0	; () banked
 34993  01617E  1B85               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 34994  016180  0E01               	movlw	1
 34995  016182  0100               	movlb	0	; () banked
 34996  016184  2783               	addwf	___ftadd@f1& (0+255),f,b
 34997  016186  0E00               	movlw	0
 34998  016188  0100               	movlb	0	; () banked
 34999  01618A  2384               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 35000  01618C  0E00               	movlw	0
 35001  01618E  0100               	movlb	0	; () banked
 35002  016190  2385               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 35003  016192                     l10738:
 35004                           
 35005                           ; BSR set to: 0
 35006  016192  0100               	movlb	0	; () banked
 35007  016194  AD8C               	btfss	___ftadd@sign& (0+255),6,b
 35008  016196  D012               	goto	l19503
 35009                           
 35010                           ; BSR set to: 0
 35011  016198  0EFF               	movlw	255
 35012  01619A  0100               	movlb	0	; () banked
 35013  01619C  1B86               	xorwf	___ftadd@f2& (0+255),f,b
 35014  01619E  0EFF               	movlw	255
 35015  0161A0  0100               	movlb	0	; () banked
 35016  0161A2  1B87               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 35017  0161A4  0EFF               	movlw	255
 35018  0161A6  0100               	movlb	0	; () banked
 35019  0161A8  1B88               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 35020  0161AA  0E01               	movlw	1
 35021  0161AC  0100               	movlb	0	; () banked
 35022  0161AE  2786               	addwf	___ftadd@f2& (0+255),f,b
 35023  0161B0  0E00               	movlw	0
 35024  0161B2  0100               	movlb	0	; () banked
 35025  0161B4  2387               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35026  0161B6  0E00               	movlw	0
 35027  0161B8  0100               	movlb	0	; () banked
 35028  0161BA  2388               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35029  0161BC                     l19503:
 35030                           
 35031                           ; BSR set to: 0
 35032  0161BC  0E00               	movlw	0
 35033  0161BE  0100               	movlb	0	; () banked
 35034  0161C0  6F8C               	movwf	___ftadd@sign& (0+255),b
 35035                           
 35036                           ; BSR set to: 0
 35037  0161C2  0100               	movlb	0	; () banked
 35038  0161C4  5183               	movf	___ftadd@f1& (0+255),w,b
 35039  0161C6  0100               	movlb	0	; () banked
 35040  0161C8  2786               	addwf	___ftadd@f2& (0+255),f,b
 35041  0161CA  0100               	movlb	0	; () banked
 35042  0161CC  5184               	movf	(___ftadd@f1+1)& (0+255),w,b
 35043  0161CE  0100               	movlb	0	; () banked
 35044  0161D0  2387               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35045  0161D2  0100               	movlb	0	; () banked
 35046  0161D4  5185               	movf	(___ftadd@f1+2)& (0+255),w,b
 35047  0161D6  0100               	movlb	0	; () banked
 35048  0161D8  2388               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35049                           
 35050                           ; BSR set to: 0
 35051  0161DA  0100               	movlb	0	; () banked
 35052  0161DC  AF88               	btfss	(___ftadd@f2+2)& (0+255),7,b
 35053  0161DE  D015               	goto	l19513
 35054                           
 35055                           ; BSR set to: 0
 35056  0161E0  0EFF               	movlw	255
 35057  0161E2  0100               	movlb	0	; () banked
 35058  0161E4  1B86               	xorwf	___ftadd@f2& (0+255),f,b
 35059  0161E6  0EFF               	movlw	255
 35060  0161E8  0100               	movlb	0	; () banked
 35061  0161EA  1B87               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 35062  0161EC  0EFF               	movlw	255
 35063  0161EE  0100               	movlb	0	; () banked
 35064  0161F0  1B88               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 35065  0161F2  0E01               	movlw	1
 35066  0161F4  0100               	movlb	0	; () banked
 35067  0161F6  2786               	addwf	___ftadd@f2& (0+255),f,b
 35068  0161F8  0E00               	movlw	0
 35069  0161FA  0100               	movlb	0	; () banked
 35070  0161FC  2387               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 35071  0161FE  0E00               	movlw	0
 35072  016200  0100               	movlb	0	; () banked
 35073  016202  2388               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 35074                           
 35075                           ; BSR set to: 0
 35076  016204  0E01               	movlw	1
 35077  016206  0100               	movlb	0	; () banked
 35078  016208  6F8C               	movwf	___ftadd@sign& (0+255),b
 35079  01620A                     l19513:
 35080                           
 35081                           ; BSR set to: 0
 35082  01620A  C086  F01D         	movff	___ftadd@f2,___ftpack@arg
 35083  01620E  C087  F01E         	movff	___ftadd@f2+1,___ftpack@arg+1
 35084  016212  C088  F01F         	movff	___ftadd@f2+2,___ftpack@arg+2
 35085  016216  C08E  F020         	movff	___ftadd@exp1,___ftpack@exp
 35086  01621A  C08C  F021         	movff	___ftadd@sign,___ftpack@sign
 35087  01621E  ECA0  F0CB         	call	___ftpack	;wreg free
 35088  016222  C01D  F083         	movff	?___ftpack,?___ftadd
 35089  016226  C01E  F084         	movff	?___ftpack+1,?___ftadd+1
 35090  01622A  C01F  F085         	movff	?___ftpack+2,?___ftadd+2
 35091  01622E  0012               	return	
 35092  016230                     __end_of___ftadd:
 35093                           	opt stack 0
 35094                           tblptru	equ	0xFF8
 35095                           tblptrh	equ	0xFF7
 35096                           tblptrl	equ	0xFF6
 35097                           tablat	equ	0xFF5
 35098                           prodh	equ	0xFF4
 35099                           prodl	equ	0xFF3
 35100                           intcon	equ	0xFF2
 35101                           postinc0	equ	0xFEE
 35102                           wreg	equ	0xFE8
 35103                           postdec1	equ	0xFE5
 35104                           fsr1h	equ	0xFE2
 35105                           fsr1l	equ	0xFE1
 35106                           indf2	equ	0xFDF
 35107                           postinc2	equ	0xFDE
 35108                           postdec2	equ	0xFDD
 35109                           fsr2h	equ	0xFDA
 35110                           fsr2l	equ	0xFD9
 35111                           status	equ	0xFD8
 35112                           
 35113 ;; *************** function ___ftneg *****************
 35114 ;; Defined at:
 35115 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 35116 ;; Parameters:    Size  Location     Type
 35117 ;;  f1              3   25[BANK0 ] float 
 35118 ;; Auto vars:     Size  Location     Type
 35119 ;;		None
 35120 ;; Return value:  Size  Location     Type
 35121 ;;                  3   25[BANK0 ] float 
 35122 ;; Registers used:
 35123 ;;		wreg, status,2, status,0
 35124 ;; Tracked objects:
 35125 ;;		On entry : 0/0
 35126 ;;		On exit  : 0/0
 35127 ;;		Unchanged: 0/0
 35128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35129 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35132 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35133 ;;Total ram usage:        3 bytes
 35134 ;; Hardware stack levels used:    1
 35135 ;; Hardware stack levels required when called:    3
 35136 ;; This function calls:
 35137 ;;		Nothing
 35138 ;; This function is called by:
 35139 ;;		_Freq_Calc
 35140 ;;		_R_PF_Calc
 35141 ;;		_Y_PF_Calc
 35142 ;;		_B_PF_Calc
 35143 ;;		_Power_Calc
 35144 ;;		_Rotor_Slip_Cal
 35145 ;;		_Motor_Slip_Cal
 35146 ;;		_printf
 35147 ;;		_sin
 35148 ;;		_Turbine_RPM_Checking_Rampup
 35149 ;; This function uses a non-reentrant model
 35150 ;;
 35151                           
 35152                           	psect	text134
 35153  01A7C0                     __ptext134:
 35154                           	opt stack 0
 35155  01A7C0                     ___ftneg:
 35156                           	opt stack 26
 35157                           
 35158                           ;incstack = 0
 35159  01A7C0  0100               	movlb	0	; () banked
 35160  01A7C2  5179               	movf	___ftneg@f1& (0+255),w,b
 35161  01A7C4  0100               	movlb	0	; () banked
 35162  01A7C6  117A               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 35163  01A7C8  0100               	movlb	0	; () banked
 35164  01A7CA  117B               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 35165  01A7CC  B4D8               	btfsc	status,2,c
 35166  01A7CE  D009               	goto	l10788
 35167                           
 35168                           ; BSR set to: 0
 35169  01A7D0  0E00               	movlw	0
 35170  01A7D2  0100               	movlb	0	; () banked
 35171  01A7D4  1B79               	xorwf	___ftneg@f1& (0+255),f,b
 35172  01A7D6  0E00               	movlw	0
 35173  01A7D8  0100               	movlb	0	; () banked
 35174  01A7DA  1B7A               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 35175  01A7DC  0E80               	movlw	128
 35176  01A7DE  0100               	movlb	0	; () banked
 35177  01A7E0  1B7B               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 35178  01A7E2                     l10788:
 35179                           
 35180                           ; BSR set to: 0
 35181  01A7E2  C079  F079         	movff	___ftneg@f1,?___ftneg
 35182  01A7E6  C07A  F07A         	movff	___ftneg@f1+1,?___ftneg+1
 35183  01A7EA  C07B  F07B         	movff	___ftneg@f1+2,?___ftneg+2
 35184                           
 35185                           ; BSR set to: 0
 35186  01A7EE  0012               	return		;funcret
 35187  01A7F0                     __end_of___ftneg:
 35188                           	opt stack 0
 35189                           tblptru	equ	0xFF8
 35190                           tblptrh	equ	0xFF7
 35191                           tblptrl	equ	0xFF6
 35192                           tablat	equ	0xFF5
 35193                           prodh	equ	0xFF4
 35194                           prodl	equ	0xFF3
 35195                           intcon	equ	0xFF2
 35196                           postinc0	equ	0xFEE
 35197                           wreg	equ	0xFE8
 35198                           postdec1	equ	0xFE5
 35199                           fsr1h	equ	0xFE2
 35200                           fsr1l	equ	0xFE1
 35201                           indf2	equ	0xFDF
 35202                           postinc2	equ	0xFDE
 35203                           postdec2	equ	0xFDD
 35204                           fsr2h	equ	0xFDA
 35205                           fsr2l	equ	0xFD9
 35206                           status	equ	0xFD8
 35207                           
 35208 ;; *************** function ___ftdiv *****************
 35209 ;; Defined at:
 35210 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 35211 ;; Parameters:    Size  Location     Type
 35212 ;;  f1              3   59[BANK0 ] float 
 35213 ;;  f2              3   62[BANK0 ] float 
 35214 ;; Auto vars:     Size  Location     Type
 35215 ;;  f3              3   69[BANK0 ] float 
 35216 ;;  sign            1   73[BANK0 ] unsigned char 
 35217 ;;  exp             1   72[BANK0 ] unsigned char 
 35218 ;;  cntr            1   68[BANK0 ] unsigned char 
 35219 ;; Return value:  Size  Location     Type
 35220 ;;                  3   59[BANK0 ] float 
 35221 ;; Registers used:
 35222 ;;		wreg, status,2, status,0, cstack
 35223 ;; Tracked objects:
 35224 ;;		On entry : 0/0
 35225 ;;		On exit  : 0/0
 35226 ;;		Unchanged: 0/0
 35227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35228 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35229 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35230 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35231 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35232 ;;Total ram usage:       15 bytes
 35233 ;; Hardware stack levels used:    1
 35234 ;; Hardware stack levels required when called:    4
 35235 ;; This function calls:
 35236 ;;		___ftpack
 35237 ;; This function is called by:
 35238 ;;		_Turbine_RPM_Cal
 35239 ;;		_Generator_RPM_Cal
 35240 ;;		_Wind_Speed_Cal
 35241 ;;		_Wind_Average
 35242 ;;		_VFD_Freq_Step_up
 35243 ;;		_VFD_RS485_Data
 35244 ;;		_Temp_Read
 35245 ;;		_Volt_Curr_Avg
 35246 ;;		_Freq_Calc
 35247 ;;		_R_PF_Calc
 35248 ;;		_R_PF_Avg
 35249 ;;		_Y_PF_Calc
 35250 ;;		_Y_PF_Avg
 35251 ;;		_B_PF_Calc
 35252 ;;		_B_PF_Avg
 35253 ;;		_Power_Factor
 35254 ;;		_Power_Calc
 35255 ;;		_Rotor_Slip_Cal
 35256 ;;		_Motor_Slip_Cal
 35257 ;;		_sin
 35258 ;;		_Wind_Speed_2_Cal
 35259 ;; This function uses a non-reentrant model
 35260 ;;
 35261                           
 35262                           	psect	text135
 35263  017F12                     __ptext135:
 35264                           	opt stack 0
 35265  017F12                     ___ftdiv:
 35266                           	opt stack 25
 35267                           
 35268                           ; BSR set to: 0
 35269                           ;incstack = 0
 35270  017F12  C09D  F0A1         	movff	___ftdiv@f1+2,??___ftdiv
 35271  017F16  0100               	movlb	0	; () banked
 35272  017F18  6BA2               	clrf	(??___ftdiv+1)& (0+255),b
 35273  017F1A  6BA3               	clrf	(??___ftdiv+2)& (0+255),b
 35274  017F1C  0100               	movlb	0	; () banked
 35275  017F1E  359C               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 35276  017F20  0100               	movlb	0	; () banked
 35277  017F22  37A1               	rlcf	??___ftdiv& (0+255),f,b
 35278  017F24  E301               	bnc	u13691
 35279  017F26  81A2               	bsf	(??___ftdiv+1)& (0+255),0,b
 35280  017F28                     u13691:
 35281  017F28  0100               	movlb	0	; () banked
 35282  017F2A  51A1               	movf	??___ftdiv& (0+255),w,b
 35283  017F2C  0100               	movlb	0	; () banked
 35284  017F2E  6FA8               	movwf	___ftdiv@exp& (0+255),b
 35285  017F30  0100               	movlb	0	; () banked
 35286  017F32  51A8               	movf	___ftdiv@exp& (0+255),w,b
 35287  017F34  A4D8               	btfss	status,2,c
 35288  017F36  D00A               	goto	l20255
 35289                           
 35290                           ; BSR set to: 0
 35291  017F38  0E00               	movlw	0
 35292  017F3A  0100               	movlb	0	; () banked
 35293  017F3C  6F9B               	movwf	?___ftdiv& (0+255),b
 35294  017F3E  0E00               	movlw	0
 35295  017F40  0100               	movlb	0	; () banked
 35296  017F42  6F9C               	movwf	(?___ftdiv+1)& (0+255),b
 35297  017F44  0E00               	movlw	0
 35298  017F46  0100               	movlb	0	; () banked
 35299  017F48  6F9D               	movwf	(?___ftdiv+2)& (0+255),b
 35300                           
 35301                           ; BSR set to: 0
 35302  017F4A  0012               	return	
 35303  017F4C                     l20255:
 35304                           
 35305                           ; BSR set to: 0
 35306  017F4C  C0A0  F0A1         	movff	___ftdiv@f2+2,??___ftdiv
 35307  017F50  0100               	movlb	0	; () banked
 35308  017F52  6BA2               	clrf	(??___ftdiv+1)& (0+255),b
 35309  017F54  6BA3               	clrf	(??___ftdiv+2)& (0+255),b
 35310  017F56  0100               	movlb	0	; () banked
 35311  017F58  359F               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 35312  017F5A  0100               	movlb	0	; () banked
 35313  017F5C  37A1               	rlcf	??___ftdiv& (0+255),f,b
 35314  017F5E  E301               	bnc	u13711
 35315  017F60  81A2               	bsf	(??___ftdiv+1)& (0+255),0,b
 35316  017F62                     u13711:
 35317  017F62  0100               	movlb	0	; () banked
 35318  017F64  51A1               	movf	??___ftdiv& (0+255),w,b
 35319  017F66  0100               	movlb	0	; () banked
 35320  017F68  6FA9               	movwf	___ftdiv@sign& (0+255),b
 35321  017F6A  0100               	movlb	0	; () banked
 35322  017F6C  51A9               	movf	___ftdiv@sign& (0+255),w,b
 35323  017F6E  A4D8               	btfss	status,2,c
 35324  017F70  D00A               	goto	l20261
 35325                           
 35326                           ; BSR set to: 0
 35327  017F72  0E00               	movlw	0
 35328  017F74  0100               	movlb	0	; () banked
 35329  017F76  6F9B               	movwf	?___ftdiv& (0+255),b
 35330  017F78  0E00               	movlw	0
 35331  017F7A  0100               	movlb	0	; () banked
 35332  017F7C  6F9C               	movwf	(?___ftdiv+1)& (0+255),b
 35333  017F7E  0E00               	movlw	0
 35334  017F80  0100               	movlb	0	; () banked
 35335  017F82  6F9D               	movwf	(?___ftdiv+2)& (0+255),b
 35336                           
 35337                           ; BSR set to: 0
 35338  017F84  0012               	return	
 35339  017F86                     l20261:
 35340                           
 35341                           ; BSR set to: 0
 35342  017F86  0E00               	movlw	0
 35343  017F88  0100               	movlb	0	; () banked
 35344  017F8A  6FA5               	movwf	___ftdiv@f3& (0+255),b
 35345  017F8C  0E00               	movlw	0
 35346  017F8E  0100               	movlb	0	; () banked
 35347  017F90  6FA6               	movwf	(___ftdiv@f3+1)& (0+255),b
 35348  017F92  0E00               	movlw	0
 35349  017F94  0100               	movlb	0	; () banked
 35350  017F96  6FA7               	movwf	(___ftdiv@f3+2)& (0+255),b
 35351                           
 35352                           ; BSR set to: 0
 35353  017F98  0100               	movlb	0	; () banked
 35354  017F9A  51A9               	movf	___ftdiv@sign& (0+255),w,b
 35355  017F9C  0F89               	addlw	137
 35356  017F9E  0100               	movlb	0	; () banked
 35357  017FA0  5FA8               	subwf	___ftdiv@exp& (0+255),f,b
 35358                           
 35359                           ; BSR set to: 0
 35360  017FA2  C09D  F0A9         	movff	___ftdiv@f1+2,___ftdiv@sign
 35361                           
 35362                           ; BSR set to: 0
 35363  017FA6  0100               	movlb	0	; () banked
 35364  017FA8  51A0               	movf	(___ftdiv@f2+2)& (0+255),w,b
 35365  017FAA  0100               	movlb	0	; () banked
 35366  017FAC  1BA9               	xorwf	___ftdiv@sign& (0+255),f,b
 35367                           
 35368                           ; BSR set to: 0
 35369  017FAE  0E80               	movlw	128
 35370  017FB0  0100               	movlb	0	; () banked
 35371  017FB2  17A9               	andwf	___ftdiv@sign& (0+255),f,b
 35372                           
 35373                           ; BSR set to: 0
 35374  017FB4  0100               	movlb	0	; () banked
 35375  017FB6  8F9C               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 35376                           
 35377                           ; BSR set to: 0
 35378  017FB8  0EFF               	movlw	255
 35379  017FBA  0100               	movlb	0	; () banked
 35380  017FBC  179B               	andwf	___ftdiv@f1& (0+255),f,b
 35381  017FBE  0EFF               	movlw	255
 35382  017FC0  0100               	movlb	0	; () banked
 35383  017FC2  179C               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 35384  017FC4  0E00               	movlw	0
 35385  017FC6  0100               	movlb	0	; () banked
 35386  017FC8  179D               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 35387                           
 35388                           ; BSR set to: 0
 35389  017FCA  0100               	movlb	0	; () banked
 35390  017FCC  8F9F               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 35391                           
 35392                           ; BSR set to: 0
 35393  017FCE  0EFF               	movlw	255
 35394  017FD0  0100               	movlb	0	; () banked
 35395  017FD2  179E               	andwf	___ftdiv@f2& (0+255),f,b
 35396  017FD4  0EFF               	movlw	255
 35397  017FD6  0100               	movlb	0	; () banked
 35398  017FD8  179F               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 35399  017FDA  0E00               	movlw	0
 35400  017FDC  0100               	movlb	0	; () banked
 35401  017FDE  17A0               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 35402                           
 35403                           ; BSR set to: 0
 35404  017FE0  0E18               	movlw	24
 35405  017FE2  0100               	movlb	0	; () banked
 35406  017FE4  6FA4               	movwf	___ftdiv@cntr& (0+255),b
 35407  017FE6                     l20281:
 35408                           
 35409                           ; BSR set to: 0
 35410  017FE6  0100               	movlb	0	; () banked
 35411  017FE8  90D8               	bcf	status,0,c
 35412  017FEA  37A5               	rlcf	___ftdiv@f3& (0+255),f,b
 35413  017FEC  37A6               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 35414  017FEE  37A7               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 35415                           
 35416                           ; BSR set to: 0
 35417  017FF0  0100               	movlb	0	; () banked
 35418  017FF2  519E               	movf	___ftdiv@f2& (0+255),w,b
 35419  017FF4  0100               	movlb	0	; () banked
 35420  017FF6  5D9B               	subwf	___ftdiv@f1& (0+255),w,b
 35421  017FF8  0100               	movlb	0	; () banked
 35422  017FFA  519F               	movf	(___ftdiv@f2+1)& (0+255),w,b
 35423  017FFC  0100               	movlb	0	; () banked
 35424  017FFE  599C               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 35425  018000  0100               	movlb	0	; () banked
 35426  018002  51A0               	movf	(___ftdiv@f2+2)& (0+255),w,b
 35427  018004  0100               	movlb	0	; () banked
 35428  018006  599D               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 35429  018008  A0D8               	btfss	status,0,c
 35430  01800A  D00E               	goto	l10749
 35431                           
 35432                           ; BSR set to: 0
 35433  01800C  0100               	movlb	0	; () banked
 35434  01800E  519E               	movf	___ftdiv@f2& (0+255),w,b
 35435  018010  0100               	movlb	0	; () banked
 35436  018012  5F9B               	subwf	___ftdiv@f1& (0+255),f,b
 35437  018014  0100               	movlb	0	; () banked
 35438  018016  519F               	movf	(___ftdiv@f2+1)& (0+255),w,b
 35439  018018  0100               	movlb	0	; () banked
 35440  01801A  5B9C               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 35441  01801C  0100               	movlb	0	; () banked
 35442  01801E  51A0               	movf	(___ftdiv@f2+2)& (0+255),w,b
 35443  018020  0100               	movlb	0	; () banked
 35444  018022  5B9D               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 35445                           
 35446                           ; BSR set to: 0
 35447  018024  0100               	movlb	0	; () banked
 35448  018026  81A5               	bsf	___ftdiv@f3& (0+255),0,b
 35449  018028                     l10749:
 35450                           
 35451                           ; BSR set to: 0
 35452  018028  0100               	movlb	0	; () banked
 35453  01802A  90D8               	bcf	status,0,c
 35454  01802C  379B               	rlcf	___ftdiv@f1& (0+255),f,b
 35455  01802E  379C               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 35456  018030  379D               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 35457                           
 35458                           ; BSR set to: 0
 35459  018032  0100               	movlb	0	; () banked
 35460  018034  2FA4               	decfsz	___ftdiv@cntr& (0+255),f,b
 35461  018036  D7D7               	goto	l20281
 35462                           
 35463                           ; BSR set to: 0
 35464                           
 35465                           ; BSR set to: 0
 35466  018038  C0A5  F01D         	movff	___ftdiv@f3,___ftpack@arg
 35467  01803C  C0A6  F01E         	movff	___ftdiv@f3+1,___ftpack@arg+1
 35468  018040  C0A7  F01F         	movff	___ftdiv@f3+2,___ftpack@arg+2
 35469  018044  C0A8  F020         	movff	___ftdiv@exp,___ftpack@exp
 35470  018048  C0A9  F021         	movff	___ftdiv@sign,___ftpack@sign
 35471  01804C  ECA0  F0CB         	call	___ftpack	;wreg free
 35472  018050  C01D  F09B         	movff	?___ftpack,?___ftdiv
 35473  018054  C01E  F09C         	movff	?___ftpack+1,?___ftdiv+1
 35474  018058  C01F  F09D         	movff	?___ftpack+2,?___ftdiv+2
 35475  01805C  0012               	return	
 35476  01805E                     __end_of___ftdiv:
 35477                           	opt stack 0
 35478                           tblptru	equ	0xFF8
 35479                           tblptrh	equ	0xFF7
 35480                           tblptrl	equ	0xFF6
 35481                           tablat	equ	0xFF5
 35482                           prodh	equ	0xFF4
 35483                           prodl	equ	0xFF3
 35484                           intcon	equ	0xFF2
 35485                           postinc0	equ	0xFEE
 35486                           wreg	equ	0xFE8
 35487                           postdec1	equ	0xFE5
 35488                           fsr1h	equ	0xFE2
 35489                           fsr1l	equ	0xFE1
 35490                           indf2	equ	0xFDF
 35491                           postinc2	equ	0xFDE
 35492                           postdec2	equ	0xFDD
 35493                           fsr2h	equ	0xFDA
 35494                           fsr2l	equ	0xFD9
 35495                           status	equ	0xFD8
 35496                           
 35497 ;; *************** function ___ftpack *****************
 35498 ;; Defined at:
 35499 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 35500 ;; Parameters:    Size  Location     Type
 35501 ;;  arg             3   28[COMRAM] unsigned um
 35502 ;;  exp             1   31[COMRAM] unsigned char 
 35503 ;;  sign            1   32[COMRAM] unsigned char 
 35504 ;; Auto vars:     Size  Location     Type
 35505 ;;		None
 35506 ;; Return value:  Size  Location     Type
 35507 ;;                  3   28[COMRAM] float 
 35508 ;; Registers used:
 35509 ;;		wreg, status,2, status,0
 35510 ;; Tracked objects:
 35511 ;;		On entry : 0/0
 35512 ;;		On exit  : 0/0
 35513 ;;		Unchanged: 0/0
 35514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35515 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35517 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35518 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35519 ;;Total ram usage:        8 bytes
 35520 ;; Hardware stack levels used:    1
 35521 ;; Hardware stack levels required when called:    3
 35522 ;; This function calls:
 35523 ;;		Nothing
 35524 ;; This function is called by:
 35525 ;;		___altoft
 35526 ;;		___ftadd
 35527 ;;		___ftdiv
 35528 ;;		___ftmul
 35529 ;;		___lbtoft
 35530 ;;		___lltoft
 35531 ;;		___lwtoft
 35532 ;; This function uses a non-reentrant model
 35533 ;;
 35534                           
 35535                           	psect	text136
 35536  019740                     __ptext136:
 35537                           	opt stack 0
 35538  019740                     ___ftpack:
 35539                           	opt stack 25
 35540                           
 35541                           ;incstack = 0
 35542  019740  5020               	movf	___ftpack@exp,w,c
 35543  019742  B4D8               	btfsc	status,2,c
 35544  019744  D005               	goto	l19409
 35545  019746  501D               	movf	___ftpack@arg,w,c
 35546  019748  101E               	iorwf	___ftpack@arg+1,w,c
 35547  01974A  101F               	iorwf	___ftpack@arg+2,w,c
 35548  01974C  A4D8               	btfss	status,2,c
 35549  01974E  D00C               	goto	l19415
 35550  019750                     l19409:
 35551  019750  0E00               	movlw	0
 35552  019752  6E1D               	movwf	?___ftpack,c
 35553  019754  0E00               	movlw	0
 35554  019756  6E1E               	movwf	?___ftpack+1,c
 35555  019758  0E00               	movlw	0
 35556  01975A  6E1F               	movwf	?___ftpack+2,c
 35557  01975C  0012               	return	
 35558  01975E                     l19413:
 35559  01975E  2A20               	incf	___ftpack@exp,f,c
 35560  019760  90D8               	bcf	status,0,c
 35561  019762  321F               	rrcf	___ftpack@arg+2,f,c
 35562  019764  321E               	rrcf	___ftpack@arg+1,f,c
 35563  019766  321D               	rrcf	___ftpack@arg,f,c
 35564  019768                     l19415:
 35565  019768  0E00               	movlw	0
 35566  01976A  141D               	andwf	___ftpack@arg,w,c
 35567  01976C  6E22               	movwf	??___ftpack& (0+255),c
 35568  01976E  0E00               	movlw	0
 35569  019770  141E               	andwf	___ftpack@arg+1,w,c
 35570  019772  6E23               	movwf	(??___ftpack+1)& (0+255),c
 35571  019774  0EFE               	movlw	254
 35572  019776  141F               	andwf	___ftpack@arg+2,w,c
 35573  019778  6E24               	movwf	(??___ftpack+2)& (0+255),c
 35574  01977A  5022               	movf	??___ftpack,w,c
 35575  01977C  1023               	iorwf	??___ftpack+1,w,c
 35576  01977E  1024               	iorwf	??___ftpack+2,w,c
 35577  019780  B4D8               	btfsc	status,2,c
 35578  019782  D00C               	goto	l19421
 35579  019784  D7EC               	goto	l19413
 35580  019786                     l19417:
 35581  019786  2A20               	incf	___ftpack@exp,f,c
 35582  019788  0E01               	movlw	1
 35583  01978A  261D               	addwf	___ftpack@arg,f,c
 35584  01978C  0E00               	movlw	0
 35585  01978E  221E               	addwfc	___ftpack@arg+1,f,c
 35586  019790  0E00               	movlw	0
 35587  019792  221F               	addwfc	___ftpack@arg+2,f,c
 35588  019794  90D8               	bcf	status,0,c
 35589  019796  321F               	rrcf	___ftpack@arg+2,f,c
 35590  019798  321E               	rrcf	___ftpack@arg+1,f,c
 35591  01979A  321D               	rrcf	___ftpack@arg,f,c
 35592  01979C                     l19421:
 35593  01979C  0E00               	movlw	0
 35594  01979E  141D               	andwf	___ftpack@arg,w,c
 35595  0197A0  6E22               	movwf	??___ftpack& (0+255),c
 35596  0197A2  0E00               	movlw	0
 35597  0197A4  141E               	andwf	___ftpack@arg+1,w,c
 35598  0197A6  6E23               	movwf	(??___ftpack+1)& (0+255),c
 35599  0197A8  0EFF               	movlw	255
 35600  0197AA  141F               	andwf	___ftpack@arg+2,w,c
 35601  0197AC  6E24               	movwf	(??___ftpack+2)& (0+255),c
 35602  0197AE  5022               	movf	??___ftpack,w,c
 35603  0197B0  1023               	iorwf	??___ftpack+1,w,c
 35604  0197B2  1024               	iorwf	??___ftpack+2,w,c
 35605  0197B4  B4D8               	btfsc	status,2,c
 35606  0197B6  D006               	goto	l19425
 35607  0197B8  D7E6               	goto	l19417
 35608  0197BA                     l19423:
 35609  0197BA  0620               	decf	___ftpack@exp,f,c
 35610  0197BC  90D8               	bcf	status,0,c
 35611  0197BE  361D               	rlcf	___ftpack@arg,f,c
 35612  0197C0  361E               	rlcf	___ftpack@arg+1,f,c
 35613  0197C2  361F               	rlcf	___ftpack@arg+2,f,c
 35614  0197C4                     l19425:
 35615  0197C4  BE1E               	btfsc	___ftpack@arg+1,7,c
 35616  0197C6  D003               	goto	l10691
 35617  0197C8  0E02               	movlw	2
 35618  0197CA  6020               	cpfslt	___ftpack@exp,c
 35619  0197CC  D7F6               	goto	l19423
 35620  0197CE                     l10691:
 35621  0197CE  A020               	btfss	___ftpack@exp,0,c
 35622  0197D0  9E1E               	bcf	___ftpack@arg+1,7,c
 35623  0197D2  90D8               	bcf	status,0,c
 35624  0197D4  3220               	rrcf	___ftpack@exp,f,c
 35625  0197D6  5020               	movf	___ftpack@exp,w,c
 35626  0197D8  121F               	iorwf	___ftpack@arg+2,f,c
 35627  0197DA  5021               	movf	___ftpack@sign,w,c
 35628  0197DC  A4D8               	btfss	status,2,c
 35629  0197DE  8E1F               	bsf	___ftpack@arg+2,7,c
 35630  0197E0  C01D  F01D         	movff	___ftpack@arg,?___ftpack
 35631  0197E4  C01E  F01E         	movff	___ftpack@arg+1,?___ftpack+1
 35632  0197E8  C01F  F01F         	movff	___ftpack@arg+2,?___ftpack+2
 35633  0197EC  0012               	return	
 35634  0197EE                     __end_of___ftpack:
 35635                           	opt stack 0
 35636                           tblptru	equ	0xFF8
 35637                           tblptrh	equ	0xFF7
 35638                           tblptrl	equ	0xFF6
 35639                           tablat	equ	0xFF5
 35640                           prodh	equ	0xFF4
 35641                           prodl	equ	0xFF3
 35642                           intcon	equ	0xFF2
 35643                           postinc0	equ	0xFEE
 35644                           wreg	equ	0xFE8
 35645                           postdec1	equ	0xFE5
 35646                           fsr1h	equ	0xFE2
 35647                           fsr1l	equ	0xFE1
 35648                           indf2	equ	0xFDF
 35649                           postinc2	equ	0xFDE
 35650                           postdec2	equ	0xFDD
 35651                           fsr2h	equ	0xFDA
 35652                           fsr2l	equ	0xFD9
 35653                           status	equ	0xFD8
 35654                           
 35655 ;; *************** function _ISR *****************
 35656 ;; Defined at:
 35657 ;;		line 18 in file "ISR.c"
 35658 ;; Parameters:    Size  Location     Type
 35659 ;;		None
 35660 ;; Auto vars:     Size  Location     Type
 35661 ;;		None
 35662 ;; Return value:  Size  Location     Type
 35663 ;;                  1    wreg      void 
 35664 ;; Registers used:
 35665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35666 ;; Tracked objects:
 35667 ;;		On entry : 0/0
 35668 ;;		On exit  : 0/0
 35669 ;;		Unchanged: 0/0
 35670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35673 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35674 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35675 ;;Total ram usage:       16 bytes
 35676 ;; Hardware stack levels used:    1
 35677 ;; Hardware stack levels required when called:    2
 35678 ;; This function calls:
 35679 ;;		_Error_Checking_Interrupt_Overflow
 35680 ;;		_PM_Error_Led
 35681 ;;		___awtoft
 35682 ;; This function is called by:
 35683 ;;		Interrupt level 2
 35684 ;; This function uses a non-reentrant model
 35685 ;;
 35686                           
 35687                           	psect	intcode
 35688  000008                     __pintcode:
 35689                           	opt stack 0
 35690  000008                     _ISR:
 35691                           	opt stack 21
 35692                           
 35693                           ;incstack = 0
 35694  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 35695  00000A  CFFA F00F          	movff	pclath,??_ISR+2
 35696  00000E  CFFB F010          	movff	pclatu,??_ISR+3
 35697  000012  CFE9 F011          	movff	fsr0l,??_ISR+4
 35698  000016  CFEA F012          	movff	fsr0h,??_ISR+5
 35699  00001A  CFE1 F013          	movff	fsr1l,??_ISR+6
 35700  00001E  CFE2 F014          	movff	fsr1h,??_ISR+7
 35701  000022  CFD9 F015          	movff	fsr2l,??_ISR+8
 35702  000026  CFDA F016          	movff	fsr2h,??_ISR+9
 35703  00002A  CFF3 F017          	movff	prodl,??_ISR+10
 35704  00002E  CFF4 F018          	movff	prodh,??_ISR+11
 35705  000032  CFF6 F019          	movff	tblptrl,??_ISR+12
 35706  000036  CFF7 F01A          	movff	tblptrh,??_ISR+13
 35707  00003A  CFF8 F01B          	movff	tblptru,??_ISR+14
 35708  00003E  CFF5 F01C          	movff	tablat,??_ISR+15
 35709                           
 35710                           ;ISR.c: 20: if(TMR7IF)
 35711  000042  A6BA               	btfss	4026,3,c	;volatile
 35712  000044  D040               	goto	i2l19245
 35713                           
 35714                           ;ISR.c: 21: {
 35715                           ;ISR.c: 22: TMR7IF = 0;
 35716  000046  96BA               	bcf	4026,3,c	;volatile
 35717                           
 35718                           ;ISR.c: 23: Error_Checking_Interrupt_Overflow();
 35719  000048  EC6B  F0D5         	call	_Error_Checking_Interrupt_Overflow	;wreg free
 35720                           
 35721                           ;ISR.c: 24: Timer1_counter++;
 35722  00004C  0101               	movlb	1	; () banked
 35723  00004E  4B57               	infsnz	_Timer1_counter& (0+255),f,b
 35724  000050  2B58               	incf	(_Timer1_counter+1)& (0+255),f,b
 35725                           
 35726                           ; BSR set to: 1
 35727                           ;ISR.c: 25: if(Timer1_counter == 15)
 35728  000052  0E0F               	movlw	15
 35729  000054  0101               	movlb	1	; () banked
 35730  000056  1957               	xorwf	_Timer1_counter& (0+255),w,b
 35731  000058  0101               	movlb	1	; () banked
 35732  00005A  1158               	iorwf	(_Timer1_counter+1)& (0+255),w,b
 35733  00005C  A4D8               	btfss	status,2,c
 35734  00005E  D003               	goto	i2l19233
 35735                           
 35736                           ; BSR set to: 1
 35737                           ;ISR.c: 26: {
 35738                           ;ISR.c: 27: Timer0_Falg2 = 1;
 35739  000060  0E01               	movlw	1
 35740  000062  0101               	movlb	1	; () banked
 35741  000064  6FC4               	movwf	_Timer0_Falg2& (0+255),b
 35742  000066                     i2l19233:
 35743                           
 35744                           ; BSR set to: 1
 35745                           ;ISR.c: 28: }
 35746                           ;ISR.c: 29: if(Timer1_counter == 30 && One_Sec_Flag == 0)
 35747  000066  0E1E               	movlw	30
 35748  000068  0101               	movlb	1	; () banked
 35749  00006A  1957               	xorwf	_Timer1_counter& (0+255),w,b
 35750  00006C  0101               	movlb	1	; () banked
 35751  00006E  1158               	iorwf	(_Timer1_counter+1)& (0+255),w,b
 35752  000070  A4D8               	btfss	status,2,c
 35753  000072  D011               	goto	i2l19239
 35754                           
 35755                           ; BSR set to: 1
 35756  000074  0101               	movlb	1	; () banked
 35757  000076  51AC               	movf	_One_Sec_Flag& (0+255),w,b
 35758  000078  A4D8               	btfss	status,2,c
 35759  00007A  D00D               	goto	i2l19239
 35760                           
 35761                           ; BSR set to: 1
 35762                           ;ISR.c: 30: {
 35763                           ;ISR.c: 31: Timer1_counter = 0;
 35764  00007C  0E00               	movlw	0
 35765  00007E  0101               	movlb	1	; () banked
 35766  000080  6F58               	movwf	(_Timer1_counter+1)& (0+255),b
 35767  000082  0E00               	movlw	0
 35768  000084  6F57               	movwf	_Timer1_counter& (0+255),b
 35769                           
 35770                           ;ISR.c: 32: Timer0_1Sec_Flag = 1;
 35771  000086  0E00               	movlw	0
 35772  000088  0102               	movlb	2	; () banked
 35773  00008A  6FAF               	movwf	(_Timer0_1Sec_Flag+1)& (0+255),b
 35774  00008C  0E01               	movlw	1
 35775  00008E  6FAE               	movwf	_Timer0_1Sec_Flag& (0+255),b
 35776                           
 35777                           ;ISR.c: 33: One_Sec_Flag = 1;
 35778  000090  0E01               	movlw	1
 35779  000092  0101               	movlb	1	; () banked
 35780  000094  6FAC               	movwf	_One_Sec_Flag& (0+255),b
 35781  000096                     i2l19239:
 35782                           
 35783                           ; BSR set to: 1
 35784                           ;ISR.c: 34: }
 35785                           ;ISR.c: 35: if(Timer1_counter == 31 && One_Sec_Flag == 1)
 35786  000096  0E1F               	movlw	31
 35787  000098  0101               	movlb	1	; () banked
 35788  00009A  1957               	xorwf	_Timer1_counter& (0+255),w,b
 35789  00009C  0101               	movlb	1	; () banked
 35790  00009E  1158               	iorwf	(_Timer1_counter+1)& (0+255),w,b
 35791  0000A0  A4D8               	btfss	status,2,c
 35792  0000A2  D011               	goto	i2l19245
 35793                           
 35794                           ; BSR set to: 1
 35795  0000A4  0101               	movlb	1	; () banked
 35796  0000A6  05AC               	decf	_One_Sec_Flag& (0+255),w,b
 35797  0000A8  A4D8               	btfss	status,2,c
 35798  0000AA  D00D               	goto	i2l19245
 35799                           
 35800                           ; BSR set to: 1
 35801                           ;ISR.c: 36: {
 35802                           ;ISR.c: 37: Timer1_counter = 0;
 35803  0000AC  0E00               	movlw	0
 35804  0000AE  0101               	movlb	1	; () banked
 35805  0000B0  6F58               	movwf	(_Timer1_counter+1)& (0+255),b
 35806  0000B2  0E00               	movlw	0
 35807  0000B4  6F57               	movwf	_Timer1_counter& (0+255),b
 35808                           
 35809                           ;ISR.c: 38: Timer0_1Sec_Flag = 1;
 35810  0000B6  0E00               	movlw	0
 35811  0000B8  0102               	movlb	2	; () banked
 35812  0000BA  6FAF               	movwf	(_Timer0_1Sec_Flag+1)& (0+255),b
 35813  0000BC  0E01               	movlw	1
 35814  0000BE  6FAE               	movwf	_Timer0_1Sec_Flag& (0+255),b
 35815                           
 35816                           ;ISR.c: 39: One_Sec_Flag = 0;
 35817  0000C0  0E00               	movlw	0
 35818  0000C2  0101               	movlb	1	; () banked
 35819  0000C4  6FAC               	movwf	_One_Sec_Flag& (0+255),b
 35820  0000C6                     i2l19245:
 35821                           
 35822                           ;ISR.c: 40: }
 35823                           ;ISR.c: 41: }
 35824                           ;ISR.c: 42: if(TMR0IF)
 35825  0000C6  A4F2               	btfss	intcon,2,c	;volatile
 35826  0000C8  D009               	goto	i2l19255
 35827                           
 35828                           ;ISR.c: 43: {
 35829                           ;ISR.c: 44: TMR0IF = 0;
 35830  0000CA  94F2               	bcf	intcon,2,c	;volatile
 35831                           
 35832                           ;ISR.c: 45: Volt_Curr_Flag = 1;
 35833  0000CC  0E01               	movlw	1
 35834  0000CE  0101               	movlb	1	; () banked
 35835  0000D0  6FDA               	movwf	_Volt_Curr_Flag& (0+255),b
 35836                           
 35837                           ; BSR set to: 1
 35838                           ;ISR.c: 46: PM_Error_Led();
 35839  0000D2  ECF1  F0A8         	call	_PM_Error_Led	;wreg free
 35840                           
 35841                           ;ISR.c: 47: Timer0_counter++;
 35842  0000D6  0105               	movlb	5	; () banked
 35843  0000D8  4BDB               	infsnz	_Timer0_counter& (0+255),f,b
 35844  0000DA  2BDC               	incf	(_Timer0_counter+1)& (0+255),f,b
 35845  0000DC                     i2l19255:
 35846                           
 35847                           ;ISR.c: 48: }
 35848                           ;ISR.c: 50: if(CCP10IF)
 35849  0000DC  AEB7               	btfss	4023,7,c	;volatile
 35850  0000DE  D01F               	goto	i2l19265
 35851                           
 35852                           ;ISR.c: 51: {
 35853                           ;ISR.c: 52: CCP10IF = 0;
 35854  0000E0  9EB7               	bcf	4023,7,c	;volatile
 35855                           
 35856                           ;ISR.c: 53: CCP10IE = 1;
 35857  0000E2  8EB6               	bsf	4022,7,c	;volatile
 35858                           
 35859                           ;ISR.c: 54: Freq_Flag = 1;
 35860  0000E4  0E01               	movlw	1
 35861  0000E6  0101               	movlb	1	; () banked
 35862  0000E8  6F76               	movwf	_Freq_Flag& (0+255),b
 35863                           
 35864                           ; BSR set to: 1
 35865                           ;ISR.c: 55: R_V_Old = R_V_New;
 35866  0000EA  C1EC  F121         	movff	_R_V_New,_R_V_Old
 35867  0000EE  C1ED  F122         	movff	_R_V_New+1,_R_V_Old+1
 35868  0000F2  C1EE  F123         	movff	_R_V_New+2,_R_V_Old+2
 35869                           
 35870                           ; BSR set to: 1
 35871                           ;ISR.c: 56: R_V_New = ((CCPR10H << 8) | CCPR10L);
 35872  0000F6  010F               	movlb	15	; () banked
 35873  0000F8  5141               	movf	65,w,b	;volatile
 35874  0000FA  CF42 F00D          	movff	3906,??_ISR	;volatile
 35875  0000FE  6A0E               	clrf	(??_ISR+1)& (0+255),c
 35876  000100  C00D  F00E         	movff	??_ISR,??_ISR+1
 35877  000104  6A0D               	clrf	??_ISR,c
 35878  000106  100D               	iorwf	??_ISR,w,c
 35879  000108  6E09               	movwf	___awtoft@c,c
 35880  00010A  500E               	movf	??_ISR+1,w,c
 35881  00010C  6E0A               	movwf	___awtoft@c+1,c
 35882  00010E  EC2F  F0D3         	call	___awtoft	;wreg free
 35883  000112  C009  F1EC         	movff	?___awtoft,_R_V_New
 35884  000116  C00A  F1ED         	movff	?___awtoft+1,_R_V_New+1
 35885  00011A  C00B  F1EE         	movff	?___awtoft+2,_R_V_New+2
 35886  00011E                     i2l19265:
 35887                           
 35888                           ;ISR.c: 57: }
 35889                           ;ISR.c: 59: if(CCP2IF)
 35890  00011E  A4A4               	btfss	4004,2,c	;volatile
 35891  000120  D01C               	goto	i2l19271
 35892                           
 35893                           ;ISR.c: 60: {
 35894                           ;ISR.c: 61: CCP2IF = 0;
 35895  000122  94A4               	bcf	4004,2,c	;volatile
 35896                           
 35897                           ;ISR.c: 62: CCP2IE = 1;
 35898  000124  84A3               	bsf	4003,2,c	;volatile
 35899                           
 35900                           ;ISR.c: 63: Y_V_Old = Y_V_New;
 35901  000126  C27B  F4CC         	movff	_Y_V_New,_Y_V_Old
 35902  00012A  C27C  F4CD         	movff	_Y_V_New+1,_Y_V_Old+1
 35903  00012E  C27D  F4CE         	movff	_Y_V_New+2,_Y_V_Old+2
 35904                           
 35905                           ;ISR.c: 64: Y_V_New = ((CCPR2H << 8) | CCPR2L);
 35906  000132  010F               	movlb	15	; () banked
 35907  000134  514F               	movf	79,w,b	;volatile
 35908  000136  CF50 F00D          	movff	3920,??_ISR	;volatile
 35909  00013A  6A0E               	clrf	(??_ISR+1)& (0+255),c
 35910  00013C  C00D  F00E         	movff	??_ISR,??_ISR+1
 35911  000140  6A0D               	clrf	??_ISR,c
 35912  000142  100D               	iorwf	??_ISR,w,c
 35913  000144  6E09               	movwf	___awtoft@c,c
 35914  000146  500E               	movf	??_ISR+1,w,c
 35915  000148  6E0A               	movwf	___awtoft@c+1,c
 35916  00014A  EC2F  F0D3         	call	___awtoft	;wreg free
 35917  00014E  C009  F27B         	movff	?___awtoft,_Y_V_New
 35918  000152  C00A  F27C         	movff	?___awtoft+1,_Y_V_New+1
 35919  000156  C00B  F27D         	movff	?___awtoft+2,_Y_V_New+2
 35920  00015A                     i2l19271:
 35921                           
 35922                           ;ISR.c: 65: }
 35923                           ;ISR.c: 67: if(CCP1IF)
 35924  00015A  A2A4               	btfss	4004,1,c	;volatile
 35925  00015C  D01B               	goto	i2l19277
 35926                           
 35927                           ;ISR.c: 68: {
 35928                           ;ISR.c: 69: CCP1IF = 0;
 35929  00015E  92A4               	bcf	4004,1,c	;volatile
 35930                           
 35931                           ;ISR.c: 70: CCP1IE = 1;
 35932  000160  82A3               	bsf	4003,1,c	;volatile
 35933                           
 35934                           ;ISR.c: 71: B_V_Old = B_V_New;
 35935  000162  C20C  F487         	movff	_B_V_New,_B_V_Old
 35936  000166  C20D  F488         	movff	_B_V_New+1,_B_V_Old+1
 35937  00016A  C20E  F489         	movff	_B_V_New+2,_B_V_Old+2
 35938                           
 35939                           ;ISR.c: 72: B_V_New = ((CCPR1H << 8) | CCPR1L);
 35940  00016E  50BC               	movf	4028,w,c	;volatile
 35941  000170  CFBD F00D          	movff	4029,??_ISR	;volatile
 35942  000174  6A0E               	clrf	(??_ISR+1)& (0+255),c
 35943  000176  C00D  F00E         	movff	??_ISR,??_ISR+1
 35944  00017A  6A0D               	clrf	??_ISR,c
 35945  00017C  100D               	iorwf	??_ISR,w,c
 35946  00017E  6E09               	movwf	___awtoft@c,c
 35947  000180  500E               	movf	??_ISR+1,w,c
 35948  000182  6E0A               	movwf	___awtoft@c+1,c
 35949  000184  EC2F  F0D3         	call	___awtoft	;wreg free
 35950  000188  C009  F20C         	movff	?___awtoft,_B_V_New
 35951  00018C  C00A  F20D         	movff	?___awtoft+1,_B_V_New+1
 35952  000190  C00B  F20E         	movff	?___awtoft+2,_B_V_New+2
 35953  000194                     i2l19277:
 35954                           
 35955                           ;ISR.c: 73: }
 35956                           ;ISR.c: 75: if(CCP3IF)
 35957  000194  A0B7               	btfss	4023,0,c	;volatile
 35958  000196  D02B               	goto	i2l19291
 35959                           
 35960                           ;ISR.c: 76: {
 35961                           ;ISR.c: 77: CCP3IF = 0;
 35962  000198  90B7               	bcf	4023,0,c	;volatile
 35963                           
 35964                           ;ISR.c: 78: CCP3IE = 1;
 35965  00019A  80B6               	bsf	4022,0,c	;volatile
 35966                           
 35967                           ;ISR.c: 79: R_PF_Flag = 1;
 35968  00019C  0E01               	movlw	1
 35969  00019E  0101               	movlb	1	; () banked
 35970  0001A0  6FB4               	movwf	_R_PF_Flag& (0+255),b
 35971                           
 35972                           ; BSR set to: 1
 35973                           ;ISR.c: 80: Rcurr_Old = Rcurr_New;
 35974  0001A2  C1EF  F65A         	movff	_Rcurr_New,_Rcurr_Old
 35975  0001A6  C1F0  F65B         	movff	_Rcurr_New+1,_Rcurr_Old+1
 35976  0001AA  C1F1  F65C         	movff	_Rcurr_New+2,_Rcurr_Old+2
 35977                           
 35978                           ; BSR set to: 1
 35979                           ;ISR.c: 81: Rcurr_New = ((CCPR3H << 8) | CCPR3L);
 35980  0001AE  010F               	movlb	15	; () banked
 35981  0001B0  514A               	movf	74,w,b	;volatile
 35982  0001B2  CF4B F00D          	movff	3915,??_ISR	;volatile
 35983  0001B6  6A0E               	clrf	(??_ISR+1)& (0+255),c
 35984  0001B8  C00D  F00E         	movff	??_ISR,??_ISR+1
 35985  0001BC  6A0D               	clrf	??_ISR,c
 35986  0001BE  100D               	iorwf	??_ISR,w,c
 35987  0001C0  6E09               	movwf	___awtoft@c,c
 35988  0001C2  500E               	movf	??_ISR+1,w,c
 35989  0001C4  6E0A               	movwf	___awtoft@c+1,c
 35990  0001C6  EC2F  F0D3         	call	___awtoft	;wreg free
 35991  0001CA  C009  F1EF         	movff	?___awtoft,_Rcurr_New
 35992  0001CE  C00A  F1F0         	movff	?___awtoft+1,_Rcurr_New+1
 35993  0001D2  C00B  F1F1         	movff	?___awtoft+2,_Rcurr_New+2
 35994                           
 35995                           ;ISR.c: 82: Rcurr_V_Old = R_V_Old;
 35996  0001D6  C121  F221         	movff	_R_V_Old,_Rcurr_V_Old
 35997  0001DA  C122  F222         	movff	_R_V_Old+1,_Rcurr_V_Old+1
 35998  0001DE  C123  F223         	movff	_R_V_Old+2,_Rcurr_V_Old+2
 35999                           
 36000                           ;ISR.c: 83: Rcurr_V_New = R_V_New;
 36001  0001E2  C1EC  F1F2         	movff	_R_V_New,_Rcurr_V_New
 36002  0001E6  C1ED  F1F3         	movff	_R_V_New+1,_Rcurr_V_New+1
 36003  0001EA  C1EE  F1F4         	movff	_R_V_New+2,_Rcurr_V_New+2
 36004  0001EE                     i2l19291:
 36005                           
 36006                           ;ISR.c: 84: }
 36007                           ;ISR.c: 86: if(CCP4IF)
 36008  0001EE  A2B7               	btfss	4023,1,c	;volatile
 36009  0001F0  D02A               	goto	i2l19305
 36010                           
 36011                           ;ISR.c: 87: {
 36012                           ;ISR.c: 88: CCP4IF = 0;
 36013  0001F2  92B7               	bcf	4023,1,c	;volatile
 36014                           
 36015                           ;ISR.c: 89: CCP4IE = 1;
 36016  0001F4  82B6               	bsf	4022,1,c	;volatile
 36017                           
 36018                           ;ISR.c: 90: Y_PF_Flag = 1;
 36019  0001F6  0E01               	movlw	1
 36020  0001F8  0101               	movlb	1	; () banked
 36021  0001FA  6FDE               	movwf	_Y_PF_Flag& (0+255),b
 36022                           
 36023                           ; BSR set to: 1
 36024                           ;ISR.c: 91: Ycurr_Old = Ycurr_New;
 36025  0001FC  C1F8  F663         	movff	_Ycurr_New,_Ycurr_Old
 36026  000200  C1F9  F664         	movff	_Ycurr_New+1,_Ycurr_Old+1
 36027  000204  C1FA  F665         	movff	_Ycurr_New+2,_Ycurr_Old+2
 36028                           
 36029                           ; BSR set to: 1
 36030                           ;ISR.c: 92: Ycurr_New = ((CCPR4H << 8) | CCPR4L);
 36031  000208  5078               	movf	3960,w,c	;volatile
 36032  00020A  CF79 F00D          	movff	3961,??_ISR	;volatile
 36033  00020E  6A0E               	clrf	(??_ISR+1)& (0+255),c
 36034  000210  C00D  F00E         	movff	??_ISR,??_ISR+1
 36035  000214  6A0D               	clrf	??_ISR,c
 36036  000216  100D               	iorwf	??_ISR,w,c
 36037  000218  6E09               	movwf	___awtoft@c,c
 36038  00021A  500E               	movf	??_ISR+1,w,c
 36039  00021C  6E0A               	movwf	___awtoft@c+1,c
 36040  00021E  EC2F  F0D3         	call	___awtoft	;wreg free
 36041  000222  C009  F1F8         	movff	?___awtoft,_Ycurr_New
 36042  000226  C00A  F1F9         	movff	?___awtoft+1,_Ycurr_New+1
 36043  00022A  C00B  F1FA         	movff	?___awtoft+2,_Ycurr_New+2
 36044                           
 36045                           ;ISR.c: 93: Ycurr_V_Old = Y_V_Old;
 36046  00022E  C4CC  F27E         	movff	_Y_V_Old,_Ycurr_V_Old
 36047  000232  C4CD  F27F         	movff	_Y_V_Old+1,_Ycurr_V_Old+1
 36048  000236  C4CE  F280         	movff	_Y_V_Old+2,_Ycurr_V_Old+2
 36049                           
 36050                           ;ISR.c: 94: Ycurr_V_New = Y_V_New;
 36051  00023A  C27B  F1FB         	movff	_Y_V_New,_Ycurr_V_New
 36052  00023E  C27C  F1FC         	movff	_Y_V_New+1,_Ycurr_V_New+1
 36053  000242  C27D  F1FD         	movff	_Y_V_New+2,_Ycurr_V_New+2
 36054  000246                     i2l19305:
 36055                           
 36056                           ;ISR.c: 95: }
 36057                           ;ISR.c: 97: if(CCP5IF)
 36058  000246  A4B7               	btfss	4023,2,c	;volatile
 36059  000248  D02A               	goto	i2l19319
 36060                           
 36061                           ;ISR.c: 98: {
 36062                           ;ISR.c: 99: CCP5IF = 0;
 36063  00024A  94B7               	bcf	4023,2,c	;volatile
 36064                           
 36065                           ;ISR.c: 100: CCP5IE = 1;
 36066  00024C  84B6               	bsf	4022,2,c	;volatile
 36067                           
 36068                           ;ISR.c: 101: B_PF_Flag = 1;
 36069  00024E  0E01               	movlw	1
 36070  000250  0101               	movlb	1	; () banked
 36071  000252  6F67               	movwf	_B_PF_Flag& (0+255),b
 36072                           
 36073                           ; BSR set to: 1
 36074                           ;ISR.c: 102: Bcurr_Old = Bcurr_New;
 36075  000254  C1E6  F645         	movff	_Bcurr_New,_Bcurr_Old
 36076  000258  C1E7  F646         	movff	_Bcurr_New+1,_Bcurr_Old+1
 36077  00025C  C1E8  F647         	movff	_Bcurr_New+2,_Bcurr_Old+2
 36078                           
 36079                           ; BSR set to: 1
 36080                           ;ISR.c: 103: Bcurr_New = ((CCPR5H << 8) | CCPR5L);
 36081  000260  5075               	movf	3957,w,c	;volatile
 36082  000262  CF76 F00D          	movff	3958,??_ISR	;volatile
 36083  000266  6A0E               	clrf	(??_ISR+1)& (0+255),c
 36084  000268  C00D  F00E         	movff	??_ISR,??_ISR+1
 36085  00026C  6A0D               	clrf	??_ISR,c
 36086  00026E  100D               	iorwf	??_ISR,w,c
 36087  000270  6E09               	movwf	___awtoft@c,c
 36088  000272  500E               	movf	??_ISR+1,w,c
 36089  000274  6E0A               	movwf	___awtoft@c+1,c
 36090  000276  EC2F  F0D3         	call	___awtoft	;wreg free
 36091  00027A  C009  F1E6         	movff	?___awtoft,_Bcurr_New
 36092  00027E  C00A  F1E7         	movff	?___awtoft+1,_Bcurr_New+1
 36093  000282  C00B  F1E8         	movff	?___awtoft+2,_Bcurr_New+2
 36094                           
 36095                           ;ISR.c: 104: Bcurr_V_Old = B_V_Old;
 36096  000286  C487  F20F         	movff	_B_V_Old,_Bcurr_V_Old
 36097  00028A  C488  F210         	movff	_B_V_Old+1,_Bcurr_V_Old+1
 36098  00028E  C489  F211         	movff	_B_V_Old+2,_Bcurr_V_Old+2
 36099                           
 36100                           ;ISR.c: 105: Bcurr_V_New = B_V_New;
 36101  000292  C20C  F1E9         	movff	_B_V_New,_Bcurr_V_New
 36102  000296  C20D  F1EA         	movff	_B_V_New+1,_Bcurr_V_New+1
 36103  00029A  C20E  F1EB         	movff	_B_V_New+2,_Bcurr_V_New+2
 36104  00029E                     i2l19319:
 36105                           
 36106                           ;ISR.c: 106: }
 36107                           ;ISR.c: 108: if(TMR1IF)
 36108  00029E  A09E               	btfss	3998,0,c	;volatile
 36109  0002A0  D01C               	goto	i2l19327
 36110                           
 36111                           ;ISR.c: 109: {
 36112                           ;ISR.c: 110: TMR1IF = 0;
 36113  0002A2  909E               	bcf	3998,0,c	;volatile
 36114                           
 36115                           ;ISR.c: 111: Gi_Timer1_OF_counter++;
 36116  0002A4  0102               	movlb	2	; () banked
 36117  0002A6  4B9C               	infsnz	_Gi_Timer1_OF_counter& (0+255),f,b
 36118  0002A8  2B9D               	incf	(_Gi_Timer1_OF_counter+1)& (0+255),f,b
 36119                           
 36120                           ;ISR.c: 112: Timer1_OF_counter_Turbine++;
 36121  0002AA  0102               	movlb	2	; () banked
 36122  0002AC  4BB6               	infsnz	_Timer1_OF_counter_Turbine& (0+255),f,b
 36123  0002AE  2BB7               	incf	(_Timer1_OF_counter_Turbine+1)& (0+255),f,b
 36124                           
 36125                           ;ISR.c: 114: Timer1_OF_counter_Generator++;
 36126  0002B0  0102               	movlb	2	; () banked
 36127  0002B2  4BB0               	infsnz	_Timer1_OF_counter_Generator& (0+255),f,b
 36128  0002B4  2BB1               	incf	(_Timer1_OF_counter_Generator+1)& (0+255),f,b
 36129                           
 36130                           ;ISR.c: 115: Gi_Timer1_OF_counter_Generator_Temp++;
 36131  0002B6  0102               	movlb	2	; () banked
 36132  0002B8  4B9E               	infsnz	_Gi_Timer1_OF_counter_Generator_Temp& (0+255),f,b
 36133  0002BA  2B9F               	incf	(_Gi_Timer1_OF_counter_Generator_Temp+1)& (0+255),f,b
 36134                           
 36135                           ;ISR.c: 117: Timer1_OF_counter_Wind++;
 36136  0002BC  0102               	movlb	2	; () banked
 36137  0002BE  4BB8               	infsnz	_Timer1_OF_counter_Wind& (0+255),f,b
 36138  0002C0  2BB9               	incf	(_Timer1_OF_counter_Wind+1)& (0+255),f,b
 36139                           
 36140                           ;ISR.c: 118: Timer1_OF_counter_Wind_temp++;
 36141  0002C2  0102               	movlb	2	; () banked
 36142  0002C4  4BC0               	infsnz	_Timer1_OF_counter_Wind_temp& (0+255),f,b
 36143  0002C6  2BC1               	incf	(_Timer1_OF_counter_Wind_temp+1)& (0+255),f,b
 36144                           
 36145                           ;ISR.c: 120: Timer1_OF_counter_Wind_2++;
 36146  0002C8  0102               	movlb	2	; () banked
 36147  0002CA  4BBA               	infsnz	_Timer1_OF_counter_Wind_2& (0+255),f,b
 36148  0002CC  2BBB               	incf	(_Timer1_OF_counter_Wind_2+1)& (0+255),f,b
 36149                           
 36150                           ;ISR.c: 121: Timer1_OF_counter_Wind_2_temp++;
 36151  0002CE  0105               	movlb	5	; () banked
 36152  0002D0  4BDD               	infsnz	_Timer1_OF_counter_Wind_2_temp& (0+255),f,b
 36153  0002D2  2BDE               	incf	(_Timer1_OF_counter_Wind_2_temp+1)& (0+255),f,b
 36154                           
 36155                           ; BSR set to: 5
 36156                           ;ISR.c: 123: Timer1_interrupt_flag = 1;
 36157  0002D4  0E01               	movlw	1
 36158  0002D6  0101               	movlb	1	; () banked
 36159  0002D8  6FC6               	movwf	_Timer1_interrupt_flag& (0+255),b
 36160  0002DA                     i2l19327:
 36161                           
 36162                           ;ISR.c: 125: }
 36163                           ;ISR.c: 127: if(CCP7IF)
 36164  0002DA  A8B7               	btfss	4023,4,c	;volatile
 36165  0002DC  D01B               	goto	i2l19339
 36166                           
 36167                           ;ISR.c: 128: {
 36168                           ;ISR.c: 129: CCP7IF = 0;
 36169  0002DE  98B7               	bcf	4023,4,c	;volatile
 36170                           
 36171                           ;ISR.c: 130: TRPM_Cap_Old = TRPM_Cap_New;
 36172  0002E0  C14D  F14F         	movff	_TRPM_Cap_New,_TRPM_Cap_Old
 36173  0002E4  C14E  F150         	movff	_TRPM_Cap_New+1,_TRPM_Cap_Old+1
 36174                           
 36175                           ;ISR.c: 131: TRPM_Cap_New = (256*CCPR7H)+CCPR7L;
 36176  0002E8  5070               	movf	3952,w,c	;volatile
 36177  0002EA  6E0E               	movwf	(??_ISR+1)& (0+255),c
 36178  0002EC  6A0D               	clrf	??_ISR& (0+255),c
 36179  0002EE  506F               	movf	3951,w,c	;volatile
 36180  0002F0  240D               	addwf	??_ISR,w,c
 36181  0002F2  0101               	movlb	1	; () banked
 36182  0002F4  6F4D               	movwf	_TRPM_Cap_New& (0+255),b
 36183  0002F6  0E00               	movlw	0
 36184  0002F8  200E               	addwfc	??_ISR+1,w,c
 36185  0002FA  0101               	movlb	1	; () banked
 36186  0002FC  6F4E               	movwf	(_TRPM_Cap_New+1)& (0+255),b
 36187                           
 36188                           ; BSR set to: 1
 36189                           ;ISR.c: 132: Timer1_OF_counter_Old = Timer1_OF_counter_New;
 36190  0002FE  C153  F2B4         	movff	_Timer1_OF_counter_New,_Timer1_OF_counter_Old
 36191  000302  C154  F2B5         	movff	_Timer1_OF_counter_New+1,_Timer1_OF_counter_Old+1
 36192                           
 36193                           ; BSR set to: 1
 36194                           ;ISR.c: 133: Timer1_OF_counter_New = Gi_Timer1_OF_counter;
 36195  000306  C29C  F153         	movff	_Gi_Timer1_OF_counter,_Timer1_OF_counter_New
 36196  00030A  C29D  F154         	movff	_Gi_Timer1_OF_counter+1,_Timer1_OF_counter_New+1
 36197                           
 36198                           ; BSR set to: 1
 36199                           ;ISR.c: 134: TRPM_Cal = 1;
 36200  00030E  0E01               	movlw	1
 36201  000310  0101               	movlb	1	; () banked
 36202  000312  6FBB               	movwf	_TRPM_Cal& (0+255),b
 36203  000314                     i2l19339:
 36204                           
 36205                           ;ISR.c: 136: }
 36206                           ;ISR.c: 137: if(CCP8IF)
 36207  000314  AAB7               	btfss	4023,5,c	;volatile
 36208  000316  D020               	goto	i2l19351
 36209                           
 36210                           ;ISR.c: 138: {
 36211                           ;ISR.c: 139: CCP8IF = 0;
 36212  000318  9AB7               	bcf	4023,5,c	;volatile
 36213                           
 36214                           ;ISR.c: 140: GRPM_Cap_Old = GRPM_Cap_New;
 36215  00031A  C137  F139         	movff	_GRPM_Cap_New,_GRPM_Cap_Old
 36216  00031E  C138  F13A         	movff	_GRPM_Cap_New+1,_GRPM_Cap_Old+1
 36217                           
 36218                           ;ISR.c: 141: GRPM_Cap_New = ((256*CCPR8H)+CCPR8L);
 36219  000322  010F               	movlb	15	; () banked
 36220  000324  5148               	movf	72,w,b	;volatile
 36221  000326  6E0E               	movwf	(??_ISR+1)& (0+255),c
 36222  000328  6A0D               	clrf	??_ISR& (0+255),c
 36223  00032A  010F               	movlb	15	; () banked
 36224  00032C  5147               	movf	71,w,b	;volatile
 36225  00032E  240D               	addwf	??_ISR,w,c
 36226  000330  0101               	movlb	1	; () banked
 36227  000332  6F37               	movwf	_GRPM_Cap_New& (0+255),b
 36228  000334  010F               	movlb	15	; () banked
 36229  000336  0E00               	movlw	0
 36230  000338  200E               	addwfc	??_ISR+1,w,c
 36231  00033A  0101               	movlb	1	; () banked
 36232  00033C  6F38               	movwf	(_GRPM_Cap_New+1)& (0+255),b
 36233                           
 36234                           ; BSR set to: 1
 36235                           ;ISR.c: 142: Timer1_OF_counter_Generator_Old = Timer1_OF_counter_Generator_New;
 36236  00033E  C151  F2B2         	movff	_Timer1_OF_counter_Generator_New,_Timer1_OF_counter_Generator_Old
 36237  000342  C152  F2B3         	movff	_Timer1_OF_counter_Generator_New+1,_Timer1_OF_counter_Generator_Old+1
 36238                           
 36239                           ; BSR set to: 1
 36240                           ;ISR.c: 143: Timer1_OF_counter_Generator_New = Gi_Timer1_OF_counter_Generator_Temp;
 36241  000346  C29E  F151         	movff	_Gi_Timer1_OF_counter_Generator_Temp,_Timer1_OF_counter_Generator_New
 36242  00034A  C29F  F152         	movff	_Gi_Timer1_OF_counter_Generator_Temp+1,_Timer1_OF_counter_Generator_New+1
 36243                           
 36244                           ; BSR set to: 1
 36245                           ;ISR.c: 144: GRPM_Cap = 1;
 36246  00034E  0E00               	movlw	0
 36247  000350  0102               	movlb	2	; () banked
 36248  000352  6F8B               	movwf	(_GRPM_Cap+1)& (0+255),b
 36249  000354  0E01               	movlw	1
 36250  000356  6F8A               	movwf	_GRPM_Cap& (0+255),b
 36251  000358                     i2l19351:
 36252                           
 36253                           ;ISR.c: 145: }
 36254                           ;ISR.c: 147: if(CCP6IF)
 36255  000358  A6B7               	btfss	4023,3,c	;volatile
 36256  00035A  D01D               	goto	i2l19363
 36257                           
 36258                           ;ISR.c: 148: {
 36259                           ;ISR.c: 149: CCP6IF = 0;
 36260  00035C  96B7               	bcf	4023,3,c	;volatile
 36261                           
 36262                           ;ISR.c: 150: Wind_Cap_Old = Wind_Cap_New;
 36263  00035E  C15D  F161         	movff	_Wind_Cap_New,_Wind_Cap_Old
 36264  000362  C15E  F162         	movff	_Wind_Cap_New+1,_Wind_Cap_Old+1
 36265                           
 36266                           ;ISR.c: 151: Wind_Cap_New = ((256*CCPR6H)+CCPR6L);
 36267  000366  5073               	movf	3955,w,c	;volatile
 36268  000368  6E0E               	movwf	(??_ISR+1)& (0+255),c
 36269  00036A  6A0D               	clrf	??_ISR& (0+255),c
 36270  00036C  5072               	movf	3954,w,c	;volatile
 36271  00036E  240D               	addwf	??_ISR,w,c
 36272  000370  0101               	movlb	1	; () banked
 36273  000372  6F5D               	movwf	_Wind_Cap_New& (0+255),b
 36274  000374  0E00               	movlw	0
 36275  000376  200E               	addwfc	??_ISR+1,w,c
 36276  000378  0101               	movlb	1	; () banked
 36277  00037A  6F5E               	movwf	(_Wind_Cap_New+1)& (0+255),b
 36278                           
 36279                           ; BSR set to: 1
 36280                           ;ISR.c: 152: Timer1_OF_counter_Wind_temp_Old = Timer1_OF_counter_Wind_temp_New;
 36281  00037C  C155  F2C2         	movff	_Timer1_OF_counter_Wind_temp_New,_Timer1_OF_counter_Wind_temp_Old
 36282  000380  C156  F2C3         	movff	_Timer1_OF_counter_Wind_temp_New+1,_Timer1_OF_counter_Wind_temp_Old+1
 36283                           
 36284                           ; BSR set to: 1
 36285                           ;ISR.c: 153: Timer1_OF_counter_Wind_temp_New = Timer1_OF_counter_Wind_temp;
 36286  000384  C2C0  F155         	movff	_Timer1_OF_counter_Wind_temp,_Timer1_OF_counter_Wind_temp_New
 36287  000388  C2C1  F156         	movff	_Timer1_OF_counter_Wind_temp+1,_Timer1_OF_counter_Wind_temp_New+1
 36288                           
 36289                           ; BSR set to: 1
 36290                           ;ISR.c: 154: Wind_Cap = 1;
 36291  00038C  0E00               	movlw	0
 36292  00038E  0102               	movlb	2	; () banked
 36293  000390  6FCB               	movwf	(_Wind_Cap+1)& (0+255),b
 36294  000392  0E01               	movlw	1
 36295  000394  6FCA               	movwf	_Wind_Cap& (0+255),b
 36296  000396                     i2l19363:
 36297                           
 36298                           ;ISR.c: 155: }
 36299                           ;ISR.c: 157: if(PIR3bits.RC2IF)
 36300  000396  AAA4               	btfss	4004,5,c	;volatile
 36301  000398  D02A               	goto	i2l4573
 36302                           
 36303                           ;ISR.c: 158: {
 36304                           ;ISR.c: 159: if(RCSTA2bits.OERR==1)
 36305  00039A  010F               	movlb	15	; () banked
 36306  00039C  A322               	btfss	34,1,b	;volatile
 36307  00039E  D004               	goto	i2l19369
 36308                           
 36309                           ; BSR set to: 15
 36310                           ;ISR.c: 160: {
 36311                           ;ISR.c: 161: RCSTA2bits.CREN=0;
 36312  0003A0  010F               	movlb	15	; () banked
 36313  0003A2  9922               	bcf	34,4,b	;volatile
 36314                           
 36315                           ;ISR.c: 162: RCSTA2bits.CREN=1;
 36316  0003A4  010F               	movlb	15	; () banked
 36317  0003A6  8922               	bsf	34,4,b	;volatile
 36318  0003A8                     i2l19369:
 36319                           
 36320                           ; BSR set to: 15
 36321                           ;ISR.c: 163: }
 36322                           ;ISR.c: 164: if(RS485_Data_Flag == 1)
 36323  0003A8  0101               	movlb	1	; () banked
 36324  0003AA  05B3               	decf	_RS485_Data_Flag& (0+255),w,b
 36325  0003AC  A4D8               	btfss	status,2,c
 36326  0003AE  D01E               	goto	i2l19379
 36327                           
 36328                           ; BSR set to: 1
 36329                           ;ISR.c: 165: {
 36330                           ;ISR.c: 166: Data_1[counter_1] = RCREG2;
 36331  0003B0  010F               	movlb	15	; () banked
 36332  0003B2  511D               	movf	29,w,b	;volatile
 36333  0003B4  6E0D               	movwf	??_ISR& (0+255),c
 36334  0003B6  6A0E               	clrf	(??_ISR+1)& (0+255),c
 36335  0003B8  0101               	movlb	1	; () banked
 36336  0003BA  51DF               	movf	_counter_1& (0+255),w,b
 36337  0003BC  0D02               	mullw	2
 36338  0003BE  0E00               	movlw	low _Data_1
 36339  0003C0  24F3               	addwf	prodl,w,c
 36340  0003C2  6ED9               	movwf	fsr2l,c
 36341  0003C4  0E05               	movlw	high _Data_1
 36342  0003C6  20F4               	addwfc	prodh,w,c
 36343  0003C8  6EDA               	movwf	fsr2h,c
 36344  0003CA  C00D  FFDE         	movff	??_ISR,postinc2
 36345  0003CE  C00E  FFDD         	movff	??_ISR+1,postdec2
 36346                           
 36347                           ; BSR set to: 1
 36348                           ;ISR.c: 167: if(Data_1[0] == 0x20)
 36349  0003D2  0E20               	movlw	32
 36350  0003D4  0105               	movlb	5	; () banked
 36351  0003D6  1900               	xorwf	_Data_1& (0+255),w,b
 36352  0003D8  0105               	movlb	5	; () banked
 36353  0003DA  1101               	iorwf	(_Data_1+1)& (0+255),w,b
 36354  0003DC  A4D8               	btfss	status,2,c
 36355  0003DE  D006               	goto	i2l19379
 36356                           
 36357                           ; BSR set to: 5
 36358                           ;ISR.c: 168: {
 36359                           ;ISR.c: 169: if(counter_1 < 10)
 36360  0003E0  0E0A               	movlw	10
 36361  0003E2  0101               	movlb	1	; () banked
 36362  0003E4  61DF               	cpfslt	_counter_1& (0+255),b
 36363  0003E6  D002               	goto	i2l19379
 36364                           
 36365                           ; BSR set to: 1
 36366                           ;ISR.c: 170: {
 36367                           ;ISR.c: 171: counter_1++;
 36368  0003E8  0101               	movlb	1	; () banked
 36369  0003EA  2BDF               	incf	_counter_1& (0+255),f,b
 36370  0003EC                     i2l19379:
 36371                           
 36372                           ;ISR.c: 172: }
 36373                           ;ISR.c: 173: }
 36374                           ;ISR.c: 174: }
 36375                           ;ISR.c: 175: PIR3bits.RC2IF = 0;
 36376  0003EC  9AA4               	bcf	4004,5,c	;volatile
 36377  0003EE                     i2l4573:
 36378  0003EE  C01C  FFF5         	movff	??_ISR+15,tablat
 36379  0003F2  C01B  FFF8         	movff	??_ISR+14,tblptru
 36380  0003F6  C01A  FFF7         	movff	??_ISR+13,tblptrh
 36381  0003FA  C019  FFF6         	movff	??_ISR+12,tblptrl
 36382  0003FE  C018  FFF4         	movff	??_ISR+11,prodh
 36383  000402  C017  FFF3         	movff	??_ISR+10,prodl
 36384  000406  C016  FFDA         	movff	??_ISR+9,fsr2h
 36385  00040A  C015  FFD9         	movff	??_ISR+8,fsr2l
 36386  00040E  C014  FFE2         	movff	??_ISR+7,fsr1h
 36387  000412  C013  FFE1         	movff	??_ISR+6,fsr1l
 36388  000416  C012  FFEA         	movff	??_ISR+5,fsr0h
 36389  00041A  C011  FFE9         	movff	??_ISR+4,fsr0l
 36390  00041E  C010  FFFB         	movff	??_ISR+3,pclatu
 36391  000422  C00F  FFFA         	movff	??_ISR+2,pclath
 36392  000426  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 36393  000428  0011               	retfie		f
 36394  00042A                     __end_of_ISR:
 36395                           	opt stack 0
 36396                           pclatu	equ	0xFFB
 36397                           pclath	equ	0xFFA
 36398                           tblptru	equ	0xFF8
 36399                           tblptrh	equ	0xFF7
 36400                           tblptrl	equ	0xFF6
 36401                           tablat	equ	0xFF5
 36402                           prodh	equ	0xFF4
 36403                           prodl	equ	0xFF3
 36404                           intcon	equ	0xFF2
 36405                           postinc0	equ	0xFEE
 36406                           fsr0h	equ	0xFEA
 36407                           fsr0l	equ	0xFE9
 36408                           wreg	equ	0xFE8
 36409                           postdec1	equ	0xFE5
 36410                           fsr1h	equ	0xFE2
 36411                           fsr1l	equ	0xFE1
 36412                           indf2	equ	0xFDF
 36413                           postinc2	equ	0xFDE
 36414                           postdec2	equ	0xFDD
 36415                           fsr2h	equ	0xFDA
 36416                           fsr2l	equ	0xFD9
 36417                           status	equ	0xFD8
 36418                           
 36419 ;; *************** function ___awtoft *****************
 36420 ;; Defined at:
 36421 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
 36422 ;; Parameters:    Size  Location     Type
 36423 ;;  c               2    8[COMRAM] int 
 36424 ;; Auto vars:     Size  Location     Type
 36425 ;;  sign            1   11[COMRAM] unsigned char 
 36426 ;; Return value:  Size  Location     Type
 36427 ;;                  3    8[COMRAM] float 
 36428 ;; Registers used:
 36429 ;;		wreg, status,2, status,0, cstack
 36430 ;; Tracked objects:
 36431 ;;		On entry : 0/0
 36432 ;;		On exit  : 0/0
 36433 ;;		Unchanged: 0/0
 36434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36435 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36438 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36439 ;;Total ram usage:        4 bytes
 36440 ;; Hardware stack levels used:    1
 36441 ;; Hardware stack levels required when called:    1
 36442 ;; This function calls:
 36443 ;;		i2___ftpack
 36444 ;; This function is called by:
 36445 ;;		_ISR
 36446 ;; This function uses a non-reentrant model
 36447 ;;
 36448                           
 36449                           	psect	text138
 36450  01A65E                     __ptext138:
 36451                           	opt stack 0
 36452  01A65E                     ___awtoft:
 36453                           	opt stack 21
 36454                           
 36455                           ;incstack = 0
 36456  01A65E  0E00               	movlw	0
 36457  01A660  6E0C               	movwf	___awtoft@sign,c
 36458  01A662  AE0A               	btfss	___awtoft@c+1,7,c
 36459  01A664  D006               	goto	i2l19043
 36460  01A666  6C09               	negf	___awtoft@c,c
 36461  01A668  1E0A               	comf	___awtoft@c+1,f,c
 36462  01A66A  B0D8               	btfsc	status,0,c
 36463  01A66C  2A0A               	incf	___awtoft@c+1,f,c
 36464  01A66E  0E01               	movlw	1
 36465  01A670  6E0C               	movwf	___awtoft@sign,c
 36466  01A672                     i2l19043:
 36467  01A672  C009  F001         	movff	___awtoft@c,i2___ftpack@arg
 36468  01A676  C00A  F002         	movff	___awtoft@c+1,i2___ftpack@arg+1
 36469  01A67A  6A03               	clrf	i2___ftpack@arg+2,c
 36470  01A67C  0E8E               	movlw	142
 36471  01A67E  6E04               	movwf	i2___ftpack@exp,c
 36472  01A680  C00C  F005         	movff	___awtoft@sign,i2___ftpack@sign
 36473  01A684  ECF7  F0CB         	call	i2___ftpack	;wreg free
 36474  01A688  C001  F009         	movff	?i2___ftpack,?___awtoft
 36475  01A68C  C002  F00A         	movff	?i2___ftpack+1,?___awtoft+1
 36476  01A690  C003  F00B         	movff	?i2___ftpack+2,?___awtoft+2
 36477  01A694  0012               	return	
 36478  01A696                     __end_of___awtoft:
 36479                           	opt stack 0
 36480                           pclatu	equ	0xFFB
 36481                           pclath	equ	0xFFA
 36482                           tblptru	equ	0xFF8
 36483                           tblptrh	equ	0xFF7
 36484                           tblptrl	equ	0xFF6
 36485                           tablat	equ	0xFF5
 36486                           prodh	equ	0xFF4
 36487                           prodl	equ	0xFF3
 36488                           intcon	equ	0xFF2
 36489                           postinc0	equ	0xFEE
 36490                           fsr0h	equ	0xFEA
 36491                           fsr0l	equ	0xFE9
 36492                           wreg	equ	0xFE8
 36493                           postdec1	equ	0xFE5
 36494                           fsr1h	equ	0xFE2
 36495                           fsr1l	equ	0xFE1
 36496                           indf2	equ	0xFDF
 36497                           postinc2	equ	0xFDE
 36498                           postdec2	equ	0xFDD
 36499                           fsr2h	equ	0xFDA
 36500                           fsr2l	equ	0xFD9
 36501                           status	equ	0xFD8
 36502                           
 36503 ;; *************** function i2___ftpack *****************
 36504 ;; Defined at:
 36505 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 36506 ;; Parameters:    Size  Location     Type
 36507 ;;  arg             3    0[COMRAM] unsigned um
 36508 ;;  exp             1    3[COMRAM] unsigned char 
 36509 ;;  sign            1    4[COMRAM] unsigned char 
 36510 ;; Auto vars:     Size  Location     Type
 36511 ;;		None
 36512 ;; Return value:  Size  Location     Type
 36513 ;;                  3    0[COMRAM] float 
 36514 ;; Registers used:
 36515 ;;		wreg, status,2, status,0
 36516 ;; Tracked objects:
 36517 ;;		On entry : 0/0
 36518 ;;		On exit  : 0/0
 36519 ;;		Unchanged: 0/0
 36520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36521 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36523 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36524 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36525 ;;Total ram usage:        8 bytes
 36526 ;; Hardware stack levels used:    1
 36527 ;; This function calls:
 36528 ;;		Nothing
 36529 ;; This function is called by:
 36530 ;;		___awtoft
 36531 ;; This function uses a non-reentrant model
 36532 ;;
 36533                           
 36534                           	psect	text139
 36535  0197EE                     __ptext139:
 36536                           	opt stack 0
 36537  0197EE                     i2___ftpack:
 36538                           	opt stack 21
 36539                           
 36540                           ;incstack = 0
 36541  0197EE  5004               	movf	i2___ftpack@exp,w,c
 36542  0197F0  B4D8               	btfsc	status,2,c
 36543  0197F2  D005               	goto	i2l18127
 36544  0197F4  5001               	movf	i2___ftpack@arg,w,c
 36545  0197F6  1002               	iorwf	i2___ftpack@arg+1,w,c
 36546  0197F8  1003               	iorwf	i2___ftpack@arg+2,w,c
 36547  0197FA  A4D8               	btfss	status,2,c
 36548  0197FC  D00C               	goto	i2l18133
 36549  0197FE                     i2l18127:
 36550  0197FE  0E00               	movlw	0
 36551  019800  6E01               	movwf	?i2___ftpack,c
 36552  019802  0E00               	movlw	0
 36553  019804  6E02               	movwf	?i2___ftpack+1,c
 36554  019806  0E00               	movlw	0
 36555  019808  6E03               	movwf	?i2___ftpack+2,c
 36556  01980A  0012               	return	
 36557  01980C                     i2l18131:
 36558  01980C  2A04               	incf	i2___ftpack@exp,f,c
 36559  01980E  90D8               	bcf	status,0,c
 36560  019810  3203               	rrcf	i2___ftpack@arg+2,f,c
 36561  019812  3202               	rrcf	i2___ftpack@arg+1,f,c
 36562  019814  3201               	rrcf	i2___ftpack@arg,f,c
 36563  019816                     i2l18133:
 36564  019816  0E00               	movlw	0
 36565  019818  1401               	andwf	i2___ftpack@arg,w,c
 36566  01981A  6E06               	movwf	??i2___ftpack& (0+255),c
 36567  01981C  0E00               	movlw	0
 36568  01981E  1402               	andwf	i2___ftpack@arg+1,w,c
 36569  019820  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 36570  019822  0EFE               	movlw	254
 36571  019824  1403               	andwf	i2___ftpack@arg+2,w,c
 36572  019826  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 36573  019828  5006               	movf	??i2___ftpack,w,c
 36574  01982A  1007               	iorwf	??i2___ftpack+1,w,c
 36575  01982C  1008               	iorwf	??i2___ftpack+2,w,c
 36576  01982E  B4D8               	btfsc	status,2,c
 36577  019830  D00C               	goto	i2l18139
 36578  019832  D7EC               	goto	i2l18131
 36579  019834                     i2l18135:
 36580  019834  2A04               	incf	i2___ftpack@exp,f,c
 36581  019836  0E01               	movlw	1
 36582  019838  2601               	addwf	i2___ftpack@arg,f,c
 36583  01983A  0E00               	movlw	0
 36584  01983C  2202               	addwfc	i2___ftpack@arg+1,f,c
 36585  01983E  0E00               	movlw	0
 36586  019840  2203               	addwfc	i2___ftpack@arg+2,f,c
 36587  019842  90D8               	bcf	status,0,c
 36588  019844  3203               	rrcf	i2___ftpack@arg+2,f,c
 36589  019846  3202               	rrcf	i2___ftpack@arg+1,f,c
 36590  019848  3201               	rrcf	i2___ftpack@arg,f,c
 36591  01984A                     i2l18139:
 36592  01984A  0E00               	movlw	0
 36593  01984C  1401               	andwf	i2___ftpack@arg,w,c
 36594  01984E  6E06               	movwf	??i2___ftpack& (0+255),c
 36595  019850  0E00               	movlw	0
 36596  019852  1402               	andwf	i2___ftpack@arg+1,w,c
 36597  019854  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 36598  019856  0EFF               	movlw	255
 36599  019858  1403               	andwf	i2___ftpack@arg+2,w,c
 36600  01985A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 36601  01985C  5006               	movf	??i2___ftpack,w,c
 36602  01985E  1007               	iorwf	??i2___ftpack+1,w,c
 36603  019860  1008               	iorwf	??i2___ftpack+2,w,c
 36604  019862  B4D8               	btfsc	status,2,c
 36605  019864  D006               	goto	i2l18143
 36606  019866  D7E6               	goto	i2l18135
 36607  019868                     i2l18141:
 36608  019868  0604               	decf	i2___ftpack@exp,f,c
 36609  01986A  90D8               	bcf	status,0,c
 36610  01986C  3601               	rlcf	i2___ftpack@arg,f,c
 36611  01986E  3602               	rlcf	i2___ftpack@arg+1,f,c
 36612  019870  3603               	rlcf	i2___ftpack@arg+2,f,c
 36613  019872                     i2l18143:
 36614  019872  BE02               	btfsc	i2___ftpack@arg+1,7,c
 36615  019874  D003               	goto	i2l10691
 36616  019876  0E02               	movlw	2
 36617  019878  6004               	cpfslt	i2___ftpack@exp,c
 36618  01987A  D7F6               	goto	i2l18141
 36619  01987C                     i2l10691:
 36620  01987C  A004               	btfss	i2___ftpack@exp,0,c
 36621  01987E  9E02               	bcf	i2___ftpack@arg+1,7,c
 36622  019880  90D8               	bcf	status,0,c
 36623  019882  3204               	rrcf	i2___ftpack@exp,f,c
 36624  019884  5004               	movf	i2___ftpack@exp,w,c
 36625  019886  1203               	iorwf	i2___ftpack@arg+2,f,c
 36626  019888  5005               	movf	i2___ftpack@sign,w,c
 36627  01988A  A4D8               	btfss	status,2,c
 36628  01988C  8E03               	bsf	i2___ftpack@arg+2,7,c
 36629  01988E  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 36630  019892  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 36631  019896  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 36632  01989A  0012               	return	
 36633  01989C                     __end_ofi2___ftpack:
 36634                           	opt stack 0
 36635                           pclatu	equ	0xFFB
 36636                           pclath	equ	0xFFA
 36637                           tblptru	equ	0xFF8
 36638                           tblptrh	equ	0xFF7
 36639                           tblptrl	equ	0xFF6
 36640                           tablat	equ	0xFF5
 36641                           prodh	equ	0xFF4
 36642                           prodl	equ	0xFF3
 36643                           intcon	equ	0xFF2
 36644                           postinc0	equ	0xFEE
 36645                           fsr0h	equ	0xFEA
 36646                           fsr0l	equ	0xFE9
 36647                           wreg	equ	0xFE8
 36648                           postdec1	equ	0xFE5
 36649                           fsr1h	equ	0xFE2
 36650                           fsr1l	equ	0xFE1
 36651                           indf2	equ	0xFDF
 36652                           postinc2	equ	0xFDE
 36653                           postdec2	equ	0xFDD
 36654                           fsr2h	equ	0xFDA
 36655                           fsr2l	equ	0xFD9
 36656                           status	equ	0xFD8
 36657                           
 36658 ;; *************** function _PM_Error_Led *****************
 36659 ;; Defined at:
 36660 ;;		line 631 in file "Power_Meter.c"
 36661 ;; Parameters:    Size  Location     Type
 36662 ;;		None
 36663 ;; Auto vars:     Size  Location     Type
 36664 ;;		None
 36665 ;; Return value:  Size  Location     Type
 36666 ;;                  1    wreg      void 
 36667 ;; Registers used:
 36668 ;;		wreg, status,2, status,0, cstack
 36669 ;; Tracked objects:
 36670 ;;		On entry : 0/0
 36671 ;;		On exit  : 0/0
 36672 ;;		Unchanged: 0/0
 36673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36678 ;;Total ram usage:        0 bytes
 36679 ;; Hardware stack levels used:    1
 36680 ;; Hardware stack levels required when called:    1
 36681 ;; This function calls:
 36682 ;;		i2___ftge
 36683 ;; This function is called by:
 36684 ;;		_ISR
 36685 ;; This function uses a non-reentrant model
 36686 ;;
 36687                           
 36688                           	psect	text140
 36689  0151E2                     __ptext140:
 36690                           	opt stack 0
 36691  0151E2                     _PM_Error_Led:
 36692                           	opt stack 21
 36693                           
 36694                           ;Power_Meter.c: 633: if ((Phase_Sequence_Ok == 0) || (R_Volt <= (370)) || (Y_Volt <= (37
      +                          0)) ||
 36695                           ;Power_Meter.c: 634: (B_Volt <= (370)) || (R_Volt >= (450)) || (Y_Volt >= (450)) ||
 36696                           ;Power_Meter.c: 635: (B_Volt >= (450)) || (R_Curr >= (12)) || (Y_Curr >= (12)) ||
 36697                           ;Power_Meter.c: 636: (B_Curr >= (12)) || (Frequency <= (47.5)) || (Frequency >= (52.5)) 
      +                          || (KW <= (-5.0)) ||
 36698                           ;Power_Meter.c: 637: (KW >= (6.0) ))
 36699                           
 36700                           ;incstack = 0
 36701  0151E2  503C               	movf	_Phase_Sequence_Ok,w,c
 36702  0151E4  B4D8               	btfsc	status,2,c
 36703  0151E6  D0D0               	goto	i2l9354
 36704  0151E8  0E00               	movlw	0
 36705  0151EA  6E01               	movwf	i2___ftge@ff1,c
 36706  0151EC  0EB9               	movlw	185
 36707  0151EE  6E02               	movwf	i2___ftge@ff1+1,c
 36708  0151F0  0E43               	movlw	67
 36709  0151F2  6E03               	movwf	i2___ftge@ff1+2,c
 36710  0151F4  C02A  F004         	movff	_R_Volt,i2___ftge@ff2
 36711  0151F8  C02B  F005         	movff	_R_Volt+1,i2___ftge@ff2+1
 36712  0151FC  C02C  F006         	movff	_R_Volt+2,i2___ftge@ff2+2
 36713  015200  EC2E  F0CE         	call	i2___ftge	;wreg free
 36714  015204  B0D8               	btfsc	status,0,c
 36715  015206  D0C0               	goto	i2l9354
 36716  015208  0E00               	movlw	0
 36717  01520A  6E01               	movwf	i2___ftge@ff1,c
 36718  01520C  0EB9               	movlw	185
 36719  01520E  6E02               	movwf	i2___ftge@ff1+1,c
 36720  015210  0E43               	movlw	67
 36721  015212  6E03               	movwf	i2___ftge@ff1+2,c
 36722  015214  C030  F004         	movff	_Y_Volt,i2___ftge@ff2
 36723  015218  C031  F005         	movff	_Y_Volt+1,i2___ftge@ff2+1
 36724  01521C  C032  F006         	movff	_Y_Volt+2,i2___ftge@ff2+2
 36725  015220  EC2E  F0CE         	call	i2___ftge	;wreg free
 36726  015224  B0D8               	btfsc	status,0,c
 36727  015226  D0B0               	goto	i2l9354
 36728  015228  0E00               	movlw	0
 36729  01522A  6E01               	movwf	i2___ftge@ff1,c
 36730  01522C  0EB9               	movlw	185
 36731  01522E  6E02               	movwf	i2___ftge@ff1+1,c
 36732  015230  0E43               	movlw	67
 36733  015232  6E03               	movwf	i2___ftge@ff1+2,c
 36734  015234  C027  F004         	movff	_B_Volt,i2___ftge@ff2
 36735  015238  C028  F005         	movff	_B_Volt+1,i2___ftge@ff2+1
 36736  01523C  C029  F006         	movff	_B_Volt+2,i2___ftge@ff2+2
 36737  015240  EC2E  F0CE         	call	i2___ftge	;wreg free
 36738  015244  B0D8               	btfsc	status,0,c
 36739  015246  D0A0               	goto	i2l9354
 36740  015248  C02A  F001         	movff	_R_Volt,i2___ftge@ff1
 36741  01524C  C02B  F002         	movff	_R_Volt+1,i2___ftge@ff1+1
 36742  015250  C02C  F003         	movff	_R_Volt+2,i2___ftge@ff1+2
 36743  015254  0E00               	movlw	0
 36744  015256  6E04               	movwf	i2___ftge@ff2,c
 36745  015258  0EE1               	movlw	225
 36746  01525A  6E05               	movwf	i2___ftge@ff2+1,c
 36747  01525C  0E43               	movlw	67
 36748  01525E  6E06               	movwf	i2___ftge@ff2+2,c
 36749  015260  EC2E  F0CE         	call	i2___ftge	;wreg free
 36750  015264  B0D8               	btfsc	status,0,c
 36751  015266  D090               	goto	i2l9354
 36752  015268  C030  F001         	movff	_Y_Volt,i2___ftge@ff1
 36753  01526C  C031  F002         	movff	_Y_Volt+1,i2___ftge@ff1+1
 36754  015270  C032  F003         	movff	_Y_Volt+2,i2___ftge@ff1+2
 36755  015274  0E00               	movlw	0
 36756  015276  6E04               	movwf	i2___ftge@ff2,c
 36757  015278  0EE1               	movlw	225
 36758  01527A  6E05               	movwf	i2___ftge@ff2+1,c
 36759  01527C  0E43               	movlw	67
 36760  01527E  6E06               	movwf	i2___ftge@ff2+2,c
 36761  015280  EC2E  F0CE         	call	i2___ftge	;wreg free
 36762  015284  B0D8               	btfsc	status,0,c
 36763  015286  D080               	goto	i2l9354
 36764  015288  C027  F001         	movff	_B_Volt,i2___ftge@ff1
 36765  01528C  C028  F002         	movff	_B_Volt+1,i2___ftge@ff1+1
 36766  015290  C029  F003         	movff	_B_Volt+2,i2___ftge@ff1+2
 36767  015294  0E00               	movlw	0
 36768  015296  6E04               	movwf	i2___ftge@ff2,c
 36769  015298  0EE1               	movlw	225
 36770  01529A  6E05               	movwf	i2___ftge@ff2+1,c
 36771  01529C  0E43               	movlw	67
 36772  01529E  6E06               	movwf	i2___ftge@ff2+2,c
 36773  0152A0  EC2E  F0CE         	call	i2___ftge	;wreg free
 36774  0152A4  B0D8               	btfsc	status,0,c
 36775  0152A6  D070               	goto	i2l9354
 36776  0152A8  C118  F001         	movff	_R_Curr,i2___ftge@ff1
 36777  0152AC  C119  F002         	movff	_R_Curr+1,i2___ftge@ff1+1
 36778  0152B0  C11A  F003         	movff	_R_Curr+2,i2___ftge@ff1+2
 36779  0152B4  0E00               	movlw	0
 36780  0152B6  6E04               	movwf	i2___ftge@ff2,c
 36781  0152B8  0E40               	movlw	64
 36782  0152BA  6E05               	movwf	i2___ftge@ff2+1,c
 36783  0152BC  0E41               	movlw	65
 36784  0152BE  6E06               	movwf	i2___ftge@ff2+2,c
 36785  0152C0  EC2E  F0CE         	call	i2___ftge	;wreg free
 36786  0152C4  B0D8               	btfsc	status,0,c
 36787  0152C6  D060               	goto	i2l9354
 36788  0152C8  C12D  F001         	movff	_Y_Curr,i2___ftge@ff1
 36789  0152CC  C12E  F002         	movff	_Y_Curr+1,i2___ftge@ff1+1
 36790  0152D0  C12F  F003         	movff	_Y_Curr+2,i2___ftge@ff1+2
 36791  0152D4  0E00               	movlw	0
 36792  0152D6  6E04               	movwf	i2___ftge@ff2,c
 36793  0152D8  0E40               	movlw	64
 36794  0152DA  6E05               	movwf	i2___ftge@ff2+1,c
 36795  0152DC  0E41               	movlw	65
 36796  0152DE  6E06               	movwf	i2___ftge@ff2+2,c
 36797  0152E0  EC2E  F0CE         	call	i2___ftge	;wreg free
 36798  0152E4  B0D8               	btfsc	status,0,c
 36799  0152E6  D050               	goto	i2l9354
 36800  0152E8  C103  F001         	movff	_B_Curr,i2___ftge@ff1
 36801  0152EC  C104  F002         	movff	_B_Curr+1,i2___ftge@ff1+1
 36802  0152F0  C105  F003         	movff	_B_Curr+2,i2___ftge@ff1+2
 36803  0152F4  0E00               	movlw	0
 36804  0152F6  6E04               	movwf	i2___ftge@ff2,c
 36805  0152F8  0E40               	movlw	64
 36806  0152FA  6E05               	movwf	i2___ftge@ff2+1,c
 36807  0152FC  0E41               	movlw	65
 36808  0152FE  6E06               	movwf	i2___ftge@ff2+2,c
 36809  015300  EC2E  F0CE         	call	i2___ftge	;wreg free
 36810  015304  B0D8               	btfsc	status,0,c
 36811  015306  D040               	goto	i2l9354
 36812  015308  0E00               	movlw	0
 36813  01530A  6E01               	movwf	i2___ftge@ff1,c
 36814  01530C  0E3E               	movlw	62
 36815  01530E  6E02               	movwf	i2___ftge@ff1+1,c
 36816  015310  0E42               	movlw	66
 36817  015312  6E03               	movwf	i2___ftge@ff1+2,c
 36818  015314  C109  F004         	movff	_Frequency,i2___ftge@ff2
 36819  015318  C10A  F005         	movff	_Frequency+1,i2___ftge@ff2+1
 36820  01531C  C10B  F006         	movff	_Frequency+2,i2___ftge@ff2+2
 36821  015320  EC2E  F0CE         	call	i2___ftge	;wreg free
 36822  015324  B0D8               	btfsc	status,0,c
 36823  015326  D030               	goto	i2l9354
 36824  015328  C109  F001         	movff	_Frequency,i2___ftge@ff1
 36825  01532C  C10A  F002         	movff	_Frequency+1,i2___ftge@ff1+1
 36826  015330  C10B  F003         	movff	_Frequency+2,i2___ftge@ff1+2
 36827  015334  0E00               	movlw	0
 36828  015336  6E04               	movwf	i2___ftge@ff2,c
 36829  015338  0E52               	movlw	82
 36830  01533A  6E05               	movwf	i2___ftge@ff2+1,c
 36831  01533C  0E42               	movlw	66
 36832  01533E  6E06               	movwf	i2___ftge@ff2+2,c
 36833  015340  EC2E  F0CE         	call	i2___ftge	;wreg free
 36834  015344  B0D8               	btfsc	status,0,c
 36835  015346  D020               	goto	i2l9354
 36836  015348  0E00               	movlw	0
 36837  01534A  6E01               	movwf	i2___ftge@ff1,c
 36838  01534C  0EA0               	movlw	160
 36839  01534E  6E02               	movwf	i2___ftge@ff1+1,c
 36840  015350  0EC0               	movlw	192
 36841  015352  6E03               	movwf	i2___ftge@ff1+2,c
 36842  015354  C040  F004         	movff	_KW,i2___ftge@ff2
 36843  015358  C041  F005         	movff	_KW+1,i2___ftge@ff2+1
 36844  01535C  C042  F006         	movff	_KW+2,i2___ftge@ff2+2
 36845  015360  EC2E  F0CE         	call	i2___ftge	;wreg free
 36846  015364  B0D8               	btfsc	status,0,c
 36847  015366  D010               	goto	i2l9354
 36848  015368  C040  F001         	movff	_KW,i2___ftge@ff1
 36849  01536C  C041  F002         	movff	_KW+1,i2___ftge@ff1+1
 36850  015370  C042  F003         	movff	_KW+2,i2___ftge@ff1+2
 36851  015374  0E00               	movlw	0
 36852  015376  6E04               	movwf	i2___ftge@ff2,c
 36853  015378  0EC0               	movlw	192
 36854  01537A  6E05               	movwf	i2___ftge@ff2+1,c
 36855  01537C  0E40               	movlw	64
 36856  01537E  6E06               	movwf	i2___ftge@ff2+2,c
 36857  015380  EC2E  F0CE         	call	i2___ftge	;wreg free
 36858  015384  A0D8               	btfss	status,0,c
 36859  015386  D002               	goto	i2l19005
 36860  015388                     i2l9354:
 36861                           
 36862                           ;Power_Meter.c: 638: {
 36863                           ;Power_Meter.c: 639: (RF7 = 1);
 36864  015388  8E85               	bsf	3973,7,c	;volatile
 36865                           
 36866                           ;Power_Meter.c: 640: }
 36867  01538A  0012               	return	
 36868  01538C                     i2l19005:
 36869                           
 36870                           ;Power_Meter.c: 641: else if ((Phase_Sequence_Ok == 1) && (R_Volt >= (370)) && (Y_Volt >
      +                          = (370)) &&
 36871                           ;Power_Meter.c: 642: (B_Volt >= (370)) && (R_Volt <= (450)) && (Y_Volt <= (450)) &&
 36872                           ;Power_Meter.c: 643: (B_Volt <= (450)) && (R_Curr <= (12)) && (Y_Curr <= (12)) &&
 36873                           ;Power_Meter.c: 644: (B_Curr <= (12)) && (Frequency >= (47.5)) && (Frequency <= (52.5)) 
      +                          && (KW >= (-5.0)) &&
 36874                           ;Power_Meter.c: 645: (KW <= (6.0) ))
 36875  01538C  043C               	decf	_Phase_Sequence_Ok,w,c
 36876  01538E  A4D8               	btfss	status,2,c
 36877  015390  0012               	return	
 36878  015392  C02A  F001         	movff	_R_Volt,i2___ftge@ff1
 36879  015396  C02B  F002         	movff	_R_Volt+1,i2___ftge@ff1+1
 36880  01539A  C02C  F003         	movff	_R_Volt+2,i2___ftge@ff1+2
 36881  01539E  0E00               	movlw	0
 36882  0153A0  6E04               	movwf	i2___ftge@ff2,c
 36883  0153A2  0EB9               	movlw	185
 36884  0153A4  6E05               	movwf	i2___ftge@ff2+1,c
 36885  0153A6  0E43               	movlw	67
 36886  0153A8  6E06               	movwf	i2___ftge@ff2+2,c
 36887  0153AA  EC2E  F0CE         	call	i2___ftge	;wreg free
 36888  0153AE  A0D8               	btfss	status,0,c
 36889  0153B0  0012               	return	
 36890  0153B2  C030  F001         	movff	_Y_Volt,i2___ftge@ff1
 36891  0153B6  C031  F002         	movff	_Y_Volt+1,i2___ftge@ff1+1
 36892  0153BA  C032  F003         	movff	_Y_Volt+2,i2___ftge@ff1+2
 36893  0153BE  0E00               	movlw	0
 36894  0153C0  6E04               	movwf	i2___ftge@ff2,c
 36895  0153C2  0EB9               	movlw	185
 36896  0153C4  6E05               	movwf	i2___ftge@ff2+1,c
 36897  0153C6  0E43               	movlw	67
 36898  0153C8  6E06               	movwf	i2___ftge@ff2+2,c
 36899  0153CA  EC2E  F0CE         	call	i2___ftge	;wreg free
 36900  0153CE  A0D8               	btfss	status,0,c
 36901  0153D0  0012               	return	
 36902  0153D2  C027  F001         	movff	_B_Volt,i2___ftge@ff1
 36903  0153D6  C028  F002         	movff	_B_Volt+1,i2___ftge@ff1+1
 36904  0153DA  C029  F003         	movff	_B_Volt+2,i2___ftge@ff1+2
 36905  0153DE  0E00               	movlw	0
 36906  0153E0  6E04               	movwf	i2___ftge@ff2,c
 36907  0153E2  0EB9               	movlw	185
 36908  0153E4  6E05               	movwf	i2___ftge@ff2+1,c
 36909  0153E6  0E43               	movlw	67
 36910  0153E8  6E06               	movwf	i2___ftge@ff2+2,c
 36911  0153EA  EC2E  F0CE         	call	i2___ftge	;wreg free
 36912  0153EE  A0D8               	btfss	status,0,c
 36913  0153F0  0012               	return	
 36914  0153F2  0E00               	movlw	0
 36915  0153F4  6E01               	movwf	i2___ftge@ff1,c
 36916  0153F6  0EE1               	movlw	225
 36917  0153F8  6E02               	movwf	i2___ftge@ff1+1,c
 36918  0153FA  0E43               	movlw	67
 36919  0153FC  6E03               	movwf	i2___ftge@ff1+2,c
 36920  0153FE  C02A  F004         	movff	_R_Volt,i2___ftge@ff2
 36921  015402  C02B  F005         	movff	_R_Volt+1,i2___ftge@ff2+1
 36922  015406  C02C  F006         	movff	_R_Volt+2,i2___ftge@ff2+2
 36923  01540A  EC2E  F0CE         	call	i2___ftge	;wreg free
 36924  01540E  A0D8               	btfss	status,0,c
 36925  015410  0012               	return	
 36926  015412  0E00               	movlw	0
 36927  015414  6E01               	movwf	i2___ftge@ff1,c
 36928  015416  0EE1               	movlw	225
 36929  015418  6E02               	movwf	i2___ftge@ff1+1,c
 36930  01541A  0E43               	movlw	67
 36931  01541C  6E03               	movwf	i2___ftge@ff1+2,c
 36932  01541E  C030  F004         	movff	_Y_Volt,i2___ftge@ff2
 36933  015422  C031  F005         	movff	_Y_Volt+1,i2___ftge@ff2+1
 36934  015426  C032  F006         	movff	_Y_Volt+2,i2___ftge@ff2+2
 36935  01542A  EC2E  F0CE         	call	i2___ftge	;wreg free
 36936  01542E  A0D8               	btfss	status,0,c
 36937  015430  0012               	return	
 36938  015432  0E00               	movlw	0
 36939  015434  6E01               	movwf	i2___ftge@ff1,c
 36940  015436  0EE1               	movlw	225
 36941  015438  6E02               	movwf	i2___ftge@ff1+1,c
 36942  01543A  0E43               	movlw	67
 36943  01543C  6E03               	movwf	i2___ftge@ff1+2,c
 36944  01543E  C027  F004         	movff	_B_Volt,i2___ftge@ff2
 36945  015442  C028  F005         	movff	_B_Volt+1,i2___ftge@ff2+1
 36946  015446  C029  F006         	movff	_B_Volt+2,i2___ftge@ff2+2
 36947  01544A  EC2E  F0CE         	call	i2___ftge	;wreg free
 36948  01544E  A0D8               	btfss	status,0,c
 36949  015450  0012               	return	
 36950  015452  0E00               	movlw	0
 36951  015454  6E01               	movwf	i2___ftge@ff1,c
 36952  015456  0E40               	movlw	64
 36953  015458  6E02               	movwf	i2___ftge@ff1+1,c
 36954  01545A  0E41               	movlw	65
 36955  01545C  6E03               	movwf	i2___ftge@ff1+2,c
 36956  01545E  C118  F004         	movff	_R_Curr,i2___ftge@ff2
 36957  015462  C119  F005         	movff	_R_Curr+1,i2___ftge@ff2+1
 36958  015466  C11A  F006         	movff	_R_Curr+2,i2___ftge@ff2+2
 36959  01546A  EC2E  F0CE         	call	i2___ftge	;wreg free
 36960  01546E  A0D8               	btfss	status,0,c
 36961  015470  0012               	return	
 36962  015472  0E00               	movlw	0
 36963  015474  6E01               	movwf	i2___ftge@ff1,c
 36964  015476  0E40               	movlw	64
 36965  015478  6E02               	movwf	i2___ftge@ff1+1,c
 36966  01547A  0E41               	movlw	65
 36967  01547C  6E03               	movwf	i2___ftge@ff1+2,c
 36968  01547E  C12D  F004         	movff	_Y_Curr,i2___ftge@ff2
 36969  015482  C12E  F005         	movff	_Y_Curr+1,i2___ftge@ff2+1
 36970  015486  C12F  F006         	movff	_Y_Curr+2,i2___ftge@ff2+2
 36971  01548A  EC2E  F0CE         	call	i2___ftge	;wreg free
 36972  01548E  A0D8               	btfss	status,0,c
 36973  015490  0012               	return	
 36974  015492  0E00               	movlw	0
 36975  015494  6E01               	movwf	i2___ftge@ff1,c
 36976  015496  0E40               	movlw	64
 36977  015498  6E02               	movwf	i2___ftge@ff1+1,c
 36978  01549A  0E41               	movlw	65
 36979  01549C  6E03               	movwf	i2___ftge@ff1+2,c
 36980  01549E  C103  F004         	movff	_B_Curr,i2___ftge@ff2
 36981  0154A2  C104  F005         	movff	_B_Curr+1,i2___ftge@ff2+1
 36982  0154A6  C105  F006         	movff	_B_Curr+2,i2___ftge@ff2+2
 36983  0154AA  EC2E  F0CE         	call	i2___ftge	;wreg free
 36984  0154AE  A0D8               	btfss	status,0,c
 36985  0154B0  0012               	return	
 36986  0154B2  C109  F001         	movff	_Frequency,i2___ftge@ff1
 36987  0154B6  C10A  F002         	movff	_Frequency+1,i2___ftge@ff1+1
 36988  0154BA  C10B  F003         	movff	_Frequency+2,i2___ftge@ff1+2
 36989  0154BE  0E00               	movlw	0
 36990  0154C0  6E04               	movwf	i2___ftge@ff2,c
 36991  0154C2  0E3E               	movlw	62
 36992  0154C4  6E05               	movwf	i2___ftge@ff2+1,c
 36993  0154C6  0E42               	movlw	66
 36994  0154C8  6E06               	movwf	i2___ftge@ff2+2,c
 36995  0154CA  EC2E  F0CE         	call	i2___ftge	;wreg free
 36996  0154CE  A0D8               	btfss	status,0,c
 36997  0154D0  0012               	return	
 36998  0154D2  0E00               	movlw	0
 36999  0154D4  6E01               	movwf	i2___ftge@ff1,c
 37000  0154D6  0E52               	movlw	82
 37001  0154D8  6E02               	movwf	i2___ftge@ff1+1,c
 37002  0154DA  0E42               	movlw	66
 37003  0154DC  6E03               	movwf	i2___ftge@ff1+2,c
 37004  0154DE  C109  F004         	movff	_Frequency,i2___ftge@ff2
 37005  0154E2  C10A  F005         	movff	_Frequency+1,i2___ftge@ff2+1
 37006  0154E6  C10B  F006         	movff	_Frequency+2,i2___ftge@ff2+2
 37007  0154EA  EC2E  F0CE         	call	i2___ftge	;wreg free
 37008  0154EE  A0D8               	btfss	status,0,c
 37009  0154F0  0012               	return	
 37010  0154F2  C040  F001         	movff	_KW,i2___ftge@ff1
 37011  0154F6  C041  F002         	movff	_KW+1,i2___ftge@ff1+1
 37012  0154FA  C042  F003         	movff	_KW+2,i2___ftge@ff1+2
 37013  0154FE  0E00               	movlw	0
 37014  015500  6E04               	movwf	i2___ftge@ff2,c
 37015  015502  0EA0               	movlw	160
 37016  015504  6E05               	movwf	i2___ftge@ff2+1,c
 37017  015506  0EC0               	movlw	192
 37018  015508  6E06               	movwf	i2___ftge@ff2+2,c
 37019  01550A  EC2E  F0CE         	call	i2___ftge	;wreg free
 37020  01550E  A0D8               	btfss	status,0,c
 37021  015510  0012               	return	
 37022  015512  0E00               	movlw	0
 37023  015514  6E01               	movwf	i2___ftge@ff1,c
 37024  015516  0EC0               	movlw	192
 37025  015518  6E02               	movwf	i2___ftge@ff1+1,c
 37026  01551A  0E40               	movlw	64
 37027  01551C  6E03               	movwf	i2___ftge@ff1+2,c
 37028  01551E  C040  F004         	movff	_KW,i2___ftge@ff2
 37029  015522  C041  F005         	movff	_KW+1,i2___ftge@ff2+1
 37030  015526  C042  F006         	movff	_KW+2,i2___ftge@ff2+2
 37031  01552A  EC2E  F0CE         	call	i2___ftge	;wreg free
 37032  01552E  A0D8               	btfss	status,0,c
 37033  015530  0012               	return	
 37034                           
 37035                           ;Power_Meter.c: 646: {
 37036                           ;Power_Meter.c: 647: (RF7 = 0);
 37037  015532  9E85               	bcf	3973,7,c	;volatile
 37038  015534  0012               	return	
 37039  015536                     __end_of_PM_Error_Led:
 37040                           	opt stack 0
 37041                           pclatu	equ	0xFFB
 37042                           pclath	equ	0xFFA
 37043                           tblptru	equ	0xFF8
 37044                           tblptrh	equ	0xFF7
 37045                           tblptrl	equ	0xFF6
 37046                           tablat	equ	0xFF5
 37047                           prodh	equ	0xFF4
 37048                           prodl	equ	0xFF3
 37049                           intcon	equ	0xFF2
 37050                           postinc0	equ	0xFEE
 37051                           fsr0h	equ	0xFEA
 37052                           fsr0l	equ	0xFE9
 37053                           wreg	equ	0xFE8
 37054                           postdec1	equ	0xFE5
 37055                           fsr1h	equ	0xFE2
 37056                           fsr1l	equ	0xFE1
 37057                           indf2	equ	0xFDF
 37058                           postinc2	equ	0xFDE
 37059                           postdec2	equ	0xFDD
 37060                           fsr2h	equ	0xFDA
 37061                           fsr2l	equ	0xFD9
 37062                           status	equ	0xFD8
 37063                           
 37064 ;; *************** function i2___ftge *****************
 37065 ;; Defined at:
 37066 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 37067 ;; Parameters:    Size  Location     Type
 37068 ;;  ff1             3    0[COMRAM] float 
 37069 ;;  ff2             3    3[COMRAM] float 
 37070 ;; Auto vars:     Size  Location     Type
 37071 ;;		None
 37072 ;; Return value:  Size  Location     Type
 37073 ;;		None               void
 37074 ;; Registers used:
 37075 ;;		wreg, status,2, status,0
 37076 ;; Tracked objects:
 37077 ;;		On entry : 0/0
 37078 ;;		On exit  : 0/0
 37079 ;;		Unchanged: 0/0
 37080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37081 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37083 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37084 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37085 ;;Total ram usage:        9 bytes
 37086 ;; Hardware stack levels used:    1
 37087 ;; This function calls:
 37088 ;;		Nothing
 37089 ;; This function is called by:
 37090 ;;		_PM_Error_Led
 37091 ;; This function uses a non-reentrant model
 37092 ;;
 37093                           
 37094                           	psect	text141
 37095  019C5C                     __ptext141:
 37096                           	opt stack 0
 37097  019C5C                     i2___ftge:
 37098                           	opt stack 21
 37099                           
 37100                           ;incstack = 0
 37101  019C5C  AE03               	btfss	i2___ftge@ff1+2,7,c
 37102  019C5E  D016               	goto	i2l18163
 37103  019C60  C001  F007         	movff	i2___ftge@ff1,??i2___ftge
 37104  019C64  C002  F008         	movff	i2___ftge@ff1+1,??i2___ftge+1
 37105  019C68  C003  F009         	movff	i2___ftge@ff1+2,??i2___ftge+2
 37106  019C6C  1E07               	comf	??i2___ftge,f,c
 37107  019C6E  1E08               	comf	??i2___ftge+1,f,c
 37108  019C70  1E09               	comf	??i2___ftge+2,f,c
 37109  019C72  2A07               	incf	??i2___ftge,f,c
 37110  019C74  0E00               	movlw	0
 37111  019C76  2208               	addwfc	??i2___ftge+1,f,c
 37112  019C78  2209               	addwfc	??i2___ftge+2,f,c
 37113  019C7A  0E00               	movlw	0
 37114  019C7C  2407               	addwf	??i2___ftge,w,c
 37115  019C7E  6E01               	movwf	i2___ftge@ff1,c
 37116  019C80  0E00               	movlw	0
 37117  019C82  2008               	addwfc	??i2___ftge+1,w,c
 37118  019C84  6E02               	movwf	i2___ftge@ff1+1,c
 37119  019C86  0E80               	movlw	128
 37120  019C88  2009               	addwfc	??i2___ftge+2,w,c
 37121  019C8A  6E03               	movwf	i2___ftge@ff1+2,c
 37122  019C8C                     i2l18163:
 37123  019C8C  AE06               	btfss	i2___ftge@ff2+2,7,c
 37124  019C8E  D016               	goto	i2l18167
 37125  019C90  C004  F007         	movff	i2___ftge@ff2,??i2___ftge
 37126  019C94  C005  F008         	movff	i2___ftge@ff2+1,??i2___ftge+1
 37127  019C98  C006  F009         	movff	i2___ftge@ff2+2,??i2___ftge+2
 37128  019C9C  1E07               	comf	??i2___ftge,f,c
 37129  019C9E  1E08               	comf	??i2___ftge+1,f,c
 37130  019CA0  1E09               	comf	??i2___ftge+2,f,c
 37131  019CA2  2A07               	incf	??i2___ftge,f,c
 37132  019CA4  0E00               	movlw	0
 37133  019CA6  2208               	addwfc	??i2___ftge+1,f,c
 37134  019CA8  2209               	addwfc	??i2___ftge+2,f,c
 37135  019CAA  0E00               	movlw	0
 37136  019CAC  2407               	addwf	??i2___ftge,w,c
 37137  019CAE  6E04               	movwf	i2___ftge@ff2,c
 37138  019CB0  0E00               	movlw	0
 37139  019CB2  2008               	addwfc	??i2___ftge+1,w,c
 37140  019CB4  6E05               	movwf	i2___ftge@ff2+1,c
 37141  019CB6  0E80               	movlw	128
 37142  019CB8  2009               	addwfc	??i2___ftge+2,w,c
 37143  019CBA  6E06               	movwf	i2___ftge@ff2+2,c
 37144  019CBC                     i2l18167:
 37145  019CBC  0E00               	movlw	0
 37146  019CBE  1A01               	xorwf	i2___ftge@ff1,f,c
 37147  019CC0  0E00               	movlw	0
 37148  019CC2  1A02               	xorwf	i2___ftge@ff1+1,f,c
 37149  019CC4  0E80               	movlw	128
 37150  019CC6  1A03               	xorwf	i2___ftge@ff1+2,f,c
 37151  019CC8  0E00               	movlw	0
 37152  019CCA  1A04               	xorwf	i2___ftge@ff2,f,c
 37153  019CCC  0E00               	movlw	0
 37154  019CCE  1A05               	xorwf	i2___ftge@ff2+1,f,c
 37155  019CD0  0E80               	movlw	128
 37156  019CD2  1A06               	xorwf	i2___ftge@ff2+2,f,c
 37157  019CD4  5004               	movf	i2___ftge@ff2,w,c
 37158  019CD6  5C01               	subwf	i2___ftge@ff1,w,c
 37159  019CD8  5005               	movf	i2___ftge@ff2+1,w,c
 37160  019CDA  5802               	subwfb	i2___ftge@ff1+1,w,c
 37161  019CDC  5006               	movf	i2___ftge@ff2+2,w,c
 37162  019CDE  5803               	subwfb	i2___ftge@ff1+2,w,c
 37163  019CE0  B0D8               	btfsc	status,0,c
 37164  019CE2  D002               	goto	i2l18173
 37165  019CE4  90D8               	bcf	status,0,c
 37166  019CE6  0012               	return	
 37167  019CE8                     i2l18173:
 37168  019CE8  80D8               	bsf	status,0,c
 37169  019CEA  0012               	return	
 37170  019CEC                     __end_ofi2___ftge:
 37171                           	opt stack 0
 37172                           pclatu	equ	0xFFB
 37173                           pclath	equ	0xFFA
 37174                           tblptru	equ	0xFF8
 37175                           tblptrh	equ	0xFF7
 37176                           tblptrl	equ	0xFF6
 37177                           tablat	equ	0xFF5
 37178                           prodh	equ	0xFF4
 37179                           prodl	equ	0xFF3
 37180                           intcon	equ	0xFF2
 37181                           postinc0	equ	0xFEE
 37182                           fsr0h	equ	0xFEA
 37183                           fsr0l	equ	0xFE9
 37184                           wreg	equ	0xFE8
 37185                           postdec1	equ	0xFE5
 37186                           fsr1h	equ	0xFE2
 37187                           fsr1l	equ	0xFE1
 37188                           indf2	equ	0xFDF
 37189                           postinc2	equ	0xFDE
 37190                           postdec2	equ	0xFDD
 37191                           fsr2h	equ	0xFDA
 37192                           fsr2l	equ	0xFD9
 37193                           status	equ	0xFD8
 37194                           
 37195 ;; *************** function _Error_Checking_Interrupt_Overflow *****************
 37196 ;; Defined at:
 37197 ;;		line 73 in file "ERROR_HANDLING.c"
 37198 ;; Parameters:    Size  Location     Type
 37199 ;;		None
 37200 ;; Auto vars:     Size  Location     Type
 37201 ;;		None
 37202 ;; Return value:  Size  Location     Type
 37203 ;;                  2  3828[None  ] int 
 37204 ;; Registers used:
 37205 ;;		wreg, status,2, status,0, cstack
 37206 ;; Tracked objects:
 37207 ;;		On entry : 0/0
 37208 ;;		On exit  : 0/0
 37209 ;;		Unchanged: 0/0
 37210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37215 ;;Total ram usage:        0 bytes
 37216 ;; Hardware stack levels used:    1
 37217 ;; Hardware stack levels required when called:    1
 37218 ;; This function calls:
 37219 ;;		_Capacitor_Adding
 37220 ;;		_VFD_IO_Error
 37221 ;; This function is called by:
 37222 ;;		_ISR
 37223 ;; This function uses a non-reentrant model
 37224 ;;
 37225                           
 37226                           	psect	text142
 37227  01AAD6                     __ptext142:
 37228                           	opt stack 0
 37229  01AAD6                     _Error_Checking_Interrupt_Overflow:
 37230                           	opt stack 21
 37231                           
 37232                           ;ERROR_HANDLING.c: 75: Capacitor_Adding();
 37233                           
 37234                           ;incstack = 0
 37235  01AAD6  EC7D  F0CF         	call	_Capacitor_Adding	;wreg free
 37236                           
 37237                           ;ERROR_HANDLING.c: 76: VFD_IO_Error();
 37238  01AADA  ECE2  F0D4         	call	_VFD_IO_Error	;wreg free
 37239  01AADE  0012               	return		;funcret
 37240  01AAE0                     __end_of_Error_Checking_Interrupt_Overflow:
 37241                           	opt stack 0
 37242                           pclatu	equ	0xFFB
 37243                           pclath	equ	0xFFA
 37244                           tblptru	equ	0xFF8
 37245                           tblptrh	equ	0xFF7
 37246                           tblptrl	equ	0xFF6
 37247                           tablat	equ	0xFF5
 37248                           prodh	equ	0xFF4
 37249                           prodl	equ	0xFF3
 37250                           intcon	equ	0xFF2
 37251                           postinc0	equ	0xFEE
 37252                           fsr0h	equ	0xFEA
 37253                           fsr0l	equ	0xFE9
 37254                           wreg	equ	0xFE8
 37255                           postdec1	equ	0xFE5
 37256                           fsr1h	equ	0xFE2
 37257                           fsr1l	equ	0xFE1
 37258                           indf2	equ	0xFDF
 37259                           postinc2	equ	0xFDE
 37260                           postdec2	equ	0xFDD
 37261                           fsr2h	equ	0xFDA
 37262                           fsr2l	equ	0xFD9
 37263                           status	equ	0xFD8
 37264                           
 37265 ;; *************** function _VFD_IO_Error *****************
 37266 ;; Defined at:
 37267 ;;		line 667 in file "ERROR_HANDLING.c"
 37268 ;; Parameters:    Size  Location     Type
 37269 ;;		None
 37270 ;; Auto vars:     Size  Location     Type
 37271 ;;		None
 37272 ;; Return value:  Size  Location     Type
 37273 ;;                  1    wreg      void 
 37274 ;; Registers used:
 37275 ;;		wreg, status,2
 37276 ;; Tracked objects:
 37277 ;;		On entry : 0/0
 37278 ;;		On exit  : 0/0
 37279 ;;		Unchanged: 0/0
 37280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37285 ;;Total ram usage:        0 bytes
 37286 ;; Hardware stack levels used:    1
 37287 ;; This function calls:
 37288 ;;		Nothing
 37289 ;; This function is called by:
 37290 ;;		_Error_Checking_Interrupt_Overflow
 37291 ;; This function uses a non-reentrant model
 37292 ;;
 37293                           
 37294                           	psect	text143
 37295  01A9C4                     __ptext143:
 37296                           	opt stack 0
 37297  01A9C4                     _VFD_IO_Error:
 37298                           	opt stack 21
 37299                           
 37300                           ;ERROR_HANDLING.c: 669: if(RC5 == 1)
 37301                           
 37302                           ;incstack = 0
 37303  01A9C4  AA82               	btfss	3970,5,c	;volatile
 37304  01A9C6  D006               	goto	i2l18061
 37305                           
 37306                           ;ERROR_HANDLING.c: 670: {
 37307                           ;ERROR_HANDLING.c: 671: VFD_Error_Flag = 1;
 37308  01A9C8  0E01               	movlw	1
 37309  01A9CA  0101               	movlb	1	; () banked
 37310  01A9CC  6FD3               	movwf	_VFD_Error_Flag& (0+255),b
 37311                           
 37312                           ;ERROR_HANDLING.c: 672: Errors = VFD_ERROR_IO;
 37313  01A9CE  0E19               	movlw	25
 37314  01A9D0  6E3A               	movwf	_Errors,c
 37315                           
 37316                           ;ERROR_HANDLING.c: 673: }
 37317  01A9D2  0012               	return	
 37318  01A9D4                     i2l18061:
 37319                           
 37320                           ;ERROR_HANDLING.c: 674: else
 37321                           ;ERROR_HANDLING.c: 675: {
 37322                           ;ERROR_HANDLING.c: 676: VFD_Error_Flag = 0;
 37323  01A9D4  0E00               	movlw	0
 37324  01A9D6  0101               	movlb	1	; () banked
 37325  01A9D8  6FD3               	movwf	_VFD_Error_Flag& (0+255),b
 37326  01A9DA  0012               	return	
 37327  01A9DC                     __end_of_VFD_IO_Error:
 37328                           	opt stack 0
 37329                           pclatu	equ	0xFFB
 37330                           pclath	equ	0xFFA
 37331                           tblptru	equ	0xFF8
 37332                           tblptrh	equ	0xFF7
 37333                           tblptrl	equ	0xFF6
 37334                           tablat	equ	0xFF5
 37335                           prodh	equ	0xFF4
 37336                           prodl	equ	0xFF3
 37337                           intcon	equ	0xFF2
 37338                           postinc0	equ	0xFEE
 37339                           fsr0h	equ	0xFEA
 37340                           fsr0l	equ	0xFE9
 37341                           wreg	equ	0xFE8
 37342                           postdec1	equ	0xFE5
 37343                           fsr1h	equ	0xFE2
 37344                           fsr1l	equ	0xFE1
 37345                           indf2	equ	0xFDF
 37346                           postinc2	equ	0xFDE
 37347                           postdec2	equ	0xFDD
 37348                           fsr2h	equ	0xFDA
 37349                           fsr2l	equ	0xFD9
 37350                           status	equ	0xFD8
 37351                           
 37352 ;; *************** function _Capacitor_Adding *****************
 37353 ;; Defined at:
 37354 ;;		line 650 in file "Power_Meter.c"
 37355 ;; Parameters:    Size  Location     Type
 37356 ;;		None
 37357 ;; Auto vars:     Size  Location     Type
 37358 ;;		None
 37359 ;; Return value:  Size  Location     Type
 37360 ;;                  1    wreg      void 
 37361 ;; Registers used:
 37362 ;;		wreg, status,2, status,0
 37363 ;; Tracked objects:
 37364 ;;		On entry : 0/0
 37365 ;;		On exit  : 0/0
 37366 ;;		Unchanged: 0/0
 37367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 37368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 37372 ;;Total ram usage:        0 bytes
 37373 ;; Hardware stack levels used:    1
 37374 ;; This function calls:
 37375 ;;		Nothing
 37376 ;; This function is called by:
 37377 ;;		_Error_Checking_Interrupt_Overflow
 37378 ;; This function uses a non-reentrant model
 37379 ;;
 37380                           
 37381                           	psect	text144
 37382  019EFA                     __ptext144:
 37383                           	opt stack 0
 37384  019EFA                     _Capacitor_Adding:
 37385                           	opt stack 21
 37386                           
 37387                           ;Power_Meter.c: 652: if(Capacitor_Counter < 40 && Turbine_state == RUNNING_STATE)
 37388                           
 37389                           ; BSR set to: 1
 37390                           ;incstack = 0
 37391  019EFA  0101               	movlb	1	; () banked
 37392  019EFC  5136               	movf	(_Capacitor_Counter+1)& (0+255),w,b
 37393  019EFE  E10D               	bnz	i2l18037
 37394  019F00  0E28               	movlw	40
 37395  019F02  0101               	movlb	1	; () banked
 37396  019F04  5D35               	subwf	_Capacitor_Counter& (0+255),w,b
 37397  019F06  B0D8               	btfsc	status,0,c
 37398  019F08  D008               	goto	i2l18037
 37399                           
 37400                           ; BSR set to: 1
 37401  019F0A  0E02               	movlw	2
 37402  019F0C  0100               	movlb	0	; () banked
 37403  019F0E  19D8               	xorwf	_Turbine_state& (0+255),w,b
 37404  019F10  A4D8               	btfss	status,2,c
 37405  019F12  D003               	goto	i2l18037
 37406                           
 37407                           ; BSR set to: 0
 37408                           ;Power_Meter.c: 653: {
 37409                           ;Power_Meter.c: 654: Capacitor_Counter++;
 37410  019F14  0101               	movlb	1	; () banked
 37411  019F16  4B35               	infsnz	_Capacitor_Counter& (0+255),f,b
 37412  019F18  2B36               	incf	(_Capacitor_Counter+1)& (0+255),f,b
 37413  019F1A                     i2l18037:
 37414                           
 37415                           ;Power_Meter.c: 655: }
 37416                           ;Power_Meter.c: 656: if(Turbine_state != RUNNING_STATE )
 37417  019F1A  0E02               	movlw	2
 37418  019F1C  0100               	movlb	0	; () banked
 37419  019F1E  19D8               	xorwf	_Turbine_state& (0+255),w,b
 37420  019F20  B4D8               	btfsc	status,2,c
 37421  019F22  D006               	goto	i2l18043
 37422                           
 37423                           ; BSR set to: 0
 37424                           ;Power_Meter.c: 657: {
 37425                           ;Power_Meter.c: 658: (RF1 = 0);
 37426  019F24  9285               	bcf	3973,1,c	;volatile
 37427                           
 37428                           ; BSR set to: 0
 37429                           ;Power_Meter.c: 659: Capacitor_Counter = 0;
 37430  019F26  0E00               	movlw	0
 37431  019F28  0101               	movlb	1	; () banked
 37432  019F2A  6F36               	movwf	(_Capacitor_Counter+1)& (0+255),b
 37433  019F2C  0E00               	movlw	0
 37434  019F2E  6F35               	movwf	_Capacitor_Counter& (0+255),b
 37435  019F30                     i2l18043:
 37436                           
 37437                           ;Power_Meter.c: 660: }
 37438                           ;Power_Meter.c: 661: if(Capacitor_Counter == 40 && Turbine_state == RUNNING_STATE)
 37439  019F30  0E28               	movlw	40
 37440  019F32  0101               	movlb	1	; () banked
 37441  019F34  1935               	xorwf	_Capacitor_Counter& (0+255),w,b
 37442  019F36  0101               	movlb	1	; () banked
 37443  019F38  1136               	iorwf	(_Capacitor_Counter+1)& (0+255),w,b
 37444  019F3A  A4D8               	btfss	status,2,c
 37445  019F3C  D00A               	goto	i2l18051
 37446                           
 37447                           ; BSR set to: 1
 37448  019F3E  0E02               	movlw	2
 37449  019F40  0100               	movlb	0	; () banked
 37450  019F42  19D8               	xorwf	_Turbine_state& (0+255),w,b
 37451  019F44  A4D8               	btfss	status,2,c
 37452  019F46  D005               	goto	i2l18051
 37453                           
 37454                           ; BSR set to: 0
 37455                           ;Power_Meter.c: 662: {
 37456                           ;Power_Meter.c: 663: (RF1 = 1);
 37457  019F48  8285               	bsf	3973,1,c	;volatile
 37458                           
 37459                           ; BSR set to: 0
 37460                           ;Power_Meter.c: 664: Five_Second_flag = 1;
 37461  019F4A  0E01               	movlw	1
 37462  019F4C  0101               	movlb	1	; () banked
 37463  019F4E  6F75               	movwf	_Five_Second_flag& (0+255),b
 37464                           
 37465                           ;Power_Meter.c: 665: }
 37466  019F50  0012               	return	
 37467  019F52                     i2l18051:
 37468                           
 37469                           ;Power_Meter.c: 666: else if(Capacitor_Counter < 40 || Turbine_state != RUNNING_STATE)
 37470  019F52  0101               	movlb	1	; () banked
 37471  019F54  5136               	movf	(_Capacitor_Counter+1)& (0+255),w,b
 37472  019F56  E105               	bnz	i2u1049_40
 37473  019F58  0E28               	movlw	40
 37474  019F5A  0101               	movlb	1	; () banked
 37475  019F5C  5D35               	subwf	_Capacitor_Counter& (0+255),w,b
 37476  019F5E  A0D8               	btfss	status,0,c
 37477  019F60  D005               	goto	i2l18055
 37478  019F62                     i2u1049_40:
 37479                           
 37480                           ; BSR set to: 1
 37481  019F62  0E02               	movlw	2
 37482  019F64  0100               	movlb	0	; () banked
 37483  019F66  19D8               	xorwf	_Turbine_state& (0+255),w,b
 37484  019F68  B4D8               	btfsc	status,2,c
 37485  019F6A  0012               	return	
 37486  019F6C                     i2l18055:
 37487                           
 37488                           ;Power_Meter.c: 667: {
 37489                           ;Power_Meter.c: 668: Five_Second_flag = 0;
 37490  019F6C  0E00               	movlw	0
 37491  019F6E  0101               	movlb	1	; () banked
 37492  019F70  6F75               	movwf	_Five_Second_flag& (0+255),b
 37493                           
 37494                           ; BSR set to: 1
 37495  019F72  0012               	return	
 37496  019F74                     __end_of_Capacitor_Adding:
 37497                           	opt stack 0
 37498                           pclatu	equ	0xFFB
 37499                           pclath	equ	0xFFA
 37500                           tblptru	equ	0xFF8
 37501                           tblptrh	equ	0xFF7
 37502                           tblptrl	equ	0xFF6
 37503                           tablat	equ	0xFF5
 37504                           prodh	equ	0xFF4
 37505                           prodl	equ	0xFF3
 37506                           intcon	equ	0xFF2
 37507                           postinc0	equ	0xFEE
 37508                           fsr0h	equ	0xFEA
 37509                           fsr0l	equ	0xFE9
 37510                           wreg	equ	0xFE8
 37511                           postdec1	equ	0xFE5
 37512                           fsr1h	equ	0xFE2
 37513                           fsr1l	equ	0xFE1
 37514                           indf2	equ	0xFDF
 37515                           postinc2	equ	0xFDE
 37516                           postdec2	equ	0xFDD
 37517                           fsr2h	equ	0xFDA
 37518                           fsr2l	equ	0xFD9
 37519                           status	equ	0xFD8
 37520                           pclatu	equ	0xFFB
 37521                           pclath	equ	0xFFA
 37522                           tblptru	equ	0xFF8
 37523                           tblptrh	equ	0xFF7
 37524                           tblptrl	equ	0xFF6
 37525                           tablat	equ	0xFF5
 37526                           prodh	equ	0xFF4
 37527                           prodl	equ	0xFF3
 37528                           intcon	equ	0xFF2
 37529                           postinc0	equ	0xFEE
 37530                           fsr0h	equ	0xFEA
 37531                           fsr0l	equ	0xFE9
 37532                           wreg	equ	0xFE8
 37533                           postdec1	equ	0xFE5
 37534                           fsr1h	equ	0xFE2
 37535                           fsr1l	equ	0xFE1
 37536                           indf2	equ	0xFDF
 37537                           postinc2	equ	0xFDE
 37538                           postdec2	equ	0xFDD
 37539                           fsr2h	equ	0xFDA
 37540                           fsr2l	equ	0xFD9
 37541                           status	equ	0xFD8
 37542                           
 37543                           	psect	rparam
 37544  0000                     pclatu	equ	0xFFB
 37545                           pclath	equ	0xFFA
 37546                           tblptru	equ	0xFF8
 37547                           tblptrh	equ	0xFF7
 37548                           tblptrl	equ	0xFF6
 37549                           tablat	equ	0xFF5
 37550                           prodh	equ	0xFF4
 37551                           prodl	equ	0xFF3
 37552                           intcon	equ	0xFF2
 37553                           postinc0	equ	0xFEE
 37554                           fsr0h	equ	0xFEA
 37555                           fsr0l	equ	0xFE9
 37556                           wreg	equ	0xFE8
 37557                           postdec1	equ	0xFE5
 37558                           fsr1h	equ	0xFE2
 37559                           fsr1l	equ	0xFE1
 37560                           indf2	equ	0xFDF
 37561                           postinc2	equ	0xFDE
 37562                           postdec2	equ	0xFDD
 37563                           fsr2h	equ	0xFDA
 37564                           fsr2l	equ	0xFD9
 37565                           status	equ	0xFD8
 37566                           
 37567                           	psect	temp
 37568  000043                     btemp:
 37569                           	opt stack 0
 37570  000043                     	ds	1
 37571  0000                     int$flags	set	btemp
 37572                           pclatu	equ	0xFFB
 37573                           pclath	equ	0xFFA
 37574                           tblptru	equ	0xFF8
 37575                           tblptrh	equ	0xFF7
 37576                           tblptrl	equ	0xFF6
 37577                           tablat	equ	0xFF5
 37578                           prodh	equ	0xFF4
 37579                           prodl	equ	0xFF3
 37580                           intcon	equ	0xFF2
 37581                           postinc0	equ	0xFEE
 37582                           fsr0h	equ	0xFEA
 37583                           fsr0l	equ	0xFE9
 37584                           wreg	equ	0xFE8
 37585                           postdec1	equ	0xFE5
 37586                           fsr1h	equ	0xFE2
 37587                           fsr1l	equ	0xFE1
 37588                           indf2	equ	0xFDF
 37589                           postinc2	equ	0xFDE
 37590                           postdec2	equ	0xFDD
 37591                           fsr2h	equ	0xFDA
 37592                           fsr2l	equ	0xFD9
 37593                           status	equ	0xFD8


Data Sizes:
    Strings     1013
    Constant    145
    Data        4
    BSS         1415
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      66
    BANK0           160    111     122
    BANK1           256      0     256
    BANK2           256      0     256
    BANK3           256      0     256
    BANK4           256      0     255
    BANK5           256      0     255
    BANK6           256     84     186
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_235(CODE[7]), Hours_2(BANK2[2]), Mot_Frequency(BANK5[3]), Time_New(BANK1[3]), 
		 -> wind_Time_1_2(BANK4[3]), Wind_Time_1(BANK4[3]), GRPM_Frequency(BANK4[3]), GRPM_Time_1(BANK2[3]), 
		 -> TRPM_Frequency(BANK4[3]), TRPM_Time(BANK4[3]), STR_232(CODE[17]), STR_230(CODE[17]), 
		 -> STR_228(CODE[18]), STR_226(CODE[24]), STR_224(CODE[18]), STR_222(CODE[18]), 
		 -> STR_220(CODE[18]), STR_218(CODE[16]), STR_216(CODE[8]), STR_214(CODE[10]), 
		 -> STR_212(CODE[14]), STR_210(CODE[11]), STR_208(CODE[19]), STR_206(CODE[19]), 
		 -> STR_204(CODE[27]), STR_202(CODE[13]), STR_200(CODE[10]), STR_198(CODE[13]), 
		 -> STR_196(CODE[12]), STR_194(CODE[5]), STR_192(CODE[5]), STR_190(CODE[14]), 
		 -> STR_188(CODE[16]), STR_186(CODE[9]), STR_184(CODE[13]), STR_182(CODE[10]), 
		 -> STR_180(CODE[12]), STR_178(CODE[10]), STR_176(CODE[15]), STR_174(CODE[18]), 
		 -> STR_172(CODE[5]), STR_170(CODE[4]), STR_168(CODE[5]), STR_166(CODE[3]), 
		 -> STR_164(CODE[10]), STR_162(CODE[10]), STR_160(CODE[10]), STR_158(CODE[7]), 
		 -> STR_156(CODE[7]), STR_154(CODE[7]), STR_152(CODE[15]), STR_150(CODE[15]), 
		 -> STR_148(CODE[7]), STR_146(CODE[15]), STR_144(CODE[15]), STR_142(CODE[14]), 
		 -> STR_140(CODE[12]), STR_138(CODE[11]), STR_136(CODE[15]), STR_134(CODE[9]), 
		 -> STR_132(CODE[13]), STR_130(CODE[11]), STR_128(CODE[10]), STR_91(CODE[9]), 
		 -> STR_89(CODE[8]), STR_87(CODE[7]), STR_85(CODE[8]), STR_83(CODE[13]), 
		 -> STR_81(CODE[11]), STR_79(CODE[14]), STR_77(CODE[12]), STR_75(CODE[7]), 
		 -> STR_73(CODE[9]), STR_71(CODE[11]), STR_69(CODE[11]), STR_67(CODE[10]), 
		 -> STR_65(CODE[10]), STR_63(CODE[10]), STR_61(CODE[7]), STR_59(CODE[14]), 
		 -> STR_57(CODE[11]), STR_55(CODE[11]), STR_53(CODE[7]), STR_51(CODE[8]), 
		 -> STR_49(CODE[13]), STR_47(CODE[11]), STR_45(CODE[5]), STR_43(CODE[10]), 
		 -> STR_41(CODE[18]), STR_39(CODE[9]), STR_37(CODE[10]), STR_35(CODE[11]), 
		 -> STR_33(CODE[9]), Y_KW(BANK2[3]), KW(COMRAM[3]), STR_3(CODE[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_231(CODE[3]), STR_229(CODE[3]), STR_227(CODE[3]), STR_225(CODE[3]), 
		 -> STR_223(CODE[3]), STR_221(CODE[3]), STR_219(CODE[3]), STR_217(CODE[3]), 
		 -> STR_215(CODE[3]), STR_213(CODE[3]), STR_211(CODE[3]), STR_209(CODE[3]), 
		 -> STR_207(CODE[3]), STR_205(CODE[3]), STR_203(CODE[3]), STR_201(CODE[3]), 
		 -> STR_199(CODE[3]), STR_197(CODE[3]), STR_195(CODE[3]), STR_193(CODE[3]), 
		 -> STR_191(CODE[3]), STR_189(CODE[3]), STR_187(CODE[3]), STR_185(CODE[3]), 
		 -> STR_183(CODE[3]), STR_181(CODE[3]), STR_179(CODE[3]), STR_177(CODE[3]), 
		 -> STR_175(CODE[3]), STR_173(CODE[3]), STR_171(CODE[3]), STR_169(CODE[3]), 
		 -> STR_167(CODE[3]), STR_165(CODE[3]), STR_163(CODE[3]), STR_161(CODE[3]), 
		 -> STR_159(CODE[3]), STR_157(CODE[3]), STR_155(CODE[3]), STR_153(CODE[3]), 
		 -> STR_151(CODE[3]), STR_149(CODE[3]), STR_147(CODE[3]), STR_145(CODE[3]), 
		 -> STR_143(CODE[3]), STR_141(CODE[3]), STR_139(CODE[3]), STR_137(CODE[3]), 
		 -> STR_135(CODE[3]), STR_133(CODE[3]), STR_131(CODE[3]), STR_129(CODE[3]), 
		 -> STR_127(CODE[3]), STR_122(CODE[3]), STR_121(CODE[3]), STR_120(CODE[3]), 
		 -> STR_119(CODE[3]), STR_118(CODE[3]), STR_117(CODE[3]), STR_116(CODE[3]), 
		 -> STR_115(CODE[3]), STR_114(CODE[3]), STR_113(CODE[3]), STR_112(CODE[3]), 
		 -> STR_111(CODE[3]), STR_110(CODE[3]), STR_109(CODE[3]), STR_108(CODE[3]), 
		 -> STR_107(CODE[3]), STR_106(CODE[3]), STR_105(CODE[3]), STR_104(CODE[3]), 
		 -> STR_103(CODE[3]), STR_102(CODE[3]), STR_101(CODE[3]), STR_100(CODE[3]), 
		 -> STR_99(CODE[3]), STR_98(CODE[7]), STR_97(CODE[3]), STR_96(CODE[3]), 
		 -> STR_95(CODE[3]), STR_94(CODE[3]), STR_93(CODE[3]), STR_92(CODE[3]), 
		 -> STR_90(CODE[3]), STR_88(CODE[3]), STR_86(CODE[3]), STR_84(CODE[3]), 
		 -> STR_82(CODE[3]), STR_80(CODE[3]), STR_78(CODE[3]), STR_76(CODE[3]), 
		 -> STR_74(CODE[3]), STR_72(CODE[3]), STR_70(CODE[3]), STR_68(CODE[3]), 
		 -> STR_66(CODE[3]), STR_64(CODE[3]), STR_62(CODE[3]), STR_60(CODE[3]), 
		 -> STR_58(CODE[3]), STR_56(CODE[3]), STR_54(CODE[3]), STR_52(CODE[3]), 
		 -> STR_50(CODE[3]), STR_48(CODE[3]), STR_46(CODE[3]), STR_44(CODE[3]), 
		 -> STR_42(CODE[3]), STR_40(CODE[3]), STR_38(CODE[3]), STR_36(CODE[3]), 
		 -> STR_34(CODE[3]), STR_32(CODE[3]), STR_31(CODE[3]), STR_30(CODE[3]), 
		 -> STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[7]), STR_26(CODE[7]), 
		 -> STR_25(CODE[7]), STR_24(CODE[7]), STR_23(CODE[7]), STR_22(CODE[7]), 
		 -> STR_21(CODE[7]), STR_20(CODE[7]), STR_19(CODE[7]), STR_18(CODE[7]), 
		 -> STR_17(CODE[6]), STR_16(CODE[6]), STR_15(CODE[6]), STR_14(CODE[7]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[7]), STR_10(CODE[7]), 
		 -> STR_9(CODE[3]), STR_8(CODE[7]), STR_7(CODE[7]), STR_6(CODE[7]), 
		 -> STR_5(CODE[7]), STR_4(CODE[7]), STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    usart_str@str	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_234(CODE[2]), STR_233(CODE[2]), STR_126(CODE[2]), STR_125(CODE[2]), 
		 -> STR_124(CODE[2]), STR_123(CODE[2]), 

    RTC_GetDateTime@rtc	PTR struct . size(2) Largest target is 7
		 -> rtc(BANK5[7]), 


Critical Paths under _main in COMRAM

    _printf->___awdiv
    _scale->___awdiv
    _fround->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    _RTC_GetDateTime->_I2C_Read
    _Error_Scan_Ramp_up->_EEPROM_Error_Stop
    _EEPROM_Error_Stop->_int_eeprom_read
    _EEPROM_Error_Stop->_int_eeprom_write
    _Last_3_EEPROM_ERROR_Trigger->_int_eeprom_write
    _Start_Stop->_int_eeprom_write
    _Pitch_Feedback->_int_eeprom_write
    ___lbtoft->___ftpack
    _Generator_One_Feedback->_int_eeprom_write
    _EEPROM_Error_Monitor->_int_eeprom_read
    _EEPROM_Error_Monitor->_int_eeprom_write
    _RTC_Init->_I2C_Write
    _RS485_Data_communication->_usart_str_2
    _Phase_Sequence->_Read_Adc
    ___lwtoft->___ftpack
    ___wmul->___awdiv
    ___ftmul->___awdiv

Critical Paths under _ISR in COMRAM

    _ISR->___awtoft
    ___awtoft->i2___ftpack
    _PM_Error_Led->i2___ftge

Critical Paths under _main in BANK0

    _Y_PF_Calc->___ftdiv
    _Y_PF_Avg->_cos
    _Wind_Speed_Cal->___ftdiv
    _Volt_Curr_Read->___ftge
    _Volt_Curr_Avg->___ftdiv
    _Turbine_RPM_Cal->___ftdiv
    _Wind_Average->___ftdiv
    _VFD_RS485_Data_filter->_VFD_RS485_Data
    _VFD_RS485_Data->___ftdiv
    _UART_Data->_printf
    _UART_Data_String->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___llmod->___lldiv
    _BCDtoI->___wmul
    _Stopping_state_function->___ftge
    _Wind_Speed_Error_Trigger->___ftge
    _Turbine_Under_speed->___ftge
    _Turbine_Restore_Check->___ftge
    _Turbine_Over_Speed->___ftge
    _Turbine_OverLoaded_Error->___ftge
    _Rotor_Slip_Cal->___ftdiv
    _Ramp_Up_Slip_Error_Trigger->___ftge
    _Ramp_Up_Slip->___ftge
    _Pitch_PS_ON_Function->___ftge
    _Motor_Slip_Cal->___ftdiv
    _Grid_UV->___ftge
    _Grid_Over_Current->___ftge
    _Grid_OV->___ftge
    _Grid_Minimum_Power->___ftge
    _Grid_Maximum_Power->___ftge
    _Grid_Frequency->___ftge
    _Generator_RPM->___ftge
    _Temp_Read->___ftdiv
    _Rampup_state_function->_RAMP_UP
    _VFD_Freq_Step_up->___ftdiv
    _R_PF_Calc->___ftdiv
    _R_PF_Avg->_cos
    _Power_Factor->___ftdiv
    _Power_Calc->_sqrt
    _sqrt->___ftsub
    _Generator_RPM_Cal->___ftdiv
    _Freq_Calc->___ftdiv
    _Cons_Gene->___ftge
    _B_PF_Calc->___ftdiv
    _B_PF_Avg->_cos
    _cos->_sin
    _sin->___ftdiv
    _floor->___altoft
    ___fttol->_scale
    ___ftge->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___ftsub->_floor
    ___ftadd->_fround
    ___ftneg->___ftmul
    ___ftdiv->_eval_poly

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    _main->_B_PF_Avg
    _main->_R_PF_Avg
    _main->_Y_PF_Avg

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 2856527
                           _B_PF_Avg
                          _B_PF_Calc
                          _Cons_Gene
                  _EEPROM_Error_Stop
                          _Freq_Calc
                  _Generator_RPM_Cal
             _Generator_RPM_Initiate
                        _IO_Initiate
                         _OSCILLATOR
              _PM_ADC_Initialization
               _PM_IO_Initialization
            _PM_Timer_Initialization
                     _Phase_Sequence
                         _Power_Calc
                       _Power_Factor
                      _RPM_Data_Kill
           _RS485_Data_communication
                           _RTC_Init
                           _R_PF_Avg
                          _R_PF_Calc
              _Rampup_state_function
                          _Temp_Read
          _Timer0_OneSecond_Function
                    _Timer1_Initiate
                        _Timer7_Init
                    _Turbine_RPM_Cal
               _Turbine_RPM_Initiate
                      _Volt_Curr_Avg
                     _Volt_Curr_Read
                     _Wind_Speed_Cal
                _Wind_Speed_Initiate
                           _Y_PF_Avg
                          _Y_PF_Calc
             _startup_state_function
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _startup_state_function                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Y_PF_Calc                                            6     6      0   76457
                                             74 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _Y_PF_Avg                                            93    93      0  344861
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_Initiate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Wind_Speed_Cal                                       2     2      0   62644
                                             74 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Volt_Curr_Read                                       0     0      0   20588
                           _Read_Adc
                             ___ftge
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Volt_Curr_Avg                                       24    24      0   60496
                                             74 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _Turbine_RPM_Initiate                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Turbine_RPM_Cal                                      2     2      0   78886
                                             74 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Timer7_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Initiate                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_OneSecond_Function                            0     0      0  880797
               _EEPROM_Error_Monitor
          _Error_Checking_One_Second
                 _Error_Scan_Running
                    _Last_Five_Error
            _Stopping_state_function
           _Turbine_Ramp_up_1_Second
          _Turbine_Start_up_1_Second
                      _Two_Sec_Delay
                          _UART_Data
                     _VFD_RS485_Data
              _VFD_RS485_Data_filter
                       _Wind_Average
 ---------------------------------------------------------------------------------
 (2) _Wind_Average                                        48    48      0   44349
                                             74 BANK0     24    24      0
                            ___ftadd
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (2) _VFD_RS485_Data_filter                                0     0      0   14079
                     _VFD_RS485_Data
 ---------------------------------------------------------------------------------
 (3) _VFD_RS485_Data                                       2     2      0   14079
                                             74 BANK0      2     2      0
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _UART_Data                                            0     0      0  353764
                             _BCDtoI
                    _RTC_GetDateTime
                   _UART_Data_String
                             _printf
                          _usart_str
                        _usart_str_1
 ---------------------------------------------------------------------------------
 (3) _UART_Data_String                                     0     0      0  174499
                             _printf
                          _usart_str
                        _usart_str_1
 ---------------------------------------------------------------------------------
 (3) _usart_str_1                                          1     1      0      22
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _usart_str                                            2     0      2     429
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _printf                                              41    36      5  174048
                                             71 BANK0     40    35      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   22963
                                             25 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                             28 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   22684
                                             25 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                             34 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                             28 COMRAM     9     3      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                             28 COMRAM     6     0      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2778
                                             36 COMRAM     1     1      0
                                              0 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             36 COMRAM     1     1      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                             28 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _RTC_GetDateTime                                      2     0      2     286
                                             30 COMRAM     2     0      2
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Read                                             2     2      0      46
                                             28 COMRAM     2     2      0
                            _i2c_Ack
                          _i2c_NoAck
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (5) _i2c_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BCDtoI                                               7     5      2    4480
                                             10 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _Turbine_Start_up_1_Second                            0     0      0       0
                _Error_Scan_start_up
                      _VFD_Data_Kill
 ---------------------------------------------------------------------------------
 (3) _Error_Scan_start_up                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Turbine_Ramp_up_1_Second                             0     0      0   11476
                 _Error_Scan_Ramp_up
                     _Five_Sec_Delay
                      _One_Sec_Delay
                      _Two_Sec_Delay
 ---------------------------------------------------------------------------------
 (2) _Two_Sec_Delay                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _One_Sec_Delay                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Five_Sec_Delay                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Error_Scan_Ramp_up                                   0     0      0   11476
                  _EEPROM_Error_Stop
 ---------------------------------------------------------------------------------
 (2) _Last_Five_Error                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error_Scan_Running                                   0     0      0   33017
                  _EEPROM_Error_Stop
            _Stopping_state_function
 ---------------------------------------------------------------------------------
 (2) _Stopping_state_function                              0     0      0   21541
                    _Error_Flag_Kill
                         _Start_Stop
                   _Turbine_Pitching
                      _VFD_Data_Kill
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Error_Flag_Kill                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EEPROM_Error_Stop                                    2     2      0   11476
                                             32 COMRAM     2     2      0
        _Last_3_EEPROM_ERROR_Trigger
                    _int_eeprom_read
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (5) _Last_3_EEPROM_ERROR_Trigger                          0     0      0    5299
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (2) _Error_Checking_One_Second                            0     0      0  382315
                _Communication_Error
                     _DC_Bus_Voltage
             _Generator_One_Feedback
                      _Generator_RPM
                     _Grid_Frequency
                 _Grid_Maximum_Power
                 _Grid_Minimum_Power
                            _Grid_OV
                  _Grid_Over_Current
                _Grid_Phase_Sequence
                            _Grid_UV
                     _Motor_Slip_Cal
                     _Pitch_Feedback
               _Pitch_PS_ON_Function
                       _Ramp_Up_Slip
         _Ramp_Up_Slip_Error_Trigger
                     _Rotor_Slip_Cal
                         _Start_Stop
           _Turbine_OverLoaded_Error
                 _Turbine_Over_Speed
              _Turbine_Restore_Check
                _Turbine_Under_speed
                 _VFD_PS_ON_Function
                 _VFD_Run_Time_Error
           _Wind_Speed_Error_Trigger
 ---------------------------------------------------------------------------------
 (3) _Wind_Speed_Error_Trigger                             0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _VFD_Run_Time_Error                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _VFD_PS_ON_Function                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turbine_Under_speed                                  0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_Restore_Check                                0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_Over_Speed                                   0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Turbine_OverLoaded_Error                             0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Start_Stop                                           0     0      0    5299
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _Rotor_Slip_Cal                                       0     0      0   60079
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (3) _Ramp_Up_Slip_Error_Trigger                           0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Ramp_Up_Slip                                         0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Pitch_PS_ON_Function                                 0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Pitch_Feedback                                       0     0      0    5299
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _Motor_Slip_Cal                                       0     0      0   62709
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2630
                                             36 COMRAM     1     1      0
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _Grid_UV                                              0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Phase_Sequence                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Grid_Over_Current                                    0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_OV                                              0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Minimum_Power                                   0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Maximum_Power                                   0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Grid_Frequency                                       0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Generator_RPM                                        0     0      0   16242
                             ___ftge
 ---------------------------------------------------------------------------------
 (3) _Generator_One_Feedback                               0     0      0    5299
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (3) _DC_Bus_Voltage                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Communication_Error                                  2     2      0       0
                                             28 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Error_Monitor                                 0     0      0    6177
                    _int_eeprom_read
                   _int_eeprom_write
 ---------------------------------------------------------------------------------
 (5) _int_eeprom_write                                     4     0      4    5299
                                             28 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _int_eeprom_read                                      4     2      2     878
                                             28 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Temp_Read                                           12    12      0   62802
                                             74 BANK0     12    12      0
                           _Read_Adc
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) _Rampup_state_function                                0     0      0   41056
                            _RAMP_UP
 ---------------------------------------------------------------------------------
 (2) _RAMP_UP                                              1     1      0   41056
                                             74 BANK0      1     1      0
                      _Pitch_Release
                   _Turbine_Pitching
                      _VFD_Data_Kill
                   _VFD_Freq_Step_up
 ---------------------------------------------------------------------------------
 (3) _VFD_Freq_Step_up                                     0     0      0   41056
                            ___ftdiv
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) _VFD_Data_Kill                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Turbine_Pitching                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Pitch_Release                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _R_PF_Calc                                            6     6      0   76457
                                             74 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _R_PF_Avg                                            93    93      0  344861
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0      22
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            1     1      0      22
                                             28 COMRAM     1     1      0
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (5) _i2c_WaitForIdle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Data_communication                             1     1      0      22
                                             29 COMRAM     1     1      0
                        _usart2_init
                        _usart_str_2
 ---------------------------------------------------------------------------------
 (2) _usart_str_2                                          1     1      0      22
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _usart2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RPM_Data_Kill                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Power_Factor                                         3     3      0   59537
                                             74 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _Power_Calc                                          18    18      0  126825
                                             90 BANK0      9     9      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                19    16      3   66270
                                             71 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftneg (ARG)
                            ___ftsub
 ---------------------------------------------------------------------------------
 (1) _Phase_Sequence                                       0     0      0      22
                           _Read_Adc
 ---------------------------------------------------------------------------------
 (2) _Read_Adc                                             5     3      2      22
                                             28 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _PM_Timer_Initialization                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PM_IO_Initialization                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PM_ADC_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_Initiate                                          0     0      0       0
                  _Generator_IO_init
                _Pitch_Solenoid_init
               _Power_Meter_Error_IO
              _VFD_Contactor_IO_init
                       _VFD_Error_IO
 ---------------------------------------------------------------------------------
 (2) _VFD_Error_IO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _VFD_Contactor_IO_init                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Power_Meter_Error_IO                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Pitch_Solenoid_init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Generator_IO_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Generator_RPM_Initiate                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Generator_RPM_Cal                                    2     2      0   79642
                                             74 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    4324
                                              0 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _Freq_Calc                                            6     6      0   76457
                                             74 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _Cons_Gene                                            0     0      0   31301
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _B_PF_Calc                                            6     6      0   76457
                                             74 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) _B_PF_Avg                                            93    93      0  344861
                                              0 BANK6     84    84      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                                _cos
 ---------------------------------------------------------------------------------
 (2) _cos                                                  9     6      3  269041
                                             87 BANK0      6     3      3
                            ___ftadd
                             ___ftge
                                _sin
 ---------------------------------------------------------------------------------
 (3) _sin                                                 13    10      3  218833
                                             74 BANK0     13    10      3
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   54281
                                             57 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     452
                                             28 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     756
                                             32 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6   16242
                                             47 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2880
                                             47 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   53055
                                             47 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3774
                                              4 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6   15059
                                             10 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6   34332
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6   33506
                                             35 BANK0     12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3    1759
                                             25 BANK0      3     0      3
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    9755
                                             59 BANK0     15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2599
                                             28 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                 16    16      0    2272
                                             12 COMRAM    16    16      0
  _Error_Checking_Interrupt_Overflow
                       _PM_Error_Led
                           ___awtoft
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3     784
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _PM_Error_Led                                         0     0      0    1488
                           i2___ftge
 ---------------------------------------------------------------------------------
 (10) i2___ftge                                            9     3      6    1488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) _Error_Checking_Interrupt_Overflow                    0     0      0       0
                   _Capacitor_Adding
                       _VFD_IO_Error
 ---------------------------------------------------------------------------------
 (10) _VFD_IO_Error                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Capacitor_Adding                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _B_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _B_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Cons_Gene
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _EEPROM_Error_Stop
     _Last_3_EEPROM_ERROR_Trigger
       _int_eeprom_write
     _int_eeprom_read
     _int_eeprom_write
   _Freq_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Generator_RPM_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Generator_RPM_Initiate
   _IO_Initiate
     _Generator_IO_init
     _Pitch_Solenoid_init
     _Power_Meter_Error_IO
     _VFD_Contactor_IO_init
     _VFD_Error_IO
   _OSCILLATOR
   _PM_ADC_Initialization
   _PM_IO_Initialization
   _PM_Timer_Initialization
   _Phase_Sequence
     _Read_Adc
   _Power_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _sqrt
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
         _floor (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _Power_Factor
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
   _RPM_Data_Kill
   _RS485_Data_communication
     _usart2_init
     _usart_str_2
   _RTC_Init
     _I2C_Init
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _R_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _R_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Rampup_state_function
     _RAMP_UP
       _Pitch_Release
       _Turbine_Pitching
       _VFD_Data_Kill
       _VFD_Freq_Step_up
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Temp_Read
     _Read_Adc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Timer0_OneSecond_Function
     _EEPROM_Error_Monitor
       _int_eeprom_read
       _int_eeprom_write
     _Error_Checking_One_Second
       _Communication_Error
       _DC_Bus_Voltage
       _Generator_One_Feedback
         _int_eeprom_write
       _Generator_RPM
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Frequency
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Maximum_Power
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Minimum_Power
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_OV
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Over_Current
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Grid_Phase_Sequence
       _Grid_UV
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Motor_Slip_Cal
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lbtoft
           ___ftpack
       _Pitch_Feedback
         _int_eeprom_write
       _Pitch_PS_ON_Function
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Ramp_Up_Slip
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Ramp_Up_Slip_Error_Trigger
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Rotor_Slip_Cal
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Start_Stop
         _int_eeprom_write
       _Turbine_OverLoaded_Error
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Over_Speed
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Restore_Check
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _Turbine_Under_speed
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _VFD_PS_ON_Function
       _VFD_Run_Time_Error
       _Wind_Speed_Error_Trigger
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _Error_Scan_Running
       _EEPROM_Error_Stop
         _Last_3_EEPROM_ERROR_Trigger
           _int_eeprom_write
         _int_eeprom_read
         _int_eeprom_write
       _Stopping_state_function
         _Error_Flag_Kill
         _Start_Stop
           _int_eeprom_write
         _Turbine_Pitching
         _VFD_Data_Kill
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
     _Last_Five_Error
     _Stopping_state_function
       _Error_Flag_Kill
       _Start_Stop
         _int_eeprom_write
       _Turbine_Pitching
       _VFD_Data_Kill
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     _Turbine_Ramp_up_1_Second
       _Error_Scan_Ramp_up
         _EEPROM_Error_Stop
           _Last_3_EEPROM_ERROR_Trigger
             _int_eeprom_write
           _int_eeprom_read
           _int_eeprom_write
       _Five_Sec_Delay
       _One_Sec_Delay
       _Two_Sec_Delay
     _Turbine_Start_up_1_Second
       _Error_Scan_start_up
       _VFD_Data_Kill
     _Two_Sec_Delay
     _UART_Data
       _BCDtoI
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _RTC_GetDateTime
         _I2C_Read
           _i2c_Ack
           _i2c_NoAck
           _i2c_WaitForIdle
         _I2C_Start
         _I2C_Stop
         _I2C_Write
           _i2c_WaitForIdle
       _UART_Data_String
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftsub
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
             _floor (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   _scale (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
               ___ftadd
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftge
                 ___ftadd (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftneg (ARG)
                     ___ftmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _fround (ARG)
                     ___awdiv
                       ___awmod (ARG)
                     ___awmod
                     ___ftmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___wmul
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               _frexp
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         _usart_str
         _usart_str_1
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _usart_str
       _usart_str_1
     _VFD_RS485_Data
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft
         ___ftpack
     _VFD_RS485_Data_filter
       _VFD_RS485_Data
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lwtoft
           ___ftpack
     _Wind_Average
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Timer1_Initiate
   _Timer7_Init
   _Turbine_RPM_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Turbine_RPM_Initiate
   _Volt_Curr_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Volt_Curr_Read
     _Read_Adc
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _Wind_Speed_Cal
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
   _Wind_Speed_Initiate
   _Y_PF_Avg
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _cos
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _sin
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftsub
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
           _floor (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 _scale (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
             ___ftadd
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftneg (ARG)
                   ___ftmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             _frexp
         _eval_poly
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
           ___ftadd
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _frexp
   _Y_PF_Calc
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _startup_state_function
   _usart_init

 _ISR (ROOT)
   _Error_Checking_Interrupt_Overflow
     _Capacitor_Adding
     _VFD_IO_Error
   _PM_Error_Led
     i2___ftge
   ___awtoft
     i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100     54      BA      18       72.7%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      FF      16       99.6%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      FF      14       99.6%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6F      7A       5       76.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      42       1       70.2%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     674      12        0.0%
DATA                 0      0     674       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Jan 20 10:56:48 2018

                                _KW_Counter 01A1                                  _RPM_Time_1 05D1  
                   _Gf_Yellow_Phase_Voltage 058B                             ?_Grid_Frequency 0001  
                     __end_of_Pitch_Release A65E                                ___altoft@exp 0097  
                                         _i 003F                          __size_of_I2C_Start 0008  
                          ?_i2c_WaitForIdle 0001                               ___altoft@sign 0098  
             __size_of_Power_Meter_Error_IO 000A                          __size_of_I2C_Write 0010  
                                        _T1 05D5                                          _KW 0040  
                                        _PS 003B                              ?_RPM_Data_Kill 0001  
                              ___awdiv@sign 0061                         ___wmul@multiplicand 0066  
                               __CFG_BORV$0 000000                                _PM_Error_Led 51E2  
                                i2___ftpack 97EE                    _TRPM_Under_Speed_Counter 01BD  
                          ??_Wind_Speed_Cal 00AA            __end_of_Turbine_OverLoaded_Error A398  
                ?_Turbine_Start_up_1_Second 0001                         _Ten_Sec_RampUp_Flag 01C2  
                              ___ftadd@exp1 008E                                ___ftadd@exp2 008D  
                              ___ftadd@sign 008C                                         _GIE 007F97  
                                       _RB0 007C08                                         _RB1 007C09  
                                       _RC0 007C10                                         _RB2 007C0A  
                                       _RA4 007C04                                         _RA5 007C05  
                                       _RD0 007C18                                         _RB4 007C0C  
                                       _RD1 007C19                                         _RB5 007C0D  
                                       _RE0 007C20                                         _RD2 007C1A  
                                       _RE1 007C21                                         _RC5 007C15  
                                       _RF1 007C29                                         _RF3 007C2B  
                                       _RE7 007C27                                         _B_C 0286  
                                       _RF7 007C2F                                         _KVA 021B  
                                       _B_V 0288                                         _ISR 0008  
                                       _R_C 02A8                                         _R_V 02AA  
                               _usart2_init A760                                         _Y_C 02D0  
              __end_of_Pitch_PS_ON_Function A4AA                                         _Y_V 02D2  
           __end_of_PM_Timer_Initialization AAB8                              _KW_Counter_Max 01A2  
                                       _cos 919C                                         _sin 5AC2  
                                       _rtc 05F3                                ___awmod@sign 0022  
                                       prod 000FF3                          _Turbine_Over_Speed A4AA  
                             _Two_Sec_Delay A81C                                         wreg 000FE8  
                 __size_of_Capacitor_Adding 007A                                  _TXSTA2bits 000F21  
                                _OV_Counter 01AA                  __size_of_EEPROM_Error_Stop 02DE  
                               _RPM_counter 01B2                               _Volt_Curr_Avg 38D4  
                                      ?_ISR 0001                      _Generator_One_Feedback A27E  
                              ___ftdiv@cntr 00A4                                ___ftdiv@sign 00A9  
                                      l1011 A878                                        l1031 AA94  
                                      l1025 A9EE                                        l1043 AAEA  
                                      l1019 AA06                                        l1037 AA9E  
                                      l1049 AAE2                                        l2442 A6CE  
                                      l2455 AA6E                                        l2449 AA62  
                                      l2467 AA7A                                        ?_cos 00B7  
                                      l6134 8892                                        l6313 8BC8  
                                      l7050 899A                                        l7042 8926  
                                      l7045 8950                                        l3781 4A38  
                                      l7046 8966                                        l6184 75C6  
                                      l3776 4A0C                                        l6345 A2A6  
                                      l6257 8112                                        l7065 A0D4  
                                      l6169 8F3C                                        l3794 516E  
                                      l6338 A254                                        l3786 4A8E  
                                      l3795 5154                                        l6364 93C6  
                                      l6359 936E                                        l9312 6A6C  
                                      l9251 A7A2                                        l9323 6610  
                                      l9334 6C9A                                        l9270 4CA4  
                                      l9263 4BC2                                        l9264 4B78  
                                      l9274 4E1A                                        l9275 4DD0  
                                      ?_sin 00AA                                        _ADON 007E10  
                                      l9269 4CEE                                        STR_1 FFF8  
                                      STR_2 FFF5                                        STR_3 FCAB  
                                      STR_4 FFC6                                        STR_5 FFC6  
                                      STR_6 FFC6                                        STR_7 FFC6  
                                      STR_8 FFC6                                        STR_9 FFF2  
                              _TRPM_Cap_Old 014F                                _TRPM_Cap_New 014D  
                           __end_of_RAMP_UP 8A1C                                printf@tmpval 00BD  
                           ?_Pitch_Feedback 0001                         ?_Turbine_Over_Speed 0001  
                                      _PEIE 007F96                                        u8110 93BE  
                                      u7270 5772                                        u7290 57D0  
                                      u9380 A1D8                                        u8900 A072  
                                      _KW_1 0597                                        _KVAr 0490  
                                      _TXIF 007CF4                                        _GfKw 055B  
                   __size_of_Motor_Slip_Cal 010C                                        _Data 0600  
                           ?_Rotor_Slip_Cal 0001                             _Avg_RYB_Current 0100  
                                      _Y_KW 02F1                             _Power_Calc$8205 00C0  
                           _Power_Calc$8206 00BD                             _Power_Calc$8207 00BA  
                                      _Temp 0224                                  Read_Adc@ch 0021  
                                      _Wind 04AE                                        _data 05E5  
              _Gc_Turbine2Wheel_Ratio_Error 0194                                        _main 7252  
                 __size_of_Turbine_Pitching 0004                                ___ftpack@arg 001D  
                               _usart_str_1 AA60                                 _usart_str_2 AA78  
                                      cos@f 00B7                                ___ftpack@exp 0020  
                           _VFD_Bus_Voltage 0159                            __end_of_I2C_Init AA20  
                          __end_of_I2C_Read A898                       _Rampup_state_function AB00  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                                        btemp 0043  
                                      _sqrt 6F04                                 _GfR_current 055E  
              _Generator_One_Feedback_Error 0197                            __end_of_I2C_Stop AAE8  
                     _Timer1_Time_per_Count 05A9                                        pclat 000FFA  
                                      sin@f 00AA                                i2___ftge@ff1 0001  
                                      sin@y 00AD                                i2___ftge@ff2 0004  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 042A                                 _Gi_TRPM_Cap 05C9  
                               ?_OSCILLATOR 0001                             _Avg_RYB_Voltage 0200  
                             __CFG_MCLRE$ON 000000                                ___ftmul@cntr 0077  
                              ___param_bank 000010                             __end_of_i2c_Ack AAA4  
                              ___ftmul@sign 0078                             __end_of_Grid_OV 79A0  
                           __end_of_Grid_UV 7838                                  _Gen_Theory 0218  
                             _GCR_slip_flag 017E                            ??_DC_Bus_Voltage 001D  
                              _Gf_TRPM_Time 057F                          __size_of_B_PF_Calc 022E  
                                     ??_ISR 000D                  __end_of_VFD_Run_Time_Error A5E2  
                            _Temp_Read$8111 00AA                              _Temp_Read$8112 00AD  
                            _Temp_Read$8113 00B0                              _Temp_Read$8114 00B3  
                              ___fttol@exp1 008E                              _Volt_Curr_Flag 01DA  
                                     ??_cos 0027                                ___fttol@lval 008A  
                                     ??_sin 0027                              _Volt_Curr_Read 4ADE  
                      ??_Turbine_Over_Speed 0027                                _BAUDCON2bits 000F20  
               _Timer1_OF_counter_Generator 02B0                                       l10302 A724  
                                     l10410 1576                                       l20003 0F86  
                                     l20013 0FDC                                       l20005 0F92  
                                     l20021 1040                                       l20015 0FF6  
                                     l20007 0F98                                       l11057 6F50  
                                     l10281 57EE                                       l20121 1458  
                                     l20113 1428                                       l20009 0FB0  
                                     l11058 6F3C                                       l20211 1846  
                                     l20203 17EE                                       l20123 146C  
                                     l20027 105A                                       l20019 0FFC  
                                     l10293 A8AA                                       l20141 1558  
                                     l20133 1528                                       l20117 144A  
                                     l20109 13D8                                       l20061 11C0  
                                     l20053 1150                                       l20037 10A0  
                                     l21101 062E                                       l20231 18FE  
                                     l20223 18B2                                       l20207 1816  
                                     l20151 159E                                       l20135 1536  
                                     l20127 1494                                       l20119 1450  
                                     l20071 124A                                       l10720 6092  
                                     l10376 1702                                       l11097 881E  
                                     l20321 879C                                       l20313 876A  
                                     l20241 194C                                       l20233 190A  
                                     l20225 18BC                                       l20217 187A  
                                     l20161 16D8                                       l20145 157A  
                                     l20081 12C2                                       l20065 11EE  
                                     l21121 06E2                                       l21113 069A  
                                     l21105 0652                                       l21041 0412  
                                     l22001 5E16                                       l10714 6030  
                                     l20331 8AF6                                       l10299 A71A  
                                     l20163 16E6                                       l20155 15F0  
                                     l20139 1544                                       l20091 1320  
                                     l20067 1204                                       l20261 7F86  
                                     l20317 877E                                       l20245 19DC  
                                     l20237 1924                                       l20229 18F4  
                                     l20077 1294                                       l20069 1234  
                                     l21133 074E                                       l21125 0706  
                                     l21117 06BE                                       l21109 0676  
                                     l21061 04C6                                       l21053 047E  
                                     l21045 0436                                       l21037 03EE  
                                     l10718 606A                                       l20255 7F4C  
                                     l20191 17A2                                       l20183 1776  
                                     l20167 16F4                                       l20095 1386  
                                     l20247 19F2                                       l21143 0796  
                                     l20281 7FE6                                       l10729 6168  
                                     l20329 8A6A                                       l21321 8F08  
                                     l21313 8EAE                                       l20097 138C  
                                     l21153 087E                                       l21145 0836  
                                     l21137 0772                                       l21129 072A  
                                     l21081 057A                                       l21073 0532  
                                     l21065 04EA                                       l21057 04A2  
                                     l21049 045A                                       l22033 8D0A  
                                     l22121 72C0                                       l22105 7294  
                                     l10738 6192                                       l10930 5C54  
                                     l10691 97CE                                       l10931 5D4C  
                                     l20603 7594                                       l10659 7F00  
                                     l10763 7DAE                                       l20179 174E  
                                     l21163 08C6                                       l21307 9E1A  
                                     l21411 4594                                       l22043 8D2C  
                                     l22203 73DA                                       l22115 72AE  
                                     l10756 7D08                                       l10749 8028  
                                     l20701 78EA                                       l10757 7D34  
                                     l20189 179C                                       l21157 08A2  
                                     l21149 085A                                       l21165 08E2  
                                     l21093 05E6                                       l21085 059E  
                                     l21077 0556                                       l21069 050E  
                                     l22053 8D56                                       l10838 9D68  
                                     l20615 7616                                       l22047 8D40  
                                     l10848 9C4A                                       l21601 69FC  
                                     l21433 8994                                       l21425 896E  
                                     l20801 843C                                       l21361 94F8  
                                     l21097 060A                                       l21089 05C2  
                                     l22057 8D66                                       l22145 7302  
                                     l22137 72EC                                       l22129 72D6  
                                     l20731 9DF0                                       l20723 9DCA  
                                     l20715 798A                                       l20619 764A  
                                     l22059 8D6C                                       l22163 733A  
                                     l10788 A7E2                                       l21461 89F8  
                                     l20717 7992                                       l20709 796C  
                                     l20661 776E                                       l20805 8458  
                                     l20629 769A                                       l16013 580C  
                                     l16005 57E2                                       l21373 9524  
                                     l21365 9508                                       l21533 4B16  
                                     l22157 7328                                       l21471 9210  
                                     l20663 7776                                       l20655 7750  
                                     l20639 A486                                       l20831 A38A  
                                     l21383 437C                                       l21543 4C0C  
                                     l21527 4AE0                                       l22175 7368  
                                     l20905 8644                                       l21449 89DC  
                                     l20729 9DE8                                       l20841 A3DE  
                                     l20761 8106                                       l20681 782A  
                                     l20673 7804                                       l20665 7782  
                                     l20737 957E                                       l16033 A890  
                                     l21561 4D66                                       l21545 4C3A  
                                     l21529 4B0E                                       l22193 73A0  
                                     l22169 7354                                       l20843 A3E6  
                                     l20691 78B8                                       l20771 819E  
                                     l20755 80E8                                       l20819 A4F0  
                                     l20739 9588                                       l16035 A894  
                                     l21387 4510                                       l21571 4E16  
                                     l21555 4CEA                                       l21539 4BBE  
                                     l22195 73B6                                       l21493 6FB8  
                                     l17101 8BAC                                       l20853 A43A  
                                     l20749 8070                                       l20829 A382  
                                     l20781 A326                                       l20589 99E0  
                                     l21565 4D6E                                       l21549 4C42  
                                     l22189 739A                                       l20927 5AF0  
                                     l20855 A442                                       l17111 A95A  
                                     l20679 7822                                       l20863 96E8  
                                     l20783 A32E                                       l21559 4D38  
                                     l21585 6DAC                                       l21913 517A  
                                     l21905 50C2                                       l20793 A544  
                                     l20697 78D6                                       l20769 8192  
                                     l20873 8316                                       l16401 93B0  
                                     l21577 4E64                                       l20939 5BEE  
                                     l20699 78DE                                       l20867 9738  
                                     l15531 A168                                       l21853 2C74  
                                     l21773 6B7E                                       l21861 9176  
                                     l21677 249E                                       l21597 6950  
                                     l17141 A20E                                       l20893 83DE  
                                     l20885 8384                                       l20877 8344  
                                     l16405 93C0                                       l15605 8CB0  
                                     l21941 47B8                                       l21765 1CC8  
                                     l21685 64F4                                 _GfY_current 0567  
                                     l15551 A1AE                                       l15543 A196  
                                     l15535 A176                                       l15527 A15C  
                                     l21777 6C2A                                       l17137 A1F8  
                                     l17081 8B3C                                       l20889 83B0  
                                     l15537 A17E                                       l21689 65A0  
                                     l21875 85E0                                       l17139 A200  
                                     l16371 9330                                       l15539 A182  
                                     l15547 A1A0                                       l21971 4A26  
                                     l21955 4900                                       l17093 8B80  
                                     l17085 8B54                                       l17341 A5CA  
                                     l16357 A6E8                                       l21981 4A64  
                                     l21887 4EF0                                       l21967 4984  
                                     l21975 4A44                                       l21985 4A76  
                                     l21899 505C                                       l18315 79E0  
                                     l16811 8880                                       l18341 7AAA  
                                     l18333 7A7E                                       l18325 7A36  
                                     l18351 7B00                                       l18319 79E8  
                                     l16399 93AA                                       l15679 A9A2  
                                     l18345 7AD2                                       l18329 7A5A  
                                     l18337 7A82                                       l19421 979C  
                                     l19413 975E                                       l18349 7AFA  
                                     l15965 55FA                                       l15973 5642  
                                     l19423 97BA                                       l19415 9768  
                                     l19503 61BC                                       l15991 5734  
                                     l19425 97C4                                       l19417 9786  
                                     l19409 9750                                       l19513 620A  
                                     l19601 9BAA                                       l19523 7B40  
                                     l17923 6706                                       l16955 A080  
                                     l19461 6078                                       l17941 6776  
                                     l17933 6742                                       l16965 A0B0  
                                     l15997 5786                                       l16893 930E  
                                     l19605 9BBE                                       l19455 603E  
                                     l19543 7BC8                                       l17935 6756  
                                     l17927 671A                                       l15999 5792  
                                     l16879 92D4                                       l19711 7D66  
                                     l19553 7C06                                       l19529 7B7A  
                                     l17929 672E                                       l19721 7D94  
                                     l19641 3FB4                                       l19483 60F8  
                                     l19467 6088                                       l19547 7BE6  
                                     l17939 6762                                       l19731 7DE2  
                                     l19723 7DA4                                       l19715 7D7A  
                                     l19627 5A74                                       l19619 5990  
                                     l19651 40A6                                       l19485 6106  
                                     l19477 60CA                                       l19805 A574  
                                     l19557 7C24                                       l19813 9052  
                                     l19573 9B44                                       l19495 614E  
                                     l19487 6114                                       l19823 90D6  
                                     l18863 71A8                                       l19911 9C3A  
                                     l19903 9BE2                                       l19751 7E50  
                                     l19647 407A                                       l19497 615C  
                                     l19489 6120                                       l19817 9092  
                                     l18873 724A                                       l19905 9BF0  
                                     l19737 7E04                                       l19681 7CC4  
                                     l19585 9B70                                       l19665 42CC  
                                     l19931 9F90                                       l18867 71F4  
                                     l18859 7156                                       l19907 9BF6  
                                     l19771 7EB8                                       l19675 7C94  
                                     l19587 9B7A                                       l19579 9B56  
                                     l19659 4206                                       l19837 81E0  
                                     l18957 9A2C                                       l19917 9FF2  
                                     l19781 7EE6                                       l19597 9B9E  
                                     l19589 9B7E                                       l19855 8272  
                                     l18959 9A30                                       l19919 A000  
                                     l19783 7EF6                                       l19775 7ECC  
                                     l19759 7E84                                       l19943 0D44  
                                     l18879 A8D4                                       l19793 9ABA  
                                     l19873 82D8                                       l19865 82A2  
                                     l19953 0D90                                       l19961 0E0E  
                                     l19795 9ACA                                       l19867 82B2  
                                     l19859 8286                                       l19883 9D12  
                                     l19971 0E84                                       l19947 0D5A  
                                     l19869 82BC                                       l19885 9D20  
                                     l19973 0E9E                                       l19895 9D58  
                                     l19887 9D24                                       l19991 0EF8  
                                     l19967 0E3A                                       l19977 0EAE  
                                     l19987 0EE6                                       l19979 0EB4  
                                     l19989 0EF2                                       l19999 0F60  
                                     ?_main 0001                             __end_of___awdiv 9BC8  
                                     _EEADR 000F62                             __end_of___ftadd 6230  
                                     STR_10 FFC6                                       STR_11 FFC6  
                                     STR_12 FFF2                                       STR_20 FFBF  
                                     STR_13 FFF2                                       STR_21 FFC6  
                                     STR_30 FFF2                                       STR_22 FFC6  
                                     STR_14 FFBF                                       STR_31 FFF2  
                                     STR_23 FFC6                                       STR_15 FFD4  
                                     STR_16 FFD4                                       STR_24 FFC6  
                                     STR_40 FFF5                                       STR_32 FFF5  
                          __end_of_B_PF_Avg 3198                                       STR_17 FFD4  
                                     STR_25 FFC6                                       STR_33 FF55  
                                     STR_41 FCCF                                       STR_18 FFBF  
                                     STR_26 FFC6                                       STR_50 FFF5  
                                     STR_42 FFF5                                       STR_34 FFF5  
                                     STR_19 FFBF                                       STR_27 FFC6  
                                     STR_51 FF6F                                       STR_43 FED7  
                                     STR_35 FEA4                                       STR_28 FFF2  
                                     STR_60 FFF5                                       STR_52 FFF5  
                                     STR_44 FFF5                                       STR_36 FFF5  
                           __end_of___awmod A1B8                                       STR_29 FFF2  
                                     STR_45 FFDF                                       STR_61 FFA3  
                                     STR_53 FF95                                       STR_37 FEAF  
                                     STR_70 FFF5                                       STR_62 FFF5  
                                     STR_54 FFF5                                       STR_46 FFF5  
                                     STR_38 FFF5                                       STR_39 FF5E  
                                     STR_63 FEB9                                       STR_71 FE99  
                                     STR_47 FE78                                       STR_55 FE6D  
                                     STR_80 FFF5                                       STR_72 FFF5  
                                     STR_64 FFF5                                       STR_56 FFF5  
                                     STR_48 FFF5                                       STR_73 FF31  
                                     STR_65 FF13                                       STR_81 FE83  
                                     STR_57 FE62                                       STR_49 FDC3  
                                     STR_90 FFF5                                       STR_82 FFF5  
                                     STR_74 FFF5                                       STR_66 FFF5  
                                     STR_58 FFF5                                       STR_75 FF8E  
                                     STR_91 FF3A                                       STR_67 FEC3  
                                     STR_83 FDD0                                       STR_59 FDA7  
                                     STR_92 FFF2                                       STR_84 FFF5  
                                     STR_76 FFF5                                       STR_68 FFF5  
                                     STR_93 FFF2                                       STR_85 FF7F  
                                     STR_69 FE57                                       STR_77 FE35  
                                     STR_94 FFF2                                       STR_86 FFF5  
                                     STR_78 FFF5                                       STR_95 FFF2  
                                     STR_87 FF9C                                       STR_79 FD99  
                                     STR_96 FFF2                                       STR_88 FFF5  
                                     STR_97 FFF2                                       STR_89 FF67  
                                     STR_98 FFBF                                       STR_99 FFF2  
                           __end_of___ftdiv 805E                             __end_of___ftneg A7F0  
                           __end_of___lldiv 9D7A                                       ?_sqrt 00A7  
                           __end_of___ftmul 7C64                                       u11310 70D2  
                                     u11320 7166                                       _T0CON 000FD5  
                                     u11330 71B8                                       u11340 720A  
                           ___awdiv@divisor 0025                                       u12301 5FFC  
                                     u11520 9A18                             __end_of___llmod 9C5C  
                                     u13210 0FD2                             __end_of___ftsub A59E  
                                     u12501 7B1C                             __end_of___fttol 82EA  
                                     u13150 0F32                                       u13080 9FB8  
                                     u12521 7B56                                       u13217 0FC8  
                                     u12291 5FDE                                       u13157 0F28  
                                     u13270 10E6                                       u12711 7CA4  
                                     u13088 9FBA                                       u13275 10DA  
                                     u13460 156E                                       u13711 7F62  
                                     u12921 81BC                                       u12691 7C74  
                                     u12940 8206                                       u13760 878E  
                                     u14640 5BE8                                       u12945 81FC  
                                     u14650 5BEA                                       u13691 7F28  
                                     u13950 A49C                                       u15730 8D9C  
                                     u13795 8E0E                           _Pitch_EP_Err_Flag 01B0  
                                     u15840 73D8                                       _T7CON 000F3D  
                       _Turbine_Under_speed A2E0                                       u15907 9A4E  
                                     u15917 9A80                                       u15897 89C6  
                               _GiMinutes_1 0141                                 _GiMinutes_2 0033  
                               _GiMinutes_3 0143                                       _BV_PS 0284  
                           ___awdiv@counter 0060                                       _KVA_1 0591  
                                     _B_Deg 0642                                       _B_Rad 0522  
                                     _TX1IF 007CF4                                       _TX2IF 007D24  
                            ?_Two_Sec_Delay 0001                                       _PORTD 000F83  
                                     _GcMin 0188                                       _GcSec 018A  
                        __end_ofsin@coeff_a FBFE                                       _GiDay 05C7  
                        __end_ofsin@coeff_b FC0A                                       _Gf_KW 0573  
                                     _GfKva 0555                                       _TXREG 000FAD  
                                     _Check 02D4                                       _RV_PS 02A4  
                                     _R_Deg 0657                                       _R_Rad 04A2  
                                     _YV_PS 02CC                                       _Y_Deg 0660  
                              ___lltoft@exp 0025                                       _Dummy 05C1  
                                     _Y_Rad 04C6                          __size_of_UART_Data 0D34  
                                     _Hours 02D8                             _GCB_phasev_flag 0178  
                            ?_Volt_Curr_Avg 0001          __end_of_Ramp_Up_Slip_Error_Trigger 8420  
                _Ramp_Up_Slip_Error_Trigger 82EA                               _Y_V_Avg_Steps 04F9  
                             ___awtoft@sign 000C                __end_of_Turbine_RPM_Initiate AA54  
                           __end_of_dpowers FBA1                                       _floor 8732  
                                     _frexp 9F74                                       _errno 05F1  
                                     _scale 3E46                             __end_of_isdigit A9AA  
                             ___ftpack@sign 0021                            __end_of_RTC_Init A98C  
                                     _putch AA6C                     __end_of_Last_Five_Error A94C  
                ?_Timer0_OneSecond_Function 0001                           __end_of_I2C_Start AAF0  
                         __end_of_I2C_Write AA10                            _GRPM_Pulse_width 02F4  
                                     sin@x2 00B3                                       tablat 000FF5  
                          __end_ofi2___ftge 9CEC                           ??_Timer1_Initiate 001D  
                    __size_of_One_Sec_Delay 002A                                       sqrt@a 00A7  
                   __size_of_VFD_RS485_Data 0072                                       sqrt@i 00B3  
                                     sqrt@q 00B4                                       sqrt@x 00B7  
                                     sqrt@z 00B0                                       status 000FD8  
                          __end_of_R_PF_Avg 29C2                        ?_Turbine_Under_speed 0001  
                               _Bcurr_V_Old 020F                                 _Bcurr_V_New 01E9  
                         ??_int_eeprom_read 001F                            _wind_1_Temp_flag 01E4  
                               _R_Gap_Ratio 011B                    __size_of_Error_Flag_Kill 00CC  
                     _Rotor_Slip_Error_Flag 01B5                             __initialization 93CA  
          __end_of_RS485_Data_communication 9A8E                      __end_of_Volt_Curr_Read 4E7C  
                          __end_of_Y_PF_Avg 21EC                                __end_of_main 73E0  
                           ??_RPM_Data_Kill 001D                          __size_of_R_PF_Calc 022E  
                              __end_of_sqrt 70C2              __size_of_VFD_RS485_Data_filter 0082  
                          _VFD_Freq_Step_up 8638               __end_of_VFD_RS485_Data_filter 9E80  
                          __end_of_Read_Adc A7C0                                 _Avg_Current 063C  
                      _Gc_TRPM_Rampup_Error 0193                            _wind_2_Temp_flag 01E5  
                               ?i2___ftpack 0001                               _Initial_Check 02D9  
                                    ??_main 0027                               ___fttol@sign1 0089  
                ??_Wind_Speed_Error_Trigger 0027         __end_of_Last_3_EEPROM_ERROR_Trigger 8CCC  
               _Last_3_EEPROM_ERROR_Trigger 8BF2                 _Timer1_OF_counter_Wind_temp 02C0  
                          _Gf_Turbine_RPM_1 0585                                      ??_sqrt 00AA  
                             __activetblptr 000003                        _Wind_Cut_Out_Counter 01DC  
                               _Avg_Voltage 063F                                _WRPM_Counter 02C6  
                    _VFD_SHORT_CIRCUIT_fLAG 02C4                        __size_of__tdiv_to_l_ 015C  
       _Gi_Timer1_OF_counter_Generator_Temp 029E                         __size_of_OSCILLATOR 0006  
                         _Timer0_RS485_flag 05D9                                   ??_RAMP_UP 00AA  
               ??_Error_Checking_One_Second 0027                               _Turbine_state 00D8  
                        __size_of_Cons_Gene 010C                                 _S_S_Counter 01B6  
                       _Error_Scan_start_up 882C                          __size_of_Y_PF_Calc 022E  
                                    _ADCON0 000FC2                                      _ADCON1 000FC1  
                                    _ADCON2 000FC0                                      _CCP1IE 007D19  
                                    ?_floor 0099                                      _CCP1IF 007D21  
                                    _CCP2IE 007D1A                                      _CCP2IF 007D22  
                                    _CCP3IE 007DB0                                      _CCP3IF 007DB8  
                              ?_IO_Initiate 0001                                      _CCP4IE 007DB1  
                                    _CCP4IF 007DB9                                      _CCP5IE 007DB2  
                                    _CCP5IF 007DBA                                      _CCP6IE 007DB3  
                                    _CCP6IF 007DBB                                      _CCP7IE 007DB4  
                                    ?_frexp 001D                                      _CCP7IF 007DBC  
                                    _CCP8IE 007DB5                                      _CCP8IF 007DBD  
                          __end_of___altoft 9B2C                            ___llmod@dividend 0065  
                                    ?_scale 0079                                      STR_100 FFF2  
                                    STR_101 FFF2                                      STR_110 FFF2  
                                    STR_102 FFF2                                      STR_111 FFF2  
                                    STR_103 FFF2                                      STR_120 FFF2  
                                    STR_112 FFF2                                      STR_104 FFF2  
                                    STR_200 FEEB                                      STR_121 FFF2  
                                    STR_113 FFF2                                      STR_105 FFF2  
                                    STR_201 FFF5                                      STR_122 FFF2  
                                    STR_114 FFF2                                      STR_106 FFF2  
                                    STR_210 FE8E                                      STR_130 FE41  
                                    STR_202 FDDD                                      _ADRESH 000FC4  
                         __end_of_B_PF_Calc 6D2E                                      STR_115 FFF2  
                                    STR_107 FFF2                                      STR_211 FFF5  
                                    STR_203 FFF5                                      STR_131 FFF5  
                                    STR_123 FFFD                                      STR_116 FFF2  
                                    STR_108 FFF2                                      STR_124 FFFB  
                                    STR_140 FE29                                      STR_132 FDF7  
                                    STR_212 FDB5                                      STR_220 FC75  
                                    STR_204 FC0A                                      STR_125 FFFD  
                                    STR_117 FFF2                                      STR_109 FFF2  
                                    STR_221 FFF5                                      STR_213 FFF5  
                                    STR_205 FFF5                                      STR_141 FFF5  
                                    STR_133 FFF5                                      STR_126 FFFB  
                                    STR_118 FFF2                                      STR_134 FF43  
                                    STR_214 FECD                                      STR_142 FD8B  
                                    STR_150 FD23                                      STR_230 FCE1  
                                    STR_222 FC63                                      STR_206 FC50  
                                    _ADRESL 000FC3                                      STR_119 FFF2  
                                    STR_231 FFF5                                      STR_223 FFF5  
                                    STR_215 FFF5                                      STR_207 FFF5  
                                    STR_151 FFF5                                      STR_143 FFF5  
                                    STR_135 FFF5                                      STR_127 FFF5  
                                    STR_216 FF77                                      STR_128 FF27  
                                    STR_160 FEFF                                      STR_152 FD6E  
                                    STR_136 FD5F                                      STR_144 FD32  
                                    STR_232 FCF2                                      STR_224 FC87  
                                    STR_208 FC3D                                      STR_233 FFFD  
                                    STR_225 FFF5                                      STR_217 FFF5  
                                    STR_209 FFF5                                      STR_161 FFF5  
                                    STR_153 FFF5                                      STR_145 FFF5  
                                    STR_137 FFF5                                      STR_129 FFF5  
                                    STR_234 FFFB                                      STR_170 FFEE  
                                    STR_154 FFB1                                      STR_162 FF09  
                                    STR_138 FE4C                                      STR_146 FD41  
                                    STR_218 FD03                                      STR_226 FC25  
                                    STR_227 FFF5                                      STR_219 FFF5  
                                    STR_171 FFF5                                      STR_163 FFF5  
                                    STR_155 FFF5                                      STR_147 FFF5  
                                    STR_139 FFF5                                      STR_235 FF87  
                                    STR_172 FFE4                                      STR_148 FFCD  
                                    STR_156 FFB8                                      STR_164 FEF5  
                                    STR_180 FE11                                      STR_228 FC99  
                                    STR_229 FFF5                                      STR_181 FFF5  
                                    STR_173 FFF5                                      STR_165 FFF5  
                                    STR_157 FFF5                                      STR_149 FFF5  
                                    _EEDATA 000F61                                      STR_166 FFEB  
                                    STR_158 FFAA                                      STR_182 FEE1  
                                    STR_190 FD7D                                      STR_174 FCBD  
                                    STR_191 FFF5                                      STR_183 FFF5  
                                    STR_175 FFF5                                      STR_167 FFF5  
                                    STR_159 FFF5                                      STR_168 FFE9  
                                    STR_192 FFDA                                      STR_184 FE04  
                                    STR_176 FD50                                      STR_193 FFF5  
                                    STR_185 FFF5                                      STR_177 FFF5  
                                    STR_169 FFF5                                      STR_194 FC70  
                                    STR_186 FF4C                                      STR_178 FF1D  
                                    _CCPR1H 000FBD                                      STR_195 FFF5  
                                    STR_187 FFF5                                      STR_179 FFF5  
                                    STR_196 FE1D                                      STR_188 FD13  
                                    _CCPR2H 000F50                                      STR_197 FFF5  
                                    STR_189 FFF5                                      STR_198 FDEA  
                                    _CCPR1L 000FBC                                      _CCPR3H 000F4B  
                                    STR_199 FFF5                          __size_of_Freq_Calc 01D6  
                                    _CCPR4H 000F79                                      _CCPR2L 000F4F  
                                    _CCPR5H 000F76                                      _CCPR3L 000F4A  
                                    _CCPR6H 000F73                                      _CCPR4L 000F78  
                        __size_of_i2c_NoAck 000A                                      _CCPR7H 000F70  
                                    _CCPR5L 000F75                                      _CCPR6L 000F72  
                                    _CCPR8H 000F48                                      _EECON2 000F7E  
                                    _CCPR7L 000F6F                                      _CCPR8L 000F47  
                               _R_Current_1 05A0                            ___awdiv@dividend 0023  
                                    _ANSEL0 007928                                      _ANSEL1 007929  
                                    _ANSEL2 00792A                                      _ANSEL3 00792B  
                                    _ANSEL4 00792C                                      _ANSEL6 00792E  
                                    _ANSEL8 007920                                      _ANSEL9 007921  
                          __end_of___awtoft A696                                      ?_putch 0001  
                                    _BCDtoI 8DA2                            __end_of___ftpack 97EE  
                          __end_of___lbtoft A908                                      _GODONE 007E11  
                             ?_Ramp_Up_Slip 0001                            __end_of___lltoft A062  
                       _DC_Bus_Voltage_Flag 016B                              __CFG_WDTEN$OFF 000000  
                                    i2l4573 03EE                            _lcDC_Bus_Counter 02E4  
                                    i2l9354 5388                        _Grid_Frequency_Error 019A  
                                    _RCREG2 000F1D           __end_of_Timer0_OneSecond_Function 8DA2  
                          __end_of___lwtoft A92C                      ?_Rampup_state_function 0001  
                           _GCR_phasev_flag 017D                                      _OSCCON 000FD3  
                                    _TEMP_1 05D7                                      _B_Peak 0133  
                                    _B_Curr 0103                                      _TMR0IE 007F95  
                                    _SPBRG1 000FAF                                      _TMR0IF 007F92  
                                    _SPBRG2 000F1E                                      _TMR1IE 007CE8  
                                    _TMR1IF 007CF0                                      _KVAr_1 0594  
                                    _TMR1ON 007E68                                      _TMR7IE 007DCB  
                                    _TMR7IF 007DD3                       ??_Turbine_Under_speed 0027  
                                    _TRISB0 007C98                                      _B_Volt 0027  
                                    _TRISB1 007C99                                      _TRISC0 007CA0  
                                    _TRISB2 007C9A                                      _TRISA4 007C94  
                                    _TRISA5 007C95                                      _TRISD0 007CA8  
                                    _TRISC2 007CA2                                      _TRISB4 007C9C  
                                    _TRISD1 007CA9                                      _TRISC3 007CA3  
                                    _TRISB5 007C9D                                      _TRISE0 007CB0  
                                    _TRISD2 007CAA                                      _TRISC4 007CA4  
                                    _TRISE1 007CB1                                      _TRISC5 007CA5  
                                    _TRISF1 007CB9                                      _TRISE3 007CB3  
                                    _TRISF3 007CBB                                      _TRISF4 007CBC  
                                    _TRISE7 007CB7                                      _GcDate 0186  
         __size_of_Turbine_OverLoaded_Error 005C                                   ??_i2c_Ack 001D  
                                    _GiData 0290                                      _TXREG1 000FAD  
                                    _TXREG2 000F1C                                      _GcHour 0187  
                 ?_Turbine_OverLoaded_Error 0001                          _Grid_Maximum_Power A3F4  
                                 ??_Grid_OV 0027                                   ??_Grid_UV 0027  
                                    _GcYear 018B                                      _Data_1 0500  
                                    _GfKvar 0558                          _Volt_Curr_Avg$8115 00AA  
                                    _GiYear 029A                                      _R_Peak 0149  
                                    _R_Curr 0118                                      _Gfwind 058E  
                                    _R_Volt 002A                        _Pitch_PS_ON_Function A450  
                                    _Y_Peak 0165                    _Turbine_Ramp_up_1_Second A9DC  
                                    _Y_Curr 012D                                      _Errors 003A  
                            __CFG_PWRTEN$ON 000000                              __CFG_XINST$OFF 000000  
                             ??_Timer7_Init 001D                                      _Y_Volt 0030  
                                    _Temp_1 02DE                                      _Temp_2 02DF  
                                    _Temp_3 02E0                                      _Temp_4 02E1  
                                    _Temp_5 02E2                                      _Temp_6 02E3  
          __size_of_PM_Timer_Initialization 000A                        ?_Error_Scan_start_up 0001  
                          __end_of__powers_ FBEF                    ?_Stopping_state_function 0001  
                            _lc_Avg_Counter 01E0                           __end_of_UART_Data 0D34  
                     I2C_Write@v_i2cData_u8 001D                             ?_Volt_Curr_Read 0001  
                                    ___ftge 9012                         ?_Grid_Maximum_Power 0001  
                                 BCDtoI@BCD 006A                                      ___wmul A696  
                  __size_of_Turbine_RPM_Cal 03B4                                   ??___awdiv 0027  
                                 ??___ftadd 0089                                   ??___awmod 0021  
                                _Motor_slip 0112                              _Timer0_counter 05DB  
                   ?_startup_state_function 0001                                   ??___ftdiv 00A1  
                                 ??___ftneg 0027                                      _digit1 05E7  
                                    _digit2 05E9                                      _digit3 05EB  
                                    _digit4 05ED                                      _digit5 05EF  
                                 ??___lldiv 0025                                   ??___ftmul 0070  
                                 ??___llmod 0025                                   ??___ftsub 0027  
                                 ??___fttol 0084                              _Timer1_counter 0157  
                                _Temprature 0227                                      _fround 5814  
                                    clear_0 9400                                      clear_1 940C  
                                    clear_2 941A                                      clear_3 942E  
                                    clear_4 9442                                      clear_5 9454  
                                    clear_6 9460                                      clear_7 946C  
                          ___awdiv@quotient 0062                          __size_of_Temp_Read 017C  
                           ___awmod@divisor 001F                  _RAMP_UP_TURBINE_CUT_IN_RPM 0499  
               _lc_Rotor_Slip_Error_Counter 01E3                               _One_Sec_Delay A846  
                                    _wind_2 04D5                             ___awmod@counter 0021  
                                    _printf 0D34                             ??_Two_Sec_Delay 001D  
                  ??_Generator_RPM_Initiate 001D                                  _Power_Calc 6230  
                                _Wind_Cap_2 05E1                __size_of_Grid_Phase_Sequence 0020  
                                    floor@i 009C                                      floor@x 0099  
                     ___ftmul@f3_as_product 0074                         int_eeprom_read@temp 001F  
                             _B_C_Avg_Steps 04DB                                  _Wind_Spd_2 0233  
                                 ??_isdigit 001D                             ??_Volt_Curr_Avg 0027  
                                 ?_I2C_Init 0001                                   ?_I2C_Read 0001  
                     _Turbine_Restore_Check 952E                                  _Wind_Speed 0236  
                                 ?_I2C_Stop 0001                                      sin@sgn 00B6  
                          _Capacitor_Adding 9EFA                       _Turbine_Restore_Error 01CA  
                     _VFD_Contactor_IO_init AAC2                                __mediumconst FB78  
                       _Gc_Rotor_Slip_Error 0192                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                            _TRPM_Frequency 04EA                        ??_Grid_Maximum_Power 0027  
                                    sqrt@og 00AD                            _Stopping_Counter 01BA  
                               _Consumption 02D5                                  _Start_Stop 9314  
                             _B_PF_Avg$8200 06A5                               _B_PF_Avg$8201 06A8  
                             _B_PF_Avg$8202 06AB                               _B_PF_Avg$8203 06AE  
                             _B_PF_Avg$8180 0669                               _B_PF_Avg$8181 066C  
                             _B_PF_Avg$8190 0687                               _B_PF_Avg$8182 066F  
                             _B_PF_Avg$8191 068A                               _B_PF_Avg$8183 0672  
                             _B_PF_Avg$8176 06B1                               _B_PF_Avg$8192 068D  
                             _B_PF_Avg$8184 0675                               _B_PF_Avg$8177 06B4  
                             _B_PF_Avg$8193 0690                               _B_PF_Avg$8185 0678  
                             _B_PF_Avg$8178 06B7                               _B_PF_Avg$8194 0693  
                             _B_PF_Avg$8186 067B                               _B_PF_Avg$8195 0696  
                             _B_PF_Avg$8187 067E                               _B_PF_Avg$8179 0666  
                             _B_PF_Avg$8196 0699                               _B_PF_Avg$8188 0681  
                             _B_PF_Avg$8197 069C                               _B_PF_Avg$8189 0684  
                             _B_PF_Avg$8198 069F                               _B_PF_Avg$8199 06A2  
                         __end_of_R_PF_Calc 6B00                              ??_Ramp_Up_Slip 0027  
                                _Total_Pf_1 05B2               __size_of_EEPROM_Error_Monitor 022E  
                               _Key_Counter 01A5                              _Motor_Slip_Cal 8420  
                          ?_Last_Five_Error 0001                         _Gf_Turbine_RPM_Prev 0588  
                         _Gf_TRPM_Frequency 057C                               _One_Time_Flag 01AD  
                __end_of_Error_Scan_Ramp_up 9314                   __size_of_UART_Data_String 073C  
                                _Rotor_slip 0124                                 _Y_Gap_Ratio 0130  
                                __accesstop 0060                     __end_of__initialization 9472  
                                ___altoft@c 008F                            _Turbine_Pitching AB0C  
                                ___ftadd@f1 0083                                  ___ftadd@f2 0086  
                       __size_ofi2___ftpack 00AE                           ?_int_eeprom_write 001D  
                      _Initial_Delay_Second 0145                                  ___ftge@ff1 008F  
                                ___ftge@ff2 0092                 __size_of_VFD_PS_ON_Function 0074  
                          ??_Grid_Frequency 0027                                eval_poly@res 0098  
                             ___rparam_used 000001                       __end_of_VFD_Data_Kill A760  
                __end_of_Error_Scan_Running 952E                                  ___ftdiv@f1 009B  
                                ___ftdiv@f2 009E                                  ___ftdiv@f3 00A5  
                     ?_Pitch_PS_ON_Function 0001                                   ?_B_PF_Avg 0001  
              _Gc_Pitch_Coil_Feedback_Error 0191                       __end_of_Generator_RPM A552  
                                ___ftneg@f1 0079                                  ___awtoft@c 0009  
                 _Error_Checking_One_Second 8E76                          ??_int_eeprom_write 0021  
                            i2___ftpack@arg 0001                 __end_of_Pitch_Solenoid_init AAF8  
                            i2___ftpack@exp 0004                       ??_Error_Scan_start_up 001D  
                                ___lbtoft@c 0025                      _Gf_Wind_Cut_In_Counter 0199  
                               _Frequency_1 0528                                  ___ftmul@f1 006A  
                                ___ftmul@f2 006D                                  ___ftsub@f1 00A1  
                                ___ftsub@f2 00A4              __end_of_startup_state_function A8E4  
                                ___fttol@f1 0080                           __end_of_Cons_Gene 8638  
                            __pcstackCOMRAM 0001                           __end_of_Y_PF_Calc 66A4  
                              __pidataBANK1 AB10                                __pidataBANK5 AB12  
                                ___lltoft@c 0060                             _Wind_Speed_10_2 05B8  
                      _Turbine_RPM_Initiate AA48                           __end_of_Freq_Calc 6F04  
                         __end_of_i2c_NoAck AA9A                               __end_of_floor 882C  
                    _TRPM_OverSpeed_Counter 01BC                               __end_of_frexp 9FEC  
                             __end_of_scale 42F8                          _One_sec_Delay_Flag 01AE  
                        _Two_sec_Delay_Flag 01CE                               __end_of_putch AA78  
                            ?_One_Sec_Delay 0001                                   ?_RTC_Init 0001  
                  _RS485_Data_communication 99F0                         __end_of_Timer7_Init AA60  
                         ??_Error_Flag_Kill 001D                              _Gf_TRPM_Time_1 0582  
                                ___lwtoft@c 0060                                   ?i2___ftge 0001  
               ??_Turbine_Start_up_1_Second 001D                                ?_usart2_init 0001  
                        _Grid_Minimum_Power A398                                  __div_to_l_ 7DC0  
                       int_eeprom_write@adr 001D                         int_eeprom_write@dat 001F  
                               _Y_Current_1 05BE                                  ??_I2C_Init 001D  
                                ??_I2C_Read 001D                                   ?_R_PF_Avg 0001  
              __size_of_Wind_Speed_Initiate 000C                                  ??_I2C_Stop 001D  
                   ?_Generator_One_Feedback 0001                     __size_of_Phase_Sequence 0166  
                          ??_Pitch_Feedback 0021                            ??_Rotor_Slip_Cal 0027  
                       _Five_sec_Delay_Flag 02D6                      __end_of_Motor_Slip_Cal 852C  
                           __div_to_l_@exp1 0065                                     ??_floor 0027  
                       ?_Grid_Minimum_Power 0001                             __div_to_l_@cntr 0064  
                                   ??_frexp 0022                __end_of_Power_Meter_Error_IO AAD6  
                             _R_C_Avg_Steps 04E4                                     ??_scale 0027  
                               _Phase_Angle 01AF                       _PM_ADC_Initialization AAB8  
                           __div_to_l_@quot 0060                                   ?_Y_PF_Avg 0001  
                  __size_of_RTC_GetDateTime 00AC                                     ??_putch 001D  
                                   ?_BCDtoI 006A                                  __pbssBANK0 00CF  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
                                __pbssBANK3 0300                                  __pbssBANK4 0400  
                                __pbssBANK5 0500                                  __pbssBANK6 0600  
                          _KW_Maximum_Error 01A3                          __size_of_eval_poly 00F4  
               __end_of_Communication_Error A21C                              _VFD_RS485_Data A0D6  
                                 ?_Read_Adc 001D                           __end_of_Temp_Read 755C  
                              ?_usart_str_1 0001                                ?_usart_str_2 0001  
                             _R_PF_Avg$8120 06B7                               _R_PF_Avg$8121 0666  
                             _R_PF_Avg$8130 0681                               _R_PF_Avg$8122 0669  
                             _R_PF_Avg$8131 0684                               _R_PF_Avg$8123 066C  
                             _R_PF_Avg$8140 069F                               _R_PF_Avg$8132 0687  
                             _R_PF_Avg$8124 066F                               _R_PF_Avg$8141 06A2  
                             _R_PF_Avg$8133 068A                               _R_PF_Avg$8125 0672  
                             _R_PF_Avg$8118 06B1                               _R_PF_Avg$8142 06A5  
                             _R_PF_Avg$8134 068D                               _R_PF_Avg$8126 0675  
                             _R_PF_Avg$8119 06B4                               _R_PF_Avg$8143 06A8  
                             _R_PF_Avg$8135 0690                               _R_PF_Avg$8127 0678  
                             _R_PF_Avg$8144 06AB                               _R_PF_Avg$8136 0693  
                             _R_PF_Avg$8128 067B                               _R_PF_Avg$8145 06AE  
                             _R_PF_Avg$8137 0696                               _R_PF_Avg$8129 067E  
                             _R_PF_Avg$8138 0699                               _R_PF_Avg$8139 069C  
                         _Grid_Over_Current 805E                               __div_to_l_@f1 001D  
                             __div_to_l_@f2 0020                                ??_OSCILLATOR 001D  
                                ??_B_PF_Avg 0027                       _lc_Pitch_Coil_Counter 01E2  
                             _Gf_Motor_Slip 064B                          ?_Grid_Over_Current 0001  
             __size_of_PM_IO_Initialization 007A                                     ?___ftge 008F  
                      ??_Grid_Minimum_Power 0027                                     ?___wmul 0064  
                     ?_Turbine_RPM_Initiate 0001                        _GENERATOR_RPM_THEORY 0215  
                                   _CCP10IE 007DB7                                     _CCP10IF 007DBF  
                                   _CCP1CON 000FBB                                     _CCP2CON 000F4E  
                                   _CCP3CON 000F49                                     _CCP4CON 000F77  
                                   _CCP5CON 000F74                                     _CCP6CON 000F71  
                                   _CCP7CON 000F6E                                     _CCP8CON 000F46  
                                 ?___altoft 008F                                     _CCPR10H 000F42  
                                   _CCPR10L 000F41                                     ?_fround 0079  
                                ??_RTC_Init 001E                         ??_Grid_Over_Current 0027  
                                 ?___awtoft 0009                                   ?___ftpack 001D  
                                 ?___lbtoft 0060                           _Power_Factor$8204 00AA  
                              usart_str@str 001D                                     _ANSEL10 007922  
                                   _ANSEL11 007923                                     _ANSEL16 007918  
                                   _ANSEL17 007919                                     _ANSEL18 00791A  
                                   _ANSEL19 00791B                                     ?_printf 00A7  
                                 ?___lltoft 0060               _Timer1_OF_counter_Wind_2_temp 05DD  
                                ??i2___ftge 0007                                     _T1CKPS0 007E6C  
                                   _T1CKPS1 007E6D                                 ?_Power_Calc 0001  
                                   _BGR_Avg 02E5                                     _BGR_Arr 0400  
                    ?_Turbine_Restore_Check 0001                                   ?___lwtoft 0060  
            __end_of_Generator_One_Feedback A2E0             __size_of_Generator_RPM_Initiate 000E  
                         ??_Turbine_RPM_Cal 00AA                      ?_VFD_Contactor_IO_init 0001  
                         _Grid_Over_current 00D6                                     i2l10691 987C  
                                   i2l18051 9F52                                     i2l18043 9F30  
                                   i2l18131 980C                                     i2l18037 9F1A  
                                   i2l18061 A9D4                                     i2l19005 538C  
                                   i2l18141 9868                                     i2l18133 9816  
                                   i2l18055 9F6C                                     i2l18143 9872  
                                   i2l18135 9834                                     i2l18127 97FE  
                                   i2l18163 9C8C                                     i2l18139 984A  
                                   i2l19043 A672                                     i2l18173 9CE8  
                                   i2l18167 9CBC                                     i2l19305 0246  
                                   i2l19233 0066                                     i2l19245 00C6  
                                   i2l19351 0358                                     i2l19327 02DA  
                                   i2l19319 029E                                     i2l19271 015A  
                                   i2l19255 00DC                                     i2l19239 0096  
                                   i2l19265 011E                                     i2l19363 0396  
                                   i2l19339 0314                                     i2l19291 01EE  
                                   i2l19277 0194                                     i2l19369 03A8  
                                   i2l19379 03EC                             _Timer1_Initiate AA20  
                                ??_R_PF_Avg 0027                                     _B_C_Gap 0516  
                                   _B_C_Arr 045A                                     _B_C_Max 0206  
                  __size_of_i2c_WaitForIdle 0012                                     _RAMP_UP 8924  
                             _Mot_Frequency 05FA                          _VFD_Run_Time_Error A59E  
                          _Wind_Cut_In_Flag 01DB                                     _B_V_Gap 0525  
                                   _B_V_Arr 0463                          __end_of_OSCILLATOR AB0C  
                                   _B_V_Max 0209                                     _B_V_Old 0487  
                                   _B_V_New 020C                               _PW_Error_Flag 02DC  
                                   _SSP1ADD 000FC8                 ?_Ramp_Up_Slip_Error_Trigger 0001  
                                   _SSP1BUF 000FC9                            _lc_Current_T_RPM 0281  
                           ?_Motor_Slip_Cal 0001                               _Gf_Rotor_Slip 064E  
                                   _RGR_Avg 02EB                                     _RGR_Arr 0300  
                               ?_Start_Stop 0001                        _Gi_Timer1_OF_counter 029C  
                           _int_eeprom_read A898                                     _RPM_PWM 02FA  
                             ?_VFD_IO_Error 0001                      __end_of_VFD_RS485_Data A148  
                                ??_Y_PF_Avg 0027                                     _GfG_rpm 0552  
                    __size_of_Pitch_Release 003C                    __end_of_VFD_Freq_Step_up 8732  
                                   _GcMonth 0189                                     _YGR_Avg 02EE  
                                   _YGR_Arr 035A                             __size_of_BCDtoI 00D4  
                                   _GfT_rpm 0564                 ??_Timer0_OneSecond_Function 0027  
                                   _R_C_Gap 049C                                     _R_C_Arr 046C  
                                   _R_C_Max 0115                                     _GiHours 0292  
                                   _GiMonth 0296                      _Timer1_OF_counter_Wind 02B8  
                   _VFD_DC_EXTREM_LOW_Error 01D2                        __size_of_IO_Initiate 0040  
                        __size_of_usart_str 0034                         ?_VFD_Run_Time_Error 0001  
                                ??_Read_Adc 001F                   __end_of_Grid_Over_Current 81A6  
                                   _R_V_Gap 04A5                                     _R_V_Arr 03F3  
                 _Turbine_Start_up_1_Second AAA4                                     _R_V_Max 011E  
                                   _R_V_Old 0121                                     _R_V_New 01EC  
                    ??_Pitch_PS_ON_Function 0027                                     _Y_C_Gap 04C3  
                                   _Y_C_Arr 0475                                     _Y_C_Max 0272  
                                   _i2c_Ack AA9A                                     _Grid_OV 7838  
                                   _Grid_UV 76D0                                   _I2C_Start AAE8  
                               _Temp_Sensor 02AC                                   _I2C_Write AA00  
                                   _Y_V_Gap 04C9                                     _Y_V_Arr 047E  
                                   _Y_V_Max 0278                                     _Y_V_Old 04CC  
                                   _Y_V_New 027B                                     _Errors1 016D  
                                   _Errors2 016E                                     _Errors3 016F  
                                   _Errors4 0170                                     _Errors5 0171  
                   _PM_Timer_Initialization AAAE                                     _Hours_1 02F6  
                                   _Hours_2 02F8                     __size_of_Five_Sec_Delay 002C  
                         __end_of__npowers_ FBC8                              usart_str_1@str 001D  
                                   __Hparam 0000                              usart_str_2@str 001D  
                               _Rcurr_V_Old 0221                                 _Rcurr_V_New 01F2  
                                   _Minutes 01A7                                  _scale$8210 007C  
                                   __Lparam 0000                         _Gc_Generator_One_Fb 018C  
                               _Timer7_Init AA54                          _DC_BUS_Low_Counter 016A  
                           __size_of___ftge 00C8                             ??_One_Sec_Delay 001D  
                                   ___awdiv 9B2C                                     ___ftadd 5FC8  
                                   ___awmod A148                    _VFD_DC_Bus_Current_Error 01CF  
                                   ___ftdiv 7F12                                     ___ftneg A7C0  
                                   ___lldiv 9CEC                             __size_of___wmul 0036  
                                   ___ftmul 7B06                                     ___llmod 9BC8  
                                   ___ftsub A552                                     ___fttol 81A6  
                      __end_of_Ramp_Up_Slip 9740                 __size_of_Turbine_Over_Speed 0054  
                                ??___altoft 0093                                     __pcinit 93CA  
                      ??_VFD_Run_Time_Error 001D                                ??i2___ftpack 0006  
                                ??___awtoft 000C                            _KW_Minimum_Error 01A4  
                                ??___ftpack 0022                                   _BGR_Avg_1 0203  
                                ??___lbtoft 0025                           __end_of_eval_poly 8B10  
                                 _BGR_Arr_1 03C6                             __size_of_fround 02AE  
                                   __ramtop 1000                               ?_Power_Factor 0001  
                                ??___lltoft 0064                                     __ptext0 7252  
                                   __ptext1 A9AA                                     __ptext2 A8C0  
                                   __ptext3 6476                                     __ptext4 1A16  
                                   __ptext5 AA3C                                     __ptext6 5D5A  
                                   __ptext7 4ADE                                     __ptext8 38D4  
                                   __ptext9 AA48                             __size_of_printf 0CE2  
                             ?_VFD_Error_IO 0001                                  ??___lwtoft 0025  
                              __size_of_ISR 0422                                   _T1CONbits 000FCD  
                               ?__div_to_l_ 001D                                     _counter 05E3  
                                   _dpowers FB79                                __size_of_cos 00C0  
                                   _isdigit A98C                                __size_of_sin 0298  
                             ?_Wind_Average 0001                            ___awmod@dividend 001D  
                    ?_PM_ADC_Initialization 0001                              ??_VFD_IO_Error 0001  
                   ??_Rampup_state_function 0027                             ?_VFD_RS485_Data 0001  
                              _GCG_rpm_flag 017B                  ??_Turbine_Ramp_up_1_Second 0023  
                   __size_of_Wind_Speed_Cal 026E                        end_of_initialization 9472  
                          _Five_Second_flag 0175                      I2C_Read@v_ackOption_u8 001D  
                          _UART_Data_String 3198                _RAMP_UP_GENERATOR_CUT_IN_RPM 0496  
      __size_of_Last_3_EEPROM_ERROR_Trigger 00DA                            __CFG_BOREN$NOSLP 000000  
                                 _B_PF_Calc 6B00                                   _GRPM_Time 048A  
                                 _B_PF_Flag 0167                                 _Wind_Time_1 04F3  
                               _Wind_Time_2 04C0                      _Generator_RPM_Initiate AA2E  
                                 _BV_PS_Max 03FC                            ??_Volt_Curr_Read 0027  
                       _Grid_Phase_Sequence A94C                                   i2u1049_40 9F62  
                                ?_I2C_Start 0001                          __end_ofi2___ftpack 989C  
                                ?_I2C_Write 0001                         __size_of_Power_Calc 0246  
                         ??_RTC_GetDateTime 0021                             ___lldiv@divisor 0021  
                  __end_of_Capacitor_Adding 9F74                             ___lldiv@counter 0064  
                     _Motor_Slip_Error_Flag 01A9                        _VFD_Run_Time_Counter 015B  
                    ??_Turbine_RPM_Initiate 001D                               _Pitch_Counter 02A0  
                                 _RCSTAbits 000FAB                                     printf@c 00CE  
                                   printf@f 00A7                                     postdec1 000FE5  
                                   postdec2 000FDD                           _Capacitor_Counter 0135  
                                   postinc0 000FEE                                     postinc2 000FDE  
                             _Delay_counter 016C                               _Pitch_Release A622  
                         _One_Sec_Delay_vab 01AB                              _GRPM_Frequency 04E1  
                         _Two_Sec_Delay_vab 01CD                                   _B_Current 0519  
                      _VFD_DC_Bus_Low_Error 01D1                   _Timer0_OneSecond_Function 8CCC  
                            __tdiv_to_l_@f1 001D                              __tdiv_to_l_@f2 0020  
                       __size_of_Start_Stop 00B6                              _B_PF_Calc$8175 00AA  
                   __end_of_Timer1_Initiate AA2E                        _Power_Meter_Error_IO AACC  
                     __end_of_RPM_Data_Kill 7252                            _VFD_Temp_counter 05DF  
                                 _UART_Data 0000                        _Slip_Error_Counter_1 01B8  
                            ??_Power_Factor 0027                               ??__tdiv_to_l_ 0023  
                                 _RGR_Avg_1 021E                                   _RGR_Arr_1 03D5  
        __size_of_Error_Checking_One_Second 00D0                              ??_VFD_Error_IO 001D  
                         __end_of_usart_str A700                         _DC_BUS_High_Counter 0169  
                     _VFD_RS485_Data_filter 9DFE                           _Ten_Sec_Counter_2 01C1  
                  __end_of_Turbine_Pitching AB10                          _Five_Sec_Delay_vab 0174  
                      ?_Grid_Phase_Sequence 0001                     __end_of_int_eeprom_read A8C0  
                            ??_Wind_Average 0027                              _Phase_Sequence 79A0  
                          __CFG_FOSC$INTIO2 000000            __size_of_Stopping_state_function 00A8  
                   __size_of_DC_Bus_Voltage 00E2                                   _TRISAbits 000F92  
                                 _TRISCbits 000F94                        __size_of_usart2_init 0030  
                                 _TRISEbits 000F96                                   _TRISFbits 000F97  
                                 _TRISGbits 000F98                           __size_of_I2C_Init 0010  
                         __size_of_I2C_Read 0028                 __end_of_Turbine_Under_speed A33C  
                         __size_of_I2C_Stop 0008                                   _TRPM_Time 04ED  
                                 _YGR_Avg_1 026F                                   _YGR_Arr_1 03E4  
                         ??_i2c_WaitForIdle 001D                         _VFD__Run_Time_Error 01D8  
                        _Wind_Pulse_width_2 02FE                                 _Ycurr_V_Old 027E  
                               _Ycurr_V_New 01FB                                   _Case_Call 01FE  
                            __end_of_BCDtoI 8E76                  __size_of_Grid_Over_Current 0148  
                 ??_PM_Timer_Initialization 001D                               _Pitching_FlAG 02A2  
         __size_of_Wind_Speed_Error_Trigger 0174                                  ?_B_PF_Calc 0001  
                 ?_Wind_Speed_Error_Trigger 0001                                 ___ftdiv@exp 00A8  
                                 _GiHours_1 013B                                   _GiHours_2 013D  
                                 _GiHours_3 013F                                   _R_PF_Calc 68D2  
                                 _R_PF_Flag 01B4                                 printf@width 00C7  
                                 _RV_PS_Max 02A6                                   _TXSTAbits 000FAC  
                       _Gc_Motor_Slip_Error 018F                                   _GiMinutes 0294  
                                 _GiSeconds 0298                    _Timer1_OF_counter_Wind_2 02BA  
                          _Timer0_1Sec_Flag 02AE                                  _usart_init A9AA  
                            _Gf_Red_Current 0576                             i2___ftpack@sign 0005  
                           _Error_Flag_Kill 8F46                         __size_of__div_to_l_ 0152  
                       _Wind_Speed_Initiate AA3C                  ??_RS485_Data_communication 001E  
                      __size_of_usart_str_1 000C                        __size_of_usart_str_2 000C  
                     _Generator_One_Counter 0196                                   _Bcurr_Old 0645  
                                 _Bcurr_New 01E6                                 ___ftmul@exp 0073  
                         __size_of_B_PF_Avg 07D6                                 _Turbine_RPM 002D  
                            ?_Pitch_Release 0001                       _Gf_VFD_DC_Bus_Voltage 0651  
              __end_of_EEPROM_Error_Monitor 68D2                                   _Flag_temp 05C3  
                        _Error_Scan_Ramp_up 925C                       ?_Power_Meter_Error_IO 0001  
                   _Gc_Grid_Phase_Unbalance 018D                              _GCDc_high_flag 0179  
                            __end_of___ftge 90DA                                   _R_Current 059D  
       __size_of_Ramp_Up_Slip_Error_Trigger 0136                               _B_V_Avg_Steps 04DE  
                            __end_of___wmul A6CC                                  ?_UART_Data 0001  
                             ?_PM_Error_Led 0001                              _Wind_Cap_Old_2 0163  
                            _Wind_Cap_New_2 015F                                 _BAUDCONbits 000F65  
                                 _Cons_Gene 852C                                   _Y_PF_Calc 6476  
                     ??_Grid_Phase_Sequence 001D                   __size_of_int_eeprom_write 0030  
                                 _Y_PF_Flag 01DE                          _Error_Scan_Running 947C  
                    __end_of_Phase_Sequence 7B06                                   _YV_PS_Max 02CE  
                              _GCT_rpm_flag 017F                              __end_of_fround 5AC2  
                        _TURBINE_RPM_THEORY 04A8                              _B_Power_Factor 051F  
                                 _Freq_Calc 6D2E                                   _i2c_NoAck AA90  
                                 _Freq_Flag 0176                          _Total_Power_Factor 022D  
                                floor@expon 009F                         ?_Error_Scan_Ramp_up 0001  
                            __end_of_printf 1A16                           __size_of_RTC_Init 0020  
                     __end_of_Two_Sec_Delay A846                       _Timer_1_OverFlow_Time 05AC  
                            _VFD_Error_Flag 01D3                        ?_Wind_Speed_Initiate 0001  
                       start_initialization 93CA                            _Wind_Speed_Avg_2 04BA  
                         __size_ofi2___ftge 0090                                  eval_poly@d 0092  
                                eval_poly@n 0094                                  eval_poly@x 008F  
                               __end_of_ISR 042A                                   _Frequency 0109  
                       __end_of__tdiv_to_l_ 7DC0                       __end_of_Volt_Curr_Avg 3E46  
                       ?_Error_Scan_Running 0001                                 __end_of_cos 925C  
                               __end_of_sin 5D5A                           __size_of_R_PF_Avg 07D6  
               __size_of_Grid_Maximum_Power 005C                                   _Y_Current 05BB  
 __end_of_Error_Checking_Interrupt_Overflow AAE0  __size_of_Error_Checking_Interrupt_Overflow 000A  
        ?_Error_Checking_Interrupt_Overflow 0001         ??_Error_Checking_Interrupt_Overflow 0001  
         _Error_Checking_Interrupt_Overflow AAD6                                    ??_BCDtoI 006C  
                  _Turbine_OverLoaded_Error A33C                  __end_of_VFD_PS_ON_Function A0D6  
           _Timer1_OF_counter_Generator_Old 02B2             _Timer1_OF_counter_Generator_New 0151  
               __end_of_Error_Scan_start_up 8924                                  frexp@value 001D  
                             _T_RPM_counter 01BF                           __size_of_Y_PF_Avg 07D6  
                                ?_R_PF_Calc 0001                                   _Minutes_1 01A8  
                           ___llmod@divisor 0069                        ??_Error_Scan_Ramp_up 0023  
                               ??_I2C_Start 001D                             ___llmod@counter 0025  
                               ??_I2C_Write 001D                              _Y_PF_Calc$8146 00AA  
                            _Five_Sec_Delay A7F0                           __size_of_Read_Adc 0030  
                  _Turbine_Under_Speed_Flag 01CB                                   _Temp_Read 73E0  
                                 _Serial_No 014B                       __size_of_Ramp_Up_Slip 00AE  
                                 _Time_Diff 04F0                    __size_of_Last_Five_Error 0020  
                                 _Rcurr_Old 065A                                   _Rcurr_New 01EF  
                      ??_Error_Scan_Running 0027                             _Turbine_RPM_Cal 472A  
                                 _Temp_sign 05A6                                   _Slip_Flag 01B9  
                           _GCvfd_curr_flag 0183                     _Turbine2Wheel_Ratio_Avg 0230  
                           _Turbine_RPM_Old 012A                             _Turbine_RPM_New 0127  
                                  ??___ftge 0095                              _Wind_Frequency 04B1  
                              _GRPM_Cap_Old 0139                                _GRPM_Cap_New 0137  
                                  ??___wmul 0027          __size_of_Turbine_Start_up_1_Second 000A  
                      __end_of_VFD_IO_Error A9DC                                _One_Sec_Flag 01AC  
                            ??_PM_Error_Led 000A                          int_eeprom_read@adr 001D  
                   ??_Turbine_Restore_Check 0027                                 __pdataBANK1 01FE  
                               __pdataBANK5 05FD                            ?_Timer1_Initiate 0001  
                    ?_VFD_RS485_Data_filter 0001                                   _Wind_Time 04BD  
                                  ??_fround 0027                     ??_VFD_Contactor_IO_init 001D  
                                ?_Cons_Gene 0001                __size_of_Pitch_Solenoid_init 0008  
                                ?_Y_PF_Calc 0001                                _GRPM_Counter 028C  
                                  ??_printf 00AC                             ?_Phase_Sequence 0001  
                              ??_Power_Calc 0027                                   _Total_Min 01C7  
                           _Ten_Sec_Counter 01C0                                  ?_Freq_Calc 0001  
                                ?_i2c_NoAck 0001                           __size_of___altoft 009E  
                          ??_Motor_Slip_Cal 0027                                  fround@prec 0082  
                     ??_Wind_Speed_Initiate 001D                            ?_int_eeprom_read 001D  
                         __size_of___awtoft 0038                           __size_of___ftpack 00AE  
                           _Temperature_Avg 065D                           __size_of___lbtoft 0024  
                         __size_of___lltoft 0076                               _R_V_Avg_Steps 04E7  
                               __pbssCOMRAM 0027                            _Wind_Pulse_width 02FC  
                                 _Ycurr_Old 0663                                   _Ycurr_New 01F8  
                    __size_of_VFD_Data_Kill 0030                         _Gc_VFD_DC_Bus_Error 02D7  
                         __size_of___lwtoft 0024                                    ?_RAMP_UP 0001  
                             __pcstackBANK0 0060                               __pcstackBANK6 0666  
              __end_of_PM_IO_Initialization 9EFA                      __size_of_Generator_RPM 0054  
           _VFD_communication_Error_Counter 01D9                      _DC_BUS_Current_Counter 0168  
                            _WRPM_Counter_1 02C8                                ??_Start_Stop 0021  
                            _Wind_Speed_0_2 023C                              _Wind_Speed_1_2 0242  
                            _Wind_Speed_2_2 0248                              _Wind_Speed_3_2 024E  
                            _Wind_Speed_4_2 0254                              _Wind_Speed_5_2 025A  
                            _Wind_Speed_6_2 0260                              _Wind_Speed_7_2 0266  
                            _Wind_Speed_8_2 026C                              _Wind_Speed_9_2 04B7  
          __end_of_Turbine_Ramp_up_1_Second A9EE                                _isdigit$7673 001E  
                            _Wind_Speed_Cal 5D5A                              _Wind_Speed_Avg 00D2  
                            _R_PF_Calc$8117 00AA                     __end_of_Error_Flag_Kill 9012  
                 _Timer1_OF_counter_Turbine 02B6                           ?_VFD_Freq_Step_up 0001  
                              _Ramp_Up_Slip 9692                      __end_of_Five_Sec_Delay A81C  
                      __end_of_Power_Factor 919C                                 ??_B_PF_Calc 0027  
                                sin@coeff_a FBEF                                  sin@coeff_b FBFE  
                           _Gen_EP_Err_Flag 0195                        __end_of_VFD_Error_IO AA90  
                        ??_VFD_Freq_Step_up 0027                                    ?_i2c_Ack 0001  
                          _Gc_Pitch_Coil_Fb 0190                                    ?_Grid_OV 0001  
                                  ?_Grid_UV 0001                             _GCY_phasev_flag 0181  
                               ?_usart_init 0001                           _Start_Stop_Flag_1 02DD  
                      __end_of_Wind_Average 472A                          __end_of_Power_Calc 6476  
                         _Wind_Average$8110 00BF                           _Wind_Average$8103 00AA  
                         _Wind_Average$8104 00AD                           _Wind_Average$8105 00B0  
                         _Wind_Average$8106 00B3                           _Wind_Average$8107 00B6  
                         _Wind_Average$8108 00B9                           _Wind_Average$8109 00BC  
                                ?_Temp_Read 0001                             ??_Pitch_Release 001D  
             _Gc_Grid_Phase_Unbalance_Error 018E                             _Start_Stop_Flag 003D  
                              ?_Timer7_Init 0001                __size_of_Communication_Error 0064  
                            _Y_Power_Factor 0275                      ??_Power_Meter_Error_IO 001D  
                                 __pintcode 0008                               _G_RPM_Counter 0184  
                             __pmediumconst FB78                 __size_of_Grid_Minimum_Power 005C  
                                  ?___awdiv 0023                                   __ptext100 90DA  
                                 __ptext101 6230                                   __ptext110 AA84  
                                 __ptext102 6F04                                   __ptext111 AAC2  
                                 __ptext103 79A0                                   __ptext120 6B00  
                                 __ptext112 AACC                                   __ptext104 A790  
                                 __ptext121 29C2                                   __ptext113 AAF0  
                                 __ptext105 AAAE                                   __ptext130 A696  
                                 __ptext122 919C                                   __ptext114 AAF8  
                                 __ptext106 9E80                                   __ptext131 7B06  
                                 __ptext123 5AC2                                   __ptext115 AA2E  
                                 __ptext107 AAB8                                   __ptext140 51E2  
                                 __ptext132 A552                                   __ptext124 8732  
                                 __ptext116 4E7C                                   __ptext108 AB06  
                                 __ptext141 9C5C                                   __ptext133 5FC8  
                                 __ptext125 9F74                                   __ptext117 A908  
                                 __ptext109 A5E2                                    ?___ftadd 0083  
                                 __ptext142 AAD6                                   __ptext134 A7C0  
                                 __ptext126 81A6                                   __ptext118 6D2E  
                                 __ptext143 A9C4                                   __ptext135 7F12  
                                 __ptext127 9012                                   __ptext119 852C  
                                 __ptext144 9EFA                                   __ptext136 9740  
                                 __ptext128 9A8E                                   __ptext129 8A1C  
                                 __ptext138 A65E                                   __ptext139 97EE  
                                  ?___awmod 001D                                    ?___ftdiv 009B  
                                  ?___ftneg 0079                                    ?___lldiv 001D  
                                  ?___ftmul 006A                                    ?___llmod 0065  
                                  ?___ftsub 00A1                                   __npowers_ FBA1  
                                  ?___fttol 0080                              _DC_Bus_Current 0212  
                              BCDtoI@result 006F                                 ??_UART_Data 0027  
         __end_of_Turbine_Start_up_1_Second AAAE                     __size_of_Grid_Frequency 0084  
                        __end_of_Start_Stop 93CA                    __end_of_UART_Data_String 38D4  
                      I2C_Read@v_i2cData_u8 001E                                 __tdiv_to_l_ 7C64  
                                  _CCP10CON 000F40                     _Stopping_state_function 9948  
                              ??__div_to_l_ 0023                       _Timer1_OF_counter_Old 02B4  
                     _Timer1_OF_counter_New 0153                ?_Last_3_EEPROM_ERROR_Trigger 0001  
                   ??_PM_ADC_Initialization 001D                       _Timer1_interrupt_flag 01C6  
                            _DC_Bus_Voltage 8B10                                    ?_isdigit 0001  
                                  _I2C_Init AA10                                    _I2C_Read A870  
                          ??_VFD_RS485_Data 00AA                         _Gi_TRPM_Pulse_width 05CF  
                                 _eval_poly 8A1C                                    _I2C_Stop AAE0  
                          _Grid_Und_voltage 019F                                   _counter_1 01DF  
        __size_of_Timer0_OneSecond_Function 00D6                      __end_of_Wind_Speed_Cal 5FC8  
                         _Generator_RPM_FLT 00CF                           _Generator_IO_init AAF8  
                         _Generator_RPM_INT 028E                           _Generator_RPM_Cal 4E7C  
                         _Generator_RPM_Old 010F                           _Generator_RPM_New 010C  
              _VFD_communication_Error_Flag 00D9                             _RTC_GetDateTime 989C  
                             _G_RPM_counter 0185                               ??_IO_Initiate 001D  
                           _Grid_UV_Counter 019E                              __size_of_floor 00FA  
                            __size_of_frexp 0078                          ?_Generator_IO_init 0001  
                            __size_of_scale 04B2                          ?_Generator_RPM_Cal 0001  
                   ?_Generator_RPM_Initiate 0001                        _EEPROM_Error_Monitor 66A4  
            __size_of_Rampup_state_function 0006                              __size_of_putch 000C  
             __end_of_Rampup_state_function AB06                   _Grid_Phase_Sequence_Error 019D  
                   __end_of_Turbine_RPM_Cal 4ADE                    ??_startup_state_function 001D  
                           ?_Five_Sec_Delay 0001                              ___wmul@product 0068  
                               ??_R_PF_Calc 0027                              _R_Power_Factor 049F  
                          _Grid_Ovr_voltage 019C                     __size_of_Pitch_Feedback 0062  
                       ??_Generator_IO_init 001D                     __size_of_Rotor_Slip_Cal 00B2  
                       ??_Generator_RPM_Cal 00AA                                    _PIE1bits 000F9D  
                                  _GRPM_Cap 028A                                    _PIE3bits 000FA3  
                                  _B_PF_Avg 29C2               __size_of_Pitch_PS_ON_Function 005A  
                             _VFD_Data_Kill A730                               _Generator_RPM A4FE  
                                  _PIR1bits 000F9E                          __end_of__div_to_l_ 7F12  
                                  _PIR3bits 000FA4                           ?_Capacitor_Adding 0001  
           _Timer1_OF_counter_Wind_temp_Old 02C2             _Timer1_OF_counter_Wind_temp_New 0155  
                                  _KVA_Sign 01A0                  __end_of_Turbine_Over_Speed A4FE  
                                  _VFD_RAMP 01D7                                    _SSP1CON1 000FC6  
                        ??_Capacitor_Adding 0001                             _RS485_Data_Flag 01B3  
                                  _SSP1STAT 000FC7                              _Freq_Calc$8116 00AA  
                     __end_of_One_Sec_Delay A870                                 ??_Cons_Gene 0027  
                                  _RTC_Init A96C                           ??_Last_Five_Error 001D  
                               ??_Y_PF_Calc 0027                                    _GfB_volt 054F  
               __size_of_VFD_Run_Time_Error 0044                            _int_eeprom_write A700  
                                  _RPM_Time 0147                            _wind_Frequency_2 04D8  
                    __end_of_DC_Bus_Voltage 8BF2                                    _TRPM_Cal 01BB  
                         ___wmul@multiplier 0064                                    i2___ftge 9C5C  
                                  _PWM_Temp 0493                            __CFG_SOSCSEL$DIG 000000  
                               ??_Freq_Calc 0027                                 ??_i2c_NoAck 001D  
                         ?_Turbine_Pitching 0001                             _i2c_WaitForIdle A9EE  
                 __end_of_Generator_IO_init AB00                                  printf@flag 00BB  
                                  _GfR_volt 0561                   __end_of_Generator_RPM_Cal 51E2  
                                printf@fval 00C9            __end_of_Wind_Speed_Error_Trigger 76D0  
                                printf@prec 00CC                                    _R_PF_Avg 21EC  
                                ?_eval_poly 008F                                    _GfY_volt 056A  
                       __size_of_usart_init 001A                                   _usart_str A6CC  
                        ??_Turbine_Pitching 001D               ??_Last_3_EEPROM_ERROR_Trigger 0021  
                           ?_Wind_Speed_Cal 0001                           _Wind_Cut_Out_Flag 01DD  
                          __size_of_RAMP_UP 00F8              __end_of_Generator_RPM_Initiate AA3C  
                                  _Lead_Lag 02DA                       ?_EEPROM_Error_Monitor 0001  
                             _VFD_Frequency 01D4                                    _Y_PF_Avg 1A16  
                          ?_Error_Flag_Kill 0001                                    _Key_Flag 01A6  
                      __end_of_PM_Error_Led 5536                               _Y_C_Avg_Steps 04F6  
                                  _Read_Adc A790                            _Pitch_Ps_Counter 03FE  
                           _Grid_Ov_Counter 019B                         __end_of_IO_Initiate A622  
                              _Timer0_Falg1 01C3                                _Timer0_Falg2 01C4  
                                 frexp@eptr 0020                                  _EECON1bits 000F7F  
                              _GCphase_flag 0182                              ?_VFD_Data_Kill 0001  
                             _GCDc_low_flag 017A                            __size_of_i2c_Ack 000A  
                     __size_of_VFD_IO_Error 0018                            __size_of_Grid_OV 0168  
                          __size_of_Grid_UV 0168                              ?_Generator_RPM 0001  
                                  __Hrparam 0000                                 ??_Temp_Read 0027  
                               _GCWind_flag 0180                               _Y_PF_Avg$8150 0666  
                             _Y_PF_Avg$8151 0669                               _Y_PF_Avg$8160 0684  
                             _Y_PF_Avg$8152 066C                               _Y_PF_Avg$8161 0687  
                             _Y_PF_Avg$8153 066F                               _Y_PF_Avg$8170 06A2  
                             _Y_PF_Avg$8162 068A                               _Y_PF_Avg$8154 0672  
                             _Y_PF_Avg$8147 06B1                               _Y_PF_Avg$8171 06A5  
                             _Y_PF_Avg$8163 068D                               _Y_PF_Avg$8155 0675  
                             _Y_PF_Avg$8148 06B4                               _Y_PF_Avg$8172 06A8  
                             _Y_PF_Avg$8164 0690                               _Y_PF_Avg$8156 0678  
                             _Y_PF_Avg$8149 06B7                               _Y_PF_Avg$8173 06AB  
                             _Y_PF_Avg$8165 0693                               _Y_PF_Avg$8157 067B  
                             _Y_PF_Avg$8174 06AE                               _Y_PF_Avg$8166 0696  
                             _Y_PF_Avg$8158 067E                               _Y_PF_Avg$8167 0699  
                             _Y_PF_Avg$8159 0681                               _Y_PF_Avg$8168 069C  
                             _Y_PF_Avg$8169 069F                                    _Temp_Arr 03B4  
                                  _Slave_Id 05D3                                    _Time_Old 022A  
                                  _Time_New 01F5                                    __Lrparam 0000  
                      _Gf_Red_Phase_Voltage 0579                        _PM_IO_Initialization 9E80  
                                  _Wind_Cap 02CA                    ??_Generator_One_Feedback 0021  
         __size_of_Turbine_Ramp_up_1_Second 0012                             _Gf_Blue_Current 0648  
             __size_of_Turbine_RPM_Initiate 000C                   ?_Turbine_Ramp_up_1_Second 0001  
                                  _Total_Pf 05AF                            __size_of___awdiv 009C  
                          __size_of___ftadd 0268                            __size_of___awmod 0070  
                 ??_Stopping_state_function 0027                            __size_of___ftdiv 014C  
                          __size_of___ftneg 0030                            __size_of___lldiv 008E  
                               _GRPM_Time_1 02E8                                    ___altoft 9A8E  
                          __size_of___ftmul 015E                                    _Turb_RPM 04AB  
                          __size_of___llmod 0094                            __size_of___ftsub 004C  
                          __size_of___fttol 0144                                    _cos$8212 00BA  
                           _G_RPM_counter_1 05C5                                    ___awtoft A65E  
                                  ___ftpack 9740                                    ___lbtoft A8E4  
                               _fround$8208 007F                                 _fround$8209 007C  
                             _Wind_Speed_10 05B5                                    ___lltoft 9FEC  
                           ?_DC_Bus_Voltage 0001                              _Feedback_Error 0172  
                   __end_of_RTC_GetDateTime 9948                               ??_usart2_init 001D  
                                  ___lwtoft A908                  ??_Turbine_OverLoaded_Error 0027  
                      _Generator_Over_Speed 0198                                _Motor_slip_1 059A  
                     _Gf_Blue_Phase_Voltage 056D                                  ?_usart_str 001D  
                                  _lc_T_RPM 04D2                            __size_of_isdigit 001E  
                     _Timer0_RAMPUP_Counter 01C5                           _EEPROM_Error_Flag 0036  
                                  __ptext10 472A                                    __ptext11 AA54  
                                  __ptext20 A6CC                                    __ptext12 AA20  
                                  __ptext21 0D34                                    __ptext13 8CCC  
                                  __ptext30 9FEC                                    __ptext22 3E46  
                                  __ptext14 42F8                                    __ptext31 9BC8  
                                  __ptext23 AA6C                                    __ptext15 9DFE  
                                  __ptext40 A9DC                                    __ptext32 9CEC  
                                  __ptext24 A98C                                    __ptext16 A0D6  
                                  __ptext41 A81C                                    __ptext33 989C  
                                  __ptext25 5814                                    __ptext17 0000  
                                  __ptext50 8BF2                                    __ptext42 A846  
                                  __ptext34 A870                                    __ptext26 A148  
                                  __ptext18 3198                                    __ptext51 8E76  
                                  __ptext43 A7F0                                    __ptext35 AA90  
                                  __ptext27 9B2C                                    __ptext19 AA60  
                                  __ptext60 95E0                                    __ptext52 755C  
                                  __ptext44 925C                                    __ptext36 AA9A  
                                  __ptext28 7C64                                    __ptext61 82EA  
                                  __ptext53 A59E                                    __ptext45 A92C  
                                  __ptext37 8DA2                                    __ptext29 7DC0  
                                  __ptext70 7838                                    __ptext62 9692  
                                  __ptext54 A062                                    __ptext46 947C  
                                  __ptext38 AAA4                                    __ptext71 A398  
                                  __ptext63 A450                                    __ptext55 A2E0  
                                  __ptext47 9948                                    __ptext39 882C  
                                  __ptext80 A898                                    __ptext72 A3F4  
                                  __ptext64 A21C                                    __ptext56 952E  
                                  __ptext48 8F46                                    __ptext81 73E0  
                                  __ptext73 9D7A                                    __ptext65 8420  
                                  __ptext57 A4AA                                    __ptext49 5536  
                                  __ptext90 A96C                                    __ptext82 AB00  
                                  __ptext74 A4FE                                    __ptext66 A8E4  
                                  __ptext58 A33C                       __size_of_Power_Factor 00C2  
                                  __ptext91 AA00                                    __ptext83 8924  
                                  __ptext75 A27E                                    __ptext67 76D0  
                                  __ptext59 9314                                    __ptext92 A9EE  
                                  __ptext84 8638                                    __ptext76 8B10  
                                  __ptext68 A94C                                    __ptext93 AAE0  
                                  __ptext85 A730                                    __ptext77 A1B8  
                                  __ptext69 805E                                    __ptext94 AAE8  
                                  __ptext86 AB0C                                    __ptext78 66A4  
                                  __ptext95 AA10                                    __ptext87 A622  
                                  __ptext79 A700                                    __ptext96 99F0  
                                  __ptext88 68D2                                    __ptext97 AA78  
                                  __ptext89 21EC                                    __ptext98 A760  
                                  __ptext99 70C2                                    _sin$8213 00B0  
                              _SSP1CON2bits 000FC5                                    __powers_ FBC8  
                         _EEPROM_Error_Stop 5536                           _Two_Delay_counter 01CC  
                     __size_of_VFD_Error_IO 000C                                _VFD_IO_Error A9C4  
                     __size_of_Wind_Average 0432                          ?_EEPROM_Error_Stop 0001  
                       _Pitch_Solenoid_init AAF0                            _Generator_RPM_10 0531  
                    __size_of_RPM_Data_Kill 0190                               ??_usart_str_1 001D  
                             ??_usart_str_2 001D                          _Five_Delay_counter 0173  
                          ?_Turbine_RPM_Cal 0001                               __size_of_main 018E  
                    _Gf_Turbine2Wheel_Ratio 048D             __size_of_startup_state_function 0024  
                             __size_of_sqrt 01BE                __size_of_Turbine_Under_speed 005C  
                               _B_Gap_Ratio 0106                 _lc_Motor_Slip_Error_Counter 01E1  
                       ??_EEPROM_Error_Stop 0021                       ?_PM_IO_Initialization 0001  
                   ??_VFD_RS485_Data_filter 0027                 __end_of_Grid_Phase_Sequence A96C  
                        _Slip_Error_Counter 01B7                            ??_Phase_Sequence 0022  
                     _VFD_DC_Bus_High_Error 01D0                          _VFD_PS_ON_Function A062  
                                  int$flags 0043                     __end_of_i2c_WaitForIdle AA00  
                      __size_of_Timer7_Init 000C                              _Grid_Frequency 9D7A  
                                 printf@len 00B9                     __size_of_Volt_Curr_Read 039E  
                                 printf@exp 00C5                                   printf@val 00C1  
                              _SSP1STATbits 000FC7                        ?_Pitch_Solenoid_init 0001  
            __size_of_Turbine_Restore_Check 00B2               __end_of_Turbine_Restore_Check 95E0  
                            _Start_up_Error 01FF                                _Power_Factor 90DA  
                              _Wind_Cap_Old 0161                                _Wind_Cap_New 015D  
            __size_of_VFD_Contactor_IO_init 000A                           _Gf_Grid_Frequency 0570  
                       ?_VFD_PS_ON_Function 0001               __end_of_VFD_Contactor_IO_init AACC  
                              _VFD_Error_IO AA84                                _VFD_Error_No 003E  
                __size_of_Generator_IO_init 0008                                   putch@data 001D  
                __size_of_Generator_RPM_Cal 0366           __size_of_RS485_Data_communication 009E  
                                _INTCONbits 000FF2                   ?_RS485_Data_communication 0001  
                               ??_eval_poly 0096                  __end_of_Grid_Maximum_Power A450  
                              _Wind_Average 42F8                  ?_Error_Checking_One_Second 0001  
                 __end_of_EEPROM_Error_Stop 5814                         _Communication_Error A1B8  
                    ??_EEPROM_Error_Monitor 0021                                    isdigit@c 001F  
                               _B_Current_1 051C                    ?_PM_Timer_Initialization 0001  
                                  scale@scl 007F                          RTC_GetDateTime@rtc 001F  
                       __end_of_usart2_init A790                ??_Ramp_Up_Slip_Error_Trigger 0027  
                               _IO_Initiate A5E2                    _Wind_Speed_Error_Trigger 755C  
                              _Wind_Speed_0 0239                                _Wind_Speed_1 023F  
                              _Wind_Speed_2 0245                                _Wind_Speed_3 024B  
                              _Wind_Speed_4 0251                                _Wind_Speed_5 0257  
                              _Wind_Speed_6 025D                                _Wind_Speed_7 0263  
                              _Wind_Speed_8 0269                                _Wind_Speed_9 04B4  
           __end_of_Stopping_state_function 99F0                                    intlevel2 0000  
                          __tdiv_to_l_@exp1 0065                            __tdiv_to_l_@cntr 0064  
                          __tdiv_to_l_@quot 0060                             ??_VFD_Data_Kill 001D  
                            _Pitch_Feedback A21C                            ___lldiv@dividend 001D  
                      ??_VFD_PS_ON_Function 001D                             ??_Generator_RPM 0027  
                            _Rotor_Slip_Cal 95E0                                  _EP_Errors1 0037  
                                _EP_Errors2 0038                                  _EP_Errors3 0039  
                              ??_usart_init 001D                 __size_of_Error_Scan_Ramp_up 00B8  
                           _Generator_RPM_0 052B                             _Generator_RPM_1 052E  
                           _Generator_RPM_2 0534                             _Generator_RPM_3 0537  
                           _Generator_RPM_4 053A                             _Generator_RPM_5 053D  
                           _Generator_RPM_6 0540                             _Generator_RPM_7 0543  
                           _Generator_RPM_8 0546                             _Generator_RPM_9 0549  
                                _RCSTA2bits 000F22                                 _VFD_ON_Flag 01D5  
                                _OSCILLATOR AB06                      _Pitch_FB_Error_counter 01B1  
                    __size_of_Two_Sec_Delay 002A                        ?_Communication_Error 0001  
              __size_of_Error_Scan_start_up 00F8                                 _PF_Lead_Lag 02DB  
               __size_of_Error_Scan_Running 00B2                         __end_of_usart_str_1 AA6C  
                       __end_of_usart_str_2 AA84                      __end_of_Grid_Frequency 9DFE  
                   _Turbine_Over_Speed_Flag 01C9                      __size_of_Volt_Curr_Avg 0572  
                                  printf@ap 00B7                                    printf@cp 00B5  
                      _Tur_OverLoaded_Error 01C8             __size_of_Generator_One_Feedback 0062  
                               _VFD_Counter 05FD                   __size_of_VFD_Freq_Step_up 00FA  
               __end_of_Wind_Speed_Initiate AA48                       ??_Pitch_Solenoid_init 001D  
                         _Phase_Sequence_Ok 003C                               _RPM_Data_Kill 70C2  
                              ?__tdiv_to_l_ 001D                           _Gf_Yellow_Current 0654  
                         ?_UART_Data_String 0001                      _startup_state_function A8C0  
                           _Gi_TRPM_Cap_Old 05CD                             _Gi_TRPM_Cap_New 05CB  
                               _printf$8211 00B2                            ?_RTC_GetDateTime 001F  
                        _T_Overload_counter 01BE                          ??_UART_Data_String 0027  
                          ___lldiv@quotient 0060           _Timer1_OF_counter_Wind_2_temp_Old 02BE  
         _Timer1_OF_counter_Wind_2_temp_New 02BC                                 ??_usart_str 001F  
            __size_of_PM_ADC_Initialization 000A                    __size_of_Timer1_Initiate 000E  
             __end_of_PM_ADC_Initialization AAC2                       __size_of_PM_Error_Led 0354  
                        __end_of_usart_init A9C4           __end_of_Error_Checking_One_Second 8F46  
                          ??_Five_Sec_Delay 001D                                  _VFD_On_Off 01D6  
                         _Communication_OTP 0035                      __end_of_Pitch_Feedback A27E  
                  __size_of_int_eeprom_read 0028                      __end_of_Rotor_Slip_Cal 9692  
                         _Desired_Frequency 00D5                               _wind_Time_1_2 04FC  
                  __end_of_int_eeprom_write A730                     _Frequency_Error_counter 0177  
                       _Pitch_FB_Error_Flag 00D7                               _GCM_slip_flag 017C  
                               _GfB_current 054C                           _lc_Previous_T_RPM 04CF  
                           _Last_Five_Error A92C                      ??_PM_IO_Initialization 001D  
                     ??_Communication_Error 001D                                _Rotor_slip_1 05A3  
                __end_of_Grid_Minimum_Power A3F4  
